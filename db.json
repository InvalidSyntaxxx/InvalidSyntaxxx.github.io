{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/static/avatar/logo.png","path":"static/avatar/logo.png","modified":0,"renderable":0},{"_id":"source/static/images/helloworld.webp","path":"static/images/helloworld.webp","modified":0,"renderable":0},{"_id":"source/static/images/image.png","path":"static/images/image.png","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-stellar/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/plugins/copycode.js","path":"js/plugins/copycode.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/services/fcircle.js","path":"js/services/fcircle.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/services/friends.js","path":"js/services/friends.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/services/ghinfo.js","path":"js/services/ghinfo.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/services/mdrender.js","path":"js/services/mdrender.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/services/memos.js","path":"js/services/memos.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/services/siteinfo.js","path":"js/services/siteinfo.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/services/sites.js","path":"js/services/sites.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/services/timeline.js","path":"js/services/timeline.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-stellar/source/js/services/weibo.js","path":"js/services/weibo.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/1002.md","hash":"5cf4a9570d36a2a11a7324841a89eada3f5a422a","modified":1710210258684},{"_id":"source/_posts/299.md","hash":"da01ef544138fe8125d3c8c2ea24fabe3e2f7da4","modified":1710240139748},{"_id":"source/_posts/421.md","hash":"feaa15a2ed80ac6889bba648cee9a0cb494fcd50","modified":1710210258684},{"_id":"source/_posts/813.md","hash":"9fa0472097222c2dd24a3ee03567348892dd34d8","modified":1710210258684},{"_id":"source/_posts/apache2-4设置wordpress伪静态链接.md","hash":"e5ada8c471767a2222f37aed33aedf86db6453f0","modified":1710240230456},{"_id":"source/_posts/argon主题文档.md","hash":"efcfb5a8e324153f56186ae42eefce98613cc924","modified":1710210258684},{"_id":"source/_posts/github三种方法加速访问.md","hash":"df78ae2571b92e9aae7efb4ef9a026889da7fa33","modified":1710240237980},{"_id":"source/_posts/hello-world.md","hash":"a6ba91d82a05eae6d6b6167a9f825f0edc5d66a8","modified":1710210258684},{"_id":"source/_posts/ipfs简介.md","hash":"b9806fcb61f80352adb8b65d22367741fe514baf","modified":1710210258684},{"_id":"source/_posts/less初学.md","hash":"0b5793237b689044547e73867e62ced8c2eb581a","modified":1710210258684},{"_id":"source/_posts/linux学习.md","hash":"adb498ac8eca8dd9efe74cd2ebbb38a96aea8938","modified":1710240248368},{"_id":"source/_posts/litechat聊天室.md","hash":"ae84386a5b808e6bbeefbb0ee8be8da46b83b9b7","modified":1710240252772},{"_id":"source/_posts/mysql性能优化.md","hash":"9774515a5289fd6e09b230f6d63ecd4e7b8cd601","modified":1710210258684},{"_id":"source/_posts/nginx原理剖析（一）.md","hash":"35def956a2207ee4a6ba089ad86c513a199262ee","modified":1710210258684},{"_id":"source/_posts/python3爬bing所有壁纸.md","hash":"eeca3a431920d1202e82e0397097ac2d292ffd4d","modified":1710210258684},{"_id":"source/_posts/python学习笔记二.md","hash":"cd52644596bd662271b750e7a9a443320dfd21b7","modified":1710240264820},{"_id":"source/_posts/python脚本自动更新pip源.md","hash":"266dddc285d0495966890d810c9c49a19b3b82d2","modified":1710240261088},{"_id":"source/_posts/typescriptvue3-0笔记.md","hash":"58213121b35207104b76d73b702f8f4fc5a2a492","modified":1710240267120},{"_id":"source/_posts/vue制作chatgpt聊天机器人.md","hash":"ab13802d982053a4ab37b309898bf0fe7a75ba1d","modified":1710240269876},{"_id":"source/_posts/wordpress完整建站过程.md","hash":"00976c199aa1d570e3c6cf61cbbdac43f45dc1b0","modified":1710210258688},{"_id":"source/_posts/wordpress完整建站过程二.md","hash":"6700bab0203467417fc4d7ee858e63a60b3d0a05","modified":1710240274176},{"_id":"source/_posts/wordpress注意问题.md","hash":"7a33e2844023eea3a4b419e11f33536b9c8a6aa0","modified":1710210258688},{"_id":"source/_posts/优雅地使用WSL2.md","hash":"2c4e859bcf490369c52a5430370ce9b25005a3be","modified":1710240197428},{"_id":"source/_posts/安利几款win10小软件.md","hash":"af212586bf9e02c35fc891a5f1c513a4c7ce8dc6","modified":1710240151000},{"_id":"source/_posts/常见http状态码及简介.md","hash":"c2bba15ba876c512797613a62f047d30da330d41","modified":1710210258688},{"_id":"source/_posts/建站成功了记录一下.md","hash":"6fdb750aa9b8b00fabff2cde7b1ca7f833b9a69d","modified":1710240165144},{"_id":"source/_posts/摄影展-小网页开发.md","hash":"f50e12ce15af90a3b0be2365428c4950f275ee94","modified":1710240176644},{"_id":"source/_posts/操作系统-进程学习.md","hash":"1ba35ab01fe6d0611ff251c9014131f85e740af9","modified":1710240147432},{"_id":"source/_posts/数据库设计三大范式.md","hash":"ce79b1b4e93a01150bc39658c908fe44e084e44c","modified":1710240187800},{"_id":"source/_posts/树莓派4b使用摄像头.md","hash":"2af09801e23e9d50b0068c7d44017e6305c8dbc9","modified":1710240185136},{"_id":"source/_posts/树莓派4b点亮ledpython实现.md","hash":"0ba7b98457842b1d093f1d18dbc0a8e58447566a","modified":1710240179140},{"_id":"source/_posts/树莓派4b驱动lcd1602-检测网站访问情况.md","hash":"86610b8fb8da2709650ce2771873a8019061de11","modified":1710240181176},{"_id":"source/_posts/测试markdown.md","hash":"47d8e667507170eeb1cbcba1674911ea026ce608","modified":1710210258688},{"_id":"source/_posts/给网站增加输入效果.md","hash":"51ae1119dceed1355c525c7a38a874da9c12fc4c","modified":1710240158812},{"_id":"source/_posts/网站性能测试.md","hash":"674d33bb6228622addb0cb10a8ebb733269df1b6","modified":1710210258688},{"_id":"source/_posts/解决argon主题预览时只能点击标题进入文章.md","hash":"0867f381eface51b89c70cd79751179a1dfb341f","modified":1710240173944},{"_id":"source/_posts/解决博客头像无法显示问题.md","hash":"1d202da894fc51d63aa6f07ea1e5a55e2a5c4008","modified":1710240169484},{"_id":"source/_posts/计算机网络大作业.md","hash":"a8fea8326da1837461fb9b6fa38d3cf88b50f456","modified":1710239995589},{"_id":"source/_posts/遗传算法.md","hash":"e6734cde6cbcf3c5037cb1ca94704c8f91730224","modified":1710240192664},{"_id":"source/static/images/helloworld.webp","hash":"308bbc9d1ef6472af5c4bc8ba1b3b7b782669f8d","modified":1710210258688},{"_id":"source/static/images/image.png","hash":"d6a30cd962946347b5791061026e5450f3970adf","modified":1710210258688},{"_id":"source/static/avatar/logo.png","hash":"2edf867b238dc55f3b673c760ca908bbcc621c18","modified":1710210258688},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/widgets/search.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1710210576251},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/widgets/tree.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1710210577159},{"_id":"node_modules/hexo-theme-stellar/README.md","hash":"d474d9b14cafda27ab291336cbdb4ac91bfec756","modified":1710210573459},{"_id":"node_modules/hexo-theme-stellar/LICENSE","hash":"7fdfdb5dbc7d672fa28a2a3c9efa03ff8df5917d","modified":1710210573323},{"_id":"node_modules/hexo-theme-stellar/package.json","hash":"43fd15602df2f792fc0703af4905d9d4a5a7ddf7","modified":1710210574079},{"_id":"node_modules/hexo-theme-stellar/_config.yml","hash":"98bf36b1787360ed237bba38e80e26f95fd8fac1","modified":1710210573779},{"_id":"node_modules/hexo-theme-stellar/_data/icons.yml","hash":"050279e4bca158f7647ea9f80e67be6f18dc01e3","modified":1710210574339},{"_id":"node_modules/hexo-theme-stellar/_data/widgets.yml","hash":"574136777d8e9c06ed9642afce9f68c21b46d20b","modified":1710210574479},{"_id":"node_modules/hexo-theme-stellar/languages/en.yml","hash":"7dbc38c1a2e1ea94fec66690dafbec000793483a","modified":1710210574667},{"_id":"node_modules/hexo-theme-stellar/languages/zh-CN.yml","hash":"80b0aa71e7ccd4f657b736f873b43eaad6d839a8","modified":1710210574811},{"_id":"node_modules/hexo-theme-stellar/languages/zh-TW.yml","hash":"965b8c3b82fd78b8bdfe19a2b92c4adabd285c38","modified":1710210574887},{"_id":"node_modules/hexo-theme-stellar/layout/archive.ejs","hash":"af072e9b75e8d5371771237e71a1f1381078526a","modified":1710210575079},{"_id":"node_modules/hexo-theme-stellar/layout/404.ejs","hash":"d84f01256feb3c0bc0b280031fb78ae9f0d86f26","modified":1710210575047},{"_id":"node_modules/hexo-theme-stellar/layout/categories.ejs","hash":"eaf71831abd6780690f26fa1a7cf83bc6f08d7e9","modified":1710210575107},{"_id":"node_modules/hexo-theme-stellar/layout/index.ejs","hash":"ea5fa65b2049bc1c4c8c247972a79310468e3c68","modified":1710210575131},{"_id":"node_modules/hexo-theme-stellar/layout/index_topic.ejs","hash":"6bffb1488ce9c2c4b04386cb7fe61792ae5491f2","modified":1710210575155},{"_id":"node_modules/hexo-theme-stellar/layout/index_wiki.ejs","hash":"9e7dc6941c5205ed60fa7abfb1f36ae19e2f3834","modified":1710210575183},{"_id":"node_modules/hexo-theme-stellar/layout/layout.ejs","hash":"c127d1345d24f75afeb1360e5c7e873f56aa8352","modified":1710210575199},{"_id":"node_modules/hexo-theme-stellar/layout/page.ejs","hash":"995522b7ed87fc89b8d70f650703363601e36174","modified":1710210575215},{"_id":"node_modules/hexo-theme-stellar/layout/tags.ejs","hash":"4ff8ccff9a9c8d373df788fbc0bebdc87302056e","modified":1710210575239},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/head.ejs","hash":"c00146c722429bde54734fe036280a4c89aab3bd","modified":1710210575271},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/menubtn.ejs","hash":"36775d16431301a6ac02858f32a8ee470ef8332f","modified":1710210575287},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/scripts.ejs","hash":"fed6172e9f4c1ac489e18b3c4867344c1e6cfe88","modified":1710210575303},{"_id":"node_modules/hexo-theme-stellar/layout/_plugins/copycode.ejs","hash":"7cedd8eced00f6813f7d772334ec92acbc8bd982","modified":1710210575351},{"_id":"node_modules/hexo-theme-stellar/layout/_plugins/fancybox.ejs","hash":"f0ce18c61b1cf475a505611384508574179ede85","modified":1710210575367},{"_id":"node_modules/hexo-theme-stellar/layout/_plugins/index.ejs","hash":"29407e95f14d4d50c1f8a8b9a5af242927676432","modified":1710210575399},{"_id":"node_modules/hexo-theme-stellar/layout/_plugins/heti.ejs","hash":"c3956c8fd5fabd4ec8cea05dc076bf7a03eb012a","modified":1710210575379},{"_id":"node_modules/hexo-theme-stellar/layout/_plugins/lazyload.ejs","hash":"e2b07b0c97d531c82cc02a80610fe0c1a39bc837","modified":1710210575423},{"_id":"node_modules/hexo-theme-stellar/layout/_plugins/mathjax.ejs","hash":"c1621e718747a6eb34734e7e4a8364f5a78dc714","modified":1710210575455},{"_id":"node_modules/hexo-theme-stellar/layout/_plugins/mermaid.ejs","hash":"8ef22ac075890554521f464f6b92dc1fb7538b37","modified":1710210575471},{"_id":"node_modules/hexo-theme-stellar/layout/_plugins/preload.ejs","hash":"f25523da5633b249da8cebe7c866265bf7825697","modified":1710210575487},{"_id":"node_modules/hexo-theme-stellar/layout/_plugins/swiper.ejs","hash":"9bd74a71b0b64888b019eb4b53ee0f1acc1aba26","modified":1710210575511},{"_id":"node_modules/hexo-theme-stellar/layout/_plugins/scrollreveal.ejs","hash":"1f3b98068a4db7ec709b47e134520af16f59fa71","modified":1710210575495},{"_id":"node_modules/hexo-theme-stellar/layout/_plugins/tianli_gpt.ejs","hash":"afd0444c3f7dfacd1e79d159f3ad0d6486810be4","modified":1710210575535},{"_id":"node_modules/hexo-theme-stellar/scripts/events/index.js","hash":"38e64f33a00ee328d22774890dc963c1196bd7f1","modified":1710210575567},{"_id":"node_modules/hexo-theme-stellar/scripts/filters/index.js","hash":"5667f028990dd556133080090a5fcb00c64f05ac","modified":1710210575623},{"_id":"node_modules/hexo-theme-stellar/scripts/generators/404.js","hash":"66b53d2b35b18d5f3835b47467c23f31eb322553","modified":1710210575659},{"_id":"node_modules/hexo-theme-stellar/scripts/generators/author.js","hash":"257ea170dd42f75e23a6530691416e528988a178","modified":1710210575663},{"_id":"node_modules/hexo-theme-stellar/scripts/generators/categories.js","hash":"936d4d406fd401359bab1e5f74c6e1e097e8f092","modified":1710210575687},{"_id":"node_modules/hexo-theme-stellar/scripts/generators/search.js","hash":"404f28ea5d77cee462a551d8f74c9f7c41f73ba0","modified":1710210575699},{"_id":"node_modules/hexo-theme-stellar/scripts/generators/tags.js","hash":"ed29755154d8e7a9346019ba4ac8782a8649b177","modified":1710210575711},{"_id":"node_modules/hexo-theme-stellar/scripts/generators/topic.js","hash":"88c0f2990365fb0ce751682815e07f36cf333d3f","modified":1710210575719},{"_id":"node_modules/hexo-theme-stellar/scripts/generators/wiki.js","hash":"61efe22787c3fea9d935df4b088a9dd2d1af0868","modified":1710210575735},{"_id":"node_modules/hexo-theme-stellar/scripts/helpers/category_color.js","hash":"20b19d6b6307cdeb0b0832bf4931366abe972490","modified":1710210575775},{"_id":"node_modules/hexo-theme-stellar/scripts/helpers/icon.js","hash":"b7c84be7f08abc1725f351ed8718791a861466c3","modified":1710210575787},{"_id":"node_modules/hexo-theme-stellar/scripts/helpers/parse_config.js","hash":"1251d82318972f22283dc7a089b77a3f0135b1b6","modified":1710210575795},{"_id":"node_modules/hexo-theme-stellar/scripts/helpers/related_posts.js","hash":"6763a97fa25669fa1d1aa8e5291919deb5dc7f67","modified":1710210575803},{"_id":"node_modules/hexo-theme-stellar/scripts/helpers/scrollreveal.js","hash":"57e3da4a3dd751b3ebd384a674e26f08f69da018","modified":1710210575815},{"_id":"node_modules/hexo-theme-stellar/scripts/helpers/stellar_info.js","hash":"5b7a10c8b09237a467767f5467749c7d9378c2c1","modified":1710210575855},{"_id":"node_modules/hexo-theme-stellar/scripts/helpers/utils.js","hash":"05c127baa250b192c9c673355bf90d7134e1ea11","modified":1710210575903},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/index.js","hash":"9276f2e8f476699b682b3a4de6e1c6bddc971f99","modified":1710210575955},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/inline-labels.js","hash":"a9cb7520af8a95f467c048128c036cbb3167fb8d","modified":1710210575963},{"_id":"node_modules/hexo-theme-stellar/source/css/_custom.styl","hash":"58e0e4d48aa890a48604873e76cb8a44a04b6d3d","modified":1710210576003},{"_id":"node_modules/hexo-theme-stellar/source/css/main.styl","hash":"28f7f6f69ed6aa3083784c0f4c1b17955dc5924e","modified":1710210576011},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/comments/layout.ejs","hash":"a4596aab2bf05af6979179033e5dedab9deaecf3","modified":1710210576071},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/comments/script.ejs","hash":"62be59ef634ceee342c81ecc4e23cb664cdbf620","modified":1710210576079},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/cover/index.ejs","hash":"4b317700640749b1e04e6d51a542a2bcd28c8b72","modified":1710210576091},{"_id":"node_modules/hexo-theme-stellar/source/js/main.js","hash":"cab3bac0eef3dd0fa78f3fd93996ac0084d7e421","modified":1710210576055},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/cover/post_cover.ejs","hash":"59e6ae6726ded33e3d84208fd4a4872a6431fcc7","modified":1710210576099},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/cover/wiki_cover.ejs","hash":"8374cf58d5cc52799b8e1c8af95dd84c65372173","modified":1710210576103},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/footer.ejs","hash":"50f38f094dbbba887632fb3104c78b8be9eb39c7","modified":1710210576119},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/scripts/defines.ejs","hash":"93393f0fbd25f09363ada3adefd97ccb9ebd5893","modified":1710210576127},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/scripts/services.ejs","hash":"ebe96e8b8edef9f48c80cff0e97b588dc8a1c859","modified":1710210576131},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/scripts/sidebar.ejs","hash":"403b6986bfc54177a7ee3ddba9e0a55e7b79e3a1","modified":1710210576135},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/scripts/utils.ejs","hash":"a2a0d37c33b05c9020dbebe457e53283bff72a95","modified":1710210576155},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/index_leftbar.ejs","hash":"5a0b325540f2f8804c1843f3a4881cc4682c08f6","modified":1710210576175},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/index_rightbar.ejs","hash":"2e32bd7776f8caffbfc11ccd3393611480690fbf","modified":1710210576183},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/logo.ejs","hash":"cd08385b0026953cd9adf5c22af528b9c3e924e7","modified":1710210576187},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/menu.ejs","hash":"59d579a0eaec7572485d8d4d22341de79a890d00","modified":1710210576191},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/sidebar/search.ejs","hash":"058c19e09f2c702480ad543b194ae3fa187dc9da","modified":1710210576195},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/widgets/author.ejs","hash":"4c7eab461e45a7a5863333e9904dadbed6c8ca0c","modified":1710210576203},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/widgets/ghissues.ejs","hash":"410f56e6da87e7a1476d033c6939a0241658a598","modified":1710210576211},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/widgets/ghrepo.ejs","hash":"e7d23ff8f8c96f77685e441c7f6040430d07a21a","modified":1710210576215},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/widgets/ghuser.ejs","hash":"5d8cf68b091f8bf4b88ac230495bc2dec561ad6a","modified":1710210576231},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/widgets/linklist.ejs","hash":"813336cbbe4505e9be42d5682fd7b720dba25194","modified":1710210576235},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/widgets/markdown.ejs","hash":"7ce0ce941c55e42c545c1fffa77a3db07e1989b1","modified":1710210576239},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/widgets/recent.ejs","hash":"a5fcb3be545dbbc6a57f3e6dda47c30114c74148","modified":1710210576243},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/widgets/related.ejs","hash":"ac6040f2067c799836d5dc4abacf0b879a156d88","modified":1710210576251},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/widgets/tagcloud.ejs","hash":"d95c26f84c7d9061ba3ef6188d58fa14f1c63bf3","modified":1710210576263},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/widgets/timeline.ejs","hash":"745b384871291e0cf2f6ceb4a0c12989b4e8cd62","modified":1710210576267},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/widgets/toc.ejs","hash":"1584027ed0ff02d65afad7e5e0eda7f50f81a10f","modified":1710210576275},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/widgets/tree.ejs","hash":"2a7d37a843e32d073be4637bc17980e368a16003","modified":1710210576283},{"_id":"node_modules/hexo-theme-stellar/layout/_plugins/search/local_search.ejs","hash":"38a3641bb532583b699fda42175cb14242f07575","modified":1710210576291},{"_id":"node_modules/hexo-theme-stellar/scripts/events/lib/authors.js","hash":"eedefb5430fc4176bdc2814c8a88295f0e524d10","modified":1710210576303},{"_id":"node_modules/hexo-theme-stellar/scripts/events/lib/config.js","hash":"ab74c3df31ad21b842d859af40c1131dbd8fd2d7","modified":1710210576315},{"_id":"node_modules/hexo-theme-stellar/scripts/events/lib/links.js","hash":"881cac75e4071d219a18156738e18eb397d83c00","modified":1710210576323},{"_id":"node_modules/hexo-theme-stellar/scripts/events/lib/merge_posts.js","hash":"4e45b8dc5317f7d66bc14879ae6b5f972123ce5d","modified":1710210576327},{"_id":"node_modules/hexo-theme-stellar/scripts/events/lib/doc_tree.js","hash":"e217f244af98b1151e7f57e9e77812f3a1e2ad78","modified":1710210576319},{"_id":"node_modules/hexo-theme-stellar/scripts/events/lib/topic_tree.js","hash":"7f735f2573c87d202e2d4b845307d0725d619e8e","modified":1710210576331},{"_id":"node_modules/hexo-theme-stellar/scripts/events/lib/utils.js","hash":"271ba6c8cc997e4f55b2e146a99bde8301818400","modified":1710210576335},{"_id":"node_modules/hexo-theme-stellar/scripts/filters/lib/img_lazyload.js","hash":"b3dedcc1fc4189589e63d4fa6f169a70e9d63cd1","modified":1710210576363},{"_id":"node_modules/hexo-theme-stellar/scripts/filters/lib/img_onerror.js","hash":"d44a8e20d4d537c0cf85b980e1fc3bc84865a2d3","modified":1710210576371},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/about.js","hash":"c9778c35c1ccd9f2018174bafbd37b23dd52cf62","modified":1710210576411},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/albums.js","hash":"9fd16a8ceffd1806c25582062af7a72eca0e5c56","modified":1710210576419},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/audio.js","hash":"9b094b16dce131a5c09373661c88a1de9b5326f7","modified":1710210576419},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/banner.js","hash":"1fceb77a37ecaddf38c03aa655eec878701427c0","modified":1710210576427},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/box.js","hash":"753ae16a343ae82628f2057bd9cf09ea376fdbb5","modified":1710210576427},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/button.js","hash":"e0890a759335b1c5ad09db084bcf62073b2557cb","modified":1710210576431},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/checkbox.js","hash":"69caf7488b6c92cb2524df81ece6f33a46a89fe0","modified":1710210576435},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/copy.js","hash":"d22a82b6fd9c96c7ac49677b427e6c629fa889d7","modified":1710210576439},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/emoji.js","hash":"e10f68f69206fc6e9d0c478630be2b4514d328d7","modified":1710210576443},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/folders.js","hash":"853a75c8b4f445f64a18420929c31865db30cd39","modified":1710210576447},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/folding.js","hash":"b1efa6e86b1f8f25a58376349f21117902e5bb01","modified":1710210576459},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/frame.js","hash":"1251a8622260af8efc55c2f0aac8ee5cf79d9043","modified":1710210576463},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/friends.js","hash":"da08a75ad3579464debe8da2dd57314bd641dbb2","modified":1710210576467},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/gallery.js","hash":"56a9309b096cbe1876a1e8c2b7c3f692325135e1","modified":1710210576471},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/ghcard.js","hash":"039ee39d8dba7c0aa0e267de38f9064b30855a55","modified":1710210576479},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/grid.js","hash":"dad59b638c2fd30538e3a69bf0c8d76d34cf3ece","modified":1710210576487},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/hashtag.js","hash":"f38ce98fff40ed35be9b1f1be3194bc4c5d44dc3","modified":1710210576495},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/icon.js","hash":"273898ae29a07c1baccb432efa0d33ccfabe7db9","modified":1710210576495},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/image.js","hash":"675ad588b61f5a00c01d4fa96c1c388df5366c4a","modified":1710210576507},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/link.js","hash":"8a1297c324749f98e24036d3aa91ad374ad1d930","modified":1710210576515},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/mark.js","hash":"cfd8198f349dba60fbdf53042b6ebd9a0ba521c7","modified":1710210576519},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/md.js","hash":"6ed5db6d055dbfe01ecaeddbd0ead13a20ba7e74","modified":1710210576523},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/navbar.js","hash":"e78ca3469c44362c7d8c3ad8899f49a119b326ff","modified":1710210576527},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/note.js","hash":"a70d1fcb440ad029ddddb72b053a59b1ed3bfef8","modified":1710210576531},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/poetry.js","hash":"c36321caeec845ed131bdd0922bff25eb59f086a","modified":1710210576539},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/okr.js","hash":"8e7a7d912e4f5e1fe1feb6125e4762c378b11ba3","modified":1710210576535},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/posters.js","hash":"713e1367f3a60e5903954a8fab15b0d9d9cfd89a","modified":1710210576543},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/quot.js","hash":"e87c2d55973a688837072e3d0b7cfdffc58dde5b","modified":1710210576551},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/sites.js","hash":"298f42f3097a19e5d229099964e15dac7d46e1b0","modified":1710210576555},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/swiper.js","hash":"dc025c79b190d233383fec001ddbe478f2675cc8","modified":1710210576559},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/tabs.js","hash":"1b3d7b6b962293b44430e7b40560b8d1fa5c618d","modified":1710210576563},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/timeline.js","hash":"f1defeed67e56c055f37ee7fab8a597a9d14f89e","modified":1710210576567},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/toc.js","hash":"d7b51b66d7b83a77e501930e735092a9967d5d18","modified":1710210576571},{"_id":"node_modules/hexo-theme-stellar/scripts/tags/lib/video.js","hash":"9f580f1483e6c24eba6ff96aef8f52ee3bf85b71","modified":1710210576575},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/base.styl","hash":"2986c5771652c353a320f4404ceeb1c6b257a6ed","modified":1710210576591},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/blockquote.styl","hash":"f107e6f399382a6663722bc2e823986c257da9a3","modified":1710210576595},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/blur.styl","hash":"43441caaee7b7ab011a26016362b023263cd64a8","modified":1710210576599},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/button.styl","hash":"b76954603704b710e641b8fce09c7b56f9fa7a4a","modified":1710210576603},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/cap.styl","hash":"c99286644d4a44dc76e1fe9a3af1815112f65acc","modified":1710210576607},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/device.styl","hash":"d35956216d91d064631260c7e47d6532dbeb2f53","modified":1710210576615},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/control.styl","hash":"75081ca9d522a76ec4acffb8111c918b2297650a","modified":1710210576611},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/html.styl","hash":"e7f596ff7294517096f5cb27f5af53b1a797e047","modified":1710210576631},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/image.styl","hash":"cca1103a9185202b13be49e16d77d259e9ffb482","modified":1710210576635},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/input.styl","hash":"953fc87072cd760d92dfef55310addbb17bb2b51","modified":1710210576639},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/highlight.styl","hash":"6f63e3483f4025e0d66e04f6d4cc0c7d6ad535d4","modified":1710210576627},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/layout.styl","hash":"c7d0d3c70087e14bd1f6d8d50d56762d8c5ad44d","modified":1710210576643},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/loading.styl","hash":"6962fd568ad9779146742b8b8928cec107972e8e","modified":1710210576647},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/media.styl","hash":"fa7dbcaa31089fe547acb01a767af97fb019bba6","modified":1710210576651},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/pre.styl","hash":"be7ecc0a1cdd2e6f1594c4cc238734b2dc3a2c4e","modified":1710210576655},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/span.styl","hash":"86462ffaf1603b5d5ab6534c0f7fe0eb495aad2d","modified":1710210576659},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/svg.styl","hash":"aa2ae391db2ea028b9221740b24fca7f7e9ff16c","modified":1710210576663},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/title.styl","hash":"c9009b6c52a1ea4dfb6c2f56b1c3fc6de8a2c63a","modified":1710210576667},{"_id":"node_modules/hexo-theme-stellar/source/css/_common/toast.styl","hash":"f2930874174763da2338fa95087c345bf5c41800","modified":1710210576671},{"_id":"node_modules/hexo-theme-stellar/source/css/_defines/const.styl","hash":"c62a434f1eef895d343cb8255a19c6f1a6c73195","modified":1710210576687},{"_id":"node_modules/hexo-theme-stellar/source/css/_defines/func.styl","hash":"c5a411aeb71b82986508987e61819bdb229366c0","modified":1710210576695},{"_id":"node_modules/hexo-theme-stellar/source/css/_defines/theme.styl","hash":"024a2a360876606d66a3fffafb20b4492007b447","modified":1710210576699},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/index.styl","hash":"7a7ab293e065116646102546c6bab01166836059","modified":1710210576735},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/layout.styl","hash":"b7eb188db92bb9a32ae180969838f6eda2ec9640","modified":1710210576739},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/list.styl","hash":"326015062dd68c7ee8272416cf4f7732d20482cb","modified":1710210576739},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/main.styl","hash":"41040b445d23ff4e56656ce3ca4e0fd7fd67d67b","modified":1710210576743},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/md.styl","hash":"55c6f6f73468229159d895de08282e0d75b167b1","modified":1710210576747},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/aplayer.styl","hash":"00b6e9209638eef9f70e75a24a5a90b05f7b5347","modified":1710210576755},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/fancybox.styl","hash":"411d1bfc64bc9e5228249788af7b55de33f08427","modified":1710210576767},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/copycode.styl","hash":"a9f27136143eb779d1aeb903e863c94a98b82aac","modified":1710210576759},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/katex.styl","hash":"64a0208a475811c8a022536441188a161d9dd05d","modified":1710210576771},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/index.styl","hash":"f96caf6f1d582973bc71199eee478cfc9fe88085","modified":1710210576767},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/lazyload.styl","hash":"6cd216067594d07c097a66e2403df36a1abbe6d6","modified":1710210576775},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/scrollreveal.styl","hash":"21b9125c1bae3e5348547e85500ceb992de21923","modified":1710210576779},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/swiper.styl","hash":"46179e1e9ca273f4e095388d981acdc9fce5bdb8","modified":1710210576783},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/mermaid.styl","hash":"68a8afe8c1f690264c77fa0705de56f420da56b7","modified":1710210576775},{"_id":"node_modules/hexo-theme-stellar/source/js/plugins/copycode.js","hash":"ec00e1755390da1eacd0ec5304bae6554a6f8ec7","modified":1710210576795},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/tianli_gpt.styl","hash":"6cc2d27b8ec0296de09ce38d15abdd966702b79a","modified":1710210576787},{"_id":"node_modules/hexo-theme-stellar/source/js/search/local-search.js","hash":"f9b5e7a9eeaf82e227c7f58248cdda40b2fbb032","modified":1710210576807},{"_id":"node_modules/hexo-theme-stellar/source/js/services/friends.js","hash":"581a2baa085df422b752cbec098ca56aac691790","modified":1710210576823},{"_id":"node_modules/hexo-theme-stellar/source/js/services/fcircle.js","hash":"add550bfb204a2057661d4d6630d78ebf485754d","modified":1710210576819},{"_id":"node_modules/hexo-theme-stellar/source/js/services/ghinfo.js","hash":"94b86ce42dd765e9a4c1befa72ee9648d7ec6f88","modified":1710210576843},{"_id":"node_modules/hexo-theme-stellar/source/js/services/mdrender.js","hash":"947f476e6dd8ca6a75f87f6ac6f2fbb2b0861e82","modified":1710210576851},{"_id":"node_modules/hexo-theme-stellar/source/js/services/memos.js","hash":"9d8e2976765ed15a739969752556b3ee28b1f283","modified":1710210576851},{"_id":"node_modules/hexo-theme-stellar/source/js/services/siteinfo.js","hash":"74da788f29862604cd53f6b82b036ff56c715d21","modified":1710210576855},{"_id":"node_modules/hexo-theme-stellar/source/js/services/sites.js","hash":"5626b70d13360933c581983dcda422e4fccdc810","modified":1710210576859},{"_id":"node_modules/hexo-theme-stellar/source/js/services/weibo.js","hash":"437e631539f3a50cf8b46ff17008404609c1c481","modified":1710210576867},{"_id":"node_modules/hexo-theme-stellar/source/js/services/timeline.js","hash":"41cde82427726c3366b64b1f54f1aed9bc20fcf1","modified":1710210576863},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/comments/artalk/layout.ejs","hash":"14b26d696ba6644ef9d5854e1b4a8fda028bddb9","modified":1710210576879},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/comments/artalk/script.ejs","hash":"82aae1b1a5a5db2113935742f3fae5fc7d6f0177","modified":1710210576883},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/comments/beaudar/layout.ejs","hash":"431848ce38c18589ddb54d5e705bd7792872c199","modified":1710210576887},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/comments/beaudar/script.ejs","hash":"c2171249b79e549edbcdbbaf0d1f0c9deed2f033","modified":1710210576891},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/comments/giscus/layout.ejs","hash":"144e313ab45889c715ea1cfff3976b1f1322469e","modified":1710210576895},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/comments/giscus/script.ejs","hash":"35cc20ffa353c49ed8cdc0c27c7aea20cfe52b90","modified":1710210576899},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/comments/twikoo/layout.ejs","hash":"a3d429f4eafc582f739dd48865b39afd7c22ed56","modified":1710210576907},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/comments/twikoo/script.ejs","hash":"1b9d294c8be6d4ea58dfd5617f8561bad234e133","modified":1710210576907},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/comments/utterances/layout.ejs","hash":"431848ce38c18589ddb54d5e705bd7792872c199","modified":1710210576915},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/comments/waline/layout.ejs","hash":"2abe764ffeab5603645b0e5148a17e9373de5eb4","modified":1710210576927},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/comments/utterances/script.ejs","hash":"c64d639c7cea2ce37973c786910b7964e6b41e6c","modified":1710210576915},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/comments/waline/script.ejs","hash":"d7d9a3959afff50e901532af211ec9805c84d67d","modified":1710210576935},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/article/read_next.ejs","hash":"30c9e20e6835fa92a528de61041742ff42cc2af0","modified":1710210576943},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/article/article_footer.ejs","hash":"ea08a1daf4569f8a623ba0039d20bc150610c8c7","modified":1710210576939},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/article/related_posts.ejs","hash":"d771cdb24dd2a31cdadeed5c98c016675dc0c02a","modified":1710210576947},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/navbar/article_banner.ejs","hash":"877fca38602c76cc9ced6f739e3929091f0d2f74","modified":1710210576951},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/navbar/dateinfo.ejs","hash":"8bec18d89f073fe5a7c669910fd2a8efc1fdb5e5","modified":1710210576955},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/navbar/ghinfo.ejs","hash":"f5177430efd994b7c2d9d3104a58b0f1f60f4a00","modified":1710210576955},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/navbar/nav_tabs_blog.ejs","hash":"e66b369babf79bc84108bbc12d1ea7f7144cf33e","modified":1710210576963},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/navbar/nav_tabs_wiki.ejs","hash":"bb8644df466868a879fc97bc364f1aba6b1137cf","modified":1710210576963},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/post_list/paginator.ejs","hash":"1a4b3bc64325ec7d5932ea78c36f2ec4978c09eb","modified":1710210576967},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/post_list/post_card.ejs","hash":"dab8decf3ebf7a2d4d829a534af76e8500fbffbb","modified":1710210576971},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/post_list/topic_card.ejs","hash":"9f100016e7cfa07c8728f9c3cf9543ed3ed43cfe","modified":1710210576975},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/post_list/wiki_card.ejs","hash":"d2676c1817f09be21008fbf1c2a25e3c9dc1793f","modified":1710210576975},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/widgets/components/edit.ejs","hash":"9d976ca956c73128f72f39ca7641ceb5240b15a1","modified":1710210576979},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/widgets/components/link.ejs","hash":"eee3e54cca066643d973f7bc1e2af6230121e634","modified":1710210576987},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/widgets/components/linklist.ejs","hash":"91f3a83ff54284200951637c0cfcd3e4e613942e","modified":1710210576991},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/pages/archives.styl","hash":"a99f09f4cc948588d071f8cd95362f2d70ec4c40","modified":1710210576999},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/pages/error.styl","hash":"91f9df285a87bc7b7e9da19d547ea4b1dc392828","modified":1710210577003},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/article-banner.styl","hash":"2347a0f66b52ca1a8aab6e9e5e3cf7d4174aa141","modified":1710210577011},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/article-footer.styl","hash":"762c38e63aebbd028b5aed264349fa1d2a14e8af","modified":1710210577015},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/bread-nav.styl","hash":"daf58b32af0b5dfea6cbfa1c3cab695976e57164","modified":1710210577035},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/cover.styl","hash":"ef44c47d0a70feb84d69cf8bb2bc6977f61b94f2","modified":1710210577035},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/footer.styl","hash":"d04fd5249b9fdcafd64197d5607e08a8f7516b82","modified":1710210577039},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/navbar.styl","hash":"282291ee0f876ea14cff671555ab9defe8fc2318","modified":1710210577039},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/paginator.styl","hash":"d5a64f3820ffc0913086c9fa35b26391eb023e61","modified":1710210577043},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/partial/related.styl","hash":"b413ab434cfb778384fbac64d43da41437435aa0","modified":1710210577043},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/sidebar/footer.styl","hash":"ac3423d488259ea467e95325e12f57476a9bdc9c","modified":1710210577055},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/sidebar/logo.styl","hash":"f81eb3d7a49c71f728d8bf42081bde30c6ff596e","modified":1710210577055},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/sidebar/menu.styl","hash":"f05a88f1badc927f6f5375e2d59e6fc4f1e6a760","modified":1710210577055},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/sidebar/search.styl","hash":"ea880602a99ed8cb9b87f410e1f340b4d23d38e8","modified":1710210577059},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/sidebar/sidebar.styl","hash":"388a906b21155794383c924ce4d802708a34fc58","modified":1710210577067},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/sidebar/nav-area.styl","hash":"5302a72d15f7c35b391da723e84592f1129fca57","modified":1710210577059},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/about.styl","hash":"cdaf1ccd782db961cecda0802c94dabe27656731","modified":1710210577075},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/banner.styl","hash":"f49a123a61cb02c65eebb79adefae9a6f8b8e2fc","modified":1710210577083},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/button.styl","hash":"19469c881d8798916ea45ec11ecd5348146e7927","modified":1710210577083},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/checkbox.styl","hash":"1cd33e27fd539ed2a6cb41d4fc59294f1dd315b4","modified":1710210577087},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/common.styl","hash":"e6e31bca9603def335e6e55dd7eb5479758e41e7","modified":1710210577087},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/copy.styl","hash":"2e00b4923bf8a4cf1b742d19cf26165cc65fcffe","modified":1710210577091},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/emoji.styl","hash":"3d30f0d994aba55291e44f8f822f382d3d7f90d7","modified":1710210577091},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/folders.styl","hash":"2eae18b521a613a19dd6399dcb5504f843dcbb88","modified":1710210577091},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/folding.styl","hash":"84eb11a5a5808f3a4bd0985d97a7b108a36fd044","modified":1710210577095},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/ghcard.styl","hash":"98a50d3fab79ce03dd7f161fe3442d803712c284","modified":1710210577099},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/gallery.styl","hash":"52be8d049ce7533084aa3a6f361b4f365086af02","modified":1710210577099},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/hashtag.styl","hash":"0e2e74fcff5c30be9533e451a1c06ed1477dc9aa","modified":1710210577103},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/grid.styl","hash":"606311fa8326152f99fc721284a09e06490d0cca","modified":1710210577103},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/icon.styl","hash":"ea5372d1042db221f6c3ce5a31e18153c5e00d39","modified":1710210577107},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/image.styl","hash":"beb0eb953d11489d4eaf16282784625062c81d9f","modified":1710210577107},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/inline-labels.styl","hash":"96aad4c7710ed7097842fab77473b66a298b6e3f","modified":1710210577107},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/link.styl","hash":"b91bb69a2f84567f87c2665c3dbaeb8831487185","modified":1710210577111},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/mark.styl","hash":"1227da0705c294abab7030439d1e505c6b304ccf","modified":1710210577119},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/media.styl","hash":"99cdaf447f8066738023a07163711c544fbed25a","modified":1710210577119},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/navbar.styl","hash":"c2c3da16355f2dfd316edd11d9f2f2c50bc5299c","modified":1710210577123},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/note.styl","hash":"5e59f5ab728c2ad5b5e4e06b0dd694407bb14096","modified":1710210577123},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/okr.styl","hash":"0c2d281e90c8cb1a0de5ff516dca0e08ae7db141","modified":1710210577127},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/override.styl","hash":"6a31ef8c4dc7caa655ed7d852100abb2711ab5ac","modified":1710210577127},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/poetry.styl","hash":"6d15463121a741b69249318cadabf4bd06b4b3c6","modified":1710210577131},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/quot.styl","hash":"06f7f98457e9c814621316f93b5f04686cdb6e2f","modified":1710210577131},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/sites.styl","hash":"0b765b154695d544fa5dfab562e60a48c49f8547","modified":1710210577131},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/tabs.styl","hash":"b9bb4cf9442c0d4c09951c2fb886dbf8d0fe8de0","modified":1710210577135},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/timeline.styl","hash":"a5ef35db9c54905770c0ab68471ec054b0a83d9e","modified":1710210577135},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/toc.styl","hash":"18577b1c775f14da4b70cf3a8db56aa229f733c8","modified":1710210577139},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/widgets/components.styl","hash":"34280561524a535342da3f246443b2a94fef074d","modified":1710210577147},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/widgets/ghrepo.styl","hash":"73d5baa3dfcc9e73fc7470e1ebe244857ffd75c1","modified":1710210577147},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/widgets/ghuser.styl","hash":"16c62c701f9cf6a253c6390d43eaa01cfd7600b1","modified":1710210577151},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/widgets/list.styl","hash":"67d70d0e8d38952b2fe2d881f52a5cbea71e6a08","modified":1710210577151},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/widgets/markdown.styl","hash":"f5a431cd88fca7f328634e13eff50a55b34b734b","modified":1710210577151},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/widgets/related.styl","hash":"8464b5adb8ffcd086d0e748849d907871d149223","modified":1710210577155},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/widgets/tagcloud.styl","hash":"c452b18f1242c634c0e124a46414cbc7c65da494","modified":1710210577155},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/widgets/timeline.styl","hash":"ab1901de4acfe89b642cd721d7d08b1b0009661b","modified":1710210577159},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/widgets/toc.styl","hash":"f290d98a4d721b523b0c972b7de61a86b05b1086","modified":1710210577159},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/widgets/widgets.styl","hash":"7d383e58d54bf40806027fa22ab0ba70b5ab4fde","modified":1710210577163},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/comments/artalk.styl","hash":"279d7185e0ea65a8f5e1f783eaa3f83bc7bf3555","modified":1710210577171},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/comments/beaudar.styl","hash":"e9800f67a650f1c022aee494768e05da76e6a6b7","modified":1710210577171},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/comments/utterances.styl","hash":"be43f728d9515acaf050fbb3eed83cfefa2fe702","modified":1710210577175},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/comments/twikoo.styl","hash":"07bba48586a938fbc3846778729f564496d92fef","modified":1710210577175},{"_id":"node_modules/hexo-theme-stellar/source/css/_plugins/comments/waline.styl","hash":"390df153b3f07e6ac648a91ca1384f3606891d5c","modified":1710210577179},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/navbar/breadcrumb/blog.ejs","hash":"0e3ff0a54e75acf562fd06d3d2c3ea03e0df7e81","modified":1710210577183},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/navbar/breadcrumb/page.ejs","hash":"66fca0ad5ae3ceaa8fa1f698713c4882fc0341c3","modified":1710210577183},{"_id":"node_modules/hexo-theme-stellar/layout/_partial/main/navbar/breadcrumb/wiki.ejs","hash":"c878619b0e8835e9a53a3b460ab5c707e9a3fb61","modified":1710210577187},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/frame.styl","hash":"f8621b5a155ea78c5828e7ccbd1dfe6a72c9733c","modified":1710210577095},{"_id":"node_modules/hexo-theme-stellar/source/css/_layout/tag-plugins/friends.styl","hash":"4d412ca8388ff65979b9a619a7ae2fe212a90bac","modified":1710210577099},{"_id":"public/search.json","hash":"e19c834038239317ad8cb02dcbb28a5b5316579f","modified":1710240282678},{"_id":"public/404.html","hash":"0abf1bedbdaf277b8a140766a63b3f58b60e9f43","modified":1710240282678},{"_id":"public/[object Object]/2024/03/12/hello-world/index.html","hash":"2c0c7add843d73f8fc71923c4cf4d01175a6251f","modified":1710210706103},{"_id":"public/[object Object]/2023/05/16/计算机网络大作业/index.html","hash":"174880f88ef7a3d64520fd6d237e3afa85aace92","modified":1710240282678},{"_id":"public/[object Object]/2023/03/11/ipfs简介/index.html","hash":"7fcc42c163ff8395db5f1b8cda2f4912b6ead106","modified":1710240282678},{"_id":"public/[object Object]/2023/03/11/常见http状态码及简介/index.html","hash":"d0caa394f9a14f65d296e2859f7e4bf1f187390d","modified":1710240282678},{"_id":"public/[object Object]/2023/03/10/vue制作chatgpt聊天机器人/index.html","hash":"8401d939d34f3090709290c9efed70ea5dcca587","modified":1710240282678},{"_id":"public/[object Object]/2023/03/10/mysql性能优化/index.html","hash":"36bfe5805322f3ec445858d46a0582a38563f574","modified":1710240282678},{"_id":"public/[object Object]/2023/03/08/nginx原理剖析（一）/index.html","hash":"da36538e2e2daf570d02264d6e937499882cc40a","modified":1710240282678},{"_id":"public/[object Object]/2023/02/26/litechat聊天室/index.html","hash":"4286b6c19a95503aea9794f9ffbcededdbde6508","modified":1710240282678},{"_id":"public/[object Object]/2022/11/12/摄影展-小网页开发/index.html","hash":"37fde0d967b2430a40b5fbf5ef0c96748a8fca93","modified":1710240282678},{"_id":"public/[object Object]/2022/11/06/less初学/index.html","hash":"ab20f02a9689351b6efdd10baebc3a93f110475f","modified":1710240282678},{"_id":"public/[object Object]/2022/10/03/遗传算法/index.html","hash":"9372010694647d4a5e548d44bc78e0fd13f2d9a3","modified":1710240282678},{"_id":"public/[object Object]/2022/05/09/安利几款win10小软件/index.html","hash":"18a9ffe4a84517b726c8ab4504d6e6da64a72d79","modified":1710240282678},{"_id":"public/[object Object]/2022/05/07/给网站增加输入效果/index.html","hash":"a75d40ab46b0c90607c4a664efdcdb321b0ae41a","modified":1710240282678},{"_id":"public/[object Object]/2022/05/07/typescriptvue3-0笔记/index.html","hash":"19b3014a42c11b7444a043796d10ac51062548cb","modified":1710240282678},{"_id":"public/[object Object]/2022/05/06/github三种方法加速访问/index.html","hash":"ef530536285d62851e717304acd3d93ae569912f","modified":1710240282678},{"_id":"public/[object Object]/2022/04/27/python3爬bing所有壁纸/index.html","hash":"3af6e93552162058c0cbe7a48e97cc249b33dac0","modified":1710240282678},{"_id":"public/[object Object]/2022/04/24/优雅地使用WSL2/index.html","hash":"04eb553cb46a79e9352cbdd236b6271a02f777c1","modified":1710240282678},{"_id":"public/[object Object]/2022/04/20/1002/index.html","hash":"4ae0541c92d6822490cbb668e300f922300d7c40","modified":1710240282678},{"_id":"public/[object Object]/2022/04/18/python脚本自动更新pip源/index.html","hash":"a7cb7a62621c154011720a67b52dc8b0da0a7ea7","modified":1710240282678},{"_id":"public/[object Object]/2022/04/17/linux学习/index.html","hash":"c50374776a6f50604b652269abb2525b3678ea6e","modified":1710240282678},{"_id":"public/[object Object]/2022/04/08/apache2-4设置wordpress伪静态链接/index.html","hash":"33e640f8054b7bebee0e194f6ffcc65c01331846","modified":1710240282678},{"_id":"public/[object Object]/2022/04/04/树莓派4b驱动lcd1602-检测网站访问情况/index.html","hash":"8994b3214d362a641842546709cc618ef04b4865","modified":1710240282678},{"_id":"public/[object Object]/2022/04/04/解决博客头像无法显示问题/index.html","hash":"4d2b2d74e0e894b0a32174fbfc781ac163f060e5","modified":1710240282678},{"_id":"public/[object Object]/2022/04/04/解决argon主题预览时只能点击标题进入文章/index.html","hash":"28b971d525e2a0dffedd74365ce944faad6de422","modified":1710240282678},{"_id":"public/[object Object]/2022/03/22/数据库设计三大范式/index.html","hash":"c4bde9de8ccc12fd7c7055bbba38ceced2ab335a","modified":1710240282678},{"_id":"public/[object Object]/2022/03/19/python学习笔记二/index.html","hash":"f380c7db16fc1999460e7dde91c57539ac5a624c","modified":1710240282678},{"_id":"public/[object Object]/2022/03/17/树莓派4b使用摄像头/index.html","hash":"e433d08f42f55290218c920e5edd5e86ef55e781","modified":1710240282678},{"_id":"public/[object Object]/2022/03/14/树莓派4b点亮ledpython实现/index.html","hash":"ed1c5eaa5349fd4ae76ecfc06e099ce77f4e10bf","modified":1710240282678},{"_id":"public/[object Object]/2022/03/13/argon主题文档/index.html","hash":"cc807e51f20615ef416b82640db40e6e023fb840","modified":1710240282678},{"_id":"public/[object Object]/2022/03/12/网站性能测试/index.html","hash":"4ba67b3b43f80a37b731aeb44b21c6ddb40dda16","modified":1710240282678},{"_id":"public/[object Object]/2022/03/10/wordpress完整建站过程二/index.html","hash":"04f75e964c11313ac8c02a2ff30ae6d18f0a239f","modified":1710240282678},{"_id":"public/[object Object]/2022/03/08/操作系统-进程学习/index.html","hash":"4c6b02740484d4c43ecfd5ce1a94389a78777b91","modified":1710240282678},{"_id":"public/[object Object]/2022/03/05/421/index.html","hash":"d2c799da778de60418fd49fc5ea969be7e7d67cd","modified":1710240282678},{"_id":"public/[object Object]/2022/03/02/wordpress完整建站过程/index.html","hash":"d6d7324c0236012d8d38190807f9f2a347a7655a","modified":1710240282678},{"_id":"public/[object Object]/2022/03/02/299/index.html","hash":"38edefd1629284becfc46b2fe95cee78d79cd8c3","modified":1710240282678},{"_id":"public/[object Object]/2022/03/01/测试markdown/index.html","hash":"c0874aec30cf523b4a631a4d4125205096dab1bd","modified":1710240282678},{"_id":"public/[object Object]/2022/03/01/建站成功了记录一下/index.html","hash":"2fd127cb57659b0c9194a8d2a292c8747cdf7cb4","modified":1710240282678},{"_id":"public/[object Object]/2022/03/01/wordpress注意问题/index.html","hash":"9dbe9da2799e7bee045fb0edb85ccc40fea6622d","modified":1710240282678},{"_id":"public/archives/index.html","hash":"9379ee38ade554cf1d77c65b9476445b6249b29d","modified":1710240282678},{"_id":"public/archives/page/2/index.html","hash":"0018e7dff8b957a0c48613aa7f4cd759c98d8323","modified":1710240282678},{"_id":"public/archives/page/3/index.html","hash":"4b983b4baab5dc43418643c89b9b892dc9ef1867","modified":1710240282678},{"_id":"public/archives/page/4/index.html","hash":"2c944b5ba1ccb4bf5e6940b499a2ca162579a771","modified":1710240282678},{"_id":"public/archives/page/5/index.html","hash":"9214cfdd6136f777c62ccf5b9cf8a3b66601a17e","modified":1710240282678},{"_id":"public/archives/page/6/index.html","hash":"12de890432e27fc437d34a3dd87a7de04fb279f1","modified":1710240282678},{"_id":"public/archives/2022/index.html","hash":"78d15f81783f8a9b512e60dbc7197aae5cee2240","modified":1710240282678},{"_id":"public/archives/2022/page/2/index.html","hash":"ccea567ab3b4aa5588f8b247ad559e9e226581a4","modified":1710240282678},{"_id":"public/archives/2022/page/3/index.html","hash":"644fcd188b1202a1e91e6b361987539e664ac0cd","modified":1710240282678},{"_id":"public/archives/2022/page/4/index.html","hash":"ac6020b8d4bb3c5d0307107351db6fe863cc47b9","modified":1710240282678},{"_id":"public/archives/2022/page/5/index.html","hash":"4c023789576be56272646aeda9a0351552e94536","modified":1710240282678},{"_id":"public/archives/2022/03/index.html","hash":"179983ee5b2bc38c3ef4106b17e8e9b1517ab620","modified":1710240282678},{"_id":"public/archives/2022/03/page/2/index.html","hash":"9f01d1511a04b585133c9e1b3d0d7fd101425953","modified":1710240282678},{"_id":"public/archives/2022/04/index.html","hash":"621559c0ea2da9ac4993184eac47d14644ac8abc","modified":1710240282678},{"_id":"public/archives/2022/04/page/2/index.html","hash":"07cb3100fa45009b04f1f5821acf974d9c167c99","modified":1710240282678},{"_id":"public/archives/2022/05/index.html","hash":"57462ef247918e5cfe71d96281179d5ac4892077","modified":1710240282678},{"_id":"public/archives/2022/10/index.html","hash":"fedc65fd755090b34d9dc8ea93271e5aad5e9f1f","modified":1710240282678},{"_id":"public/archives/2022/11/index.html","hash":"d2d705af97c44e1cab11abb20729cd2b7abfa4fe","modified":1710240282678},{"_id":"public/archives/2023/index.html","hash":"068a4abadea9652c4534c515080db869b5c9d829","modified":1710240282678},{"_id":"public/archives/2023/02/index.html","hash":"a1eee1902b233f064cc96f76ce7f1e953def6442","modified":1710240282678},{"_id":"public/archives/2023/03/index.html","hash":"933302b2ed7a176cf48f1ffa74750578f33776e5","modified":1710240282678},{"_id":"public/archives/2023/05/index.html","hash":"2a2ac0be381b1c0c1b51e555cec9f7ac6b63cf78","modified":1710240282678},{"_id":"public/archives/2024/index.html","hash":"1175668aba5ddeed662f05a17466436e9bbc465e","modified":1710240282678},{"_id":"public/archives/2024/03/index.html","hash":"34e73136b240135cf09a7d8767f3aec97d8be4cd","modified":1710240282678},{"_id":"public/categories/思想感悟/index.html","hash":"1679b4e05cd783bc427260c65773c76f03a994a3","modified":1710240282678},{"_id":"public/categories/学习笔记/index.html","hash":"7284b6b9b69038671baff35028b6384122f0cc87","modified":1710240282678},{"_id":"public/categories/学习笔记/page/2/index.html","hash":"c5ed26e9f9837955e6846dfc17d0ca0f92fb0e62","modified":1710240282678},{"_id":"public/categories/学习笔记/page/3/index.html","hash":"449e4fba694e1173362cc023f153ee636a26ed63","modified":1710240282678},{"_id":"public/categories/学习笔记/page/4/index.html","hash":"7de3e6c929f139abd2c5ba148978211b753529bd","modified":1710240282678},{"_id":"public/categories/学习笔记/page/5/index.html","hash":"c976c08a3bf055c490c2940bbfaf93a722c0e512","modified":1710240282678},{"_id":"public/categories/专业技术/index.html","hash":"66944ff830a6bcf5fd5397139c80454e3a564e92","modified":1710240282678},{"_id":"public/categories/专业技术/page/2/index.html","hash":"e6b433b06ea13fde343302ecb36555590e81a95e","modified":1710240282678},{"_id":"public/categories/生活点滴/index.html","hash":"1043658ba438931056a096f826fb617b8ae98d38","modified":1710240282678},{"_id":"public/categories/文章/index.html","hash":"f555805b284458567fc07276b35ca0319a61db27","modified":1710240282678},{"_id":"public/categories/文章/page/2/index.html","hash":"dcd586f22459d8cd7459d913332ec3912c48f0ec","modified":1710240282678},{"_id":"public/categories/文章/page/3/index.html","hash":"2c06805729e1326b5426c563a8d985355a9e3091","modified":1710240282678},{"_id":"public/categories/工具/index.html","hash":"a218f94c8395bb78e3161f078f91ed3fff7f060b","modified":1710240282678},{"_id":"public/index.html","hash":"e4beeff670c0e4b86b95adee7fccb36beffb8e20","modified":1710240282678},{"_id":"public/page/2/index.html","hash":"be44a0e6cf8ea626233ac1f5517ea2cb7d24cf49","modified":1710240282678},{"_id":"public/page/3/index.html","hash":"303aa531d2e0018c008517332a0ef96ab72a424b","modified":1710240282678},{"_id":"public/page/4/index.html","hash":"ab43b4c507a9af5e1f0349748beb30778e41997f","modified":1710240282678},{"_id":"public/tags/感悟/index.html","hash":"bab226db9910e1d4e6037d59884565517531d705","modified":1710240282678},{"_id":"public/tags/生活/index.html","hash":"25f9d69f6b7598537947b45b233a72dcf2fcafb0","modified":1710240282678},{"_id":"public/tags/Linux/index.html","hash":"32d4d1c08ba3adaba75774d6bdc0277dbc9d965b","modified":1710240282678},{"_id":"public/tags/Linux/page/2/index.html","hash":"8228e78e1c06f4f9667a86edadbf3485663f7409","modified":1710240282678},{"_id":"public/tags/树莓派/index.html","hash":"1a147a870b19aa9e9a28afbf04df5e94bb26c9c2","modified":1710240282678},{"_id":"public/tags/html/index.html","hash":"33f8856fe7a10f1929fdce80116c05468ac37546","modified":1710240282678},{"_id":"public/tags/Javascript/index.html","hash":"56a013025cd2d58fd152b8bf0a536a9729d78335","modified":1710240282678},{"_id":"public/tags/Apache/index.html","hash":"9718cd4d2c62513a3649de257e92cd71cc1afe30","modified":1710240282678},{"_id":"public/tags/WordPress/index.html","hash":"ed1806e7226c29a11770b7b539b5a3d1eef6f74c","modified":1710240282678},{"_id":"public/tags/分享/index.html","hash":"527c27e385fe0fdf2a37d7b5c2219b0568da7b58","modified":1710240282678},{"_id":"public/tags/MySQL/index.html","hash":"c8868c0d12d53d3b326d00c563bfe0cf18176fe9","modified":1710240282678},{"_id":"public/tags/NestJS/index.html","hash":"bb11114679e322a2388f2bb4405459f0527b2aab","modified":1710240282678},{"_id":"public/tags/Nginx/index.html","hash":"36c7b5d23eed6c6d17dc55fc297aedff6b34f970","modified":1710240282678},{"_id":"public/tags/TypeScript/index.html","hash":"3efe912f67aac5f3be77ae5d545a890307f1e18e","modified":1710240282678},{"_id":"public/tags/Vue/index.html","hash":"0f44b5a57ed4a564062b294f85cb62594d0fbe01","modified":1710240282678},{"_id":"public/tags/Python/index.html","hash":"9c9adfa2647e47b378635901e10218d890351b81","modified":1710240282678},{"_id":"public/tags/Numpy/index.html","hash":"da2fa2eb83b86c0133e3db3184385a2599977e8a","modified":1710240282678},{"_id":"public/tags/PHP/index.html","hash":"5755d2e29a32802dab1e09351fca852e0829c60f","modified":1710240282678},{"_id":"public/tags/Windows/index.html","hash":"b7db6041727cde0bab049bb4f0bf6f2bca1d0cfe","modified":1710240282678},{"_id":"public/tags/HTTP/index.html","hash":"62a41f439e75e98aa9781e6a3617769b75cf8b60","modified":1710240282678},{"_id":"public/tags/计算机网络/index.html","hash":"f2b34551e17706cd3458851f71aee182b5d8cbfe","modified":1710240282678},{"_id":"public/tags/C/index.html","hash":"638d75cd4afb960814a6f4f2550a0123eae5a5e1","modified":1710240282678},{"_id":"public/tags/操作系统/index.html","hash":"eb38530220a7bd48c297335d75d3ad2c21f8603d","modified":1710240282678},{"_id":"public/tags/线程/index.html","hash":"4e7128c5a5a34286424571b6d752863d0c362372","modified":1710240282678},{"_id":"public/tags/进程/index.html","hash":"1bb01599ffa1e9621d289950105cabffbfa78cc6","modified":1710240282678},{"_id":"public/tags/锁/index.html","hash":"794fb82d6fa200dd6f4d9b2a07b24a94cb16bc61","modified":1710240282678},{"_id":"public/tags/Argon/index.html","hash":"635c0ff7d6071b42237defd51b9924cb3cd48d3a","modified":1710240282678},{"_id":"public/tags/算法/index.html","hash":"0c5202153c9a2bfafbda7145cef5763d4ccfcab7","modified":1710240282678},{"_id":"public/categories/index.html","hash":"7ab737c80ae0b6de5ef9cf14f9c83ba3fe52444a","modified":1710240282678},{"_id":"public/tags/index.html","hash":"19af34b7429a0aa7a0c2a6478fa6406edbdfbabe","modified":1710240282678},{"_id":"public/static/images/helloworld.webp","hash":"308bbc9d1ef6472af5c4bc8ba1b3b7b782669f8d","modified":1710210706103},{"_id":"public/static/images/image.png","hash":"d6a30cd962946347b5791061026e5450f3970adf","modified":1710210706103},{"_id":"public/static/avatar/logo.png","hash":"2edf867b238dc55f3b673c760ca908bbcc621c18","modified":1710210706103},{"_id":"public/js/main.js","hash":"cab3bac0eef3dd0fa78f3fd93996ac0084d7e421","modified":1710210706103},{"_id":"public/js/plugins/copycode.js","hash":"ec00e1755390da1eacd0ec5304bae6554a6f8ec7","modified":1710210706103},{"_id":"public/js/search/local-search.js","hash":"f9b5e7a9eeaf82e227c7f58248cdda40b2fbb032","modified":1710210706103},{"_id":"public/js/services/fcircle.js","hash":"add550bfb204a2057661d4d6630d78ebf485754d","modified":1710210706103},{"_id":"public/js/services/friends.js","hash":"581a2baa085df422b752cbec098ca56aac691790","modified":1710210706103},{"_id":"public/js/services/ghinfo.js","hash":"94b86ce42dd765e9a4c1befa72ee9648d7ec6f88","modified":1710210706103},{"_id":"public/js/services/mdrender.js","hash":"947f476e6dd8ca6a75f87f6ac6f2fbb2b0861e82","modified":1710210706103},{"_id":"public/js/services/memos.js","hash":"9d8e2976765ed15a739969752556b3ee28b1f283","modified":1710210706103},{"_id":"public/js/services/siteinfo.js","hash":"74da788f29862604cd53f6b82b036ff56c715d21","modified":1710210706103},{"_id":"public/js/services/sites.js","hash":"5626b70d13360933c581983dcda422e4fccdc810","modified":1710210706103},{"_id":"public/js/services/timeline.js","hash":"41cde82427726c3366b64b1f54f1aed9bc20fcf1","modified":1710210706103},{"_id":"public/js/services/weibo.js","hash":"437e631539f3a50cf8b46ff17008404609c1c481","modified":1710210706103},{"_id":"public/css/main.css","hash":"4fa610a0745f4e6fc492db5adca8662a35fba45d","modified":1710210706103},{"_id":"source/_posts/Hello-Stellar.md","hash":"37cd83df60e2cb5e743ea40251abd7ee06a7b912","modified":1710239810265},{"_id":"public/[object Object]/2024/03/12/Hello-Stellar/index.html","hash":"808e842f7067d02cd6125b9c3759c87c0b8f7702","modified":1710240282678}],"Category":[{"name":"思想感悟","_id":"cltnrar3o0004jry1a961hiu9"},{"name":"学习笔记","_id":"cltnrar3s0008jry1f887200m"},{"name":"专业技术","_id":"cltnrar46000mjry10ezr8j6b"},{"name":"生活点滴","_id":"cltnrar4a000ujry185qgdqbh"},{"name":"文章","_id":"cltnrar4e0011jry18khxhfsr"},{"name":"工具","_id":"cltnrar520027jry16w2a74tw"}],"Data":[],"Page":[],"Post":[{"title":"Untitled Post - 2","id":"1002","date":"2022-04-19T23:14:19.000Z","_content":"\n\n当你向程序员请教由他写的代码的问题时，千万不要直接说你这代码有bug，因为他会想：我的代码怎么可能有问题？（别问为什么会这么说，程序员的职业病）从而影响他回答你问题的心情和态度（我写的怎么会出现bug，肯定是你不对还来赖我写的代码。\n<!-- more -->\n而这时候最好的方式是问他：你这代码怎么run不起来啊？这时候他就会主动想怎么跑不起来？是不是我写的代码有bug了？从而他更愿意来帮你解决问题。\n\n有时候换种说话方式有时候会有奇效哦~","source":"_posts/1002.md","raw":"---\ntitle: Untitled Post - 2\ntags:\n  - 感悟\n  - 生活\nid: '1002'\ncategories:\n  - - 思想感悟\n  - - 生活点滴\ndate: 2022-04-20 07:14:19\n---\n\n\n当你向程序员请教由他写的代码的问题时，千万不要直接说你这代码有bug，因为他会想：我的代码怎么可能有问题？（别问为什么会这么说，程序员的职业病）从而影响他回答你问题的心情和态度（我写的怎么会出现bug，肯定是你不对还来赖我写的代码。\n<!-- more -->\n而这时候最好的方式是问他：你这代码怎么run不起来啊？这时候他就会主动想怎么跑不起来？是不是我写的代码有bug了？从而他更愿意来帮你解决问题。\n\n有时候换种说话方式有时候会有奇效哦~","slug":"1002","published":1,"updated":"2024-03-12T02:24:18.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltnrar3b0000jry10c0abu74","content":"<p>当你向程序员请教由他写的代码的问题时，千万不要直接说你这代码有bug，因为他会想：我的代码怎么可能有问题？（别问为什么会这么说，程序员的职业病）从而影响他回答你问题的心情和态度（我写的怎么会出现bug，肯定是你不对还来赖我写的代码。</p>\n<span id=\"more\"></span>\n<p>而这时候最好的方式是问他：你这代码怎么run不起来啊？这时候他就会主动想怎么跑不起来？是不是我写的代码有bug了？从而他更愿意来帮你解决问题。</p>\n<p>有时候换种说话方式有时候会有奇效哦~</p>\n","site":{"data":{}},"excerpt":"<p>当你向程序员请教由他写的代码的问题时，千万不要直接说你这代码有bug，因为他会想：我的代码怎么可能有问题？（别问为什么会这么说，程序员的职业病）从而影响他回答你问题的心情和态度（我写的怎么会出现bug，肯定是你不对还来赖我写的代码。</p>","more":"<p>而这时候最好的方式是问他：你这代码怎么run不起来啊？这时候他就会主动想怎么跑不起来？是不是我写的代码有bug了？从而他更愿意来帮你解决问题。</p>\n<p>有时候换种说话方式有时候会有奇效哦~</p>"},{"title":"树莓派学习","id":"299","date":"2022-03-02T09:30:59.000Z","_content":"\n# 树莓派学习\n\n![rpi-pins-40-0](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/rpi-pins-40-0.png)\n\n#### 1、前期工作\n\n*   下载img镜像(去[清华大学镜像源](https://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os-images/raspios_arm64/images/)下载比较快)\n    \n*   使用win32imgdisk将iimg镜像烧录至大于8G的SD卡上\n    \n*   在sd卡上新建文件名为wpa\\_supplicant.conf，并在文本里添加\n    <!-- more -->\n    ```cpp\n    country=CN\n    ctrl_interface=DIR=/var/run/wpa_supplicant   GROUP=netdev\n    update_config=1\n    \n    network={\n     ssid=\"TP-LINK_D8B2\"\n     psk=\"\"\n     key_mgmt=WPA-PSK/*无论使用WPA-PSK还是WPA2-PSK如果wifi没有密码，则key_mgmt=NONE*/\n     priority=100/*数字越大优先级越高*/\n    }\n    network={\n     ssid=\"\"\n     psk=\"\"\n     key_mgmt=WPA-PSK\n     priority = 5\n    }\n    network={\n     ssid=\"\"\n     psk=\"\"\n     key_mgmt=WPA-PSK\n     priority = 1\n    }\n    ```\n    \n*   在sd卡上继续添加ssh文件(无后缀名，启动树莓派ssh服务)\n    \n*   接下来插入树莓派中通电启动\n    \n\n#### 远程连接\n\n*   同一个wifi下，查看树莓派IP地址并使用Putty远程连接\n    \n    初识用户名：pi 初识密码：raspberry\n    \n*   修改root密码： `sudo passwd root` 然后输入两次密码ok（初次系统没有密码）\n    \n*   然后解锁root账户 `sudo passwd --unlock root`\n    \n*   切换进入root `su root`\n    \n\n#### 在ssh客户端更新源，将系统默认的国外源换成国内源（以清华大学镜像源为例）\n\n1.  树莓派更新apt-get的源列表在`/etc/apt/sources.list`\n    \n    ```cpp\n    sudo nano /etc/apt/sources.list\n    ```\n    \n    **另外，要注意查看已经的系统镜像是哪一个版本** 树莓派的镜像源Debian系统分好几种，`wheezy`、`jessie`、`stretch`、`buster`，它们分别对应：\n    \n    Debian版本\n    \n    对应名称\n    \n    Debian7\n    \n    wheezy\n    \n    Debian8\n    \n    jessie\n    \n    Debian9\n    \n    stretch\n    \n    Debian10\n    \n    buster\n    \n    Debian11\n    \n    bullseye\n    \n2.  把官方给的源用`#`注释掉，我们这里可以看到官方源是`buster`版本，那么我们添加的清华的软件源就必须得是`buster`版本的；\n    \n    ![image-20220320171237613](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220320171237613.png)\n    \n3.  加上阿里的源\n    \n    ```cpp\n    deb http://mirrors.aliyun.com/debian/ bullseye main non-free contrib\n    deb-src http://mirrors.aliyun.com/debian/ bullseye main non-free contrib\n    deb http://mirrors.aliyun.com/debian-security/ bullseye-security main\n    deb-src http://mirrors.aliyun.com/debian-security/ bullseye-security main\n    deb http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib\n    deb-src http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib\n    deb http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib\n    deb-src http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib\n    ```\n    \n    **注意！！！raspian与bullseye中间的空格不能删去！！不然无法更新**\n    \n4.  继续打开 `sudo nano /etc/apt/sources.list.d/raspi.list`\n    \n    ![image-20220403012846482](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220403012846482.png)\n    \n    将第一行的官方Debian系统源注释掉，在前面加上 `#`，加上\n    \n    ```\n    deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ bullseye main\n    ```\n    \n5.  保存、退出编辑器，再执行一遍`sudo apt-get update`和`sudo apt-get upgrade`,就成功了。\n    \n6.  ```\n    sudo apt update && sudo apt upgrade && sudo apt install -y gcc g++ python3-pip openjdk-11-jdk ffmpeg cmatrix sl hollywood samba samba-common tmux vim htop s-tui python3-dev jq proxychains zsh iperf3 unzip curl screenfetch git cmake clang && sudo apt autoremove\n    ```\n    \n\n### 安装xrdp(实现Windows桌面远程连接)\n\n```cpp\nsudo apt-get install xrdp  //安装xrdp远程桌面服务\n\nsudo /etc/init.d/xrdp start  //开启xrdp服务\n\nsudo update-rc.d xrdp defaults //将xrdp服务加入到默认系统启动列表\n```\n\n接下来使用桌面的远程连接程序连接用root用户即可\n\n![image-20220302173843945](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220302173843945.png)\n\n#### FTP Server安装\n\n（为了使用Filezilla进行Windows和树莓派之间的文件传输）\n\n```c\nsudo apt-get install vsftpd\n```\n\n启动服务\n\n```\nsudo service vsftpd start\n```\n\n允许写入树莓派权限，vsftp 默认关闭了写入权限，需手动开启\n\n```\nsudo vim /etc/vsftpd.conf\n```\n\n找到 **write\\_enable=YES** 的，将前面的 **#** 号删除即可。\n\n重启vsftpd服务器：\n\n```\nservice vsftpd restart\n```","source":"_posts/299.md","raw":"---\ntitle: 树莓派学习\ntags:\n  - Linux\n  - 树莓派\nid: '299'\ncategories:\n  - - 学习笔记\n  - - 文章\ndate: 2022-03-02 17:30:59\n---\n\n# 树莓派学习\n\n![rpi-pins-40-0](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/rpi-pins-40-0.png)\n\n#### 1、前期工作\n\n*   下载img镜像(去[清华大学镜像源](https://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os-images/raspios_arm64/images/)下载比较快)\n    \n*   使用win32imgdisk将iimg镜像烧录至大于8G的SD卡上\n    \n*   在sd卡上新建文件名为wpa\\_supplicant.conf，并在文本里添加\n    <!-- more -->\n    ```cpp\n    country=CN\n    ctrl_interface=DIR=/var/run/wpa_supplicant   GROUP=netdev\n    update_config=1\n    \n    network={\n     ssid=\"TP-LINK_D8B2\"\n     psk=\"\"\n     key_mgmt=WPA-PSK/*无论使用WPA-PSK还是WPA2-PSK如果wifi没有密码，则key_mgmt=NONE*/\n     priority=100/*数字越大优先级越高*/\n    }\n    network={\n     ssid=\"\"\n     psk=\"\"\n     key_mgmt=WPA-PSK\n     priority = 5\n    }\n    network={\n     ssid=\"\"\n     psk=\"\"\n     key_mgmt=WPA-PSK\n     priority = 1\n    }\n    ```\n    \n*   在sd卡上继续添加ssh文件(无后缀名，启动树莓派ssh服务)\n    \n*   接下来插入树莓派中通电启动\n    \n\n#### 远程连接\n\n*   同一个wifi下，查看树莓派IP地址并使用Putty远程连接\n    \n    初识用户名：pi 初识密码：raspberry\n    \n*   修改root密码： `sudo passwd root` 然后输入两次密码ok（初次系统没有密码）\n    \n*   然后解锁root账户 `sudo passwd --unlock root`\n    \n*   切换进入root `su root`\n    \n\n#### 在ssh客户端更新源，将系统默认的国外源换成国内源（以清华大学镜像源为例）\n\n1.  树莓派更新apt-get的源列表在`/etc/apt/sources.list`\n    \n    ```cpp\n    sudo nano /etc/apt/sources.list\n    ```\n    \n    **另外，要注意查看已经的系统镜像是哪一个版本** 树莓派的镜像源Debian系统分好几种，`wheezy`、`jessie`、`stretch`、`buster`，它们分别对应：\n    \n    Debian版本\n    \n    对应名称\n    \n    Debian7\n    \n    wheezy\n    \n    Debian8\n    \n    jessie\n    \n    Debian9\n    \n    stretch\n    \n    Debian10\n    \n    buster\n    \n    Debian11\n    \n    bullseye\n    \n2.  把官方给的源用`#`注释掉，我们这里可以看到官方源是`buster`版本，那么我们添加的清华的软件源就必须得是`buster`版本的；\n    \n    ![image-20220320171237613](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220320171237613.png)\n    \n3.  加上阿里的源\n    \n    ```cpp\n    deb http://mirrors.aliyun.com/debian/ bullseye main non-free contrib\n    deb-src http://mirrors.aliyun.com/debian/ bullseye main non-free contrib\n    deb http://mirrors.aliyun.com/debian-security/ bullseye-security main\n    deb-src http://mirrors.aliyun.com/debian-security/ bullseye-security main\n    deb http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib\n    deb-src http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib\n    deb http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib\n    deb-src http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib\n    ```\n    \n    **注意！！！raspian与bullseye中间的空格不能删去！！不然无法更新**\n    \n4.  继续打开 `sudo nano /etc/apt/sources.list.d/raspi.list`\n    \n    ![image-20220403012846482](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220403012846482.png)\n    \n    将第一行的官方Debian系统源注释掉，在前面加上 `#`，加上\n    \n    ```\n    deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ bullseye main\n    ```\n    \n5.  保存、退出编辑器，再执行一遍`sudo apt-get update`和`sudo apt-get upgrade`,就成功了。\n    \n6.  ```\n    sudo apt update && sudo apt upgrade && sudo apt install -y gcc g++ python3-pip openjdk-11-jdk ffmpeg cmatrix sl hollywood samba samba-common tmux vim htop s-tui python3-dev jq proxychains zsh iperf3 unzip curl screenfetch git cmake clang && sudo apt autoremove\n    ```\n    \n\n### 安装xrdp(实现Windows桌面远程连接)\n\n```cpp\nsudo apt-get install xrdp  //安装xrdp远程桌面服务\n\nsudo /etc/init.d/xrdp start  //开启xrdp服务\n\nsudo update-rc.d xrdp defaults //将xrdp服务加入到默认系统启动列表\n```\n\n接下来使用桌面的远程连接程序连接用root用户即可\n\n![image-20220302173843945](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220302173843945.png)\n\n#### FTP Server安装\n\n（为了使用Filezilla进行Windows和树莓派之间的文件传输）\n\n```c\nsudo apt-get install vsftpd\n```\n\n启动服务\n\n```\nsudo service vsftpd start\n```\n\n允许写入树莓派权限，vsftp 默认关闭了写入权限，需手动开启\n\n```\nsudo vim /etc/vsftpd.conf\n```\n\n找到 **write\\_enable=YES** 的，将前面的 **#** 号删除即可。\n\n重启vsftpd服务器：\n\n```\nservice vsftpd restart\n```","slug":"299","published":1,"updated":"2024-03-12T10:42:19.748Z","_id":"cltnrar3j0001jry14cgo4pum","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"树莓派学习\"><a href=\"#树莓派学习\" class=\"headerlink\" title=\"树莓派学习\"></a>树莓派学习</h1><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/rpi-pins-40-0.png\" alt=\"rpi-pins-40-0\"></p>\n<h4 id=\"1、前期工作\"><a href=\"#1、前期工作\" class=\"headerlink\" title=\"1、前期工作\"></a>1、前期工作</h4><ul>\n<li>下载img镜像(去<a href=\"https://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os-images/raspios_arm64/images/\">清华大学镜像源</a>下载比较快)</li>\n<li>使用win32imgdisk将iimg镜像烧录至大于8G的SD卡上</li>\n<li>在sd卡上新建文件名为wpa_supplicant.conf，并在文本里添加  <span id=\"more\"></span>\n  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">country=CN</span><br><span class=\"line\">ctrl_interface=DIR=/var/run/wpa_supplicant   GROUP=netdev</span><br><span class=\"line\">update_config=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">network=&#123;</span><br><span class=\"line\"> ssid=<span class=\"string\">&quot;TP-LINK_D8B2&quot;</span></span><br><span class=\"line\"> psk=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"> key_mgmt=WPA-PSK<span class=\"comment\">/*无论使用WPA-PSK还是WPA2-PSK如果wifi没有密码，则key_mgmt=NONE*/</span></span><br><span class=\"line\"> priority=<span class=\"number\">100</span><span class=\"comment\">/*数字越大优先级越高*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">network=&#123;</span><br><span class=\"line\"> ssid=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"> psk=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"> key_mgmt=WPA-PSK</span><br><span class=\"line\"> priority = <span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">network=&#123;</span><br><span class=\"line\"> ssid=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"> psk=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"> key_mgmt=WPA-PSK</span><br><span class=\"line\"> priority = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>在sd卡上继续添加ssh文件(无后缀名，启动树莓派ssh服务)</li>\n<li>接下来插入树莓派中通电启动</li>\n</ul>\n<h4 id=\"远程连接\"><a href=\"#远程连接\" class=\"headerlink\" title=\"远程连接\"></a>远程连接</h4><ul>\n<li>同一个wifi下，查看树莓派IP地址并使用Putty远程连接  初识用户名：pi 初识密码：raspberry</li>\n<li>修改root密码： <code>sudo passwd root</code> 然后输入两次密码ok（初次系统没有密码）</li>\n<li>然后解锁root账户 <code>sudo passwd --unlock root</code></li>\n<li>切换进入root <code>su root</code></li>\n</ul>\n<h4 id=\"在ssh客户端更新源，将系统默认的国外源换成国内源（以清华大学镜像源为例）\"><a href=\"#在ssh客户端更新源，将系统默认的国外源换成国内源（以清华大学镜像源为例）\" class=\"headerlink\" title=\"在ssh客户端更新源，将系统默认的国外源换成国内源（以清华大学镜像源为例）\"></a>在ssh客户端更新源，将系统默认的国外源换成国内源（以清华大学镜像源为例）</h4><ol>\n<li>树莓派更新apt-get的源列表在<code>/etc/apt/sources.list</code> <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n <strong>另外，要注意查看已经的系统镜像是哪一个版本</strong> 树莓派的镜像源Debian系统分好几种，<code>wheezy</code>、<code>jessie</code>、<code>stretch</code>、<code>buster</code>，它们分别对应： Debian版本 对应名称 Debian7 wheezy Debian8 jessie Debian9 stretch Debian10 buster Debian11 bullseye</li>\n<li>把官方给的源用<code>#</code>注释掉，我们这里可以看到官方源是<code>buster</code>版本，那么我们添加的清华的软件源就必须得是<code>buster</code>版本的； <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220320171237613.png\" alt=\"image-20220320171237613\"></li>\n<li>加上阿里的源 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http:<span class=\"comment\">//mirrors.aliyun.com/debian/ bullseye main non-free contrib</span></span><br><span class=\"line\">deb-src http:<span class=\"comment\">//mirrors.aliyun.com/debian/ bullseye main non-free contrib</span></span><br><span class=\"line\">deb http:<span class=\"comment\">//mirrors.aliyun.com/debian-security/ bullseye-security main</span></span><br><span class=\"line\">deb-src http:<span class=\"comment\">//mirrors.aliyun.com/debian-security/ bullseye-security main</span></span><br><span class=\"line\">deb http:<span class=\"comment\">//mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span></span><br><span class=\"line\">deb-src http:<span class=\"comment\">//mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span></span><br><span class=\"line\">deb http:<span class=\"comment\">//mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span></span><br><span class=\"line\">deb-src http:<span class=\"comment\">//mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span></span><br></pre></td></tr></table></figure>\n <strong>注意！！！raspian与bullseye中间的空格不能删去！！不然无法更新</strong></li>\n<li>继续打开 <code>sudo nano /etc/apt/sources.list.d/raspi.list</code> <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220403012846482.png\" alt=\"image-20220403012846482\"> 将第一行的官方Debian系统源注释掉，在前面加上 <code>#</code>，加上 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ bullseye main</span><br></pre></td></tr></table></figure>\n</li>\n<li>保存、退出编辑器，再执行一遍<code>sudo apt-get update</code>和<code>sudo apt-get upgrade</code>,就成功了。</li>\n<li>```<br> sudo apt update &amp;&amp; sudo apt upgrade &amp;&amp; sudo apt install -y gcc g++ python3-pip openjdk-11-jdk ffmpeg cmatrix sl hollywood samba samba-common tmux vim htop s-tui python3-dev jq proxychains zsh iperf3 unzip curl screenfetch git cmake clang &amp;&amp; sudo apt autoremove <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">### 安装xrdp(实现Windows桌面远程连接)</span><br><span class=\"line\"></span><br><span class=\"line\">```cpp</span><br><span class=\"line\">sudo apt-get install xrdp  //安装xrdp远程桌面服务</span><br><span class=\"line\"></span><br><span class=\"line\">sudo /etc/init.d/xrdp start  //开启xrdp服务</span><br><span class=\"line\"></span><br><span class=\"line\">sudo update-rc.d xrdp defaults //将xrdp服务加入到默认系统启动列表</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>接下来使用桌面的远程连接程序连接用root用户即可</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220302173843945.png\" alt=\"image-20220302173843945\"></p>\n<h4 id=\"FTP-Server安装\"><a href=\"#FTP-Server安装\" class=\"headerlink\" title=\"FTP Server安装\"></a>FTP Server安装</h4><p>（为了使用Filezilla进行Windows和树莓派之间的文件传输）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure>\n\n<p>启动服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service vsftpd start</span><br></pre></td></tr></table></figure>\n\n<p>允许写入树莓派权限，vsftp 默认关闭了写入权限，需手动开启</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>\n\n<p>找到 <strong>write_enable=YES</strong> 的，将前面的 <strong>#</strong> 号删除即可。</p>\n<p>重启vsftpd服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service vsftpd restart</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h1 id=\"树莓派学习\"><a href=\"#树莓派学习\" class=\"headerlink\" title=\"树莓派学习\"></a>树莓派学习</h1><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/rpi-pins-40-0.png\" alt=\"rpi-pins-40-0\"></p>\n<h4 id=\"1、前期工作\"><a href=\"#1、前期工作\" class=\"headerlink\" title=\"1、前期工作\"></a>1、前期工作</h4><ul>\n<li>下载img镜像(去<a href=\"https://mirrors.tuna.tsinghua.edu.cn/raspberry-pi-os-images/raspios_arm64/images/\">清华大学镜像源</a>下载比较快)</li>\n<li>使用win32imgdisk将iimg镜像烧录至大于8G的SD卡上</li>\n<li>在sd卡上新建文件名为wpa_supplicant.conf，并在文本里添加","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">country=CN</span><br><span class=\"line\">ctrl_interface=DIR=/var/run/wpa_supplicant   GROUP=netdev</span><br><span class=\"line\">update_config=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">network=&#123;</span><br><span class=\"line\"> ssid=<span class=\"string\">&quot;TP-LINK_D8B2&quot;</span></span><br><span class=\"line\"> psk=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"> key_mgmt=WPA-PSK<span class=\"comment\">/*无论使用WPA-PSK还是WPA2-PSK如果wifi没有密码，则key_mgmt=NONE*/</span></span><br><span class=\"line\"> priority=<span class=\"number\">100</span><span class=\"comment\">/*数字越大优先级越高*/</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">network=&#123;</span><br><span class=\"line\"> ssid=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"> psk=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"> key_mgmt=WPA-PSK</span><br><span class=\"line\"> priority = <span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">network=&#123;</span><br><span class=\"line\"> ssid=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"> psk=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"> key_mgmt=WPA-PSK</span><br><span class=\"line\"> priority = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>在sd卡上继续添加ssh文件(无后缀名，启动树莓派ssh服务)</li>\n<li>接下来插入树莓派中通电启动</li>\n</ul>\n<h4 id=\"远程连接\"><a href=\"#远程连接\" class=\"headerlink\" title=\"远程连接\"></a>远程连接</h4><ul>\n<li>同一个wifi下，查看树莓派IP地址并使用Putty远程连接  初识用户名：pi 初识密码：raspberry</li>\n<li>修改root密码： <code>sudo passwd root</code> 然后输入两次密码ok（初次系统没有密码）</li>\n<li>然后解锁root账户 <code>sudo passwd --unlock root</code></li>\n<li>切换进入root <code>su root</code></li>\n</ul>\n<h4 id=\"在ssh客户端更新源，将系统默认的国外源换成国内源（以清华大学镜像源为例）\"><a href=\"#在ssh客户端更新源，将系统默认的国外源换成国内源（以清华大学镜像源为例）\" class=\"headerlink\" title=\"在ssh客户端更新源，将系统默认的国外源换成国内源（以清华大学镜像源为例）\"></a>在ssh客户端更新源，将系统默认的国外源换成国内源（以清华大学镜像源为例）</h4><ol>\n<li>树莓派更新apt-get的源列表在<code>/etc/apt/sources.list</code> <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n <strong>另外，要注意查看已经的系统镜像是哪一个版本</strong> 树莓派的镜像源Debian系统分好几种，<code>wheezy</code>、<code>jessie</code>、<code>stretch</code>、<code>buster</code>，它们分别对应： Debian版本 对应名称 Debian7 wheezy Debian8 jessie Debian9 stretch Debian10 buster Debian11 bullseye</li>\n<li>把官方给的源用<code>#</code>注释掉，我们这里可以看到官方源是<code>buster</code>版本，那么我们添加的清华的软件源就必须得是<code>buster</code>版本的； <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220320171237613.png\" alt=\"image-20220320171237613\"></li>\n<li>加上阿里的源 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http:<span class=\"comment\">//mirrors.aliyun.com/debian/ bullseye main non-free contrib</span></span><br><span class=\"line\">deb-src http:<span class=\"comment\">//mirrors.aliyun.com/debian/ bullseye main non-free contrib</span></span><br><span class=\"line\">deb http:<span class=\"comment\">//mirrors.aliyun.com/debian-security/ bullseye-security main</span></span><br><span class=\"line\">deb-src http:<span class=\"comment\">//mirrors.aliyun.com/debian-security/ bullseye-security main</span></span><br><span class=\"line\">deb http:<span class=\"comment\">//mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span></span><br><span class=\"line\">deb-src http:<span class=\"comment\">//mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span></span><br><span class=\"line\">deb http:<span class=\"comment\">//mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span></span><br><span class=\"line\">deb-src http:<span class=\"comment\">//mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span></span><br></pre></td></tr></table></figure>\n <strong>注意！！！raspian与bullseye中间的空格不能删去！！不然无法更新</strong></li>\n<li>继续打开 <code>sudo nano /etc/apt/sources.list.d/raspi.list</code> <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220403012846482.png\" alt=\"image-20220403012846482\"> 将第一行的官方Debian系统源注释掉，在前面加上 <code>#</code>，加上 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ bullseye main</span><br></pre></td></tr></table></figure>\n</li>\n<li>保存、退出编辑器，再执行一遍<code>sudo apt-get update</code>和<code>sudo apt-get upgrade</code>,就成功了。</li>\n<li>```<br> sudo apt update &amp;&amp; sudo apt upgrade &amp;&amp; sudo apt install -y gcc g++ python3-pip openjdk-11-jdk ffmpeg cmatrix sl hollywood samba samba-common tmux vim htop s-tui python3-dev jq proxychains zsh iperf3 unzip curl screenfetch git cmake clang &amp;&amp; sudo apt autoremove <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">### 安装xrdp(实现Windows桌面远程连接)</span><br><span class=\"line\"></span><br><span class=\"line\">```cpp</span><br><span class=\"line\">sudo apt-get install xrdp  //安装xrdp远程桌面服务</span><br><span class=\"line\"></span><br><span class=\"line\">sudo /etc/init.d/xrdp start  //开启xrdp服务</span><br><span class=\"line\"></span><br><span class=\"line\">sudo update-rc.d xrdp defaults //将xrdp服务加入到默认系统启动列表</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>接下来使用桌面的远程连接程序连接用root用户即可</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220302173843945.png\" alt=\"image-20220302173843945\"></p>\n<h4 id=\"FTP-Server安装\"><a href=\"#FTP-Server安装\" class=\"headerlink\" title=\"FTP Server安装\"></a>FTP Server安装</h4><p>（为了使用Filezilla进行Windows和树莓派之间的文件传输）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install vsftpd</span><br></pre></td></tr></table></figure>\n\n<p>启动服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service vsftpd start</span><br></pre></td></tr></table></figure>\n\n<p>允许写入树莓派权限，vsftp 默认关闭了写入权限，需手动开启</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>\n\n<p>找到 <strong>write_enable=YES</strong> 的，将前面的 <strong>#</strong> 号删除即可。</p>\n<p>重启vsftpd服务器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service vsftpd restart</span><br></pre></td></tr></table></figure>"},{"title":"Javascript实现点击特效","id":"421","date":"2022-03-05T02:34:07.000Z","_content":"\n# 先看一下效果图\n\n点击我的博客就是效果啦\n\n#### 源码：\n<!-- more -->\n```javascript\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>点击产生类似烟花效果</title>\n</head>\n<body>\n</body>\n<script>\n   //粒子颜色,根据爱好来选择\n   \n   const Colors = [\n       \"red\",\n       \"blue\",\n       \"green\",\n       \"gary\",\n       \"orange\",\n       \"pink\",\n       \"yellow\",\n       \"purple\",\n       \"black\",\n   ] ;\n   //定义粒子数量\n   const particlesNumber = 20;\n   function creatParticle(x,y){\n       const ele = document.createElement(\"div\");\n       //设置成一个小园形，自己也可以根据爱好设置成其他如心型、星型\n       ele.style.height = \"10px\";\n       ele.style.width = \"10px\";\n       ele.style.borderRadius = \"5px\";\n       //设置绝对位置\n       ele.style.position = \"absolute\";\n       ele.style.top = `${y}px`;\n       ele.style.left = `${x}px`;\n       //光标位于方块中央\n       ele.style.transform = \"transform(-50%,-50%)\";\n       ele.style.backgroundColor = Colors[Math.floor(Math.random()*Colors.length)];\n       /*animate(keysframes,options)函数,options可以是动画持续时间，也可以是多个属性值的对象\n        duration：持续时间，iterations：动画迭代次数(Infinity表示无限动画)，delay：添加到动画的延迟  \n       */\n       const animation = ele.animate(\n           [\n               {\n           transform:`translate(${(Math.random()-0.5)*500}px,${(Math.random()-0.5)*500}px) rotate(${Math.random()*520}deg)`,\n                   opacity: 0\n               },\n           ],\n           { duration: 1000, iterations: 1 }\n       );\n       //向网页添加元素\n       document.body.appendChild(ele);\n       //结束后将DOM产生的div去除\n       animation.onfinish = () => ele.remove();\n   }\n      //创建点击事件\n   document.addEventListener(\"click\",(e) =>{\n      //获取当前光标位置\n      const {clientX: x, clientY: y } = e;\n\n      //创建多个粒子\n      for (let index = 0; index < particlesNumber; index++) {\n          creatParticle(x,y);\n      }\n   });\n</script>\n</html>\n```\n\n[这是之前我在C站的文章](https://blog.csdn.net/weixin_51245887/article/details/120285414?spm=1001.2014.3001.5501 \"这是之前我在C站的文章\")","source":"_posts/421.md","raw":"---\ntitle: Javascript实现点击特效\ntags:\n  - html\n  - Javascript\nid: '421'\ncategories:\n  - - 学习笔记\n  - - 文章\ndate: 2022-03-05 10:34:07\n---\n\n# 先看一下效果图\n\n点击我的博客就是效果啦\n\n#### 源码：\n<!-- more -->\n```javascript\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>点击产生类似烟花效果</title>\n</head>\n<body>\n</body>\n<script>\n   //粒子颜色,根据爱好来选择\n   \n   const Colors = [\n       \"red\",\n       \"blue\",\n       \"green\",\n       \"gary\",\n       \"orange\",\n       \"pink\",\n       \"yellow\",\n       \"purple\",\n       \"black\",\n   ] ;\n   //定义粒子数量\n   const particlesNumber = 20;\n   function creatParticle(x,y){\n       const ele = document.createElement(\"div\");\n       //设置成一个小园形，自己也可以根据爱好设置成其他如心型、星型\n       ele.style.height = \"10px\";\n       ele.style.width = \"10px\";\n       ele.style.borderRadius = \"5px\";\n       //设置绝对位置\n       ele.style.position = \"absolute\";\n       ele.style.top = `${y}px`;\n       ele.style.left = `${x}px`;\n       //光标位于方块中央\n       ele.style.transform = \"transform(-50%,-50%)\";\n       ele.style.backgroundColor = Colors[Math.floor(Math.random()*Colors.length)];\n       /*animate(keysframes,options)函数,options可以是动画持续时间，也可以是多个属性值的对象\n        duration：持续时间，iterations：动画迭代次数(Infinity表示无限动画)，delay：添加到动画的延迟  \n       */\n       const animation = ele.animate(\n           [\n               {\n           transform:`translate(${(Math.random()-0.5)*500}px,${(Math.random()-0.5)*500}px) rotate(${Math.random()*520}deg)`,\n                   opacity: 0\n               },\n           ],\n           { duration: 1000, iterations: 1 }\n       );\n       //向网页添加元素\n       document.body.appendChild(ele);\n       //结束后将DOM产生的div去除\n       animation.onfinish = () => ele.remove();\n   }\n      //创建点击事件\n   document.addEventListener(\"click\",(e) =>{\n      //获取当前光标位置\n      const {clientX: x, clientY: y } = e;\n\n      //创建多个粒子\n      for (let index = 0; index < particlesNumber; index++) {\n          creatParticle(x,y);\n      }\n   });\n</script>\n</html>\n```\n\n[这是之前我在C站的文章](https://blog.csdn.net/weixin_51245887/article/details/120285414?spm=1001.2014.3001.5501 \"这是之前我在C站的文章\")","slug":"421","published":1,"updated":"2024-03-12T02:24:18.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltnrar3m0003jry1a09r6xa9","content":"<h1 id=\"先看一下效果图\"><a href=\"#先看一下效果图\" class=\"headerlink\" title=\"先看一下效果图\"></a>先看一下效果图</h1><p>点击我的博客就是效果啦</p>\n<h4 id=\"源码：\"><a href=\"#源码：\" class=\"headerlink\" title=\"源码：\"></a>源码：</h4><span id=\"more\"></span>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"variable constant_\">DOCTYPE</span> html&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>点击产生类似烟花效果<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   <span class=\"comment\">//粒子颜色,根据爱好来选择</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   <span class=\"keyword\">const</span> <span class=\"title class_\">Colors</span> = [</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"string\">&quot;red&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"string\">&quot;blue&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"string\">&quot;green&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"string\">&quot;gary&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"string\">&quot;orange&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"string\">&quot;pink&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"string\">&quot;yellow&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"string\">&quot;purple&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"string\">&quot;black&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   ] ;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   <span class=\"comment\">//定义粒子数量</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   <span class=\"keyword\">const</span> particlesNumber = <span class=\"number\">20</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   <span class=\"keyword\">function</span> <span class=\"title function_\">creatParticle</span>(<span class=\"params\">x,y</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"keyword\">const</span> ele = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"comment\">//设置成一个小园形，自己也可以根据爱好设置成其他如心型、星型</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       ele.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"string\">&quot;10px&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       ele.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&quot;10px&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       ele.<span class=\"property\">style</span>.<span class=\"property\">borderRadius</span> = <span class=\"string\">&quot;5px&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"comment\">//设置绝对位置</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       ele.<span class=\"property\">style</span>.<span class=\"property\">position</span> = <span class=\"string\">&quot;absolute&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       ele.<span class=\"property\">style</span>.<span class=\"property\">top</span> = <span class=\"string\">`<span class=\"subst\">$&#123;y&#125;</span>px`</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       ele.<span class=\"property\">style</span>.<span class=\"property\">left</span> = <span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span>px`</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"comment\">//光标位于方块中央</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       ele.<span class=\"property\">style</span>.<span class=\"property\">transform</span> = <span class=\"string\">&quot;transform(-50%,-50%)&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       ele.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = <span class=\"title class_\">Colors</span>[<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*<span class=\"title class_\">Colors</span>.<span class=\"property\">length</span>)];</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"comment\">/*animate(keysframes,options)函数,options可以是动画持续时间，也可以是多个属性值的对象</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\"><span class=\"language-xml\">        duration：持续时间，iterations：动画迭代次数(Infinity表示无限动画)，delay：添加到动画的延迟  </span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\"><span class=\"language-xml\">       */</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"keyword\">const</span> animation = ele.<span class=\"title function_\">animate</span>(</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">           [</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">               &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">           <span class=\"attr\">transform</span>:<span class=\"string\">`translate(<span class=\"subst\">$&#123;(<span class=\"built_in\">Math</span>.random()-<span class=\"number\">0.5</span>)*<span class=\"number\">500</span>&#125;</span>px,<span class=\"subst\">$&#123;(<span class=\"built_in\">Math</span>.random()-<span class=\"number\">0.5</span>)*<span class=\"number\">500</span>&#125;</span>px) rotate(<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.random()*<span class=\"number\">520</span>&#125;</span>deg)`</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                   <span class=\"attr\">opacity</span>: <span class=\"number\">0</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">               &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">           ],</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">           &#123; <span class=\"attr\">duration</span>: <span class=\"number\">1000</span>, <span class=\"attr\">iterations</span>: <span class=\"number\">1</span> &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       );</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"comment\">//向网页添加元素</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(ele);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"comment\">//结束后将DOM产生的div去除</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       animation.<span class=\"property\">onfinish</span> = <span class=\"function\">() =&gt;</span> ele.<span class=\"title function_\">remove</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">//创建点击事件</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   <span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>,<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">//获取当前光标位置</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">const</span> &#123;<span class=\"attr\">clientX</span>: x, <span class=\"attr\">clientY</span>: y &#125; = e;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">//创建多个粒子</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; particlesNumber; index++) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"title function_\">creatParticle</span>(x,y);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/weixin_51245887/article/details/120285414?spm=1001.2014.3001.5501\" title=\"这是之前我在C站的文章\">这是之前我在C站的文章</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"先看一下效果图\"><a href=\"#先看一下效果图\" class=\"headerlink\" title=\"先看一下效果图\"></a>先看一下效果图</h1><p>点击我的博客就是效果啦</p>\n<h4 id=\"源码：\"><a href=\"#源码：\" class=\"headerlink\" title=\"源码：\"></a>源码：</h4>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!<span class=\"variable constant_\">DOCTYPE</span> html&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;utf-8&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>点击产生类似烟花效果<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   <span class=\"comment\">//粒子颜色,根据爱好来选择</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   </span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   <span class=\"keyword\">const</span> <span class=\"title class_\">Colors</span> = [</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"string\">&quot;red&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"string\">&quot;blue&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"string\">&quot;green&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"string\">&quot;gary&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"string\">&quot;orange&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"string\">&quot;pink&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"string\">&quot;yellow&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"string\">&quot;purple&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"string\">&quot;black&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   ] ;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   <span class=\"comment\">//定义粒子数量</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   <span class=\"keyword\">const</span> particlesNumber = <span class=\"number\">20</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   <span class=\"keyword\">function</span> <span class=\"title function_\">creatParticle</span>(<span class=\"params\">x,y</span>)&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"keyword\">const</span> ele = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"comment\">//设置成一个小园形，自己也可以根据爱好设置成其他如心型、星型</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       ele.<span class=\"property\">style</span>.<span class=\"property\">height</span> = <span class=\"string\">&quot;10px&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       ele.<span class=\"property\">style</span>.<span class=\"property\">width</span> = <span class=\"string\">&quot;10px&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       ele.<span class=\"property\">style</span>.<span class=\"property\">borderRadius</span> = <span class=\"string\">&quot;5px&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"comment\">//设置绝对位置</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       ele.<span class=\"property\">style</span>.<span class=\"property\">position</span> = <span class=\"string\">&quot;absolute&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       ele.<span class=\"property\">style</span>.<span class=\"property\">top</span> = <span class=\"string\">`<span class=\"subst\">$&#123;y&#125;</span>px`</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       ele.<span class=\"property\">style</span>.<span class=\"property\">left</span> = <span class=\"string\">`<span class=\"subst\">$&#123;x&#125;</span>px`</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"comment\">//光标位于方块中央</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       ele.<span class=\"property\">style</span>.<span class=\"property\">transform</span> = <span class=\"string\">&quot;transform(-50%,-50%)&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       ele.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = <span class=\"title class_\">Colors</span>[<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>()*<span class=\"title class_\">Colors</span>.<span class=\"property\">length</span>)];</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"comment\">/*animate(keysframes,options)函数,options可以是动画持续时间，也可以是多个属性值的对象</span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\"><span class=\"language-xml\">        duration：持续时间，iterations：动画迭代次数(Infinity表示无限动画)，delay：添加到动画的延迟  </span></span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"language-javascript\"><span class=\"language-xml\">       */</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"keyword\">const</span> animation = ele.<span class=\"title function_\">animate</span>(</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">           [</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">               &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">           <span class=\"attr\">transform</span>:<span class=\"string\">`translate(<span class=\"subst\">$&#123;(<span class=\"built_in\">Math</span>.random()-<span class=\"number\">0.5</span>)*<span class=\"number\">500</span>&#125;</span>px,<span class=\"subst\">$&#123;(<span class=\"built_in\">Math</span>.random()-<span class=\"number\">0.5</span>)*<span class=\"number\">500</span>&#125;</span>px) rotate(<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.random()*<span class=\"number\">520</span>&#125;</span>deg)`</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                   <span class=\"attr\">opacity</span>: <span class=\"number\">0</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">               &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">           ],</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">           &#123; <span class=\"attr\">duration</span>: <span class=\"number\">1000</span>, <span class=\"attr\">iterations</span>: <span class=\"number\">1</span> &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       );</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"comment\">//向网页添加元素</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(ele);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       <span class=\"comment\">//结束后将DOM产生的div去除</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">       animation.<span class=\"property\">onfinish</span> = <span class=\"function\">() =&gt;</span> ele.<span class=\"title function_\">remove</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">//创建点击事件</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   <span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>,<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span>&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">//获取当前光标位置</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">const</span> &#123;<span class=\"attr\">clientX</span>: x, <span class=\"attr\">clientY</span>: y &#125; = e;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"comment\">//创建多个粒子</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index = <span class=\"number\">0</span>; index &lt; particlesNumber; index++) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">          <span class=\"title function_\">creatParticle</span>(x,y);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">      &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">   &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://blog.csdn.net/weixin_51245887/article/details/120285414?spm=1001.2014.3001.5501\" title=\"这是之前我在C站的文章\">这是之前我在C站的文章</a></p>"},{"title":"设置Wordpress伪静态链接","id":"919","date":"2022-04-08T10:02:48.000Z","_content":"\n### 设置Wordpress伪静态链接\n\n#### Apache2.4\n\n> 本文是不在使用宝塔的情况下自行设定的, 有安装宝塔的请忽视\n> \n> 环境：Ubuntu20.04 Apache2.4 Wordpress5.9.2\n\n##### 重写规则\n\n*   开启重写规则\n    \n    ```c\n    sudo a2enmod rewrite\n    ```\n    \n*   设置根目录重定向\n   <!-- more --> \n    ```\n    sudo vim /etc/apache2/apache2.conf\n    ```\n    \n    找到 `<Directory /var/www/>`\n    \n    ![image-20220408175414794](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220408175414794.png)\n    \n    将`AllowOverride` 后的 `None` 修改为 `ALL` 。\n    \n*   进入Wordpress后台选择自己喜欢的伪静态，并点击保存，自动生成 `.hatccess` 规则并复制，如下：\n    \n    ![image-20220408174428359](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220408174428359.png)\n    \n    ```C\n    \n    RewriteEngine On\n    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\n    RewriteBase /\n    RewriteRule ^index\\.php$ - [L]\n    RewriteRule ^^unsubscribe-comment-mailnotice/?(.*)$ //wp-con>\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME} !-d\n    RewriteRule . /index.php [L]\n    ```\n    \n*   在刚刚的 `/var/www/` 目录下(即网站的根目录) 创建 `.hatccess` 文件\n    \n    粘贴刚刚复制的规则代码并保存。\n    \n*   重启服务器即可\n    \n    ```\n    sudo systemctl restart apache2\n    ```\n    \n\n##### 效果图\n\n![image-20220408180040599](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220408180040599.png)\n\n#### Nginx1.19\n\n> 本文是不在使用宝塔的情况下自行设定的, 有安装宝塔的请忽视\n> \n> 环境：Raspi OS 64bit(Debian11) Wordpress5.9.2\n\n打开配置文件 `sudo vim /etc/nginx/sites-available/default` 如果wordpress安装在网站根目录，在server中添加\n\n```\nlocation / {  \n                if (!-e $request_filename) {  \n                rewrite (.*) /index.php;  \n                }  \n        }  \n```\n\n如果wordpress安装在网站二级目录，在server中添加:\n\n```\nlocation /二级目录/ {  \n                if (!-e $request_filename) {  \n                rewrite (.*) /cn/index.php;  \n                }  \n        }\n```\n\n重启 `sudo /etc/init.d/ngnix restart` 在wordpress后台设置伪静态即可","source":"_posts/apache2-4设置wordpress伪静态链接.md","raw":"---\ntitle: 设置Wordpress伪静态链接\ntags:\n  - Apache\n  - WordPress\nid: '919'\ncategories:\n  - - 学习笔记\n  - - 文章\ndate: 2022-04-08 18:02:48\n---\n\n### 设置Wordpress伪静态链接\n\n#### Apache2.4\n\n> 本文是不在使用宝塔的情况下自行设定的, 有安装宝塔的请忽视\n> \n> 环境：Ubuntu20.04 Apache2.4 Wordpress5.9.2\n\n##### 重写规则\n\n*   开启重写规则\n    \n    ```c\n    sudo a2enmod rewrite\n    ```\n    \n*   设置根目录重定向\n   <!-- more --> \n    ```\n    sudo vim /etc/apache2/apache2.conf\n    ```\n    \n    找到 `<Directory /var/www/>`\n    \n    ![image-20220408175414794](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220408175414794.png)\n    \n    将`AllowOverride` 后的 `None` 修改为 `ALL` 。\n    \n*   进入Wordpress后台选择自己喜欢的伪静态，并点击保存，自动生成 `.hatccess` 规则并复制，如下：\n    \n    ![image-20220408174428359](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220408174428359.png)\n    \n    ```C\n    \n    RewriteEngine On\n    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\n    RewriteBase /\n    RewriteRule ^index\\.php$ - [L]\n    RewriteRule ^^unsubscribe-comment-mailnotice/?(.*)$ //wp-con>\n    RewriteCond %{REQUEST_FILENAME} !-f\n    RewriteCond %{REQUEST_FILENAME} !-d\n    RewriteRule . /index.php [L]\n    ```\n    \n*   在刚刚的 `/var/www/` 目录下(即网站的根目录) 创建 `.hatccess` 文件\n    \n    粘贴刚刚复制的规则代码并保存。\n    \n*   重启服务器即可\n    \n    ```\n    sudo systemctl restart apache2\n    ```\n    \n\n##### 效果图\n\n![image-20220408180040599](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220408180040599.png)\n\n#### Nginx1.19\n\n> 本文是不在使用宝塔的情况下自行设定的, 有安装宝塔的请忽视\n> \n> 环境：Raspi OS 64bit(Debian11) Wordpress5.9.2\n\n打开配置文件 `sudo vim /etc/nginx/sites-available/default` 如果wordpress安装在网站根目录，在server中添加\n\n```\nlocation / {  \n                if (!-e $request_filename) {  \n                rewrite (.*) /index.php;  \n                }  \n        }  \n```\n\n如果wordpress安装在网站二级目录，在server中添加:\n\n```\nlocation /二级目录/ {  \n                if (!-e $request_filename) {  \n                rewrite (.*) /cn/index.php;  \n                }  \n        }\n```\n\n重启 `sudo /etc/init.d/ngnix restart` 在wordpress后台设置伪静态即可","slug":"apache2-4设置wordpress伪静态链接","published":1,"updated":"2024-03-12T10:43:50.456Z","_id":"cltnrar3p0005jry1405v5bnk","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"设置Wordpress伪静态链接\"><a href=\"#设置Wordpress伪静态链接\" class=\"headerlink\" title=\"设置Wordpress伪静态链接\"></a>设置Wordpress伪静态链接</h3><h4 id=\"Apache2-4\"><a href=\"#Apache2-4\" class=\"headerlink\" title=\"Apache2.4\"></a>Apache2.4</h4><blockquote>\n<p>本文是不在使用宝塔的情况下自行设定的, 有安装宝塔的请忽视</p>\n<p>环境：Ubuntu20.04 Apache2.4 Wordpress5.9.2</p>\n</blockquote>\n<h5 id=\"重写规则\"><a href=\"#重写规则\" class=\"headerlink\" title=\"重写规则\"></a>重写规则</h5><ul>\n<li>开启重写规则  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2enmod rewrite</span><br></pre></td></tr></table></figure>\n</li>\n<li>设置根目录重定向 <span id=\"more\"></span> \n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure>\n  找到 <code>&lt;Directory /var/www/&gt;</code>  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220408175414794.png\" alt=\"image-20220408175414794\">  将<code>AllowOverride</code> 后的 <code>None</code> 修改为 <code>ALL</code> 。</li>\n<li>进入Wordpress后台选择自己喜欢的伪静态，并点击保存，自动生成 <code>.hatccess</code> 规则并复制，如下：  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220408174428359.png\" alt=\"image-20220408174428359\">  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">RewriteEngine On</span><br><span class=\"line\">RewriteRule .* - [E=HTTP_AUTHORIZATION:%&#123;HTTP:Authorization&#125;]</span><br><span class=\"line\">RewriteBase /</span><br><span class=\"line\">RewriteRule ^index\\.php$ - [L]</span><br><span class=\"line\">RewriteRule ^^unsubscribe-comment-mailnotice/?(.*)$ <span class=\"comment\">//wp-con&gt;</span></span><br><span class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class=\"line\">RewriteRule . /index.php [L]</span><br></pre></td></tr></table></figure>\n</li>\n<li>在刚刚的 <code>/var/www/</code> 目录下(即网站的根目录) 创建 <code>.hatccess</code> 文件  粘贴刚刚复制的规则代码并保存。</li>\n<li>重启服务器即可  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h5><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220408180040599.png\" alt=\"image-20220408180040599\"></p>\n<h4 id=\"Nginx1-19\"><a href=\"#Nginx1-19\" class=\"headerlink\" title=\"Nginx1.19\"></a>Nginx1.19</h4><blockquote>\n<p>本文是不在使用宝塔的情况下自行设定的, 有安装宝塔的请忽视</p>\n<p>环境：Raspi OS 64bit(Debian11) Wordpress5.9.2</p>\n</blockquote>\n<p>打开配置文件 <code>sudo vim /etc/nginx/sites-available/default</code> 如果wordpress安装在网站根目录，在server中添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;  </span><br><span class=\"line\">                if (!-e $request_filename) &#123;  </span><br><span class=\"line\">                rewrite (.*) /index.php;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">        &#125;  </span><br></pre></td></tr></table></figure>\n\n<p>如果wordpress安装在网站二级目录，在server中添加:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /二级目录/ &#123;  </span><br><span class=\"line\">                if (!-e $request_filename) &#123;  </span><br><span class=\"line\">                rewrite (.*) /cn/index.php;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>重启 <code>sudo /etc/init.d/ngnix restart</code> 在wordpress后台设置伪静态即可</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"设置Wordpress伪静态链接\"><a href=\"#设置Wordpress伪静态链接\" class=\"headerlink\" title=\"设置Wordpress伪静态链接\"></a>设置Wordpress伪静态链接</h3><h4 id=\"Apache2-4\"><a href=\"#Apache2-4\" class=\"headerlink\" title=\"Apache2.4\"></a>Apache2.4</h4><blockquote>\n<p>本文是不在使用宝塔的情况下自行设定的, 有安装宝塔的请忽视</p>\n<p>环境：Ubuntu20.04 Apache2.4 Wordpress5.9.2</p>\n</blockquote>\n<h5 id=\"重写规则\"><a href=\"#重写规则\" class=\"headerlink\" title=\"重写规则\"></a>重写规则</h5><ul>\n<li>开启重写规则  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2enmod rewrite</span><br></pre></td></tr></table></figure>\n</li>\n<li>设置根目录重定向","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure>\n  找到 <code>&lt;Directory /var/www/&gt;</code>  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220408175414794.png\" alt=\"image-20220408175414794\">  将<code>AllowOverride</code> 后的 <code>None</code> 修改为 <code>ALL</code> 。</li>\n<li>进入Wordpress后台选择自己喜欢的伪静态，并点击保存，自动生成 <code>.hatccess</code> 规则并复制，如下：  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220408174428359.png\" alt=\"image-20220408174428359\">  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">RewriteEngine On</span><br><span class=\"line\">RewriteRule .* - [E=HTTP_AUTHORIZATION:%&#123;HTTP:Authorization&#125;]</span><br><span class=\"line\">RewriteBase /</span><br><span class=\"line\">RewriteRule ^index\\.php$ - [L]</span><br><span class=\"line\">RewriteRule ^^unsubscribe-comment-mailnotice/?(.*)$ <span class=\"comment\">//wp-con&gt;</span></span><br><span class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class=\"line\">RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class=\"line\">RewriteRule . /index.php [L]</span><br></pre></td></tr></table></figure>\n</li>\n<li>在刚刚的 <code>/var/www/</code> 目录下(即网站的根目录) 创建 <code>.hatccess</code> 文件  粘贴刚刚复制的规则代码并保存。</li>\n<li>重启服务器即可  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h5><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220408180040599.png\" alt=\"image-20220408180040599\"></p>\n<h4 id=\"Nginx1-19\"><a href=\"#Nginx1-19\" class=\"headerlink\" title=\"Nginx1.19\"></a>Nginx1.19</h4><blockquote>\n<p>本文是不在使用宝塔的情况下自行设定的, 有安装宝塔的请忽视</p>\n<p>环境：Raspi OS 64bit(Debian11) Wordpress5.9.2</p>\n</blockquote>\n<p>打开配置文件 <code>sudo vim /etc/nginx/sites-available/default</code> 如果wordpress安装在网站根目录，在server中添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;  </span><br><span class=\"line\">                if (!-e $request_filename) &#123;  </span><br><span class=\"line\">                rewrite (.*) /index.php;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">        &#125;  </span><br></pre></td></tr></table></figure>\n\n<p>如果wordpress安装在网站二级目录，在server中添加:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /二级目录/ &#123;  </span><br><span class=\"line\">                if (!-e $request_filename) &#123;  </span><br><span class=\"line\">                rewrite (.*) /cn/index.php;  </span><br><span class=\"line\">                &#125;  </span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<p>重启 <code>sudo /etc/init.d/ngnix restart</code> 在wordpress后台设置伪静态即可</p>"},{"title":"Argon主题文档","id":"618","date":"2022-03-13T13:01:38.000Z","_content":"\n文档地址：[https://argon-docs.solstice23.top/#/](https://argon-docs.solstice23.top/#/)\n\n### 1、图标\n\n以下代码能实现下图中的效果\n\n```c\n<i class=\"fa fa-home\"></i> 首页\n<i class=\"fa fa-link\"></i> 友链\n<i class=\"fa fa-rss\"></i> RSS\n```\n\n首页 友链 RSS\n<!-- more -->\n请访问 [Font Awesome 4](https://fontawesome.com/v4/icons/ \"Font Awesome 4 \") 图标库自行查询对应的图标名。\n\n### 2、标签\n\n`[label 参数名=\"参数值\"]内容[/label]`\n\n```c\n方形\n[label]默认标签[/label]\n[label color=\"indigo\"]靛蓝标签[/label]\n[label color=\"blue\"]蓝色标签[/label]\n[label color=\"orange\"]橙色标签[/label]\n圆形\n[label color=\"indigo\" shape=\"round\"]靛蓝标签[/label]\n[label color=\"blue\" shape=\"round\"]蓝色标签[/label]\n[label color=\"orange\" shape=\"round\"]橙色标签[/label]\n```\n\n方形 \\[label\\]默认标签\\[/label\\] \\[label color=\"indigo\"\\]靛蓝标签\\[/label\\] \\[label color=\"blue\"\\]蓝色标签\\[/label\\] \\[label color=\"orange\"\\]橙色标签\\[/label\\] 圆形 \\[label color=\"indigo\" shape=\"round\"\\]靛蓝标签\\[/label\\] \\[label color=\"blue\" shape=\"round\"\\]蓝色标签\\[/label\\] \\[label color=\"orange\" shape=\"round\"\\]橙色标签\\[/label\\]\n\n### 3、进度条\n\n`[progressbar 参数名=\"参数值\"]进度条标签内容[/progressbar]` 标签内容可以不填写\n\n```c\n[progressbar progress=\"20\"]默认进度条[/progressbar]\n[progressbar progress=\"30\" color=\"indigo\"]靛蓝进度条[/progressbar]\n[progressbar progress=\"40\" color=\"green\"]绿色进度条[/progressbar]\n[progressbar progress=\"66\" color=\"red\"]红色进度条[/progressbar]\n[progressbar progress=\"80\" color=\"blue\"]蓝色进度条[/progressbar]\n[progressbar progress=\"100\" color=\"orange\"]橙色进度条[/progressbar] \n[progressbar progress=\"23\"][/progressbar]\n[progressbar]没有指明参数的进度条[/progressbar]\n[progressbar progress=\"66.66\"]小数进度条[/progressbar]\n```\n\n\\[progressbar progress=\"20\"\\]默认进度条\\[/progressbar\\] \\[progressbar progress=\"30\" color=\"indigo\"\\]靛蓝进度条\\[/progressbar\\] \\[progressbar progress=\"40\" color=\"green\"\\]绿色进度条\\[/progressbar\\] \\[progressbar progress=\"66\" color=\"red\"\\]红色进度条\\[/progressbar\\] \\[progressbar progress=\"80\" color=\"blue\"\\]蓝色进度条\\[/progressbar\\] \\[progressbar progress=\"100\" color=\"orange\"\\]橙色进度条\\[/progressbar\\] \\[progressbar progress=\"23\"\\]\\[/progressbar\\] \\[progressbar\\]没有指明参数的进度条\\[/progressbar\\] \\[progressbar progress=\"66.66\"\\]小数进度条\\[/progressbar\\]\n\n### 4、警告\n\n`[admonition 参数名=\"参数值\"]内容[/admonition]`\n\n```c\n[admonition]默认警告[/admonition]\n[admonition title=\"我是标题\" color=\"indigo\"]靛蓝警告[/admonition]\n[admonition title=\"我是标题\" color=\"green\"]绿色警告[/admonition]\n[admonition title=\"我是标题\" color=\"red\"]红色警告[/admonition]\n[admonition title=\"我是标题\" color=\"blue\"]蓝色警告[/admonition]\n[admonition title=\"我是标题\" color=\"orange\"]橙色警告[/admonition]\n[admonition title=\"我是标题\" color=\"black\"]黑色警告[/admonition]\n[admonition title=\"我是标题\" color=\"grey\"]灰色警告[/admonition]\n[admonition title=\"我是标题\" icon=\"flag\" color=\"indigo\"]带标题和图标的警告[/admonition]\n[admonition color=\"indigo\"]不带标题的警告[/admonition]\n[admonition title=\"只有标题的警告\" color=\"indigo\"][/admonition]\n[admonition title=\"只有标题和图标的警告\" icon=\"flag\" color=\"indigo\"][/admonition]\n```\n\n\\[admonition\\]默认警告\\[/admonition\\] \\[admonition title=\"我是标题\" color=\"indigo\"\\]靛蓝警告\\[/admonition\\] \\[admonition title=\"我是标题\" color=\"green\"\\]绿色警告\\[/admonition\\] \\[admonition title=\"我是标题\" color=\"red\"\\]红色警告\\[/admonition\\] \\[admonition title=\"我是标题\" color=\"blue\"\\]蓝色警告\\[/admonition\\] \\[admonition title=\"我是标题\" color=\"orange\"\\]橙色警告\\[/admonition\\] \\[admonition title=\"我是标题\" color=\"black\"\\]黑色警告\\[/admonition\\] \\[admonition title=\"我是标题\" color=\"grey\"\\]灰色警告\\[/admonition\\] \\[admonition title=\"我是标题\" icon=\"flag\" color=\"indigo\"\\]带标题和图标的警告\\[/admonition\\] \\[admonition color=\"indigo\"\\]不带标题的警告\\[/admonition\\] \\[admonition title=\"只有标题的警告\" color=\"indigo\"\\]\\[/admonition\\] \\[admonition title=\"只有标题和图标的警告\" icon=\"flag\" color=\"indigo\"\\]\\[/admonition\\]\n\n### 5、Github信息卡\n\n`[github 参数名=\"参数值\"][/github]`\n\n```c\n [github author=\"solstice23\" project=\"argon-theme\"][/github]\n```\n\n\\[github author=\"solstice23\" project=\"argon-theme\"\\]\\[/github\\]\n\n参数名\n\n可选值\n\n默认\n\n解释\n\n是否必须\n\nauthor\n\n字符串\n\n空\n\nRepo作者名\n\n是\n\ncolor\n\n字符串\n\n空\n\nRepo名\n\n是\n\nsize\n\nfull/mini\n\nfull\n\n尺寸\n\n否\n\ngetdata\n\nfrontend/backend\n\n前端/后端获取Reop信息\n\n否","source":"_posts/argon主题文档.md","raw":"---\ntitle: Argon主题文档\ntags: []\nid: '618'\ncategories:\n  - - 专业技术\ndate: 2022-03-13 21:01:38\n---\n\n文档地址：[https://argon-docs.solstice23.top/#/](https://argon-docs.solstice23.top/#/)\n\n### 1、图标\n\n以下代码能实现下图中的效果\n\n```c\n<i class=\"fa fa-home\"></i> 首页\n<i class=\"fa fa-link\"></i> 友链\n<i class=\"fa fa-rss\"></i> RSS\n```\n\n首页 友链 RSS\n<!-- more -->\n请访问 [Font Awesome 4](https://fontawesome.com/v4/icons/ \"Font Awesome 4 \") 图标库自行查询对应的图标名。\n\n### 2、标签\n\n`[label 参数名=\"参数值\"]内容[/label]`\n\n```c\n方形\n[label]默认标签[/label]\n[label color=\"indigo\"]靛蓝标签[/label]\n[label color=\"blue\"]蓝色标签[/label]\n[label color=\"orange\"]橙色标签[/label]\n圆形\n[label color=\"indigo\" shape=\"round\"]靛蓝标签[/label]\n[label color=\"blue\" shape=\"round\"]蓝色标签[/label]\n[label color=\"orange\" shape=\"round\"]橙色标签[/label]\n```\n\n方形 \\[label\\]默认标签\\[/label\\] \\[label color=\"indigo\"\\]靛蓝标签\\[/label\\] \\[label color=\"blue\"\\]蓝色标签\\[/label\\] \\[label color=\"orange\"\\]橙色标签\\[/label\\] 圆形 \\[label color=\"indigo\" shape=\"round\"\\]靛蓝标签\\[/label\\] \\[label color=\"blue\" shape=\"round\"\\]蓝色标签\\[/label\\] \\[label color=\"orange\" shape=\"round\"\\]橙色标签\\[/label\\]\n\n### 3、进度条\n\n`[progressbar 参数名=\"参数值\"]进度条标签内容[/progressbar]` 标签内容可以不填写\n\n```c\n[progressbar progress=\"20\"]默认进度条[/progressbar]\n[progressbar progress=\"30\" color=\"indigo\"]靛蓝进度条[/progressbar]\n[progressbar progress=\"40\" color=\"green\"]绿色进度条[/progressbar]\n[progressbar progress=\"66\" color=\"red\"]红色进度条[/progressbar]\n[progressbar progress=\"80\" color=\"blue\"]蓝色进度条[/progressbar]\n[progressbar progress=\"100\" color=\"orange\"]橙色进度条[/progressbar] \n[progressbar progress=\"23\"][/progressbar]\n[progressbar]没有指明参数的进度条[/progressbar]\n[progressbar progress=\"66.66\"]小数进度条[/progressbar]\n```\n\n\\[progressbar progress=\"20\"\\]默认进度条\\[/progressbar\\] \\[progressbar progress=\"30\" color=\"indigo\"\\]靛蓝进度条\\[/progressbar\\] \\[progressbar progress=\"40\" color=\"green\"\\]绿色进度条\\[/progressbar\\] \\[progressbar progress=\"66\" color=\"red\"\\]红色进度条\\[/progressbar\\] \\[progressbar progress=\"80\" color=\"blue\"\\]蓝色进度条\\[/progressbar\\] \\[progressbar progress=\"100\" color=\"orange\"\\]橙色进度条\\[/progressbar\\] \\[progressbar progress=\"23\"\\]\\[/progressbar\\] \\[progressbar\\]没有指明参数的进度条\\[/progressbar\\] \\[progressbar progress=\"66.66\"\\]小数进度条\\[/progressbar\\]\n\n### 4、警告\n\n`[admonition 参数名=\"参数值\"]内容[/admonition]`\n\n```c\n[admonition]默认警告[/admonition]\n[admonition title=\"我是标题\" color=\"indigo\"]靛蓝警告[/admonition]\n[admonition title=\"我是标题\" color=\"green\"]绿色警告[/admonition]\n[admonition title=\"我是标题\" color=\"red\"]红色警告[/admonition]\n[admonition title=\"我是标题\" color=\"blue\"]蓝色警告[/admonition]\n[admonition title=\"我是标题\" color=\"orange\"]橙色警告[/admonition]\n[admonition title=\"我是标题\" color=\"black\"]黑色警告[/admonition]\n[admonition title=\"我是标题\" color=\"grey\"]灰色警告[/admonition]\n[admonition title=\"我是标题\" icon=\"flag\" color=\"indigo\"]带标题和图标的警告[/admonition]\n[admonition color=\"indigo\"]不带标题的警告[/admonition]\n[admonition title=\"只有标题的警告\" color=\"indigo\"][/admonition]\n[admonition title=\"只有标题和图标的警告\" icon=\"flag\" color=\"indigo\"][/admonition]\n```\n\n\\[admonition\\]默认警告\\[/admonition\\] \\[admonition title=\"我是标题\" color=\"indigo\"\\]靛蓝警告\\[/admonition\\] \\[admonition title=\"我是标题\" color=\"green\"\\]绿色警告\\[/admonition\\] \\[admonition title=\"我是标题\" color=\"red\"\\]红色警告\\[/admonition\\] \\[admonition title=\"我是标题\" color=\"blue\"\\]蓝色警告\\[/admonition\\] \\[admonition title=\"我是标题\" color=\"orange\"\\]橙色警告\\[/admonition\\] \\[admonition title=\"我是标题\" color=\"black\"\\]黑色警告\\[/admonition\\] \\[admonition title=\"我是标题\" color=\"grey\"\\]灰色警告\\[/admonition\\] \\[admonition title=\"我是标题\" icon=\"flag\" color=\"indigo\"\\]带标题和图标的警告\\[/admonition\\] \\[admonition color=\"indigo\"\\]不带标题的警告\\[/admonition\\] \\[admonition title=\"只有标题的警告\" color=\"indigo\"\\]\\[/admonition\\] \\[admonition title=\"只有标题和图标的警告\" icon=\"flag\" color=\"indigo\"\\]\\[/admonition\\]\n\n### 5、Github信息卡\n\n`[github 参数名=\"参数值\"][/github]`\n\n```c\n [github author=\"solstice23\" project=\"argon-theme\"][/github]\n```\n\n\\[github author=\"solstice23\" project=\"argon-theme\"\\]\\[/github\\]\n\n参数名\n\n可选值\n\n默认\n\n解释\n\n是否必须\n\nauthor\n\n字符串\n\n空\n\nRepo作者名\n\n是\n\ncolor\n\n字符串\n\n空\n\nRepo名\n\n是\n\nsize\n\nfull/mini\n\nfull\n\n尺寸\n\n否\n\ngetdata\n\nfrontend/backend\n\n前端/后端获取Reop信息\n\n否","slug":"argon主题文档","published":1,"updated":"2024-03-12T02:24:18.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltnrar3q0006jry1e8cl66qx","content":"<p>文档地址：<a href=\"https://argon-docs.solstice23.top/#/\">https://argon-docs.solstice23.top/#/</a></p>\n<h3 id=\"1、图标\"><a href=\"#1、图标\" class=\"headerlink\" title=\"1、图标\"></a>1、图标</h3><p>以下代码能实现下图中的效果</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;i <span class=\"class\"><span class=\"keyword\">class</span>=</span><span class=\"string\">&quot;fa fa-home&quot;</span>&gt;&lt;/i&gt; 首页</span><br><span class=\"line\">&lt;i <span class=\"class\"><span class=\"keyword\">class</span>=</span><span class=\"string\">&quot;fa fa-link&quot;</span>&gt;&lt;/i&gt; 友链</span><br><span class=\"line\">&lt;i <span class=\"class\"><span class=\"keyword\">class</span>=</span><span class=\"string\">&quot;fa fa-rss&quot;</span>&gt;&lt;/i&gt; RSS</span><br></pre></td></tr></table></figure>\n\n<p>首页 友链 RSS</p>\n<span id=\"more\"></span>\n<p>请访问 <a href=\"https://fontawesome.com/v4/icons/\" title=\"Font Awesome 4 \">Font Awesome 4</a> 图标库自行查询对应的图标名。</p>\n<h3 id=\"2、标签\"><a href=\"#2、标签\" class=\"headerlink\" title=\"2、标签\"></a>2、标签</h3><p><code>[label 参数名=&quot;参数值&quot;]内容[/label]</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方形</span><br><span class=\"line\">[label]默认标签[/label]</span><br><span class=\"line\">[label color=<span class=\"string\">&quot;indigo&quot;</span>]靛蓝标签[/label]</span><br><span class=\"line\">[label color=<span class=\"string\">&quot;blue&quot;</span>]蓝色标签[/label]</span><br><span class=\"line\">[label color=<span class=\"string\">&quot;orange&quot;</span>]橙色标签[/label]</span><br><span class=\"line\">圆形</span><br><span class=\"line\">[label color=<span class=\"string\">&quot;indigo&quot;</span> shape=<span class=\"string\">&quot;round&quot;</span>]靛蓝标签[/label]</span><br><span class=\"line\">[label color=<span class=\"string\">&quot;blue&quot;</span> shape=<span class=\"string\">&quot;round&quot;</span>]蓝色标签[/label]</span><br><span class=\"line\">[label color=<span class=\"string\">&quot;orange&quot;</span> shape=<span class=\"string\">&quot;round&quot;</span>]橙色标签[/label]</span><br></pre></td></tr></table></figure>\n\n<p>方形 [label]默认标签[/label] [label color=”indigo”]靛蓝标签[/label] [label color=”blue”]蓝色标签[/label] [label color=”orange”]橙色标签[/label] 圆形 [label color=”indigo” shape=”round”]靛蓝标签[/label] [label color=”blue” shape=”round”]蓝色标签[/label] [label color=”orange” shape=”round”]橙色标签[/label]</p>\n<h3 id=\"3、进度条\"><a href=\"#3、进度条\" class=\"headerlink\" title=\"3、进度条\"></a>3、进度条</h3><p><code>[progressbar 参数名=&quot;参数值&quot;]进度条标签内容[/progressbar]</code> 标签内容可以不填写</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[progressbar progress=<span class=\"string\">&quot;20&quot;</span>]默认进度条[/progressbar]</span><br><span class=\"line\">[progressbar progress=<span class=\"string\">&quot;30&quot;</span> color=<span class=\"string\">&quot;indigo&quot;</span>]靛蓝进度条[/progressbar]</span><br><span class=\"line\">[progressbar progress=<span class=\"string\">&quot;40&quot;</span> color=<span class=\"string\">&quot;green&quot;</span>]绿色进度条[/progressbar]</span><br><span class=\"line\">[progressbar progress=<span class=\"string\">&quot;66&quot;</span> color=<span class=\"string\">&quot;red&quot;</span>]红色进度条[/progressbar]</span><br><span class=\"line\">[progressbar progress=<span class=\"string\">&quot;80&quot;</span> color=<span class=\"string\">&quot;blue&quot;</span>]蓝色进度条[/progressbar]</span><br><span class=\"line\">[progressbar progress=<span class=\"string\">&quot;100&quot;</span> color=<span class=\"string\">&quot;orange&quot;</span>]橙色进度条[/progressbar] </span><br><span class=\"line\">[progressbar progress=<span class=\"string\">&quot;23&quot;</span>][/progressbar]</span><br><span class=\"line\">[progressbar]没有指明参数的进度条[/progressbar]</span><br><span class=\"line\">[progressbar progress=<span class=\"string\">&quot;66.66&quot;</span>]小数进度条[/progressbar]</span><br></pre></td></tr></table></figure>\n\n<p>[progressbar progress=”20”]默认进度条[/progressbar] [progressbar progress=”30” color=”indigo”]靛蓝进度条[/progressbar] [progressbar progress=”40” color=”green”]绿色进度条[/progressbar] [progressbar progress=”66” color=”red”]红色进度条[/progressbar] [progressbar progress=”80” color=”blue”]蓝色进度条[/progressbar] [progressbar progress=”100” color=”orange”]橙色进度条[/progressbar] [progressbar progress=”23”][/progressbar] [progressbar]没有指明参数的进度条[/progressbar] [progressbar progress=”66.66”]小数进度条[/progressbar]</p>\n<h3 id=\"4、警告\"><a href=\"#4、警告\" class=\"headerlink\" title=\"4、警告\"></a>4、警告</h3><p><code>[admonition 参数名=&quot;参数值&quot;]内容[/admonition]</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[admonition]默认警告[/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;我是标题&quot;</span> color=<span class=\"string\">&quot;indigo&quot;</span>]靛蓝警告[/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;我是标题&quot;</span> color=<span class=\"string\">&quot;green&quot;</span>]绿色警告[/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;我是标题&quot;</span> color=<span class=\"string\">&quot;red&quot;</span>]红色警告[/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;我是标题&quot;</span> color=<span class=\"string\">&quot;blue&quot;</span>]蓝色警告[/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;我是标题&quot;</span> color=<span class=\"string\">&quot;orange&quot;</span>]橙色警告[/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;我是标题&quot;</span> color=<span class=\"string\">&quot;black&quot;</span>]黑色警告[/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;我是标题&quot;</span> color=<span class=\"string\">&quot;grey&quot;</span>]灰色警告[/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;我是标题&quot;</span> icon=<span class=\"string\">&quot;flag&quot;</span> color=<span class=\"string\">&quot;indigo&quot;</span>]带标题和图标的警告[/admonition]</span><br><span class=\"line\">[admonition color=<span class=\"string\">&quot;indigo&quot;</span>]不带标题的警告[/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;只有标题的警告&quot;</span> color=<span class=\"string\">&quot;indigo&quot;</span>][/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;只有标题和图标的警告&quot;</span> icon=<span class=\"string\">&quot;flag&quot;</span> color=<span class=\"string\">&quot;indigo&quot;</span>][/admonition]</span><br></pre></td></tr></table></figure>\n\n<p>[admonition]默认警告[/admonition] [admonition title=”我是标题” color=”indigo”]靛蓝警告[/admonition] [admonition title=”我是标题” color=”green”]绿色警告[/admonition] [admonition title=”我是标题” color=”red”]红色警告[/admonition] [admonition title=”我是标题” color=”blue”]蓝色警告[/admonition] [admonition title=”我是标题” color=”orange”]橙色警告[/admonition] [admonition title=”我是标题” color=”black”]黑色警告[/admonition] [admonition title=”我是标题” color=”grey”]灰色警告[/admonition] [admonition title=”我是标题” icon=”flag” color=”indigo”]带标题和图标的警告[/admonition] [admonition color=”indigo”]不带标题的警告[/admonition] [admonition title=”只有标题的警告” color=”indigo”][/admonition] [admonition title=”只有标题和图标的警告” icon=”flag” color=”indigo”][/admonition]</p>\n<h3 id=\"5、Github信息卡\"><a href=\"#5、Github信息卡\" class=\"headerlink\" title=\"5、Github信息卡\"></a>5、Github信息卡</h3><p><code>[github 参数名=&quot;参数值&quot;][/github]</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[github author=<span class=\"string\">&quot;solstice23&quot;</span> project=<span class=\"string\">&quot;argon-theme&quot;</span>][/github]</span><br></pre></td></tr></table></figure>\n\n<p>[github author=”solstice23” project=”argon-theme”][/github]</p>\n<p>参数名</p>\n<p>可选值</p>\n<p>默认</p>\n<p>解释</p>\n<p>是否必须</p>\n<p>author</p>\n<p>字符串</p>\n<p>空</p>\n<p>Repo作者名</p>\n<p>是</p>\n<p>color</p>\n<p>字符串</p>\n<p>空</p>\n<p>Repo名</p>\n<p>是</p>\n<p>size</p>\n<p>full/mini</p>\n<p>full</p>\n<p>尺寸</p>\n<p>否</p>\n<p>getdata</p>\n<p>frontend/backend</p>\n<p>前端/后端获取Reop信息</p>\n<p>否</p>\n","site":{"data":{}},"excerpt":"<p>文档地址：<a href=\"https://argon-docs.solstice23.top/#/\">https://argon-docs.solstice23.top/#/</a></p>\n<h3 id=\"1、图标\"><a href=\"#1、图标\" class=\"headerlink\" title=\"1、图标\"></a>1、图标</h3><p>以下代码能实现下图中的效果</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;i <span class=\"class\"><span class=\"keyword\">class</span>=</span><span class=\"string\">&quot;fa fa-home&quot;</span>&gt;&lt;/i&gt; 首页</span><br><span class=\"line\">&lt;i <span class=\"class\"><span class=\"keyword\">class</span>=</span><span class=\"string\">&quot;fa fa-link&quot;</span>&gt;&lt;/i&gt; 友链</span><br><span class=\"line\">&lt;i <span class=\"class\"><span class=\"keyword\">class</span>=</span><span class=\"string\">&quot;fa fa-rss&quot;</span>&gt;&lt;/i&gt; RSS</span><br></pre></td></tr></table></figure>\n\n<p>首页 友链 RSS</p>","more":"<p>请访问 <a href=\"https://fontawesome.com/v4/icons/\" title=\"Font Awesome 4 \">Font Awesome 4</a> 图标库自行查询对应的图标名。</p>\n<h3 id=\"2、标签\"><a href=\"#2、标签\" class=\"headerlink\" title=\"2、标签\"></a>2、标签</h3><p><code>[label 参数名=&quot;参数值&quot;]内容[/label]</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">方形</span><br><span class=\"line\">[label]默认标签[/label]</span><br><span class=\"line\">[label color=<span class=\"string\">&quot;indigo&quot;</span>]靛蓝标签[/label]</span><br><span class=\"line\">[label color=<span class=\"string\">&quot;blue&quot;</span>]蓝色标签[/label]</span><br><span class=\"line\">[label color=<span class=\"string\">&quot;orange&quot;</span>]橙色标签[/label]</span><br><span class=\"line\">圆形</span><br><span class=\"line\">[label color=<span class=\"string\">&quot;indigo&quot;</span> shape=<span class=\"string\">&quot;round&quot;</span>]靛蓝标签[/label]</span><br><span class=\"line\">[label color=<span class=\"string\">&quot;blue&quot;</span> shape=<span class=\"string\">&quot;round&quot;</span>]蓝色标签[/label]</span><br><span class=\"line\">[label color=<span class=\"string\">&quot;orange&quot;</span> shape=<span class=\"string\">&quot;round&quot;</span>]橙色标签[/label]</span><br></pre></td></tr></table></figure>\n\n<p>方形 [label]默认标签[/label] [label color=”indigo”]靛蓝标签[/label] [label color=”blue”]蓝色标签[/label] [label color=”orange”]橙色标签[/label] 圆形 [label color=”indigo” shape=”round”]靛蓝标签[/label] [label color=”blue” shape=”round”]蓝色标签[/label] [label color=”orange” shape=”round”]橙色标签[/label]</p>\n<h3 id=\"3、进度条\"><a href=\"#3、进度条\" class=\"headerlink\" title=\"3、进度条\"></a>3、进度条</h3><p><code>[progressbar 参数名=&quot;参数值&quot;]进度条标签内容[/progressbar]</code> 标签内容可以不填写</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[progressbar progress=<span class=\"string\">&quot;20&quot;</span>]默认进度条[/progressbar]</span><br><span class=\"line\">[progressbar progress=<span class=\"string\">&quot;30&quot;</span> color=<span class=\"string\">&quot;indigo&quot;</span>]靛蓝进度条[/progressbar]</span><br><span class=\"line\">[progressbar progress=<span class=\"string\">&quot;40&quot;</span> color=<span class=\"string\">&quot;green&quot;</span>]绿色进度条[/progressbar]</span><br><span class=\"line\">[progressbar progress=<span class=\"string\">&quot;66&quot;</span> color=<span class=\"string\">&quot;red&quot;</span>]红色进度条[/progressbar]</span><br><span class=\"line\">[progressbar progress=<span class=\"string\">&quot;80&quot;</span> color=<span class=\"string\">&quot;blue&quot;</span>]蓝色进度条[/progressbar]</span><br><span class=\"line\">[progressbar progress=<span class=\"string\">&quot;100&quot;</span> color=<span class=\"string\">&quot;orange&quot;</span>]橙色进度条[/progressbar] </span><br><span class=\"line\">[progressbar progress=<span class=\"string\">&quot;23&quot;</span>][/progressbar]</span><br><span class=\"line\">[progressbar]没有指明参数的进度条[/progressbar]</span><br><span class=\"line\">[progressbar progress=<span class=\"string\">&quot;66.66&quot;</span>]小数进度条[/progressbar]</span><br></pre></td></tr></table></figure>\n\n<p>[progressbar progress=”20”]默认进度条[/progressbar] [progressbar progress=”30” color=”indigo”]靛蓝进度条[/progressbar] [progressbar progress=”40” color=”green”]绿色进度条[/progressbar] [progressbar progress=”66” color=”red”]红色进度条[/progressbar] [progressbar progress=”80” color=”blue”]蓝色进度条[/progressbar] [progressbar progress=”100” color=”orange”]橙色进度条[/progressbar] [progressbar progress=”23”][/progressbar] [progressbar]没有指明参数的进度条[/progressbar] [progressbar progress=”66.66”]小数进度条[/progressbar]</p>\n<h3 id=\"4、警告\"><a href=\"#4、警告\" class=\"headerlink\" title=\"4、警告\"></a>4、警告</h3><p><code>[admonition 参数名=&quot;参数值&quot;]内容[/admonition]</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[admonition]默认警告[/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;我是标题&quot;</span> color=<span class=\"string\">&quot;indigo&quot;</span>]靛蓝警告[/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;我是标题&quot;</span> color=<span class=\"string\">&quot;green&quot;</span>]绿色警告[/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;我是标题&quot;</span> color=<span class=\"string\">&quot;red&quot;</span>]红色警告[/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;我是标题&quot;</span> color=<span class=\"string\">&quot;blue&quot;</span>]蓝色警告[/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;我是标题&quot;</span> color=<span class=\"string\">&quot;orange&quot;</span>]橙色警告[/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;我是标题&quot;</span> color=<span class=\"string\">&quot;black&quot;</span>]黑色警告[/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;我是标题&quot;</span> color=<span class=\"string\">&quot;grey&quot;</span>]灰色警告[/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;我是标题&quot;</span> icon=<span class=\"string\">&quot;flag&quot;</span> color=<span class=\"string\">&quot;indigo&quot;</span>]带标题和图标的警告[/admonition]</span><br><span class=\"line\">[admonition color=<span class=\"string\">&quot;indigo&quot;</span>]不带标题的警告[/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;只有标题的警告&quot;</span> color=<span class=\"string\">&quot;indigo&quot;</span>][/admonition]</span><br><span class=\"line\">[admonition title=<span class=\"string\">&quot;只有标题和图标的警告&quot;</span> icon=<span class=\"string\">&quot;flag&quot;</span> color=<span class=\"string\">&quot;indigo&quot;</span>][/admonition]</span><br></pre></td></tr></table></figure>\n\n<p>[admonition]默认警告[/admonition] [admonition title=”我是标题” color=”indigo”]靛蓝警告[/admonition] [admonition title=”我是标题” color=”green”]绿色警告[/admonition] [admonition title=”我是标题” color=”red”]红色警告[/admonition] [admonition title=”我是标题” color=”blue”]蓝色警告[/admonition] [admonition title=”我是标题” color=”orange”]橙色警告[/admonition] [admonition title=”我是标题” color=”black”]黑色警告[/admonition] [admonition title=”我是标题” color=”grey”]灰色警告[/admonition] [admonition title=”我是标题” icon=”flag” color=”indigo”]带标题和图标的警告[/admonition] [admonition color=”indigo”]不带标题的警告[/admonition] [admonition title=”只有标题的警告” color=”indigo”][/admonition] [admonition title=”只有标题和图标的警告” icon=”flag” color=”indigo”][/admonition]</p>\n<h3 id=\"5、Github信息卡\"><a href=\"#5、Github信息卡\" class=\"headerlink\" title=\"5、Github信息卡\"></a>5、Github信息卡</h3><p><code>[github 参数名=&quot;参数值&quot;][/github]</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[github author=<span class=\"string\">&quot;solstice23&quot;</span> project=<span class=\"string\">&quot;argon-theme&quot;</span>][/github]</span><br></pre></td></tr></table></figure>\n\n<p>[github author=”solstice23” project=”argon-theme”][/github]</p>\n<p>参数名</p>\n<p>可选值</p>\n<p>默认</p>\n<p>解释</p>\n<p>是否必须</p>\n<p>author</p>\n<p>字符串</p>\n<p>空</p>\n<p>Repo作者名</p>\n<p>是</p>\n<p>color</p>\n<p>字符串</p>\n<p>空</p>\n<p>Repo名</p>\n<p>是</p>\n<p>size</p>\n<p>full/mini</p>\n<p>full</p>\n<p>尺寸</p>\n<p>否</p>\n<p>getdata</p>\n<p>frontend/backend</p>\n<p>前端/后端获取Reop信息</p>\n<p>否</p>"},{"title":"GitHub三种方法加速访问","id":"1055","date":"2022-05-05T16:57:34.000Z","_content":"\n## 一、镜像网站(不推荐)\n\n这里提供两个最常用的镜像地址：\n\n*   [https://github.com.cnpmjs.org](https://github.com.cnpmjs.org)\n*   [https://hub.fastgit.org](https://hub.fastgit.org/)\n*   [GitHub: Where the world builds software · GitHub (fastgit.xyz)](https://hub.fastgit.xyz/)\n\n有时候并不生效，依然被q，而且镜像网站随时可能跑路\n\n## 二、修改hosts文件(安全、快速、不稳定)\n\n关于`hosts`文件：`hosts` 文件本来是用来**提高解析效率**。 在进行 DNS 请求以前，系统会先检查自己的 `hosts` 文件中是否有这个地址映射关系，如果有则调用这个 IP 地址映射，如果没有再向已知的 DNS 服务器提出域名解析。\n\n也就是 `hosts`\\> `DNS`\n<!-- more -->\n1.  找到hosts文件\n    \n    `hosts`文件在不同操作系统中的存放路径：\n    \n    **Windows系统：**\n    \n    > C:\\\\Windows\\\\System32\\\\drivers\\\\etc\n    \n    ![image-20220505235444028](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220505235444028.png)\n    \n    **Mac OS、Linux及其它类Unix系统：**\n    \n    > /etc/\n    \n    **Android系统：**\n    \n    > /system/etc/\n    \n2.  添加域名解析\n    \n    在`hosts`文件末尾添加上以下内容：\n    \n\n```python\n   # GitHub Start\n140.82.113.25                 alive.github.com\n140.82.114.26                 live.github.com\n185.199.108.154               github.githubassets.com\n140.82.114.21                 central.github.com\n185.199.108.133               desktop.githubusercontent.com\n185.199.108.153               assets-cdn.github.com\n185.199.108.133               camo.githubusercontent.com\n185.199.108.133               github.map.fastly.net\n199.232.69.194                github.global.ssl.fastly.net\n140.82.113.3                  gist.github.com\n185.199.108.153               github.io\n140.82.114.3                  github.com\n192.0.66.2                    github.blog\n140.82.114.6                  api.github.com\n185.199.108.133               raw.githubusercontent.com\n185.199.108.133               user-images.githubusercontent.com\n185.199.108.133               favicons.githubusercontent.com\n185.199.108.133               avatars5.githubusercontent.com\n185.199.108.133               avatars4.githubusercontent.com\n185.199.108.133               avatars3.githubusercontent.com\n185.199.108.133               avatars2.githubusercontent.com\n185.199.108.133               avatars1.githubusercontent.com\n185.199.108.133               avatars0.githubusercontent.com\n185.199.108.133               avatars.githubusercontent.com\n140.82.113.9                  codeload.github.com\n52.216.137.116                github-cloud.s3.amazonaws.com\n52.217.203.169                github-com.s3.amazonaws.com\n52.217.105.68                 github-production-release-asset-2e65be.s3.amazonaws.com\n52.217.203.169                github-production-user-asset-6210df.s3.amazonaws.com\n52.216.241.132                github-production-repository-file-5c1aeb.s3.amazonaws.com\n185.199.108.153               githubstatus.com\n64.71.144.211                 github.community\n40.68.78.177                  github.dev\n140.82.113.21                 collector.github.com\n13.107.42.16                   pipelines.actions.githubusercontent.com\n185.199.108.133               media.githubusercontent.com\n185.199.108.133               cloud.githubusercontent.com\n185.199.108.133               objects.githubusercontent.com\n # GitHub End\n```\n\n**注意**：这些ip可能会发生改变，具体可自行百度搜索相关ip信息，该记录我使用了半年之久都有效。\n\n3.  刷新DNS缓存使之生效：\n    \n    Windows系统在cmd命令行中执行命令：\n    \n    ```sh\n    ipconfig/flushdns\n    ```\n    \n    ![image-20220505235658796](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220505235658796.png)\n    \n    Linux等系统一般修改后都即刻生效。\n    \n4.  Github查看效果\n    \n5.  总结\n    \n    这种方法其实也不稳定，大部分时候是能正常快速访问，我也用了一年左右，但是还是会有时不时被墙。个人更喜欢这个~\n    \n\n## 三、代理(稳定高速、部分收费)\n\n在这里我只是介绍一个使用代理服务快速访问github的方法，由该方法导致任何的后果概不负责。\n\n有很多种方式加速访问github，听过的就有stream++、epic++、XXXX等，自行百度吧。在这里我介绍使用github上的一个项目[Fastgithub](https://github.com/dotnetcore/FastGithub)来加速访问github，特点：免费高效、开源。\n\n1.  其实github上面就有很详细的教程，我只是复制一遍，方便目前还访问不了的人，以下是原文档，如有侵权请联系我删除：\n    \n    > #### 2.1 windows-x64桌面\n    > \n    > *   双击运行FastGithub.UI.exe\n    > \n    > #### 2.2 windows-x64服务\n    > \n    > *   `fastgithub.exe start` // 以windows服务安装并启动\n    > *   `fastgithub.exe stop` // 以windows服务卸载并删除\n    > \n    > #### 2.3 linux-x64终端\n    > \n    > *   `sudo ./fastgithub`\n    > *   设置系统自动代理为`http://127.0.0.1:38457`，或手动代理http/https为`127.0.0.1:38457`\n    > \n    > #### 2.4 linux-x64服务\n    > \n    > *   `sudo ./fastgithub start` // 以systemd服务安装并启动\n    > *   `sudo ./fastgithub stop` // 以systemd服务卸载并删除\n    > *   设置系统自动代理为`http://127.0.0.1:38457`，或手动代理http/https为`127.0.0.1:38457`\n    > \n    > #### 2.5 macOS-x64\n    > \n    > *   双击运行fastgithub\n    > *   安装cacert/fastgithub.cer并设置信任\n    > *   设置系统自动代理为`http://127.0.0.1:38457`，或手动代理http/https为`127.0.0.1:38457`\n    > *   [具体配置详情](https://github.com/dotnetcore/FastGithub/blob/master/MacOSXConfig.md)\n    > \n    > #### 2.6 docker-compose一键部署\n    > \n    > *   准备好docker 18.09, docker-compose.\n    > *   在源码目录下，有一个docker-compose.yaml 文件，专用于在实际项目中，临时使用github.com源码，而做的demo配置。\n    > *   根据自己的需要更新docker-compose.yaml中的sample和build镜像即可完成拉github.com源码加速，并基于源码做后续的操作。\n    > \n    > ### 3 软件功能\n    > \n    > *   提供域名的纯净IP解析；\n    > *   提供IP测速并选择最快的IP；\n    > *   提供域名的tls连接自定义配置；\n    > *   google的CDN资源替换，解决大量国外网站无法加载js和css的问题；\n    > \n    > ### 4 证书验证\n    > \n    > #### 4.1 git\n    > \n    > git操作提示`SSL certificate problem` 需要关闭git的证书验证：`git config --global http.sslverify false`\n    > \n    > #### 4.2 firefox\n    > \n    > firefox提示`连接有潜在的安全问题` 设置->隐私与安全->证书->查看证书->证书颁发机构，导入cacert/fastgithub.cer，勾选“信任由此证书颁发机构来标识网站”\n    > \n    > ### 5 安全性说明\n    > \n    > FastGithub为每台不同的主机生成自颁发CA证书，保存在cacert文件夹下。客户端设备需要安装和无条件信任自颁发的CA证书，请不要将证书私钥泄露给他人，以免造成损失。\n    > \n    > ### 6 合法性说明\n    > \n    > 《国际联网暂行规定》第六条规定：“计算机信息网络直接进行国际联网，必须使用邮电部国家公用电信网提供的国际出入口信道。任何单位和个人不得自行建立或者使用其他信道进行国际联网。” FastGithub本地代理使用的都是“公用电信网提供的国际出入口信道”，从国外Github服务器到国内用户电脑上FastGithub程序的流量，使用的是正常流量通道，其间未对流量进行任何额外加密（仅有网页原有的TLS加密，区别于VPN的流量加密），而FastGithub获取到网页数据之后发生的整个代理过程完全在国内，不再适用国际互联网相关之规定。\n    \n2.  下载文件\n    \n    这是总的下载链接：[https://github.com/dotnetcore/FastGithub/releases/latest](https://github.com/dotnetcore/FastGithub/releases/latest)\n    \n    截止到2022年5月6号最新的版本：\n    \n    [fastgithub\\_linux-arm64.zip](https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_linux-arm64.zip)\n    \n    [fastgithub\\_linux-x64.zip](https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_linux-x64.zip)\n    \n    [fastgithub\\_osx-arm64.zip](https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_osx-arm64.zip)\n    \n    [fastgithub\\_osx-x64.zip](https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_osx-x64.zip)\n    \n    [fastgithub\\_win-x64.zip](https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_win-x64.zip)\n    \n    对于下载慢的可以试着用[github文件下载加速网站](https://www.baidu.com/s?wd=github%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99)进行下载，这里推荐几个当前可用的加速下载网站\n    \n    [https://gh.api.99988866.xyz](https://gh.api.99988866.xyz)\n    \n    [https://ghproxy.com/](https://ghproxy.com/)\n    \n    [https://toolwa.com/github/](https://toolwa.com/github/)\n    \n3.  运行解压后的文件，以我的Windows10 64位系统为例\n    \n    选择任意一个.exe运行程序运行即可\n    \n    ![image-20220506003759569](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220506003759569.png)我运行`fastgithub.exe`的截图![image-20220506003935842](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220506003935842.png)\n    \n\n接下来进入github的大门吧\n\n## ![image-20220506004312524](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220506004312524.png)\n\n#### 题外话：\n\ngithub被 ‘半墙’是很让人恼火的，有时候PC访问不了，但是移动端又稳定得一批（没改hosts、没开代理）不管怎样，上面有很多很好地项目源码，我们学习离不开它。不过最近github上面开始出现了一些zz因素、传教等等，我们有义务保持理性的态度去面对，也不知道哪一天github也参与zz中来，搞的我们的项目代码不能正常使用。（本人开始试试自己搭建属于自己的git服务了，比如gitlab好像是不错的选择，后期更新看看）","source":"_posts/github三种方法加速访问.md","raw":"---\ntitle: GitHub三种方法加速访问\ntags:\n  - 分享\nid: '1055'\ncategories:\n  - - 学习笔记\ndate: 2022-05-06 00:57:34\n---\n\n## 一、镜像网站(不推荐)\n\n这里提供两个最常用的镜像地址：\n\n*   [https://github.com.cnpmjs.org](https://github.com.cnpmjs.org)\n*   [https://hub.fastgit.org](https://hub.fastgit.org/)\n*   [GitHub: Where the world builds software · GitHub (fastgit.xyz)](https://hub.fastgit.xyz/)\n\n有时候并不生效，依然被q，而且镜像网站随时可能跑路\n\n## 二、修改hosts文件(安全、快速、不稳定)\n\n关于`hosts`文件：`hosts` 文件本来是用来**提高解析效率**。 在进行 DNS 请求以前，系统会先检查自己的 `hosts` 文件中是否有这个地址映射关系，如果有则调用这个 IP 地址映射，如果没有再向已知的 DNS 服务器提出域名解析。\n\n也就是 `hosts`\\> `DNS`\n<!-- more -->\n1.  找到hosts文件\n    \n    `hosts`文件在不同操作系统中的存放路径：\n    \n    **Windows系统：**\n    \n    > C:\\\\Windows\\\\System32\\\\drivers\\\\etc\n    \n    ![image-20220505235444028](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220505235444028.png)\n    \n    **Mac OS、Linux及其它类Unix系统：**\n    \n    > /etc/\n    \n    **Android系统：**\n    \n    > /system/etc/\n    \n2.  添加域名解析\n    \n    在`hosts`文件末尾添加上以下内容：\n    \n\n```python\n   # GitHub Start\n140.82.113.25                 alive.github.com\n140.82.114.26                 live.github.com\n185.199.108.154               github.githubassets.com\n140.82.114.21                 central.github.com\n185.199.108.133               desktop.githubusercontent.com\n185.199.108.153               assets-cdn.github.com\n185.199.108.133               camo.githubusercontent.com\n185.199.108.133               github.map.fastly.net\n199.232.69.194                github.global.ssl.fastly.net\n140.82.113.3                  gist.github.com\n185.199.108.153               github.io\n140.82.114.3                  github.com\n192.0.66.2                    github.blog\n140.82.114.6                  api.github.com\n185.199.108.133               raw.githubusercontent.com\n185.199.108.133               user-images.githubusercontent.com\n185.199.108.133               favicons.githubusercontent.com\n185.199.108.133               avatars5.githubusercontent.com\n185.199.108.133               avatars4.githubusercontent.com\n185.199.108.133               avatars3.githubusercontent.com\n185.199.108.133               avatars2.githubusercontent.com\n185.199.108.133               avatars1.githubusercontent.com\n185.199.108.133               avatars0.githubusercontent.com\n185.199.108.133               avatars.githubusercontent.com\n140.82.113.9                  codeload.github.com\n52.216.137.116                github-cloud.s3.amazonaws.com\n52.217.203.169                github-com.s3.amazonaws.com\n52.217.105.68                 github-production-release-asset-2e65be.s3.amazonaws.com\n52.217.203.169                github-production-user-asset-6210df.s3.amazonaws.com\n52.216.241.132                github-production-repository-file-5c1aeb.s3.amazonaws.com\n185.199.108.153               githubstatus.com\n64.71.144.211                 github.community\n40.68.78.177                  github.dev\n140.82.113.21                 collector.github.com\n13.107.42.16                   pipelines.actions.githubusercontent.com\n185.199.108.133               media.githubusercontent.com\n185.199.108.133               cloud.githubusercontent.com\n185.199.108.133               objects.githubusercontent.com\n # GitHub End\n```\n\n**注意**：这些ip可能会发生改变，具体可自行百度搜索相关ip信息，该记录我使用了半年之久都有效。\n\n3.  刷新DNS缓存使之生效：\n    \n    Windows系统在cmd命令行中执行命令：\n    \n    ```sh\n    ipconfig/flushdns\n    ```\n    \n    ![image-20220505235658796](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220505235658796.png)\n    \n    Linux等系统一般修改后都即刻生效。\n    \n4.  Github查看效果\n    \n5.  总结\n    \n    这种方法其实也不稳定，大部分时候是能正常快速访问，我也用了一年左右，但是还是会有时不时被墙。个人更喜欢这个~\n    \n\n## 三、代理(稳定高速、部分收费)\n\n在这里我只是介绍一个使用代理服务快速访问github的方法，由该方法导致任何的后果概不负责。\n\n有很多种方式加速访问github，听过的就有stream++、epic++、XXXX等，自行百度吧。在这里我介绍使用github上的一个项目[Fastgithub](https://github.com/dotnetcore/FastGithub)来加速访问github，特点：免费高效、开源。\n\n1.  其实github上面就有很详细的教程，我只是复制一遍，方便目前还访问不了的人，以下是原文档，如有侵权请联系我删除：\n    \n    > #### 2.1 windows-x64桌面\n    > \n    > *   双击运行FastGithub.UI.exe\n    > \n    > #### 2.2 windows-x64服务\n    > \n    > *   `fastgithub.exe start` // 以windows服务安装并启动\n    > *   `fastgithub.exe stop` // 以windows服务卸载并删除\n    > \n    > #### 2.3 linux-x64终端\n    > \n    > *   `sudo ./fastgithub`\n    > *   设置系统自动代理为`http://127.0.0.1:38457`，或手动代理http/https为`127.0.0.1:38457`\n    > \n    > #### 2.4 linux-x64服务\n    > \n    > *   `sudo ./fastgithub start` // 以systemd服务安装并启动\n    > *   `sudo ./fastgithub stop` // 以systemd服务卸载并删除\n    > *   设置系统自动代理为`http://127.0.0.1:38457`，或手动代理http/https为`127.0.0.1:38457`\n    > \n    > #### 2.5 macOS-x64\n    > \n    > *   双击运行fastgithub\n    > *   安装cacert/fastgithub.cer并设置信任\n    > *   设置系统自动代理为`http://127.0.0.1:38457`，或手动代理http/https为`127.0.0.1:38457`\n    > *   [具体配置详情](https://github.com/dotnetcore/FastGithub/blob/master/MacOSXConfig.md)\n    > \n    > #### 2.6 docker-compose一键部署\n    > \n    > *   准备好docker 18.09, docker-compose.\n    > *   在源码目录下，有一个docker-compose.yaml 文件，专用于在实际项目中，临时使用github.com源码，而做的demo配置。\n    > *   根据自己的需要更新docker-compose.yaml中的sample和build镜像即可完成拉github.com源码加速，并基于源码做后续的操作。\n    > \n    > ### 3 软件功能\n    > \n    > *   提供域名的纯净IP解析；\n    > *   提供IP测速并选择最快的IP；\n    > *   提供域名的tls连接自定义配置；\n    > *   google的CDN资源替换，解决大量国外网站无法加载js和css的问题；\n    > \n    > ### 4 证书验证\n    > \n    > #### 4.1 git\n    > \n    > git操作提示`SSL certificate problem` 需要关闭git的证书验证：`git config --global http.sslverify false`\n    > \n    > #### 4.2 firefox\n    > \n    > firefox提示`连接有潜在的安全问题` 设置->隐私与安全->证书->查看证书->证书颁发机构，导入cacert/fastgithub.cer，勾选“信任由此证书颁发机构来标识网站”\n    > \n    > ### 5 安全性说明\n    > \n    > FastGithub为每台不同的主机生成自颁发CA证书，保存在cacert文件夹下。客户端设备需要安装和无条件信任自颁发的CA证书，请不要将证书私钥泄露给他人，以免造成损失。\n    > \n    > ### 6 合法性说明\n    > \n    > 《国际联网暂行规定》第六条规定：“计算机信息网络直接进行国际联网，必须使用邮电部国家公用电信网提供的国际出入口信道。任何单位和个人不得自行建立或者使用其他信道进行国际联网。” FastGithub本地代理使用的都是“公用电信网提供的国际出入口信道”，从国外Github服务器到国内用户电脑上FastGithub程序的流量，使用的是正常流量通道，其间未对流量进行任何额外加密（仅有网页原有的TLS加密，区别于VPN的流量加密），而FastGithub获取到网页数据之后发生的整个代理过程完全在国内，不再适用国际互联网相关之规定。\n    \n2.  下载文件\n    \n    这是总的下载链接：[https://github.com/dotnetcore/FastGithub/releases/latest](https://github.com/dotnetcore/FastGithub/releases/latest)\n    \n    截止到2022年5月6号最新的版本：\n    \n    [fastgithub\\_linux-arm64.zip](https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_linux-arm64.zip)\n    \n    [fastgithub\\_linux-x64.zip](https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_linux-x64.zip)\n    \n    [fastgithub\\_osx-arm64.zip](https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_osx-arm64.zip)\n    \n    [fastgithub\\_osx-x64.zip](https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_osx-x64.zip)\n    \n    [fastgithub\\_win-x64.zip](https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_win-x64.zip)\n    \n    对于下载慢的可以试着用[github文件下载加速网站](https://www.baidu.com/s?wd=github%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99)进行下载，这里推荐几个当前可用的加速下载网站\n    \n    [https://gh.api.99988866.xyz](https://gh.api.99988866.xyz)\n    \n    [https://ghproxy.com/](https://ghproxy.com/)\n    \n    [https://toolwa.com/github/](https://toolwa.com/github/)\n    \n3.  运行解压后的文件，以我的Windows10 64位系统为例\n    \n    选择任意一个.exe运行程序运行即可\n    \n    ![image-20220506003759569](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220506003759569.png)我运行`fastgithub.exe`的截图![image-20220506003935842](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220506003935842.png)\n    \n\n接下来进入github的大门吧\n\n## ![image-20220506004312524](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220506004312524.png)\n\n#### 题外话：\n\ngithub被 ‘半墙’是很让人恼火的，有时候PC访问不了，但是移动端又稳定得一批（没改hosts、没开代理）不管怎样，上面有很多很好地项目源码，我们学习离不开它。不过最近github上面开始出现了一些zz因素、传教等等，我们有义务保持理性的态度去面对，也不知道哪一天github也参与zz中来，搞的我们的项目代码不能正常使用。（本人开始试试自己搭建属于自己的git服务了，比如gitlab好像是不错的选择，后期更新看看）","slug":"github三种方法加速访问","published":1,"updated":"2024-03-12T10:43:57.980Z","_id":"cltnrar3t0009jry1bsr0ar07","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、镜像网站-不推荐\"><a href=\"#一、镜像网站-不推荐\" class=\"headerlink\" title=\"一、镜像网站(不推荐)\"></a>一、镜像网站(不推荐)</h2><p>这里提供两个最常用的镜像地址：</p>\n<ul>\n<li>  <a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></li>\n<li>  <a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></li>\n<li>  <a href=\"https://hub.fastgit.xyz/\">GitHub: Where the world builds software · GitHub (fastgit.xyz)</a></li>\n</ul>\n<p>有时候并不生效，依然被q，而且镜像网站随时可能跑路</p>\n<h2 id=\"二、修改hosts文件-安全、快速、不稳定\"><a href=\"#二、修改hosts文件-安全、快速、不稳定\" class=\"headerlink\" title=\"二、修改hosts文件(安全、快速、不稳定)\"></a>二、修改hosts文件(安全、快速、不稳定)</h2><p>关于<code>hosts</code>文件：<code>hosts</code> 文件本来是用来<strong>提高解析效率</strong>。 在进行 DNS 请求以前，系统会先检查自己的 <code>hosts</code> 文件中是否有这个地址映射关系，如果有则调用这个 IP 地址映射，如果没有再向已知的 DNS 服务器提出域名解析。</p>\n<p>也就是 <code>hosts</code>&gt; <code>DNS</code></p>\n<span id=\"more\"></span>\n<ol>\n<li>找到hosts文件 <code>hosts</code>文件在不同操作系统中的存放路径： <strong>Windows系统：</strong><blockquote>\n<p>C:\\Windows\\System32\\drivers\\etc</p>\n</blockquote>\n <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220505235444028.png\" alt=\"image-20220505235444028\"> <strong>Mac OS、Linux及其它类Unix系统：</strong><blockquote>\n<p>/etc/</p>\n</blockquote>\n <strong>Android系统：</strong><blockquote>\n<p>/system/etc/</p>\n</blockquote>\n</li>\n<li>添加域名解析 在<code>hosts</code>文件末尾添加上以下内容：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\"># GitHub Start</span></span><br><span class=\"line\"><span class=\"number\">140.82</span><span class=\"number\">.113</span><span class=\"number\">.25</span>                 alive.github.com</span><br><span class=\"line\"><span class=\"number\">140.82</span><span class=\"number\">.114</span><span class=\"number\">.26</span>                 live.github.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.154</span>               github.githubassets.com</span><br><span class=\"line\"><span class=\"number\">140.82</span><span class=\"number\">.114</span><span class=\"number\">.21</span>                 central.github.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               desktop.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.153</span>               assets-cdn.github.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               camo.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               github.<span class=\"built_in\">map</span>.fastly.net</span><br><span class=\"line\"><span class=\"number\">199.232</span><span class=\"number\">.69</span><span class=\"number\">.194</span>                github.<span class=\"keyword\">global</span>.ssl.fastly.net</span><br><span class=\"line\"><span class=\"number\">140.82</span><span class=\"number\">.113</span><span class=\"number\">.3</span>                  gist.github.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.153</span>               github.io</span><br><span class=\"line\"><span class=\"number\">140.82</span><span class=\"number\">.114</span><span class=\"number\">.3</span>                  github.com</span><br><span class=\"line\"><span class=\"number\">192.0</span><span class=\"number\">.66</span><span class=\"number\">.2</span>                    github.blog</span><br><span class=\"line\"><span class=\"number\">140.82</span><span class=\"number\">.114</span><span class=\"number\">.6</span>                  api.github.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               raw.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               user-images.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               favicons.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               avatars5.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               avatars4.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               avatars3.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               avatars2.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               avatars1.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               avatars0.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               avatars.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">140.82</span><span class=\"number\">.113</span><span class=\"number\">.9</span>                  codeload.github.com</span><br><span class=\"line\"><span class=\"number\">52.216</span><span class=\"number\">.137</span><span class=\"number\">.116</span>                github-cloud.s3.amazonaws.com</span><br><span class=\"line\"><span class=\"number\">52.217</span><span class=\"number\">.203</span><span class=\"number\">.169</span>                github-com.s3.amazonaws.com</span><br><span class=\"line\"><span class=\"number\">52.217</span><span class=\"number\">.105</span><span class=\"number\">.68</span>                 github-production-release-asset-2e65be.s3.amazonaws.com</span><br><span class=\"line\"><span class=\"number\">52.217</span><span class=\"number\">.203</span><span class=\"number\">.169</span>                github-production-user-asset-<span class=\"number\">62</span>10df.s3.amazonaws.com</span><br><span class=\"line\"><span class=\"number\">52.216</span><span class=\"number\">.241</span><span class=\"number\">.132</span>                github-production-repository-file-5c1aeb.s3.amazonaws.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.153</span>               githubstatus.com</span><br><span class=\"line\"><span class=\"number\">64.71</span><span class=\"number\">.144</span><span class=\"number\">.211</span>                 github.community</span><br><span class=\"line\"><span class=\"number\">40.68</span><span class=\"number\">.78</span><span class=\"number\">.177</span>                  github.dev</span><br><span class=\"line\"><span class=\"number\">140.82</span><span class=\"number\">.113</span><span class=\"number\">.21</span>                 collector.github.com</span><br><span class=\"line\"><span class=\"number\">13.107</span><span class=\"number\">.42</span><span class=\"number\">.16</span>                   pipelines.actions.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               media.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               cloud.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               objects.githubusercontent.com</span><br><span class=\"line\"> <span class=\"comment\"># GitHub End</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：这些ip可能会发生改变，具体可自行百度搜索相关ip信息，该记录我使用了半年之久都有效。</p>\n<ol start=\"3\">\n<li>刷新DNS缓存使之生效： Windows系统在cmd命令行中执行命令： <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipconfig/flushdns</span><br></pre></td></tr></table></figure>\n <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220505235658796.png\" alt=\"image-20220505235658796\"> Linux等系统一般修改后都即刻生效。</li>\n<li>Github查看效果</li>\n<li>总结 这种方法其实也不稳定，大部分时候是能正常快速访问，我也用了一年左右，但是还是会有时不时被墙。个人更喜欢这个~</li>\n</ol>\n<h2 id=\"三、代理-稳定高速、部分收费\"><a href=\"#三、代理-稳定高速、部分收费\" class=\"headerlink\" title=\"三、代理(稳定高速、部分收费)\"></a>三、代理(稳定高速、部分收费)</h2><p>在这里我只是介绍一个使用代理服务快速访问github的方法，由该方法导致任何的后果概不负责。</p>\n<p>有很多种方式加速访问github，听过的就有stream++、epic++、XXXX等，自行百度吧。在这里我介绍使用github上的一个项目<a href=\"https://github.com/dotnetcore/FastGithub\">Fastgithub</a>来加速访问github，特点：免费高效、开源。</p>\n<ol>\n<li>其实github上面就有很详细的教程，我只是复制一遍，方便目前还访问不了的人，以下是原文档，如有侵权请联系我删除：<blockquote>\n<h4 id=\"2-1-windows-x64桌面\"><a href=\"#2-1-windows-x64桌面\" class=\"headerlink\" title=\"2.1 windows-x64桌面\"></a>2.1 windows-x64桌面</h4><ul>\n<li>  双击运行FastGithub.UI.exe</li>\n</ul>\n<h4 id=\"2-2-windows-x64服务\"><a href=\"#2-2-windows-x64服务\" class=\"headerlink\" title=\"2.2 windows-x64服务\"></a>2.2 windows-x64服务</h4><ul>\n<li>  <code>fastgithub.exe start</code> // 以windows服务安装并启动</li>\n<li>  <code>fastgithub.exe stop</code> // 以windows服务卸载并删除</li>\n</ul>\n<h4 id=\"2-3-linux-x64终端\"><a href=\"#2-3-linux-x64终端\" class=\"headerlink\" title=\"2.3 linux-x64终端\"></a>2.3 linux-x64终端</h4><ul>\n<li>  <code>sudo ./fastgithub</code></li>\n<li>  设置系统自动代理为<code>http://127.0.0.1:38457</code>，或手动代理http/https为<code>127.0.0.1:38457</code></li>\n</ul>\n<h4 id=\"2-4-linux-x64服务\"><a href=\"#2-4-linux-x64服务\" class=\"headerlink\" title=\"2.4 linux-x64服务\"></a>2.4 linux-x64服务</h4><ul>\n<li>  <code>sudo ./fastgithub start</code> // 以systemd服务安装并启动</li>\n<li>  <code>sudo ./fastgithub stop</code> // 以systemd服务卸载并删除</li>\n<li>  设置系统自动代理为<code>http://127.0.0.1:38457</code>，或手动代理http/https为<code>127.0.0.1:38457</code></li>\n</ul>\n<h4 id=\"2-5-macOS-x64\"><a href=\"#2-5-macOS-x64\" class=\"headerlink\" title=\"2.5 macOS-x64\"></a>2.5 macOS-x64</h4><ul>\n<li>  双击运行fastgithub</li>\n<li>  安装cacert/fastgithub.cer并设置信任</li>\n<li>  设置系统自动代理为<code>http://127.0.0.1:38457</code>，或手动代理http/https为<code>127.0.0.1:38457</code></li>\n<li>  <a href=\"https://github.com/dotnetcore/FastGithub/blob/master/MacOSXConfig.md\">具体配置详情</a></li>\n</ul>\n<h4 id=\"2-6-docker-compose一键部署\"><a href=\"#2-6-docker-compose一键部署\" class=\"headerlink\" title=\"2.6 docker-compose一键部署\"></a>2.6 docker-compose一键部署</h4><ul>\n<li>  准备好docker 18.09, docker-compose.</li>\n<li>  在源码目录下，有一个docker-compose.yaml 文件，专用于在实际项目中，临时使用github.com源码，而做的demo配置。</li>\n<li>  根据自己的需要更新docker-compose.yaml中的sample和build镜像即可完成拉github.com源码加速，并基于源码做后续的操作。</li>\n</ul>\n<h3 id=\"3-软件功能\"><a href=\"#3-软件功能\" class=\"headerlink\" title=\"3 软件功能\"></a>3 软件功能</h3><ul>\n<li>  提供域名的纯净IP解析；</li>\n<li>  提供IP测速并选择最快的IP；</li>\n<li>  提供域名的tls连接自定义配置；</li>\n<li>  google的CDN资源替换，解决大量国外网站无法加载js和css的问题；</li>\n</ul>\n<h3 id=\"4-证书验证\"><a href=\"#4-证书验证\" class=\"headerlink\" title=\"4 证书验证\"></a>4 证书验证</h3><h4 id=\"4-1-git\"><a href=\"#4-1-git\" class=\"headerlink\" title=\"4.1 git\"></a>4.1 git</h4><p>git操作提示<code>SSL certificate problem</code> 需要关闭git的证书验证：<code>git config --global http.sslverify false</code></p>\n<h4 id=\"4-2-firefox\"><a href=\"#4-2-firefox\" class=\"headerlink\" title=\"4.2 firefox\"></a>4.2 firefox</h4><p>firefox提示<code>连接有潜在的安全问题</code> 设置-&gt;隐私与安全-&gt;证书-&gt;查看证书-&gt;证书颁发机构，导入cacert/fastgithub.cer，勾选“信任由此证书颁发机构来标识网站”</p>\n<h3 id=\"5-安全性说明\"><a href=\"#5-安全性说明\" class=\"headerlink\" title=\"5 安全性说明\"></a>5 安全性说明</h3><p>FastGithub为每台不同的主机生成自颁发CA证书，保存在cacert文件夹下。客户端设备需要安装和无条件信任自颁发的CA证书，请不要将证书私钥泄露给他人，以免造成损失。</p>\n<h3 id=\"6-合法性说明\"><a href=\"#6-合法性说明\" class=\"headerlink\" title=\"6 合法性说明\"></a>6 合法性说明</h3><p>《国际联网暂行规定》第六条规定：“计算机信息网络直接进行国际联网，必须使用邮电部国家公用电信网提供的国际出入口信道。任何单位和个人不得自行建立或者使用其他信道进行国际联网。” FastGithub本地代理使用的都是“公用电信网提供的国际出入口信道”，从国外Github服务器到国内用户电脑上FastGithub程序的流量，使用的是正常流量通道，其间未对流量进行任何额外加密（仅有网页原有的TLS加密，区别于VPN的流量加密），而FastGithub获取到网页数据之后发生的整个代理过程完全在国内，不再适用国际互联网相关之规定。</p>\n</blockquote>\n</li>\n<li>下载文件 这是总的下载链接：<a href=\"https://github.com/dotnetcore/FastGithub/releases/latest\">https://github.com/dotnetcore/FastGithub/releases/latest</a> 截止到2022年5月6号最新的版本： <a href=\"https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_linux-arm64.zip\">fastgithub_linux-arm64.zip</a> <a href=\"https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_linux-x64.zip\">fastgithub_linux-x64.zip</a> <a href=\"https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_osx-arm64.zip\">fastgithub_osx-arm64.zip</a> <a href=\"https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_osx-x64.zip\">fastgithub_osx-x64.zip</a> <a href=\"https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_win-x64.zip\">fastgithub_win-x64.zip</a> 对于下载慢的可以试着用<a href=\"https://www.baidu.com/s?wd=github%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99\">github文件下载加速网站</a>进行下载，这里推荐几个当前可用的加速下载网站 <a href=\"https://gh.api.99988866.xyz/\">https://gh.api.99988866.xyz</a> <a href=\"https://ghproxy.com/\">https://ghproxy.com/</a> <a href=\"https://toolwa.com/github/\">https://toolwa.com/github/</a></li>\n<li>运行解压后的文件，以我的Windows10 64位系统为例 选择任意一个.exe运行程序运行即可 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220506003759569.png\" alt=\"image-20220506003759569\">我运行<code>fastgithub.exe</code>的截图<img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220506003935842.png\" alt=\"image-20220506003935842\"></li>\n</ol>\n<p>接下来进入github的大门吧</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220506004312524.png\" alt=\"image-20220506004312524\"></h2><h4 id=\"题外话：\"><a href=\"#题外话：\" class=\"headerlink\" title=\"题外话：\"></a>题外话：</h4><p>github被 ‘半墙’是很让人恼火的，有时候PC访问不了，但是移动端又稳定得一批（没改hosts、没开代理）不管怎样，上面有很多很好地项目源码，我们学习离不开它。不过最近github上面开始出现了一些zz因素、传教等等，我们有义务保持理性的态度去面对，也不知道哪一天github也参与zz中来，搞的我们的项目代码不能正常使用。（本人开始试试自己搭建属于自己的git服务了，比如gitlab好像是不错的选择，后期更新看看）</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、镜像网站-不推荐\"><a href=\"#一、镜像网站-不推荐\" class=\"headerlink\" title=\"一、镜像网站(不推荐)\"></a>一、镜像网站(不推荐)</h2><p>这里提供两个最常用的镜像地址：</p>\n<ul>\n<li>  <a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></li>\n<li>  <a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></li>\n<li>  <a href=\"https://hub.fastgit.xyz/\">GitHub: Where the world builds software · GitHub (fastgit.xyz)</a></li>\n</ul>\n<p>有时候并不生效，依然被q，而且镜像网站随时可能跑路</p>\n<h2 id=\"二、修改hosts文件-安全、快速、不稳定\"><a href=\"#二、修改hosts文件-安全、快速、不稳定\" class=\"headerlink\" title=\"二、修改hosts文件(安全、快速、不稳定)\"></a>二、修改hosts文件(安全、快速、不稳定)</h2><p>关于<code>hosts</code>文件：<code>hosts</code> 文件本来是用来<strong>提高解析效率</strong>。 在进行 DNS 请求以前，系统会先检查自己的 <code>hosts</code> 文件中是否有这个地址映射关系，如果有则调用这个 IP 地址映射，如果没有再向已知的 DNS 服务器提出域名解析。</p>\n<p>也就是 <code>hosts</code>&gt; <code>DNS</code></p>","more":"<ol>\n<li>找到hosts文件 <code>hosts</code>文件在不同操作系统中的存放路径： <strong>Windows系统：</strong><blockquote>\n<p>C:\\Windows\\System32\\drivers\\etc</p>\n</blockquote>\n <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220505235444028.png\" alt=\"image-20220505235444028\"> <strong>Mac OS、Linux及其它类Unix系统：</strong><blockquote>\n<p>/etc/</p>\n</blockquote>\n <strong>Android系统：</strong><blockquote>\n<p>/system/etc/</p>\n</blockquote>\n</li>\n<li>添加域名解析 在<code>hosts</code>文件末尾添加上以下内容：</li>\n</ol>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\"># GitHub Start</span></span><br><span class=\"line\"><span class=\"number\">140.82</span><span class=\"number\">.113</span><span class=\"number\">.25</span>                 alive.github.com</span><br><span class=\"line\"><span class=\"number\">140.82</span><span class=\"number\">.114</span><span class=\"number\">.26</span>                 live.github.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.154</span>               github.githubassets.com</span><br><span class=\"line\"><span class=\"number\">140.82</span><span class=\"number\">.114</span><span class=\"number\">.21</span>                 central.github.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               desktop.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.153</span>               assets-cdn.github.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               camo.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               github.<span class=\"built_in\">map</span>.fastly.net</span><br><span class=\"line\"><span class=\"number\">199.232</span><span class=\"number\">.69</span><span class=\"number\">.194</span>                github.<span class=\"keyword\">global</span>.ssl.fastly.net</span><br><span class=\"line\"><span class=\"number\">140.82</span><span class=\"number\">.113</span><span class=\"number\">.3</span>                  gist.github.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.153</span>               github.io</span><br><span class=\"line\"><span class=\"number\">140.82</span><span class=\"number\">.114</span><span class=\"number\">.3</span>                  github.com</span><br><span class=\"line\"><span class=\"number\">192.0</span><span class=\"number\">.66</span><span class=\"number\">.2</span>                    github.blog</span><br><span class=\"line\"><span class=\"number\">140.82</span><span class=\"number\">.114</span><span class=\"number\">.6</span>                  api.github.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               raw.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               user-images.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               favicons.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               avatars5.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               avatars4.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               avatars3.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               avatars2.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               avatars1.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               avatars0.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               avatars.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">140.82</span><span class=\"number\">.113</span><span class=\"number\">.9</span>                  codeload.github.com</span><br><span class=\"line\"><span class=\"number\">52.216</span><span class=\"number\">.137</span><span class=\"number\">.116</span>                github-cloud.s3.amazonaws.com</span><br><span class=\"line\"><span class=\"number\">52.217</span><span class=\"number\">.203</span><span class=\"number\">.169</span>                github-com.s3.amazonaws.com</span><br><span class=\"line\"><span class=\"number\">52.217</span><span class=\"number\">.105</span><span class=\"number\">.68</span>                 github-production-release-asset-2e65be.s3.amazonaws.com</span><br><span class=\"line\"><span class=\"number\">52.217</span><span class=\"number\">.203</span><span class=\"number\">.169</span>                github-production-user-asset-<span class=\"number\">62</span>10df.s3.amazonaws.com</span><br><span class=\"line\"><span class=\"number\">52.216</span><span class=\"number\">.241</span><span class=\"number\">.132</span>                github-production-repository-file-5c1aeb.s3.amazonaws.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.153</span>               githubstatus.com</span><br><span class=\"line\"><span class=\"number\">64.71</span><span class=\"number\">.144</span><span class=\"number\">.211</span>                 github.community</span><br><span class=\"line\"><span class=\"number\">40.68</span><span class=\"number\">.78</span><span class=\"number\">.177</span>                  github.dev</span><br><span class=\"line\"><span class=\"number\">140.82</span><span class=\"number\">.113</span><span class=\"number\">.21</span>                 collector.github.com</span><br><span class=\"line\"><span class=\"number\">13.107</span><span class=\"number\">.42</span><span class=\"number\">.16</span>                   pipelines.actions.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               media.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               cloud.githubusercontent.com</span><br><span class=\"line\"><span class=\"number\">185.199</span><span class=\"number\">.108</span><span class=\"number\">.133</span>               objects.githubusercontent.com</span><br><span class=\"line\"> <span class=\"comment\"># GitHub End</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：这些ip可能会发生改变，具体可自行百度搜索相关ip信息，该记录我使用了半年之久都有效。</p>\n<ol start=\"3\">\n<li>刷新DNS缓存使之生效： Windows系统在cmd命令行中执行命令： <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipconfig/flushdns</span><br></pre></td></tr></table></figure>\n <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220505235658796.png\" alt=\"image-20220505235658796\"> Linux等系统一般修改后都即刻生效。</li>\n<li>Github查看效果</li>\n<li>总结 这种方法其实也不稳定，大部分时候是能正常快速访问，我也用了一年左右，但是还是会有时不时被墙。个人更喜欢这个~</li>\n</ol>\n<h2 id=\"三、代理-稳定高速、部分收费\"><a href=\"#三、代理-稳定高速、部分收费\" class=\"headerlink\" title=\"三、代理(稳定高速、部分收费)\"></a>三、代理(稳定高速、部分收费)</h2><p>在这里我只是介绍一个使用代理服务快速访问github的方法，由该方法导致任何的后果概不负责。</p>\n<p>有很多种方式加速访问github，听过的就有stream++、epic++、XXXX等，自行百度吧。在这里我介绍使用github上的一个项目<a href=\"https://github.com/dotnetcore/FastGithub\">Fastgithub</a>来加速访问github，特点：免费高效、开源。</p>\n<ol>\n<li>其实github上面就有很详细的教程，我只是复制一遍，方便目前还访问不了的人，以下是原文档，如有侵权请联系我删除：<blockquote>\n<h4 id=\"2-1-windows-x64桌面\"><a href=\"#2-1-windows-x64桌面\" class=\"headerlink\" title=\"2.1 windows-x64桌面\"></a>2.1 windows-x64桌面</h4><ul>\n<li>  双击运行FastGithub.UI.exe</li>\n</ul>\n<h4 id=\"2-2-windows-x64服务\"><a href=\"#2-2-windows-x64服务\" class=\"headerlink\" title=\"2.2 windows-x64服务\"></a>2.2 windows-x64服务</h4><ul>\n<li>  <code>fastgithub.exe start</code> // 以windows服务安装并启动</li>\n<li>  <code>fastgithub.exe stop</code> // 以windows服务卸载并删除</li>\n</ul>\n<h4 id=\"2-3-linux-x64终端\"><a href=\"#2-3-linux-x64终端\" class=\"headerlink\" title=\"2.3 linux-x64终端\"></a>2.3 linux-x64终端</h4><ul>\n<li>  <code>sudo ./fastgithub</code></li>\n<li>  设置系统自动代理为<code>http://127.0.0.1:38457</code>，或手动代理http/https为<code>127.0.0.1:38457</code></li>\n</ul>\n<h4 id=\"2-4-linux-x64服务\"><a href=\"#2-4-linux-x64服务\" class=\"headerlink\" title=\"2.4 linux-x64服务\"></a>2.4 linux-x64服务</h4><ul>\n<li>  <code>sudo ./fastgithub start</code> // 以systemd服务安装并启动</li>\n<li>  <code>sudo ./fastgithub stop</code> // 以systemd服务卸载并删除</li>\n<li>  设置系统自动代理为<code>http://127.0.0.1:38457</code>，或手动代理http/https为<code>127.0.0.1:38457</code></li>\n</ul>\n<h4 id=\"2-5-macOS-x64\"><a href=\"#2-5-macOS-x64\" class=\"headerlink\" title=\"2.5 macOS-x64\"></a>2.5 macOS-x64</h4><ul>\n<li>  双击运行fastgithub</li>\n<li>  安装cacert/fastgithub.cer并设置信任</li>\n<li>  设置系统自动代理为<code>http://127.0.0.1:38457</code>，或手动代理http/https为<code>127.0.0.1:38457</code></li>\n<li>  <a href=\"https://github.com/dotnetcore/FastGithub/blob/master/MacOSXConfig.md\">具体配置详情</a></li>\n</ul>\n<h4 id=\"2-6-docker-compose一键部署\"><a href=\"#2-6-docker-compose一键部署\" class=\"headerlink\" title=\"2.6 docker-compose一键部署\"></a>2.6 docker-compose一键部署</h4><ul>\n<li>  准备好docker 18.09, docker-compose.</li>\n<li>  在源码目录下，有一个docker-compose.yaml 文件，专用于在实际项目中，临时使用github.com源码，而做的demo配置。</li>\n<li>  根据自己的需要更新docker-compose.yaml中的sample和build镜像即可完成拉github.com源码加速，并基于源码做后续的操作。</li>\n</ul>\n<h3 id=\"3-软件功能\"><a href=\"#3-软件功能\" class=\"headerlink\" title=\"3 软件功能\"></a>3 软件功能</h3><ul>\n<li>  提供域名的纯净IP解析；</li>\n<li>  提供IP测速并选择最快的IP；</li>\n<li>  提供域名的tls连接自定义配置；</li>\n<li>  google的CDN资源替换，解决大量国外网站无法加载js和css的问题；</li>\n</ul>\n<h3 id=\"4-证书验证\"><a href=\"#4-证书验证\" class=\"headerlink\" title=\"4 证书验证\"></a>4 证书验证</h3><h4 id=\"4-1-git\"><a href=\"#4-1-git\" class=\"headerlink\" title=\"4.1 git\"></a>4.1 git</h4><p>git操作提示<code>SSL certificate problem</code> 需要关闭git的证书验证：<code>git config --global http.sslverify false</code></p>\n<h4 id=\"4-2-firefox\"><a href=\"#4-2-firefox\" class=\"headerlink\" title=\"4.2 firefox\"></a>4.2 firefox</h4><p>firefox提示<code>连接有潜在的安全问题</code> 设置-&gt;隐私与安全-&gt;证书-&gt;查看证书-&gt;证书颁发机构，导入cacert/fastgithub.cer，勾选“信任由此证书颁发机构来标识网站”</p>\n<h3 id=\"5-安全性说明\"><a href=\"#5-安全性说明\" class=\"headerlink\" title=\"5 安全性说明\"></a>5 安全性说明</h3><p>FastGithub为每台不同的主机生成自颁发CA证书，保存在cacert文件夹下。客户端设备需要安装和无条件信任自颁发的CA证书，请不要将证书私钥泄露给他人，以免造成损失。</p>\n<h3 id=\"6-合法性说明\"><a href=\"#6-合法性说明\" class=\"headerlink\" title=\"6 合法性说明\"></a>6 合法性说明</h3><p>《国际联网暂行规定》第六条规定：“计算机信息网络直接进行国际联网，必须使用邮电部国家公用电信网提供的国际出入口信道。任何单位和个人不得自行建立或者使用其他信道进行国际联网。” FastGithub本地代理使用的都是“公用电信网提供的国际出入口信道”，从国外Github服务器到国内用户电脑上FastGithub程序的流量，使用的是正常流量通道，其间未对流量进行任何额外加密（仅有网页原有的TLS加密，区别于VPN的流量加密），而FastGithub获取到网页数据之后发生的整个代理过程完全在国内，不再适用国际互联网相关之规定。</p>\n</blockquote>\n</li>\n<li>下载文件 这是总的下载链接：<a href=\"https://github.com/dotnetcore/FastGithub/releases/latest\">https://github.com/dotnetcore/FastGithub/releases/latest</a> 截止到2022年5月6号最新的版本： <a href=\"https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_linux-arm64.zip\">fastgithub_linux-arm64.zip</a> <a href=\"https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_linux-x64.zip\">fastgithub_linux-x64.zip</a> <a href=\"https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_osx-arm64.zip\">fastgithub_osx-arm64.zip</a> <a href=\"https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_osx-x64.zip\">fastgithub_osx-x64.zip</a> <a href=\"https://github.com/dotnetcore/FastGithub/releases/download/2.1.4/fastgithub_win-x64.zip\">fastgithub_win-x64.zip</a> 对于下载慢的可以试着用<a href=\"https://www.baidu.com/s?wd=github%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%8A%A0%E9%80%9F%E7%BD%91%E7%AB%99\">github文件下载加速网站</a>进行下载，这里推荐几个当前可用的加速下载网站 <a href=\"https://gh.api.99988866.xyz/\">https://gh.api.99988866.xyz</a> <a href=\"https://ghproxy.com/\">https://ghproxy.com/</a> <a href=\"https://toolwa.com/github/\">https://toolwa.com/github/</a></li>\n<li>运行解压后的文件，以我的Windows10 64位系统为例 选择任意一个.exe运行程序运行即可 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220506003759569.png\" alt=\"image-20220506003759569\">我运行<code>fastgithub.exe</code>的截图<img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220506003935842.png\" alt=\"image-20220506003935842\"></li>\n</ol>\n<p>接下来进入github的大门吧</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220506004312524.png\" alt=\"image-20220506004312524\"></h2><h4 id=\"题外话：\"><a href=\"#题外话：\" class=\"headerlink\" title=\"题外话：\"></a>题外话：</h4><p>github被 ‘半墙’是很让人恼火的，有时候PC访问不了，但是移动端又稳定得一批（没改hosts、没开代理）不管怎样，上面有很多很好地项目源码，我们学习离不开它。不过最近github上面开始出现了一些zz因素、传教等等，我们有义务保持理性的态度去面对，也不知道哪一天github也参与zz中来，搞的我们的项目代码不能正常使用。（本人开始试试自己搭建属于自己的git服务了，比如gitlab好像是不错的选择，后期更新看看）</p>"},{"title":"IPFS简介","id":"1226","date":"2023-03-11T15:40:59.000Z","_content":"\n[https://zhuanlan.zhihu.com/p/32615963](https://zhuanlan.zhihu.com/p/32615963)\n\n[Peer-to-peer hypermedia protocol](https://github.com/ipfs/ipfs)\n\n## 什么是IPFS\n\n星际文件系统(InterPlanetary File System). IPFS 是一个分布式的web, 点到点超媒体协议. 可以让我们的互联网速度更快, 更加安全, 并且更加开放. IPFS协议的目标是取代传统的互联网协议HTTP。\n\n## 为什么有IPFS\n\n众所周知, 互联网是建立在HTTP协议上的. HTTP协议是个伟大的发明, 让我们的互联网得以快速发展.但是互联网发展到了今天HTTP逐渐出来了不足.\n<!-- more -->\n#### HTTP的中心化是低效的, 并且成本很高\n\n使用HTTP协议每次需要从中心化的服务器下载完整的文件(网页, 视频, 图片等), 速度慢, 效率低. 如果改用P2P的方式下载, 可以节省近60%的带宽. P2P将文件分割为小的块, 从多个服务器同时下载, 速度非常快.\n\n#### Web文件经常被删除\n\n回想一下是不是经常你收藏的某个页面, 在使用的时候浏览器返回404(无法找到页面), http的页面平均生存周期大约只有100天. Web文件经常被删除(由于存储成本太高), 无法永久保存. IPFS提供了文件的历史版本回溯功能(就像git版本控制工具一样), 可以很容易的查看文件的历史版本, 数据可以得到永久保存\n\n#### 中心化限制了web的成长\n\n我们的现有互联网是一个高度中心化的网络. 互联网是人类的伟大发明, 也是科技创新的加速器. 各种管制将对这互联网的功能造成威胁, 例如: 互联网封锁, 管制, 监控等等. 这些都源于互联网的中心化.而分布式的IPFS可以克服这些web的缺点.\n\n#### 互联网应用高度依赖主干网\n\n主干网受制于诸多因素的影响, 战争, 自然灾害, 互联网管制, 中心化服务器宕机等等, 都可能是我们的互联网应用中断服务. IPFS可以是互联网应用极大的降低互联网应用对主干网的依赖.\n\n## IPFS的目标\n\nIPFS不仅仅是为了加速web. 而是为了最终取代HTTP协议, 使互联网更加美好\n\n## IPFS包含哪些内容\n\n#### IPFS是一个协议，类似http协议\n\n*   定义了基于内容的寻址文件系统\n*   内容分发\n*   使用的技术分布式哈希、p2p传输、版本管理系统\n\n#### IPFS是一个文件系统\n\n*   有文件夹和文件\n*   可挂载文件系统\n\n#### IPFS是一个web协议\n\n*   可以像http那样查看互联网页面\n*   未来浏览器可以直接支持 ipfs:/ 或者 fs:/ 协议\n\n#### IPFS是模块化的协议\n\n*   连接层：通过其他任何网络协议连接\n*   路由层：寻找定位文件所在位置\n*   数据块交换：采用BitTorrent技术\n\n#### IPFS是一个p2p系统\n\n*   世界范围内的p2p文件传输网络\n*   分布式网络结构\n*   没有单点失效问题\n\n#### IPFS天生是一个CDN\n\n*   文件添加到IPFS网络，将会在全世界进行CDN加速\n*   bittorrent的带宽管理\n\n#### IPFS拥有命名服务\n\n*   IPNS：基于SFS（自认证系统）命名体系\n*   可以和现有域名系统绑定","source":"_posts/ipfs简介.md","raw":"---\ntitle: IPFS简介\ntags: []\nid: '1226'\ncategories:\n  - - 学习笔记\n  - - 思想感悟\ndate: 2023-03-11 23:40:59\n---\n\n[https://zhuanlan.zhihu.com/p/32615963](https://zhuanlan.zhihu.com/p/32615963)\n\n[Peer-to-peer hypermedia protocol](https://github.com/ipfs/ipfs)\n\n## 什么是IPFS\n\n星际文件系统(InterPlanetary File System). IPFS 是一个分布式的web, 点到点超媒体协议. 可以让我们的互联网速度更快, 更加安全, 并且更加开放. IPFS协议的目标是取代传统的互联网协议HTTP。\n\n## 为什么有IPFS\n\n众所周知, 互联网是建立在HTTP协议上的. HTTP协议是个伟大的发明, 让我们的互联网得以快速发展.但是互联网发展到了今天HTTP逐渐出来了不足.\n<!-- more -->\n#### HTTP的中心化是低效的, 并且成本很高\n\n使用HTTP协议每次需要从中心化的服务器下载完整的文件(网页, 视频, 图片等), 速度慢, 效率低. 如果改用P2P的方式下载, 可以节省近60%的带宽. P2P将文件分割为小的块, 从多个服务器同时下载, 速度非常快.\n\n#### Web文件经常被删除\n\n回想一下是不是经常你收藏的某个页面, 在使用的时候浏览器返回404(无法找到页面), http的页面平均生存周期大约只有100天. Web文件经常被删除(由于存储成本太高), 无法永久保存. IPFS提供了文件的历史版本回溯功能(就像git版本控制工具一样), 可以很容易的查看文件的历史版本, 数据可以得到永久保存\n\n#### 中心化限制了web的成长\n\n我们的现有互联网是一个高度中心化的网络. 互联网是人类的伟大发明, 也是科技创新的加速器. 各种管制将对这互联网的功能造成威胁, 例如: 互联网封锁, 管制, 监控等等. 这些都源于互联网的中心化.而分布式的IPFS可以克服这些web的缺点.\n\n#### 互联网应用高度依赖主干网\n\n主干网受制于诸多因素的影响, 战争, 自然灾害, 互联网管制, 中心化服务器宕机等等, 都可能是我们的互联网应用中断服务. IPFS可以是互联网应用极大的降低互联网应用对主干网的依赖.\n\n## IPFS的目标\n\nIPFS不仅仅是为了加速web. 而是为了最终取代HTTP协议, 使互联网更加美好\n\n## IPFS包含哪些内容\n\n#### IPFS是一个协议，类似http协议\n\n*   定义了基于内容的寻址文件系统\n*   内容分发\n*   使用的技术分布式哈希、p2p传输、版本管理系统\n\n#### IPFS是一个文件系统\n\n*   有文件夹和文件\n*   可挂载文件系统\n\n#### IPFS是一个web协议\n\n*   可以像http那样查看互联网页面\n*   未来浏览器可以直接支持 ipfs:/ 或者 fs:/ 协议\n\n#### IPFS是模块化的协议\n\n*   连接层：通过其他任何网络协议连接\n*   路由层：寻找定位文件所在位置\n*   数据块交换：采用BitTorrent技术\n\n#### IPFS是一个p2p系统\n\n*   世界范围内的p2p文件传输网络\n*   分布式网络结构\n*   没有单点失效问题\n\n#### IPFS天生是一个CDN\n\n*   文件添加到IPFS网络，将会在全世界进行CDN加速\n*   bittorrent的带宽管理\n\n#### IPFS拥有命名服务\n\n*   IPNS：基于SFS（自认证系统）命名体系\n*   可以和现有域名系统绑定","slug":"ipfs简介","published":1,"updated":"2024-03-12T02:24:18.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltnrar40000djry1hmkbf756","content":"<p><a href=\"https://zhuanlan.zhihu.com/p/32615963\">https://zhuanlan.zhihu.com/p/32615963</a></p>\n<p><a href=\"https://github.com/ipfs/ipfs\">Peer-to-peer hypermedia protocol</a></p>\n<h2 id=\"什么是IPFS\"><a href=\"#什么是IPFS\" class=\"headerlink\" title=\"什么是IPFS\"></a>什么是IPFS</h2><p>星际文件系统(InterPlanetary File System). IPFS 是一个分布式的web, 点到点超媒体协议. 可以让我们的互联网速度更快, 更加安全, 并且更加开放. IPFS协议的目标是取代传统的互联网协议HTTP。</p>\n<h2 id=\"为什么有IPFS\"><a href=\"#为什么有IPFS\" class=\"headerlink\" title=\"为什么有IPFS\"></a>为什么有IPFS</h2><p>众所周知, 互联网是建立在HTTP协议上的. HTTP协议是个伟大的发明, 让我们的互联网得以快速发展.但是互联网发展到了今天HTTP逐渐出来了不足.</p>\n<span id=\"more\"></span>\n<h4 id=\"HTTP的中心化是低效的-并且成本很高\"><a href=\"#HTTP的中心化是低效的-并且成本很高\" class=\"headerlink\" title=\"HTTP的中心化是低效的, 并且成本很高\"></a>HTTP的中心化是低效的, 并且成本很高</h4><p>使用HTTP协议每次需要从中心化的服务器下载完整的文件(网页, 视频, 图片等), 速度慢, 效率低. 如果改用P2P的方式下载, 可以节省近60%的带宽. P2P将文件分割为小的块, 从多个服务器同时下载, 速度非常快.</p>\n<h4 id=\"Web文件经常被删除\"><a href=\"#Web文件经常被删除\" class=\"headerlink\" title=\"Web文件经常被删除\"></a>Web文件经常被删除</h4><p>回想一下是不是经常你收藏的某个页面, 在使用的时候浏览器返回404(无法找到页面), http的页面平均生存周期大约只有100天. Web文件经常被删除(由于存储成本太高), 无法永久保存. IPFS提供了文件的历史版本回溯功能(就像git版本控制工具一样), 可以很容易的查看文件的历史版本, 数据可以得到永久保存</p>\n<h4 id=\"中心化限制了web的成长\"><a href=\"#中心化限制了web的成长\" class=\"headerlink\" title=\"中心化限制了web的成长\"></a>中心化限制了web的成长</h4><p>我们的现有互联网是一个高度中心化的网络. 互联网是人类的伟大发明, 也是科技创新的加速器. 各种管制将对这互联网的功能造成威胁, 例如: 互联网封锁, 管制, 监控等等. 这些都源于互联网的中心化.而分布式的IPFS可以克服这些web的缺点.</p>\n<h4 id=\"互联网应用高度依赖主干网\"><a href=\"#互联网应用高度依赖主干网\" class=\"headerlink\" title=\"互联网应用高度依赖主干网\"></a>互联网应用高度依赖主干网</h4><p>主干网受制于诸多因素的影响, 战争, 自然灾害, 互联网管制, 中心化服务器宕机等等, 都可能是我们的互联网应用中断服务. IPFS可以是互联网应用极大的降低互联网应用对主干网的依赖.</p>\n<h2 id=\"IPFS的目标\"><a href=\"#IPFS的目标\" class=\"headerlink\" title=\"IPFS的目标\"></a>IPFS的目标</h2><p>IPFS不仅仅是为了加速web. 而是为了最终取代HTTP协议, 使互联网更加美好</p>\n<h2 id=\"IPFS包含哪些内容\"><a href=\"#IPFS包含哪些内容\" class=\"headerlink\" title=\"IPFS包含哪些内容\"></a>IPFS包含哪些内容</h2><h4 id=\"IPFS是一个协议，类似http协议\"><a href=\"#IPFS是一个协议，类似http协议\" class=\"headerlink\" title=\"IPFS是一个协议，类似http协议\"></a>IPFS是一个协议，类似http协议</h4><ul>\n<li>  定义了基于内容的寻址文件系统</li>\n<li>  内容分发</li>\n<li>  使用的技术分布式哈希、p2p传输、版本管理系统</li>\n</ul>\n<h4 id=\"IPFS是一个文件系统\"><a href=\"#IPFS是一个文件系统\" class=\"headerlink\" title=\"IPFS是一个文件系统\"></a>IPFS是一个文件系统</h4><ul>\n<li>  有文件夹和文件</li>\n<li>  可挂载文件系统</li>\n</ul>\n<h4 id=\"IPFS是一个web协议\"><a href=\"#IPFS是一个web协议\" class=\"headerlink\" title=\"IPFS是一个web协议\"></a>IPFS是一个web协议</h4><ul>\n<li>  可以像http那样查看互联网页面</li>\n<li>  未来浏览器可以直接支持 ipfs:/ 或者 fs:/ 协议</li>\n</ul>\n<h4 id=\"IPFS是模块化的协议\"><a href=\"#IPFS是模块化的协议\" class=\"headerlink\" title=\"IPFS是模块化的协议\"></a>IPFS是模块化的协议</h4><ul>\n<li>  连接层：通过其他任何网络协议连接</li>\n<li>  路由层：寻找定位文件所在位置</li>\n<li>  数据块交换：采用BitTorrent技术</li>\n</ul>\n<h4 id=\"IPFS是一个p2p系统\"><a href=\"#IPFS是一个p2p系统\" class=\"headerlink\" title=\"IPFS是一个p2p系统\"></a>IPFS是一个p2p系统</h4><ul>\n<li>  世界范围内的p2p文件传输网络</li>\n<li>  分布式网络结构</li>\n<li>  没有单点失效问题</li>\n</ul>\n<h4 id=\"IPFS天生是一个CDN\"><a href=\"#IPFS天生是一个CDN\" class=\"headerlink\" title=\"IPFS天生是一个CDN\"></a>IPFS天生是一个CDN</h4><ul>\n<li>  文件添加到IPFS网络，将会在全世界进行CDN加速</li>\n<li>  bittorrent的带宽管理</li>\n</ul>\n<h4 id=\"IPFS拥有命名服务\"><a href=\"#IPFS拥有命名服务\" class=\"headerlink\" title=\"IPFS拥有命名服务\"></a>IPFS拥有命名服务</h4><ul>\n<li>  IPNS：基于SFS（自认证系统）命名体系</li>\n<li>  可以和现有域名系统绑定</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://zhuanlan.zhihu.com/p/32615963\">https://zhuanlan.zhihu.com/p/32615963</a></p>\n<p><a href=\"https://github.com/ipfs/ipfs\">Peer-to-peer hypermedia protocol</a></p>\n<h2 id=\"什么是IPFS\"><a href=\"#什么是IPFS\" class=\"headerlink\" title=\"什么是IPFS\"></a>什么是IPFS</h2><p>星际文件系统(InterPlanetary File System). IPFS 是一个分布式的web, 点到点超媒体协议. 可以让我们的互联网速度更快, 更加安全, 并且更加开放. IPFS协议的目标是取代传统的互联网协议HTTP。</p>\n<h2 id=\"为什么有IPFS\"><a href=\"#为什么有IPFS\" class=\"headerlink\" title=\"为什么有IPFS\"></a>为什么有IPFS</h2><p>众所周知, 互联网是建立在HTTP协议上的. HTTP协议是个伟大的发明, 让我们的互联网得以快速发展.但是互联网发展到了今天HTTP逐渐出来了不足.</p>","more":"<h4 id=\"HTTP的中心化是低效的-并且成本很高\"><a href=\"#HTTP的中心化是低效的-并且成本很高\" class=\"headerlink\" title=\"HTTP的中心化是低效的, 并且成本很高\"></a>HTTP的中心化是低效的, 并且成本很高</h4><p>使用HTTP协议每次需要从中心化的服务器下载完整的文件(网页, 视频, 图片等), 速度慢, 效率低. 如果改用P2P的方式下载, 可以节省近60%的带宽. P2P将文件分割为小的块, 从多个服务器同时下载, 速度非常快.</p>\n<h4 id=\"Web文件经常被删除\"><a href=\"#Web文件经常被删除\" class=\"headerlink\" title=\"Web文件经常被删除\"></a>Web文件经常被删除</h4><p>回想一下是不是经常你收藏的某个页面, 在使用的时候浏览器返回404(无法找到页面), http的页面平均生存周期大约只有100天. Web文件经常被删除(由于存储成本太高), 无法永久保存. IPFS提供了文件的历史版本回溯功能(就像git版本控制工具一样), 可以很容易的查看文件的历史版本, 数据可以得到永久保存</p>\n<h4 id=\"中心化限制了web的成长\"><a href=\"#中心化限制了web的成长\" class=\"headerlink\" title=\"中心化限制了web的成长\"></a>中心化限制了web的成长</h4><p>我们的现有互联网是一个高度中心化的网络. 互联网是人类的伟大发明, 也是科技创新的加速器. 各种管制将对这互联网的功能造成威胁, 例如: 互联网封锁, 管制, 监控等等. 这些都源于互联网的中心化.而分布式的IPFS可以克服这些web的缺点.</p>\n<h4 id=\"互联网应用高度依赖主干网\"><a href=\"#互联网应用高度依赖主干网\" class=\"headerlink\" title=\"互联网应用高度依赖主干网\"></a>互联网应用高度依赖主干网</h4><p>主干网受制于诸多因素的影响, 战争, 自然灾害, 互联网管制, 中心化服务器宕机等等, 都可能是我们的互联网应用中断服务. IPFS可以是互联网应用极大的降低互联网应用对主干网的依赖.</p>\n<h2 id=\"IPFS的目标\"><a href=\"#IPFS的目标\" class=\"headerlink\" title=\"IPFS的目标\"></a>IPFS的目标</h2><p>IPFS不仅仅是为了加速web. 而是为了最终取代HTTP协议, 使互联网更加美好</p>\n<h2 id=\"IPFS包含哪些内容\"><a href=\"#IPFS包含哪些内容\" class=\"headerlink\" title=\"IPFS包含哪些内容\"></a>IPFS包含哪些内容</h2><h4 id=\"IPFS是一个协议，类似http协议\"><a href=\"#IPFS是一个协议，类似http协议\" class=\"headerlink\" title=\"IPFS是一个协议，类似http协议\"></a>IPFS是一个协议，类似http协议</h4><ul>\n<li>  定义了基于内容的寻址文件系统</li>\n<li>  内容分发</li>\n<li>  使用的技术分布式哈希、p2p传输、版本管理系统</li>\n</ul>\n<h4 id=\"IPFS是一个文件系统\"><a href=\"#IPFS是一个文件系统\" class=\"headerlink\" title=\"IPFS是一个文件系统\"></a>IPFS是一个文件系统</h4><ul>\n<li>  有文件夹和文件</li>\n<li>  可挂载文件系统</li>\n</ul>\n<h4 id=\"IPFS是一个web协议\"><a href=\"#IPFS是一个web协议\" class=\"headerlink\" title=\"IPFS是一个web协议\"></a>IPFS是一个web协议</h4><ul>\n<li>  可以像http那样查看互联网页面</li>\n<li>  未来浏览器可以直接支持 ipfs:/ 或者 fs:/ 协议</li>\n</ul>\n<h4 id=\"IPFS是模块化的协议\"><a href=\"#IPFS是模块化的协议\" class=\"headerlink\" title=\"IPFS是模块化的协议\"></a>IPFS是模块化的协议</h4><ul>\n<li>  连接层：通过其他任何网络协议连接</li>\n<li>  路由层：寻找定位文件所在位置</li>\n<li>  数据块交换：采用BitTorrent技术</li>\n</ul>\n<h4 id=\"IPFS是一个p2p系统\"><a href=\"#IPFS是一个p2p系统\" class=\"headerlink\" title=\"IPFS是一个p2p系统\"></a>IPFS是一个p2p系统</h4><ul>\n<li>  世界范围内的p2p文件传输网络</li>\n<li>  分布式网络结构</li>\n<li>  没有单点失效问题</li>\n</ul>\n<h4 id=\"IPFS天生是一个CDN\"><a href=\"#IPFS天生是一个CDN\" class=\"headerlink\" title=\"IPFS天生是一个CDN\"></a>IPFS天生是一个CDN</h4><ul>\n<li>  文件添加到IPFS网络，将会在全世界进行CDN加速</li>\n<li>  bittorrent的带宽管理</li>\n</ul>\n<h4 id=\"IPFS拥有命名服务\"><a href=\"#IPFS拥有命名服务\" class=\"headerlink\" title=\"IPFS拥有命名服务\"></a>IPFS拥有命名服务</h4><ul>\n<li>  IPNS：基于SFS（自认证系统）命名体系</li>\n<li>  可以和现有域名系统绑定</li>\n</ul>"},{"title":"Less初学","id":"1166","date":"2022-11-06T14:05:06.000Z","_content":"\n#### 变量\n\n```less\n@width: 10px;\n@height:@width + 10px;\n\n#header{\n    width: @width;\n    height: @height\n}\n```\n\n#### 混合\n\n```less\n.bordered{\n    border-top: dotted 1px black;\n    border-bottom:solid 2px black;\n}\n#menu a {\n    color: #111;\n    .bordered();\n}\n.post a {\n    color: red;\n    .bordered();\n}\n```\n<!-- more -->\n#### 嵌套\n\n```less\n#header{\n    color: black;\n    .navigation {\n        font-size: 12px;\n    }\n    .logo {\n        width: 300px;\n    }\n}\n```\n\n等价于\n\n```css\n#header {\n    color: black;\n}\n#header .navigation {\n    font-size: 12px;\n}\n#header .logo {\n    width: 300px;\n}\n```\n\n#### @规则 嵌套和冒泡\n\n```less\n.component {\n    width: 300px;\n    @media (min-width: 768px) {\n        width: 600px;\n        @media (min-resolution: 192dpi) {\n            background-image: url(/img/11.png);\n        }\n    }\n    @media (min-width: 1280px) {\n        width: 800px;\n    }\n}\n```\n\n等价于\n\n```css\n.component {\n  width: 300px;\n}\n@media (min-width: 768px) {\n  .component {\n    width: 600px;\n  }\n}\n@media (min-width: 768px) and (min-resolution: 192dpi) {\n  .component {\n    background-image: url(/img/retina2x.png);\n  }\n}\n@media (min-width: 1280px) {\n  .component {\n    width: 800px;\n  }\n}\n```\n\n#### 运算\\*\n\n#### 转义\n\n任何 `~\"anything\"` 或 `~'anything'` 形式的内容都将按原样输出，除非 [interpolation](https://less.bootcss.com/features/#variables-feature-variable-interpolation)。\n\n```less\n@min768: ~\"(min-width: 768px)\";\n.element {\n  @media @min768 {\n    font-size: 1.2rem;\n  }\n}\n```\n\n编译为：\n\n```less\n@media (min-width: 768px) {\n  .element {\n    font-size: 1.2rem;\n  }\n}\n```\n\n注意，从 Less 3.5 开始，可以简写为：\n\n```less\n@min768: (min-width: 768px);\n.element {\n  @media @min768 {\n    font-size: 1.2rem;\n  }\n}\n```\n\n#### 函数\n\n[Less 函数手册](https://less.bootcss.com/functions/)\n\n#### 命名空间和访问符\n\n```less\n#bundle(){\n    .button{\n        display: block;\n        border: 1px solid black;\n        &:hover {\n            background-color: white;\n        }\n    }\n    .tab {...}\n    .citation {...}\n}\n\n#header a {\n    color: orange;\n    #bundle.button(); // 或者 #bundle > .button\n}\n```\n\n如果不希望它们出现在输出的 CSS 中，例如 `#bundle .tab`，请将 `()` 附加到命名空间（例如 `#bundle()`）后面\n\n#### 作用域\n\n```less\n@var: red;\n\n#page {\n  @var: white;\n  #header {\n    color: @var; // white\n  }\n}\n/**\n 两者一样\n*/\n@var: red;\n#page {\n  #header {\n    color: @var; // white\n  }\n  @var: white;\n}\n```\n\n#### 导入\n\n```less\n@import \"library\"; // library.less\n@import \"typo.css\";\n```","source":"_posts/less初学.md","raw":"---\ntitle: Less初学\ntags: []\nid: '1166'\ncategories:\n  - - 文章\ndate: 2022-11-06 22:05:06\n---\n\n#### 变量\n\n```less\n@width: 10px;\n@height:@width + 10px;\n\n#header{\n    width: @width;\n    height: @height\n}\n```\n\n#### 混合\n\n```less\n.bordered{\n    border-top: dotted 1px black;\n    border-bottom:solid 2px black;\n}\n#menu a {\n    color: #111;\n    .bordered();\n}\n.post a {\n    color: red;\n    .bordered();\n}\n```\n<!-- more -->\n#### 嵌套\n\n```less\n#header{\n    color: black;\n    .navigation {\n        font-size: 12px;\n    }\n    .logo {\n        width: 300px;\n    }\n}\n```\n\n等价于\n\n```css\n#header {\n    color: black;\n}\n#header .navigation {\n    font-size: 12px;\n}\n#header .logo {\n    width: 300px;\n}\n```\n\n#### @规则 嵌套和冒泡\n\n```less\n.component {\n    width: 300px;\n    @media (min-width: 768px) {\n        width: 600px;\n        @media (min-resolution: 192dpi) {\n            background-image: url(/img/11.png);\n        }\n    }\n    @media (min-width: 1280px) {\n        width: 800px;\n    }\n}\n```\n\n等价于\n\n```css\n.component {\n  width: 300px;\n}\n@media (min-width: 768px) {\n  .component {\n    width: 600px;\n  }\n}\n@media (min-width: 768px) and (min-resolution: 192dpi) {\n  .component {\n    background-image: url(/img/retina2x.png);\n  }\n}\n@media (min-width: 1280px) {\n  .component {\n    width: 800px;\n  }\n}\n```\n\n#### 运算\\*\n\n#### 转义\n\n任何 `~\"anything\"` 或 `~'anything'` 形式的内容都将按原样输出，除非 [interpolation](https://less.bootcss.com/features/#variables-feature-variable-interpolation)。\n\n```less\n@min768: ~\"(min-width: 768px)\";\n.element {\n  @media @min768 {\n    font-size: 1.2rem;\n  }\n}\n```\n\n编译为：\n\n```less\n@media (min-width: 768px) {\n  .element {\n    font-size: 1.2rem;\n  }\n}\n```\n\n注意，从 Less 3.5 开始，可以简写为：\n\n```less\n@min768: (min-width: 768px);\n.element {\n  @media @min768 {\n    font-size: 1.2rem;\n  }\n}\n```\n\n#### 函数\n\n[Less 函数手册](https://less.bootcss.com/functions/)\n\n#### 命名空间和访问符\n\n```less\n#bundle(){\n    .button{\n        display: block;\n        border: 1px solid black;\n        &:hover {\n            background-color: white;\n        }\n    }\n    .tab {...}\n    .citation {...}\n}\n\n#header a {\n    color: orange;\n    #bundle.button(); // 或者 #bundle > .button\n}\n```\n\n如果不希望它们出现在输出的 CSS 中，例如 `#bundle .tab`，请将 `()` 附加到命名空间（例如 `#bundle()`）后面\n\n#### 作用域\n\n```less\n@var: red;\n\n#page {\n  @var: white;\n  #header {\n    color: @var; // white\n  }\n}\n/**\n 两者一样\n*/\n@var: red;\n#page {\n  #header {\n    color: @var; // white\n  }\n  @var: white;\n}\n```\n\n#### 导入\n\n```less\n@import \"library\"; // library.less\n@import \"typo.css\";\n```","slug":"less初学","published":1,"updated":"2024-03-12T02:24:18.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltnrar41000fjry16vnx4m1d","content":"<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@width:</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\"><span class=\"variable\">@height:</span><span class=\"variable\">@width</span> + <span class=\"number\">10px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#header</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"variable\">@width</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"variable\">@height</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"混合\"><a href=\"#混合\" class=\"headerlink\" title=\"混合\"></a>混合</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.bordered</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: dotted <span class=\"number\">1px</span> black;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>:solid <span class=\"number\">2px</span> black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#menu</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#111</span>;</span><br><span class=\"line\">    <span class=\"selector-class\">.bordered</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.post</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">    <span class=\"selector-class\">.bordered</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h4 id=\"嵌套\"><a href=\"#嵌套\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#header</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">    <span class=\"selector-class\">.navigation</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.logo</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>等价于</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#header</span> <span class=\"selector-class\">.navigation</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#header</span> <span class=\"selector-class\">.logo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"规则-嵌套和冒泡\"><a href=\"#规则-嵌套和冒泡\" class=\"headerlink\" title=\"@规则 嵌套和冒泡\"></a>@规则 嵌套和冒泡</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.component</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">768px</span>) &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">        <span class=\"keyword\">@media</span> (<span class=\"attribute\">min-resolution</span>: <span class=\"number\">192dpi</span>) &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background-image</span>: url(<span class=\"string\">/img/11.png</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">1280px</span>) &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>等价于</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.component</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">768px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.component</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">768px</span>) <span class=\"keyword\">and</span> (<span class=\"attribute\">min-resolution</span>: <span class=\"number\">192dpi</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.component</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">/img/retina2x.png</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">1280px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.component</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算*\"></a>运算*</h4><h4 id=\"转义\"><a href=\"#转义\" class=\"headerlink\" title=\"转义\"></a>转义</h4><p>任何 <code>~&quot;anything&quot;</code> 或 <code>~&#39;anything&#39;</code> 形式的内容都将按原样输出，除非 <a href=\"https://less.bootcss.com/features/#variables-feature-variable-interpolation\">interpolation</a>。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@min768:</span> <span class=\"string\">~&quot;(min-width: 768px)&quot;</span>;</span><br><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@media</span> <span class=\"variable\">@min768</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译为：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">768px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，从 Less 3.5 开始，可以简写为：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@min768:</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">768px</span>);</span><br><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@media</span> <span class=\"variable\">@min768</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><p><a href=\"https://less.bootcss.com/functions/\">Less 函数手册</a></p>\n<h4 id=\"命名空间和访问符\"><a href=\"#命名空间和访问符\" class=\"headerlink\" title=\"命名空间和访问符\"></a>命名空间和访问符</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#bundle</span>()&#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.button</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">        <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">        <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background-color</span>: white;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.tab</span> &#123;...&#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.citation</span> &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#header</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: orange;</span><br><span class=\"line\">    <span class=\"selector-id\">#bundle</span><span class=\"selector-class\">.button</span>(); <span class=\"comment\">// 或者 #bundle &gt; .button</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果不希望它们出现在输出的 CSS 中，例如 <code>#bundle .tab</code>，请将 <code>()</code> 附加到命名空间（例如 <code>#bundle()</code>）后面</p>\n<h4 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@var:</span> red;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#page</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">@var:</span> white;</span><br><span class=\"line\">  <span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">@var</span>; <span class=\"comment\">// white</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> 两者一样</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"variable\">@var:</span> red;</span><br><span class=\"line\"><span class=\"selector-id\">#page</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">@var</span>; <span class=\"comment\">// white</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable\">@var:</span> white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&quot;library&quot;</span>; <span class=\"comment\">// library.less</span></span><br><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&quot;typo.css&quot;</span>;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@width:</span> <span class=\"number\">10px</span>;</span><br><span class=\"line\"><span class=\"variable\">@height:</span><span class=\"variable\">@width</span> + <span class=\"number\">10px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#header</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"variable\">@width</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"variable\">@height</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"混合\"><a href=\"#混合\" class=\"headerlink\" title=\"混合\"></a>混合</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.bordered</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-top</span>: dotted <span class=\"number\">1px</span> black;</span><br><span class=\"line\">    <span class=\"attribute\">border-bottom</span>:solid <span class=\"number\">2px</span> black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#menu</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#111</span>;</span><br><span class=\"line\">    <span class=\"selector-class\">.bordered</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.post</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: red;</span><br><span class=\"line\">    <span class=\"selector-class\">.bordered</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"嵌套\"><a href=\"#嵌套\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#header</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">    <span class=\"selector-class\">.navigation</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.logo</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>等价于</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#header</span> <span class=\"selector-class\">.navigation</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#header</span> <span class=\"selector-class\">.logo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"规则-嵌套和冒泡\"><a href=\"#规则-嵌套和冒泡\" class=\"headerlink\" title=\"@规则 嵌套和冒泡\"></a>@规则 嵌套和冒泡</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.component</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">768px</span>) &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">        <span class=\"keyword\">@media</span> (<span class=\"attribute\">min-resolution</span>: <span class=\"number\">192dpi</span>) &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background-image</span>: url(<span class=\"string\">/img/11.png</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">1280px</span>) &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>等价于</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.component</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">768px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.component</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">768px</span>) <span class=\"keyword\">and</span> (<span class=\"attribute\">min-resolution</span>: <span class=\"number\">192dpi</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.component</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">/img/retina2x.png</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">1280px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.component</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"运算\"><a href=\"#运算\" class=\"headerlink\" title=\"运算*\"></a>运算*</h4><h4 id=\"转义\"><a href=\"#转义\" class=\"headerlink\" title=\"转义\"></a>转义</h4><p>任何 <code>~&quot;anything&quot;</code> 或 <code>~&#39;anything&#39;</code> 形式的内容都将按原样输出，除非 <a href=\"https://less.bootcss.com/features/#variables-feature-variable-interpolation\">interpolation</a>。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@min768:</span> <span class=\"string\">~&quot;(min-width: 768px)&quot;</span>;</span><br><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@media</span> <span class=\"variable\">@min768</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译为：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">768px</span>) &#123;</span><br><span class=\"line\">  <span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，从 Less 3.5 开始，可以简写为：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@min768:</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">768px</span>);</span><br><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">@media</span> <span class=\"variable\">@min768</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1.2rem</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h4><p><a href=\"https://less.bootcss.com/functions/\">Less 函数手册</a></p>\n<h4 id=\"命名空间和访问符\"><a href=\"#命名空间和访问符\" class=\"headerlink\" title=\"命名空间和访问符\"></a>命名空间和访问符</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#bundle</span>()&#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.button</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">        <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid black;</span><br><span class=\"line\">        <span class=\"selector-tag\">&amp;</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">background-color</span>: white;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.tab</span> &#123;...&#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.citation</span> &#123;...&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#header</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: orange;</span><br><span class=\"line\">    <span class=\"selector-id\">#bundle</span><span class=\"selector-class\">.button</span>(); <span class=\"comment\">// 或者 #bundle &gt; .button</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果不希望它们出现在输出的 CSS 中，例如 <code>#bundle .tab</code>，请将 <code>()</code> 附加到命名空间（例如 <code>#bundle()</code>）后面</p>\n<h4 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@var:</span> red;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#page</span> &#123;</span><br><span class=\"line\">  <span class=\"variable\">@var:</span> white;</span><br><span class=\"line\">  <span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">@var</span>; <span class=\"comment\">// white</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> 两者一样</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"variable\">@var:</span> red;</span><br><span class=\"line\"><span class=\"selector-id\">#page</span> &#123;</span><br><span class=\"line\">  <span class=\"selector-id\">#header</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">@var</span>; <span class=\"comment\">// white</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable\">@var:</span> white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h4><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&quot;library&quot;</span>; <span class=\"comment\">// library.less</span></span><br><span class=\"line\"><span class=\"keyword\">@import</span> <span class=\"string\">&quot;typo.css&quot;</span>;</span><br></pre></td></tr></table></figure>"},{"title":"Linux学习笔记","id":"964","date":"2022-04-17T02:27:53.000Z","_content":"\n整理了一下学习Linux命令的笔记，特发此文，后续继续更新。\n\n在初学Linux时推荐两种方法：\n\n1.  去相关社区、在线查询网站学习交流，我推荐两个：\n    \n    [Linux工具快速教程 — Linux Tools Quick Tutorial (linuxtools-rst.readthedocs.io)](https://linuxtools-rst.readthedocs.io/zh_CN/latest/)\n    \n    [Linux命令大全(手册) – 真正好用的Linux命令在线查询网站 (linuxcool.com)](https://www.linuxcool.com/)\n    \n2.  使用`man 命令` 查看帮助文档\n    \n\n### Shell\n<!-- more -->\n##### echo\n\n输出字符串或提取Shell变量的值\n\n`$变量` ：提取变量的值\n\n`echo $PATH` ：提取PATH环境变量并输出\n\n![image-20220407160502862](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407160502862.png)\n\n`$?`：提取最近一次Shell命令的返回值（退出状态）\n\n0表示没有错误，其它表示有错误\n\n![image-20220411172602554](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220411172602554.png)\n\n##### 一般变量\n\nLinux下变量无需声明，一般做字符串处理，数值计算时转化为数字\n\n*   创建或修改变量：`变量名=变量值` (中间不能有空格)\n    \n*   显式变量值：`echo $变量名`\n    \n*   删除变量：`unset 变量名`\n    \n*   导出变量名：`export 变量名`\n    \n\n![image-20220409195301371](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220409195301371.png)\n\n##### 特殊的Shell变量\n\n`$!`:后台运行的最后一个进程的ID号\n\n`$@`:与$\\*相同，但是使用时加引号，并在引号中返回每个参数，所有参数分解为包含若干个字符串的数组\n\n`$#`:传递给脚本或者函数的参数个数\n\n`$$`:执行本脚本程序的PID值\n\n`$*`:所有参数组合成的一个字符串\n\n`$?`:上一条语句的返回值\n\n`$0`:脚本程序自身的名称(命令行名称)\n\n`$1`、`$2`、`$3`:传给脚本或者函数的第一、二、三个参数\n\n编写一个shell脚本：\n\n```sh\n#!/bin/bash\nif [ $# -gt 1 ];\nthen\n        echo \"\\$0程序名称:$0,\\$1第一个参数是:$1\"\n        echo \"\\$2第二个参数是:$2,\\$*所有参数组合的字符串:$*\"\nelse\n        echo \"you need input beyond 2 pram\"\nfi\necho \"\\$$程序运行的PID值:$$\"\n```\n\n分别用`./specialshell.sh`和`source specialshell.sh`执行脚本，结果：\n\n![image-20220411181826008](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220411181826008.png)\n\n##### shell脚本\n\n当前目录创建一个test.sh, 加入:\n\n```shell\n#!/bin/bash\nfor x in apple banna cake fruits\ndo\n        echo \"I love eat $x\"\n        sleep 1\ndone\n```\n\n执行 `source test.sh`\n\n![image-20220411105352232](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220411105352232.png)\n\n##### for语句\n\n```sh\nfor var in list\ndo\n     statements\ndone\n```\n\n##### until语句\n\n```sh\nuntil [expression]\ndo\n    statements\ndone\n```\n\n##### if语句\n\n```sh\nif [expression];\nthen\n    statements\nelif [expression];\nthen\n    statements\nelse\n    statements\nfi\n```\n\n##### while语句\n\n```sh\nwhile expression\ndo\n    statements\ndone\n```\n\n##### 函数\n\n```sh\nfunction 函数名()\n{\n    statements\n}\n```\n\n##### test命令\n\n用来做字符串比较、数值比较、文件测试、逻辑操作符。\n\n字符串比较\n\n符号\n\n含义\n\n\\=\n\n比较两个字符串是否相等。如：test \"1\" = \"2\"\n\n!=\n\n比较两个字符串是否不等\n\n\\-n\n\n检查字符串长度是否大于0。如：test -n \"\"\n\n\\-z\n\n检查字符串长度是否等于0\n\n数值比较\n\n符号\n\n含义\n\n\\-eq\n\n比较两个数值是否相等\n\n\\-ge\n\n比较前者是否大于等于后者\n\n\\-le\n\n比较后者是否大于等于前者\n\n\\-ne\n\n比较两个数值是否不等\n\n\\-gt\n\n比较前者是否大于后者\n\n\\-lt\n\n比较前者是否小于后者\n\n文件测试\n\n符号\n\n含义\n\n\\-d\n\n检查是否是一个目录。如：test -d .inputrc\n\n\\-f\n\n检查是否是一个文件\n\n\\-e\n\n检查文件名或者目录名是否存在\n\n\\-r\n\n检查对此文件是否有\"读\"权限\n\n\\-s\n\n检查文件长度是否大于0\n\n\\-w\n\n检查对此文件是否有\"写\"权限\n\n\\-x\n\n检查对此文件是否有\"执行\"权限\n\n逻辑操作\n\n符号\n\n含义\n\n!\n\n逻辑非（NOT）。如：test ! 1 -lt 2\n\n\\-a\n\n逻辑与（AND）。如：test 1 -lt 2 -a 2 -gt 3\n\n\\-o\n\n逻辑或（OR）。如：test 1 -lt 2 -o 2 -lt 3\n\n### **GCC**\n\ngcc是多种语言、自由、跨平台的编译器\n\n##### 编译流程\n\nGCC将源代码便以为可执行程序的流程\n\n1.  预处理(Preproccessing)\n    \n2.  编译(Compilation)\n    \n3.  汇编(Assemble)\n    \n4.  链接(Linking)\n    \n\n常用参数\n\n1.  \\-version 查看版本\n2.  \\-v 输出编译的详细信息\n3.  \\-std 指定标准\n4.  \\-o 指定输出文件的名称\n5.  \\-Wall 输出所有警告信息\n6.  \\-c 直将源文件编译为object文件(.o)，而不进行链接，之后可用`gcc -o 可执行文件名称 out1.o out2.o out3.o`链接为可执行文件\n7.  \\-shared 编译为共享库(\\*.dll，.so)\n8.  \\-S 编译为汇编代码\n\n### **命令**\n\n##### useradd \\[参数\\] 用户名\n\n新建一个用户\n\n参数\n\n作用\n\n\\-D\n\n改变新建用户的预设值\n\n\\-c\n\n添加备注文字\n\n\\-d\n\n新用户每次登录时所使用的家目录\n\n\\-e\n\n用户终止日期，格式为YYYY-MM-DD\n\n\\-f\n\n用户过期几日后永久停权。当值为0时用户立即被停权，而值为-1时则关闭此功能，预设值为-1\n\n\\-g\n\n指定用户对应的用户组\n\n\\-G\n\n定义此用户为多个不同组的成员\n\n\\-m\n\n用户目录不存在时自动创建\n\n\\-M\n\n不建立用户家目录，优先于/etc/login.defs文件设定\n\n\\-n\n\n取消建立以用户名称为名的群组\n\n\\-r\n\n建立系统账号\n\n\\-u\n\n指定用户id\n\n仅仅只是用`useradd 用户名`这个命令不能创建一个可以登录使用的用户，/home目录下没有对应的用户，也创建不了密码。\n\n需要用`useradd -m 用户名`创建一个可登录的，可以创建密码的用户。创建后可以在etc目录下的passwd添加这个新用户的相关信息。\n\n添加新用户www：\n\n```\n[root@www ~]# useradd www\n```\n\n不创建家目录，并且禁止登陆：\n\n```\n[root@www ~]# useradd -M -s /sbin/nologin www\n```\n\n添加新用户www，指定UID为666，指定shell类型为/bin/bash，指定归属用户组为root，cool成员：\n\n```\n[root@www ~]# useradd -u 666 -s /bin/bash -G root,cool www\n```\n\n添加新用户www，设置家目录为/tmp/www，用户过期时间为2030/01/01.过期后两天停权：\n\n```\n[root@www ~]# useradd -e \"2030/01/01\" -f 2 -d /tmp/www www\n```\n\n此外，新增的用户不具有`sudo`权限，需要手动在`/etc/sudoer`增加新用户权限\n\n选项\n\n说明\n\nuser ALL=(ALL) ALL\n\n允许用户user执行sudo命令(需要输入密码).\n\n%user ALL=(ALL) ALL\n\n允许用户组user里面的用户执行sudo命令(需要输入密码).\n\nuser ALL=(ALL) NOPASSWD: ALL\n\n允许用户user执行sudo命令,并且在执行的时候不输入密码.\n\n%user ALL=(ALL) NOPASSWD: ALL\n\nALL=(ALL)允许用户组user里面的用户执行sudo命令,并且在执行的时候不输入密码.\n\n![image-20220416233152507](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220416233152507.png)\n\n更多信息查看文档 `man useradd`\n\n##### usermod \\[参数\\] 用户名\n\n改变用户的信息。其中参数选项的作用与 `useradd` 类似。\n\n##### who\n\n产看当前shell用户\n\n![image-20220417103032111](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417103032111.png)\n\n##### id\n\n查看当前用户的身份以及权限\n\n![image-20220409194409671](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220409194409671.png)\n\n##### make\n\nMakefile 支持多线程并发操作make 命令只会编译我们修改过的文件，没有修改的文件不用重新编译\n\nMakefile 描述的是文件编译的相关规则，它的规则主要是两个部分组成，分别是依赖的关系和执行的命令\n\n##### umask \\[-S\\] (权限掩码)\n\n新建初始化文件的权限掩码\n\n```shell\numask #获取当前权限掩码\numask -S #获取当前权限的可读权限信息\numask 0000 #修改新建初始化目录文件的权限\n```\n\n![image-20220414102213730](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220414102213730.png)\n\n![image-20220414102305203](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220414102305203.png)\n\n666& umask\n\n新建初始化目录的权限\n\n777& umask\n\n##### ls \\[参数\\] (正则表达式)\n\n文件的分类\n\n普通文件 `-` , 目录文件 `d` , （软）链接文件 `l` , 字符设备文件 `c` , 块设备文件 `b` , 管道文件 `p`\n\n目录不是目录，是一种目录文件\n\n目录\n\n*   r: 可以ls目录中的内容\n*   w: 可以删除增加目录文件\n*   x: 可以cd进入这个目录\n\n文件\n\n*   r：read 可读\n*   w：write 可写\n*   x：增删\n*   r：可运行\n\n`ls -ld /etc` ： 查看目录拥有权限\n\n![image-20220407151622771](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407151622771.png)\n\n##### chmod \\[选项\\] \\[文件或目录\\]\n\n赋予文件或目录权限\n\n`chmod u=wx etc` ：赋予etc目录 `w:增删` 和 `x:进入` 的权限\n\n`chmod u-r etc` ：删去etc目录 `r：可ls` 的权限\n\n其中还可以用三位十进制数表示不同权限\n\n> r :含义为 “可读”，用数字 4 表示 w:含义为 “可写”用数字 2 表示 x：含义为“可执行”用数字 1 表示 -：含义为“无权限”用数字0 表示\n\n所有者\n\n群组\n\n其他\n\n三位代表权限的数字\n\nrwx\n\nrwx\n\nrwx\n\n实际结果\n\n421\n\n421\n\n421\n\n777\n\n421\n\n401\n\n401\n\n705\n\n```sh\nchmod 777 a.out \n#777给auth.log文件赋予任何可读，可写，可执行权限\nchmod 755 a.out\n#755代表用户对该文件拥有读，写，执行的权限，同组和其它用户有读和执行权限，没有写权限\n```\n\n##### which \\[命令\\]\n\n查看命令的安装路径\n\n![image-20220407160526521](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407160526521.png)\n\n##### mout \\[参数\\]\n\n挂载文件系统\n\n> 挂载：是指由操作系统使一个 `存储设备` (如硬盘、CD-ROM或共享资源)上的计算机文件或目录可供用户通过计算机的 `文件系统` 访问的一个过程。\n> \n> 引自——[挂载\\_百度百科 (baidu.com)](https://baike.baidu.com/item/挂载)\n\n当访问挂载点的时候，系统就知道要用哪些数据组织形式访问哪些类型的文件系统(或者说是哪些物理设备)。\n\n> 作用：将一个具体存储设备上的具体文件系统和操作系统中对应的文件系统驱动(模块)关联起来，并将这个具体文件系统中的文件和目录关系挂载到全局目录树上，形成一个“激活运行状态”的文件系统。\n> \n> 引自——[https://www.zhihu.com/answer/2437952746](https://www.zhihu.com/answer/2437952746)\n\n将/dev/sdb1分区挂载到/wg目录上的命令：`mount /dev/sdb1 /wg`\n\numount实现文件系统的卸载\n\n卸载/wg上的文件系统的命令：`umount /wg`\n\n##### export \\[参数\\]\n\n将shell变量/函数输出为环境变量\n\n`-p` ：列出所有shell赋予程序的环境变量\n\n`-n` ：删除指定变量\n\n定义环境变量：`# export MYENV`\n\n赋值：`# export MYENV=1111`\n\n##### fdisk \\[选项\\] \\[设备\\]\n\n操纵磁盘分区表\n\n`-l`：列出所有分区表\n\n##### df \\[参数\\] \\[指定文件\\]\n\n显示磁盘空间使用情况\n\n![image-20220407141532576](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407141532576.png)\n\n`-a` ：显示所有系统文件\n\n`-h` ：以易于human的阅读方式显示\n\n`-l` ：只显示本地文件\n\n##### pwd\n\n打印当前工作目录(print working directory)\n\n##### source \\[指定文件\\]\n\nsource命令通常用于执行刚修改的 `初始化` 文件，使之立即生效，不用注销重新登陆？\n\n##### env\n\n查看Shell环境变量\n\n##### stat\n\n##### netstat\n\n`netstat -ant grep 3306`\n\n![image-20220407233817307](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407233817307.png)\n\n##### fflush\n\n##### kill \\[参数\\]\n\n### **文件**\n\n##### /etc/passwd\n\n系统用户配置文件，存储了系统中所有用户的基本信息。\n\n权限：所有用户可读\n\n```c\nsudo vim /etc/passwd\n```\n\n![image-20220409193721743](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220409193721743.png)\n\n名称\n\n说明\n\n用户名\n\n已创建的用户名\n\n加密口令\n\nx代表加密密码保存在`/etc/shadow`文件中\n\n用户ID\n\n代表用户的ID号，每个用户都有一个唯一的ID\n\n组ID\n\n代表群组的ID好，每个群组都有一个唯一的ID\n\n账号说明\n\n描述用户的信息\n\n主目录\n\n代表用户所在的家目录\n\n登录Shell\n\n代表用户使用Shell的类型\n\n![image-20220415181954137](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220415181954137.png)\n\n##### /etc/profile\n\n建立全系统通用的初始环境变量，每次用户登录时 `第一个` 被执行\n\n##### /etc/fstab\n\n系统启动时自动挂载。当系统启动时，系统会自动地从这个文件读取信息，并且会自动将此文件中指定的文件系统挂载到指定内目录。\n\n### 额外\n\n##### 禁止root用户\n\n禁止root用户登录，并新建一个自己的用户\n\n1.  新建wyz用户（具体查看useradd）\n    \n2.  赋予wyz 用户 sudo权限\n    \n3.  禁止root登录\n    \n    `$ sudo vim /etc/ssh/sshd_config`\n    \n    将`PermitRootLogin yes`更改为 `no`\n    \n    ![image-20220417163830390](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417163830390.png)\n    \n\n##### 进程\n\n可执行(二进制)程序被系统加载到内存空间运行时，就是 `进程`。\n\n每个进程都有唯一的标识号—— `PID`，进程可以产生新的进程，构成父子关系并形成进程树(pstree)。\n\n![image-20220417164549862](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417164549862.png)\n\n进程都有一个 `用户标识`——对应运行此程序的用户ID。如果可执行文件没有设置`suid`和`sgid`，则进程的 `有效用户标识` 为此用户，否则为文件的所有者。\n\n每一个进程属于且仅属于一个 `进程组`，向进程组发送信号，则组内所有进程都能收到。\n\n每个进程都属于一个唯一的 `会话` 。用户登录后产生一个`会话`，会话包含若干进程组。会话的id是首进程组的id。一个会话中只有一个进程组是前台进程组，和控制终端交互，获取输入，接收信号。\n\n控制终端关闭时，进程会收到 `SIGHUP` 信号。\n\n除了PID为 0 的进程外，所有进程都有父进程。\n\n进程优先级 = 优先级别(PR) + 谦让值(NI)。优先级别从父进程继承而来，不可更改，可以用 `nice` 将进程默认的谦让值从 0 改大(或改小)。\n\n##### 环境变量\n\n全局的环境变量：存放在 `/etc/profile`![image-20220417174359704](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417174359704.png)\n\n特定用户的环境变量：存放在home目录的 `.profile`或 `.bashhrc`中![image-20220417173635469](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417173635469.png)\n\n临时的环境变量：`export`定义，特定于此会话","source":"_posts/linux学习.md","raw":"---\ntitle: Linux学习笔记\ntags:\n  - Linux\nid: '964'\ncategories:\n  - - 学习笔记\ndate: 2022-04-17 10:27:53\n---\n\n整理了一下学习Linux命令的笔记，特发此文，后续继续更新。\n\n在初学Linux时推荐两种方法：\n\n1.  去相关社区、在线查询网站学习交流，我推荐两个：\n    \n    [Linux工具快速教程 — Linux Tools Quick Tutorial (linuxtools-rst.readthedocs.io)](https://linuxtools-rst.readthedocs.io/zh_CN/latest/)\n    \n    [Linux命令大全(手册) – 真正好用的Linux命令在线查询网站 (linuxcool.com)](https://www.linuxcool.com/)\n    \n2.  使用`man 命令` 查看帮助文档\n    \n\n### Shell\n<!-- more -->\n##### echo\n\n输出字符串或提取Shell变量的值\n\n`$变量` ：提取变量的值\n\n`echo $PATH` ：提取PATH环境变量并输出\n\n![image-20220407160502862](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407160502862.png)\n\n`$?`：提取最近一次Shell命令的返回值（退出状态）\n\n0表示没有错误，其它表示有错误\n\n![image-20220411172602554](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220411172602554.png)\n\n##### 一般变量\n\nLinux下变量无需声明，一般做字符串处理，数值计算时转化为数字\n\n*   创建或修改变量：`变量名=变量值` (中间不能有空格)\n    \n*   显式变量值：`echo $变量名`\n    \n*   删除变量：`unset 变量名`\n    \n*   导出变量名：`export 变量名`\n    \n\n![image-20220409195301371](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220409195301371.png)\n\n##### 特殊的Shell变量\n\n`$!`:后台运行的最后一个进程的ID号\n\n`$@`:与$\\*相同，但是使用时加引号，并在引号中返回每个参数，所有参数分解为包含若干个字符串的数组\n\n`$#`:传递给脚本或者函数的参数个数\n\n`$$`:执行本脚本程序的PID值\n\n`$*`:所有参数组合成的一个字符串\n\n`$?`:上一条语句的返回值\n\n`$0`:脚本程序自身的名称(命令行名称)\n\n`$1`、`$2`、`$3`:传给脚本或者函数的第一、二、三个参数\n\n编写一个shell脚本：\n\n```sh\n#!/bin/bash\nif [ $# -gt 1 ];\nthen\n        echo \"\\$0程序名称:$0,\\$1第一个参数是:$1\"\n        echo \"\\$2第二个参数是:$2,\\$*所有参数组合的字符串:$*\"\nelse\n        echo \"you need input beyond 2 pram\"\nfi\necho \"\\$$程序运行的PID值:$$\"\n```\n\n分别用`./specialshell.sh`和`source specialshell.sh`执行脚本，结果：\n\n![image-20220411181826008](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220411181826008.png)\n\n##### shell脚本\n\n当前目录创建一个test.sh, 加入:\n\n```shell\n#!/bin/bash\nfor x in apple banna cake fruits\ndo\n        echo \"I love eat $x\"\n        sleep 1\ndone\n```\n\n执行 `source test.sh`\n\n![image-20220411105352232](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220411105352232.png)\n\n##### for语句\n\n```sh\nfor var in list\ndo\n     statements\ndone\n```\n\n##### until语句\n\n```sh\nuntil [expression]\ndo\n    statements\ndone\n```\n\n##### if语句\n\n```sh\nif [expression];\nthen\n    statements\nelif [expression];\nthen\n    statements\nelse\n    statements\nfi\n```\n\n##### while语句\n\n```sh\nwhile expression\ndo\n    statements\ndone\n```\n\n##### 函数\n\n```sh\nfunction 函数名()\n{\n    statements\n}\n```\n\n##### test命令\n\n用来做字符串比较、数值比较、文件测试、逻辑操作符。\n\n字符串比较\n\n符号\n\n含义\n\n\\=\n\n比较两个字符串是否相等。如：test \"1\" = \"2\"\n\n!=\n\n比较两个字符串是否不等\n\n\\-n\n\n检查字符串长度是否大于0。如：test -n \"\"\n\n\\-z\n\n检查字符串长度是否等于0\n\n数值比较\n\n符号\n\n含义\n\n\\-eq\n\n比较两个数值是否相等\n\n\\-ge\n\n比较前者是否大于等于后者\n\n\\-le\n\n比较后者是否大于等于前者\n\n\\-ne\n\n比较两个数值是否不等\n\n\\-gt\n\n比较前者是否大于后者\n\n\\-lt\n\n比较前者是否小于后者\n\n文件测试\n\n符号\n\n含义\n\n\\-d\n\n检查是否是一个目录。如：test -d .inputrc\n\n\\-f\n\n检查是否是一个文件\n\n\\-e\n\n检查文件名或者目录名是否存在\n\n\\-r\n\n检查对此文件是否有\"读\"权限\n\n\\-s\n\n检查文件长度是否大于0\n\n\\-w\n\n检查对此文件是否有\"写\"权限\n\n\\-x\n\n检查对此文件是否有\"执行\"权限\n\n逻辑操作\n\n符号\n\n含义\n\n!\n\n逻辑非（NOT）。如：test ! 1 -lt 2\n\n\\-a\n\n逻辑与（AND）。如：test 1 -lt 2 -a 2 -gt 3\n\n\\-o\n\n逻辑或（OR）。如：test 1 -lt 2 -o 2 -lt 3\n\n### **GCC**\n\ngcc是多种语言、自由、跨平台的编译器\n\n##### 编译流程\n\nGCC将源代码便以为可执行程序的流程\n\n1.  预处理(Preproccessing)\n    \n2.  编译(Compilation)\n    \n3.  汇编(Assemble)\n    \n4.  链接(Linking)\n    \n\n常用参数\n\n1.  \\-version 查看版本\n2.  \\-v 输出编译的详细信息\n3.  \\-std 指定标准\n4.  \\-o 指定输出文件的名称\n5.  \\-Wall 输出所有警告信息\n6.  \\-c 直将源文件编译为object文件(.o)，而不进行链接，之后可用`gcc -o 可执行文件名称 out1.o out2.o out3.o`链接为可执行文件\n7.  \\-shared 编译为共享库(\\*.dll，.so)\n8.  \\-S 编译为汇编代码\n\n### **命令**\n\n##### useradd \\[参数\\] 用户名\n\n新建一个用户\n\n参数\n\n作用\n\n\\-D\n\n改变新建用户的预设值\n\n\\-c\n\n添加备注文字\n\n\\-d\n\n新用户每次登录时所使用的家目录\n\n\\-e\n\n用户终止日期，格式为YYYY-MM-DD\n\n\\-f\n\n用户过期几日后永久停权。当值为0时用户立即被停权，而值为-1时则关闭此功能，预设值为-1\n\n\\-g\n\n指定用户对应的用户组\n\n\\-G\n\n定义此用户为多个不同组的成员\n\n\\-m\n\n用户目录不存在时自动创建\n\n\\-M\n\n不建立用户家目录，优先于/etc/login.defs文件设定\n\n\\-n\n\n取消建立以用户名称为名的群组\n\n\\-r\n\n建立系统账号\n\n\\-u\n\n指定用户id\n\n仅仅只是用`useradd 用户名`这个命令不能创建一个可以登录使用的用户，/home目录下没有对应的用户，也创建不了密码。\n\n需要用`useradd -m 用户名`创建一个可登录的，可以创建密码的用户。创建后可以在etc目录下的passwd添加这个新用户的相关信息。\n\n添加新用户www：\n\n```\n[root@www ~]# useradd www\n```\n\n不创建家目录，并且禁止登陆：\n\n```\n[root@www ~]# useradd -M -s /sbin/nologin www\n```\n\n添加新用户www，指定UID为666，指定shell类型为/bin/bash，指定归属用户组为root，cool成员：\n\n```\n[root@www ~]# useradd -u 666 -s /bin/bash -G root,cool www\n```\n\n添加新用户www，设置家目录为/tmp/www，用户过期时间为2030/01/01.过期后两天停权：\n\n```\n[root@www ~]# useradd -e \"2030/01/01\" -f 2 -d /tmp/www www\n```\n\n此外，新增的用户不具有`sudo`权限，需要手动在`/etc/sudoer`增加新用户权限\n\n选项\n\n说明\n\nuser ALL=(ALL) ALL\n\n允许用户user执行sudo命令(需要输入密码).\n\n%user ALL=(ALL) ALL\n\n允许用户组user里面的用户执行sudo命令(需要输入密码).\n\nuser ALL=(ALL) NOPASSWD: ALL\n\n允许用户user执行sudo命令,并且在执行的时候不输入密码.\n\n%user ALL=(ALL) NOPASSWD: ALL\n\nALL=(ALL)允许用户组user里面的用户执行sudo命令,并且在执行的时候不输入密码.\n\n![image-20220416233152507](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220416233152507.png)\n\n更多信息查看文档 `man useradd`\n\n##### usermod \\[参数\\] 用户名\n\n改变用户的信息。其中参数选项的作用与 `useradd` 类似。\n\n##### who\n\n产看当前shell用户\n\n![image-20220417103032111](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417103032111.png)\n\n##### id\n\n查看当前用户的身份以及权限\n\n![image-20220409194409671](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220409194409671.png)\n\n##### make\n\nMakefile 支持多线程并发操作make 命令只会编译我们修改过的文件，没有修改的文件不用重新编译\n\nMakefile 描述的是文件编译的相关规则，它的规则主要是两个部分组成，分别是依赖的关系和执行的命令\n\n##### umask \\[-S\\] (权限掩码)\n\n新建初始化文件的权限掩码\n\n```shell\numask #获取当前权限掩码\numask -S #获取当前权限的可读权限信息\numask 0000 #修改新建初始化目录文件的权限\n```\n\n![image-20220414102213730](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220414102213730.png)\n\n![image-20220414102305203](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220414102305203.png)\n\n666& umask\n\n新建初始化目录的权限\n\n777& umask\n\n##### ls \\[参数\\] (正则表达式)\n\n文件的分类\n\n普通文件 `-` , 目录文件 `d` , （软）链接文件 `l` , 字符设备文件 `c` , 块设备文件 `b` , 管道文件 `p`\n\n目录不是目录，是一种目录文件\n\n目录\n\n*   r: 可以ls目录中的内容\n*   w: 可以删除增加目录文件\n*   x: 可以cd进入这个目录\n\n文件\n\n*   r：read 可读\n*   w：write 可写\n*   x：增删\n*   r：可运行\n\n`ls -ld /etc` ： 查看目录拥有权限\n\n![image-20220407151622771](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407151622771.png)\n\n##### chmod \\[选项\\] \\[文件或目录\\]\n\n赋予文件或目录权限\n\n`chmod u=wx etc` ：赋予etc目录 `w:增删` 和 `x:进入` 的权限\n\n`chmod u-r etc` ：删去etc目录 `r：可ls` 的权限\n\n其中还可以用三位十进制数表示不同权限\n\n> r :含义为 “可读”，用数字 4 表示 w:含义为 “可写”用数字 2 表示 x：含义为“可执行”用数字 1 表示 -：含义为“无权限”用数字0 表示\n\n所有者\n\n群组\n\n其他\n\n三位代表权限的数字\n\nrwx\n\nrwx\n\nrwx\n\n实际结果\n\n421\n\n421\n\n421\n\n777\n\n421\n\n401\n\n401\n\n705\n\n```sh\nchmod 777 a.out \n#777给auth.log文件赋予任何可读，可写，可执行权限\nchmod 755 a.out\n#755代表用户对该文件拥有读，写，执行的权限，同组和其它用户有读和执行权限，没有写权限\n```\n\n##### which \\[命令\\]\n\n查看命令的安装路径\n\n![image-20220407160526521](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407160526521.png)\n\n##### mout \\[参数\\]\n\n挂载文件系统\n\n> 挂载：是指由操作系统使一个 `存储设备` (如硬盘、CD-ROM或共享资源)上的计算机文件或目录可供用户通过计算机的 `文件系统` 访问的一个过程。\n> \n> 引自——[挂载\\_百度百科 (baidu.com)](https://baike.baidu.com/item/挂载)\n\n当访问挂载点的时候，系统就知道要用哪些数据组织形式访问哪些类型的文件系统(或者说是哪些物理设备)。\n\n> 作用：将一个具体存储设备上的具体文件系统和操作系统中对应的文件系统驱动(模块)关联起来，并将这个具体文件系统中的文件和目录关系挂载到全局目录树上，形成一个“激活运行状态”的文件系统。\n> \n> 引自——[https://www.zhihu.com/answer/2437952746](https://www.zhihu.com/answer/2437952746)\n\n将/dev/sdb1分区挂载到/wg目录上的命令：`mount /dev/sdb1 /wg`\n\numount实现文件系统的卸载\n\n卸载/wg上的文件系统的命令：`umount /wg`\n\n##### export \\[参数\\]\n\n将shell变量/函数输出为环境变量\n\n`-p` ：列出所有shell赋予程序的环境变量\n\n`-n` ：删除指定变量\n\n定义环境变量：`# export MYENV`\n\n赋值：`# export MYENV=1111`\n\n##### fdisk \\[选项\\] \\[设备\\]\n\n操纵磁盘分区表\n\n`-l`：列出所有分区表\n\n##### df \\[参数\\] \\[指定文件\\]\n\n显示磁盘空间使用情况\n\n![image-20220407141532576](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407141532576.png)\n\n`-a` ：显示所有系统文件\n\n`-h` ：以易于human的阅读方式显示\n\n`-l` ：只显示本地文件\n\n##### pwd\n\n打印当前工作目录(print working directory)\n\n##### source \\[指定文件\\]\n\nsource命令通常用于执行刚修改的 `初始化` 文件，使之立即生效，不用注销重新登陆？\n\n##### env\n\n查看Shell环境变量\n\n##### stat\n\n##### netstat\n\n`netstat -ant grep 3306`\n\n![image-20220407233817307](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407233817307.png)\n\n##### fflush\n\n##### kill \\[参数\\]\n\n### **文件**\n\n##### /etc/passwd\n\n系统用户配置文件，存储了系统中所有用户的基本信息。\n\n权限：所有用户可读\n\n```c\nsudo vim /etc/passwd\n```\n\n![image-20220409193721743](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220409193721743.png)\n\n名称\n\n说明\n\n用户名\n\n已创建的用户名\n\n加密口令\n\nx代表加密密码保存在`/etc/shadow`文件中\n\n用户ID\n\n代表用户的ID号，每个用户都有一个唯一的ID\n\n组ID\n\n代表群组的ID好，每个群组都有一个唯一的ID\n\n账号说明\n\n描述用户的信息\n\n主目录\n\n代表用户所在的家目录\n\n登录Shell\n\n代表用户使用Shell的类型\n\n![image-20220415181954137](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220415181954137.png)\n\n##### /etc/profile\n\n建立全系统通用的初始环境变量，每次用户登录时 `第一个` 被执行\n\n##### /etc/fstab\n\n系统启动时自动挂载。当系统启动时，系统会自动地从这个文件读取信息，并且会自动将此文件中指定的文件系统挂载到指定内目录。\n\n### 额外\n\n##### 禁止root用户\n\n禁止root用户登录，并新建一个自己的用户\n\n1.  新建wyz用户（具体查看useradd）\n    \n2.  赋予wyz 用户 sudo权限\n    \n3.  禁止root登录\n    \n    `$ sudo vim /etc/ssh/sshd_config`\n    \n    将`PermitRootLogin yes`更改为 `no`\n    \n    ![image-20220417163830390](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417163830390.png)\n    \n\n##### 进程\n\n可执行(二进制)程序被系统加载到内存空间运行时，就是 `进程`。\n\n每个进程都有唯一的标识号—— `PID`，进程可以产生新的进程，构成父子关系并形成进程树(pstree)。\n\n![image-20220417164549862](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417164549862.png)\n\n进程都有一个 `用户标识`——对应运行此程序的用户ID。如果可执行文件没有设置`suid`和`sgid`，则进程的 `有效用户标识` 为此用户，否则为文件的所有者。\n\n每一个进程属于且仅属于一个 `进程组`，向进程组发送信号，则组内所有进程都能收到。\n\n每个进程都属于一个唯一的 `会话` 。用户登录后产生一个`会话`，会话包含若干进程组。会话的id是首进程组的id。一个会话中只有一个进程组是前台进程组，和控制终端交互，获取输入，接收信号。\n\n控制终端关闭时，进程会收到 `SIGHUP` 信号。\n\n除了PID为 0 的进程外，所有进程都有父进程。\n\n进程优先级 = 优先级别(PR) + 谦让值(NI)。优先级别从父进程继承而来，不可更改，可以用 `nice` 将进程默认的谦让值从 0 改大(或改小)。\n\n##### 环境变量\n\n全局的环境变量：存放在 `/etc/profile`![image-20220417174359704](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417174359704.png)\n\n特定用户的环境变量：存放在home目录的 `.profile`或 `.bashhrc`中![image-20220417173635469](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417173635469.png)\n\n临时的环境变量：`export`定义，特定于此会话","slug":"linux学习","published":1,"updated":"2024-03-12T10:44:08.368Z","_id":"cltnrar44000jjry15mu54r7w","comments":1,"layout":"post","photos":[],"link":"","content":"<p>整理了一下学习Linux命令的笔记，特发此文，后续继续更新。</p>\n<p>在初学Linux时推荐两种方法：</p>\n<ol>\n<li>去相关社区、在线查询网站学习交流，我推荐两个： <a href=\"https://linuxtools-rst.readthedocs.io/zh_CN/latest/\">Linux工具快速教程 — Linux Tools Quick Tutorial (linuxtools-rst.readthedocs.io)</a> <a href=\"https://www.linuxcool.com/\">Linux命令大全(手册) – 真正好用的Linux命令在线查询网站 (linuxcool.com)</a></li>\n<li>使用<code>man 命令</code> 查看帮助文档</li>\n</ol>\n<h3 id=\"Shell\"><a href=\"#Shell\" class=\"headerlink\" title=\"Shell\"></a>Shell</h3><span id=\"more\"></span>\n<h5 id=\"echo\"><a href=\"#echo\" class=\"headerlink\" title=\"echo\"></a>echo</h5><p>输出字符串或提取Shell变量的值</p>\n<p><code>$变量</code> ：提取变量的值</p>\n<p><code>echo $PATH</code> ：提取PATH环境变量并输出</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407160502862.png\" alt=\"image-20220407160502862\"></p>\n<p><code>$?</code>：提取最近一次Shell命令的返回值（退出状态）</p>\n<p>0表示没有错误，其它表示有错误</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220411172602554.png\" alt=\"image-20220411172602554\"></p>\n<h5 id=\"一般变量\"><a href=\"#一般变量\" class=\"headerlink\" title=\"一般变量\"></a>一般变量</h5><p>Linux下变量无需声明，一般做字符串处理，数值计算时转化为数字</p>\n<ul>\n<li>创建或修改变量：<code>变量名=变量值</code> (中间不能有空格)</li>\n<li>显式变量值：<code>echo $变量名</code></li>\n<li>删除变量：<code>unset 变量名</code></li>\n<li>导出变量名：<code>export 变量名</code></li>\n</ul>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220409195301371.png\" alt=\"image-20220409195301371\"></p>\n<h5 id=\"特殊的Shell变量\"><a href=\"#特殊的Shell变量\" class=\"headerlink\" title=\"特殊的Shell变量\"></a>特殊的Shell变量</h5><p><code>$!</code>:后台运行的最后一个进程的ID号</p>\n<p><code>$@</code>:与$*相同，但是使用时加引号，并在引号中返回每个参数，所有参数分解为包含若干个字符串的数组</p>\n<p><code>$#</code>:传递给脚本或者函数的参数个数</p>\n<p><code>$$</code>:执行本脚本程序的PID值</p>\n<p><code>$*</code>:所有参数组合成的一个字符串</p>\n<p><code>$?</code>:上一条语句的返回值</p>\n<p><code>$0</code>:脚本程序自身的名称(命令行名称)</p>\n<p><code>$1</code>、<code>$2</code>、<code>$3</code>:传给脚本或者函数的第一、二、三个参数</p>\n<p>编写一个shell脚本：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> -gt 1 ];</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;\\$0程序名称:<span class=\"variable\">$0</span>,\\$1第一个参数是:<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;\\$2第二个参数是:<span class=\"variable\">$2</span>,\\$*所有参数组合的字符串:$*&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;you need input beyond 2 pram&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;\\$$程序运行的PID值:$$&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>分别用<code>./specialshell.sh</code>和<code>source specialshell.sh</code>执行脚本，结果：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220411181826008.png\" alt=\"image-20220411181826008\"></p>\n<h5 id=\"shell脚本\"><a href=\"#shell脚本\" class=\"headerlink\" title=\"shell脚本\"></a>shell脚本</h5><p>当前目录创建一个test.sh, 加入:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\">for x in apple banna cake fruits</span><br><span class=\"line\">do</span><br><span class=\"line\">        echo &quot;I love eat $x&quot;</span><br><span class=\"line\">        sleep 1</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>source test.sh</code></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220411105352232.png\" alt=\"image-20220411105352232\"></p>\n<h5 id=\"for语句\"><a href=\"#for语句\" class=\"headerlink\" title=\"for语句\"></a>for语句</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> list</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">     statements</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"until语句\"><a href=\"#until语句\" class=\"headerlink\" title=\"until语句\"></a>until语句</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">until</span> [expression]</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    statements</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a>if语句</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [expression];</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    statements</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [expression];</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    statements</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    statements</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"while语句\"><a href=\"#while语句\" class=\"headerlink\" title=\"while语句\"></a>while语句</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> expression</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    statements</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> 函数名()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"test命令\"><a href=\"#test命令\" class=\"headerlink\" title=\"test命令\"></a>test命令</h5><p>用来做字符串比较、数值比较、文件测试、逻辑操作符。</p>\n<p>字符串比较</p>\n<p>符号</p>\n<p>含义</p>\n<p>=</p>\n<p>比较两个字符串是否相等。如：test “1” = “2”</p>\n<p>!=</p>\n<p>比较两个字符串是否不等</p>\n<p>-n</p>\n<p>检查字符串长度是否大于0。如：test -n “”</p>\n<p>-z</p>\n<p>检查字符串长度是否等于0</p>\n<p>数值比较</p>\n<p>符号</p>\n<p>含义</p>\n<p>-eq</p>\n<p>比较两个数值是否相等</p>\n<p>-ge</p>\n<p>比较前者是否大于等于后者</p>\n<p>-le</p>\n<p>比较后者是否大于等于前者</p>\n<p>-ne</p>\n<p>比较两个数值是否不等</p>\n<p>-gt</p>\n<p>比较前者是否大于后者</p>\n<p>-lt</p>\n<p>比较前者是否小于后者</p>\n<p>文件测试</p>\n<p>符号</p>\n<p>含义</p>\n<p>-d</p>\n<p>检查是否是一个目录。如：test -d .inputrc</p>\n<p>-f</p>\n<p>检查是否是一个文件</p>\n<p>-e</p>\n<p>检查文件名或者目录名是否存在</p>\n<p>-r</p>\n<p>检查对此文件是否有”读”权限</p>\n<p>-s</p>\n<p>检查文件长度是否大于0</p>\n<p>-w</p>\n<p>检查对此文件是否有”写”权限</p>\n<p>-x</p>\n<p>检查对此文件是否有”执行”权限</p>\n<p>逻辑操作</p>\n<p>符号</p>\n<p>含义</p>\n<p>!</p>\n<p>逻辑非（NOT）。如：test ! 1 -lt 2</p>\n<p>-a</p>\n<p>逻辑与（AND）。如：test 1 -lt 2 -a 2 -gt 3</p>\n<p>-o</p>\n<p>逻辑或（OR）。如：test 1 -lt 2 -o 2 -lt 3</p>\n<h3 id=\"GCC\"><a href=\"#GCC\" class=\"headerlink\" title=\"GCC\"></a><strong>GCC</strong></h3><p>gcc是多种语言、自由、跨平台的编译器</p>\n<h5 id=\"编译流程\"><a href=\"#编译流程\" class=\"headerlink\" title=\"编译流程\"></a>编译流程</h5><p>GCC将源代码便以为可执行程序的流程</p>\n<ol>\n<li>预处理(Preproccessing)</li>\n<li>编译(Compilation)</li>\n<li>汇编(Assemble)</li>\n<li>链接(Linking)</li>\n</ol>\n<p>常用参数</p>\n<ol>\n<li> -version 查看版本</li>\n<li> -v 输出编译的详细信息</li>\n<li> -std 指定标准</li>\n<li> -o 指定输出文件的名称</li>\n<li> -Wall 输出所有警告信息</li>\n<li> -c 直将源文件编译为object文件(.o)，而不进行链接，之后可用<code>gcc -o 可执行文件名称 out1.o out2.o out3.o</code>链接为可执行文件</li>\n<li> -shared 编译为共享库(*.dll，.so)</li>\n<li> -S 编译为汇编代码</li>\n</ol>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a><strong>命令</strong></h3><h5 id=\"useradd-参数-用户名\"><a href=\"#useradd-参数-用户名\" class=\"headerlink\" title=\"useradd [参数] 用户名\"></a>useradd [参数] 用户名</h5><p>新建一个用户</p>\n<p>参数</p>\n<p>作用</p>\n<p>-D</p>\n<p>改变新建用户的预设值</p>\n<p>-c</p>\n<p>添加备注文字</p>\n<p>-d</p>\n<p>新用户每次登录时所使用的家目录</p>\n<p>-e</p>\n<p>用户终止日期，格式为YYYY-MM-DD</p>\n<p>-f</p>\n<p>用户过期几日后永久停权。当值为0时用户立即被停权，而值为-1时则关闭此功能，预设值为-1</p>\n<p>-g</p>\n<p>指定用户对应的用户组</p>\n<p>-G</p>\n<p>定义此用户为多个不同组的成员</p>\n<p>-m</p>\n<p>用户目录不存在时自动创建</p>\n<p>-M</p>\n<p>不建立用户家目录，优先于/etc/login.defs文件设定</p>\n<p>-n</p>\n<p>取消建立以用户名称为名的群组</p>\n<p>-r</p>\n<p>建立系统账号</p>\n<p>-u</p>\n<p>指定用户id</p>\n<p>仅仅只是用<code>useradd 用户名</code>这个命令不能创建一个可以登录使用的用户，/home目录下没有对应的用户，也创建不了密码。</p>\n<p>需要用<code>useradd -m 用户名</code>创建一个可登录的，可以创建密码的用户。创建后可以在etc目录下的passwd添加这个新用户的相关信息。</p>\n<p>添加新用户www：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# useradd www</span><br></pre></td></tr></table></figure>\n\n<p>不创建家目录，并且禁止登陆：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# useradd -M -s /sbin/nologin www</span><br></pre></td></tr></table></figure>\n\n<p>添加新用户www，指定UID为666，指定shell类型为/bin/bash，指定归属用户组为root，cool成员：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# useradd -u 666 -s /bin/bash -G root,cool www</span><br></pre></td></tr></table></figure>\n\n<p>添加新用户www，设置家目录为/tmp/www，用户过期时间为2030/01/01.过期后两天停权：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# useradd -e &quot;2030/01/01&quot; -f 2 -d /tmp/www www</span><br></pre></td></tr></table></figure>\n\n<p>此外，新增的用户不具有<code>sudo</code>权限，需要手动在<code>/etc/sudoer</code>增加新用户权限</p>\n<p>选项</p>\n<p>说明</p>\n<p>user ALL=(ALL) ALL</p>\n<p>允许用户user执行sudo命令(需要输入密码).</p>\n<p>%user ALL=(ALL) ALL</p>\n<p>允许用户组user里面的用户执行sudo命令(需要输入密码).</p>\n<p>user ALL=(ALL) NOPASSWD: ALL</p>\n<p>允许用户user执行sudo命令,并且在执行的时候不输入密码.</p>\n<p>%user ALL=(ALL) NOPASSWD: ALL</p>\n<p>ALL=(ALL)允许用户组user里面的用户执行sudo命令,并且在执行的时候不输入密码.</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220416233152507.png\" alt=\"image-20220416233152507\"></p>\n<p>更多信息查看文档 <code>man useradd</code></p>\n<h5 id=\"usermod-参数-用户名\"><a href=\"#usermod-参数-用户名\" class=\"headerlink\" title=\"usermod [参数] 用户名\"></a>usermod [参数] 用户名</h5><p>改变用户的信息。其中参数选项的作用与 <code>useradd</code> 类似。</p>\n<h5 id=\"who\"><a href=\"#who\" class=\"headerlink\" title=\"who\"></a>who</h5><p>产看当前shell用户</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417103032111.png\" alt=\"image-20220417103032111\"></p>\n<h5 id=\"id\"><a href=\"#id\" class=\"headerlink\" title=\"id\"></a>id</h5><p>查看当前用户的身份以及权限</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220409194409671.png\" alt=\"image-20220409194409671\"></p>\n<h5 id=\"make\"><a href=\"#make\" class=\"headerlink\" title=\"make\"></a>make</h5><p>Makefile 支持多线程并发操作make 命令只会编译我们修改过的文件，没有修改的文件不用重新编译</p>\n<p>Makefile 描述的是文件编译的相关规则，它的规则主要是两个部分组成，分别是依赖的关系和执行的命令</p>\n<h5 id=\"umask-S-权限掩码\"><a href=\"#umask-S-权限掩码\" class=\"headerlink\" title=\"umask [-S] (权限掩码)\"></a>umask [-S] (权限掩码)</h5><p>新建初始化文件的权限掩码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">umask #获取当前权限掩码</span><br><span class=\"line\">umask -S #获取当前权限的可读权限信息</span><br><span class=\"line\">umask 0000 #修改新建初始化目录文件的权限</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220414102213730.png\" alt=\"image-20220414102213730\"></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220414102305203.png\" alt=\"image-20220414102305203\"></p>\n<p>666&amp; umask</p>\n<p>新建初始化目录的权限</p>\n<p>777&amp; umask</p>\n<h5 id=\"ls-参数-正则表达式\"><a href=\"#ls-参数-正则表达式\" class=\"headerlink\" title=\"ls [参数] (正则表达式)\"></a>ls [参数] (正则表达式)</h5><p>文件的分类</p>\n<p>普通文件 <code>-</code> , 目录文件 <code>d</code> , （软）链接文件 <code>l</code> , 字符设备文件 <code>c</code> , 块设备文件 <code>b</code> , 管道文件 <code>p</code></p>\n<p>目录不是目录，是一种目录文件</p>\n<p>目录</p>\n<ul>\n<li>  r: 可以ls目录中的内容</li>\n<li>  w: 可以删除增加目录文件</li>\n<li>  x: 可以cd进入这个目录</li>\n</ul>\n<p>文件</p>\n<ul>\n<li>  r：read 可读</li>\n<li>  w：write 可写</li>\n<li>  x：增删</li>\n<li>  r：可运行</li>\n</ul>\n<p><code>ls -ld /etc</code> ： 查看目录拥有权限</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407151622771.png\" alt=\"image-20220407151622771\"></p>\n<h5 id=\"chmod-选项-文件或目录\"><a href=\"#chmod-选项-文件或目录\" class=\"headerlink\" title=\"chmod [选项] [文件或目录]\"></a>chmod [选项] [文件或目录]</h5><p>赋予文件或目录权限</p>\n<p><code>chmod u=wx etc</code> ：赋予etc目录 <code>w:增删</code> 和 <code>x:进入</code> 的权限</p>\n<p><code>chmod u-r etc</code> ：删去etc目录 <code>r：可ls</code> 的权限</p>\n<p>其中还可以用三位十进制数表示不同权限</p>\n<blockquote>\n<p>r :含义为 “可读”，用数字 4 表示 w:含义为 “可写”用数字 2 表示 x：含义为“可执行”用数字 1 表示 -：含义为“无权限”用数字0 表示</p>\n</blockquote>\n<p>所有者</p>\n<p>群组</p>\n<p>其他</p>\n<p>三位代表权限的数字</p>\n<p>rwx</p>\n<p>rwx</p>\n<p>rwx</p>\n<p>实际结果</p>\n<p>421</p>\n<p>421</p>\n<p>421</p>\n<p>777</p>\n<p>421</p>\n<p>401</p>\n<p>401</p>\n<p>705</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 777 a.out </span><br><span class=\"line\"><span class=\"comment\">#777给auth.log文件赋予任何可读，可写，可执行权限</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 755 a.out</span><br><span class=\"line\"><span class=\"comment\">#755代表用户对该文件拥有读，写，执行的权限，同组和其它用户有读和执行权限，没有写权限</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"which-命令\"><a href=\"#which-命令\" class=\"headerlink\" title=\"which [命令]\"></a>which [命令]</h5><p>查看命令的安装路径</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407160526521.png\" alt=\"image-20220407160526521\"></p>\n<h5 id=\"mout-参数\"><a href=\"#mout-参数\" class=\"headerlink\" title=\"mout [参数]\"></a>mout [参数]</h5><p>挂载文件系统</p>\n<blockquote>\n<p>挂载：是指由操作系统使一个 <code>存储设备</code> (如硬盘、CD-ROM或共享资源)上的计算机文件或目录可供用户通过计算机的 <code>文件系统</code> 访问的一个过程。</p>\n<p>引自——<a href=\"https://baike.baidu.com/item/%E6%8C%82%E8%BD%BD\">挂载_百度百科 (baidu.com)</a></p>\n</blockquote>\n<p>当访问挂载点的时候，系统就知道要用哪些数据组织形式访问哪些类型的文件系统(或者说是哪些物理设备)。</p>\n<blockquote>\n<p>作用：将一个具体存储设备上的具体文件系统和操作系统中对应的文件系统驱动(模块)关联起来，并将这个具体文件系统中的文件和目录关系挂载到全局目录树上，形成一个“激活运行状态”的文件系统。</p>\n<p>引自——<a href=\"https://www.zhihu.com/answer/2437952746\">https://www.zhihu.com/answer/2437952746</a></p>\n</blockquote>\n<p>将/dev/sdb1分区挂载到/wg目录上的命令：<code>mount /dev/sdb1 /wg</code></p>\n<p>umount实现文件系统的卸载</p>\n<p>卸载/wg上的文件系统的命令：<code>umount /wg</code></p>\n<h5 id=\"export-参数\"><a href=\"#export-参数\" class=\"headerlink\" title=\"export [参数]\"></a>export [参数]</h5><p>将shell变量/函数输出为环境变量</p>\n<p><code>-p</code> ：列出所有shell赋予程序的环境变量</p>\n<p><code>-n</code> ：删除指定变量</p>\n<p>定义环境变量：<code># export MYENV</code></p>\n<p>赋值：<code># export MYENV=1111</code></p>\n<h5 id=\"fdisk-选项-设备\"><a href=\"#fdisk-选项-设备\" class=\"headerlink\" title=\"fdisk [选项] [设备]\"></a>fdisk [选项] [设备]</h5><p>操纵磁盘分区表</p>\n<p><code>-l</code>：列出所有分区表</p>\n<h5 id=\"df-参数-指定文件\"><a href=\"#df-参数-指定文件\" class=\"headerlink\" title=\"df [参数] [指定文件]\"></a>df [参数] [指定文件]</h5><p>显示磁盘空间使用情况</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407141532576.png\" alt=\"image-20220407141532576\"></p>\n<p><code>-a</code> ：显示所有系统文件</p>\n<p><code>-h</code> ：以易于human的阅读方式显示</p>\n<p><code>-l</code> ：只显示本地文件</p>\n<h5 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a>pwd</h5><p>打印当前工作目录(print working directory)</p>\n<h5 id=\"source-指定文件\"><a href=\"#source-指定文件\" class=\"headerlink\" title=\"source [指定文件]\"></a>source [指定文件]</h5><p>source命令通常用于执行刚修改的 <code>初始化</code> 文件，使之立即生效，不用注销重新登陆？</p>\n<h5 id=\"env\"><a href=\"#env\" class=\"headerlink\" title=\"env\"></a>env</h5><p>查看Shell环境变量</p>\n<h5 id=\"stat\"><a href=\"#stat\" class=\"headerlink\" title=\"stat\"></a>stat</h5><h5 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h5><p><code>netstat -ant grep 3306</code></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407233817307.png\" alt=\"image-20220407233817307\"></p>\n<h5 id=\"fflush\"><a href=\"#fflush\" class=\"headerlink\" title=\"fflush\"></a>fflush</h5><h5 id=\"kill-参数\"><a href=\"#kill-参数\" class=\"headerlink\" title=\"kill [参数]\"></a>kill [参数]</h5><h3 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a><strong>文件</strong></h3><h5 id=\"etc-passwd\"><a href=\"#etc-passwd\" class=\"headerlink\" title=\"/etc/passwd\"></a>/etc/passwd</h5><p>系统用户配置文件，存储了系统中所有用户的基本信息。</p>\n<p>权限：所有用户可读</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/passwd</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220409193721743.png\" alt=\"image-20220409193721743\"></p>\n<p>名称</p>\n<p>说明</p>\n<p>用户名</p>\n<p>已创建的用户名</p>\n<p>加密口令</p>\n<p>x代表加密密码保存在<code>/etc/shadow</code>文件中</p>\n<p>用户ID</p>\n<p>代表用户的ID号，每个用户都有一个唯一的ID</p>\n<p>组ID</p>\n<p>代表群组的ID好，每个群组都有一个唯一的ID</p>\n<p>账号说明</p>\n<p>描述用户的信息</p>\n<p>主目录</p>\n<p>代表用户所在的家目录</p>\n<p>登录Shell</p>\n<p>代表用户使用Shell的类型</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220415181954137.png\" alt=\"image-20220415181954137\"></p>\n<h5 id=\"etc-profile\"><a href=\"#etc-profile\" class=\"headerlink\" title=\"/etc/profile\"></a>/etc/profile</h5><p>建立全系统通用的初始环境变量，每次用户登录时 <code>第一个</code> 被执行</p>\n<h5 id=\"etc-fstab\"><a href=\"#etc-fstab\" class=\"headerlink\" title=\"/etc/fstab\"></a>/etc/fstab</h5><p>系统启动时自动挂载。当系统启动时，系统会自动地从这个文件读取信息，并且会自动将此文件中指定的文件系统挂载到指定内目录。</p>\n<h3 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h3><h5 id=\"禁止root用户\"><a href=\"#禁止root用户\" class=\"headerlink\" title=\"禁止root用户\"></a>禁止root用户</h5><p>禁止root用户登录，并新建一个自己的用户</p>\n<ol>\n<li>新建wyz用户（具体查看useradd）</li>\n<li>赋予wyz 用户 sudo权限</li>\n<li>禁止root登录 <code>$ sudo vim /etc/ssh/sshd_config</code> 将<code>PermitRootLogin yes</code>更改为 <code>no</code> <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417163830390.png\" alt=\"image-20220417163830390\"></li>\n</ol>\n<h5 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h5><p>可执行(二进制)程序被系统加载到内存空间运行时，就是 <code>进程</code>。</p>\n<p>每个进程都有唯一的标识号—— <code>PID</code>，进程可以产生新的进程，构成父子关系并形成进程树(pstree)。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417164549862.png\" alt=\"image-20220417164549862\"></p>\n<p>进程都有一个 <code>用户标识</code>——对应运行此程序的用户ID。如果可执行文件没有设置<code>suid</code>和<code>sgid</code>，则进程的 <code>有效用户标识</code> 为此用户，否则为文件的所有者。</p>\n<p>每一个进程属于且仅属于一个 <code>进程组</code>，向进程组发送信号，则组内所有进程都能收到。</p>\n<p>每个进程都属于一个唯一的 <code>会话</code> 。用户登录后产生一个<code>会话</code>，会话包含若干进程组。会话的id是首进程组的id。一个会话中只有一个进程组是前台进程组，和控制终端交互，获取输入，接收信号。</p>\n<p>控制终端关闭时，进程会收到 <code>SIGHUP</code> 信号。</p>\n<p>除了PID为 0 的进程外，所有进程都有父进程。</p>\n<p>进程优先级 = 优先级别(PR) + 谦让值(NI)。优先级别从父进程继承而来，不可更改，可以用 <code>nice</code> 将进程默认的谦让值从 0 改大(或改小)。</p>\n<h5 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h5><p>全局的环境变量：存放在 <code>/etc/profile</code><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417174359704.png\" alt=\"image-20220417174359704\"></p>\n<p>特定用户的环境变量：存放在home目录的 <code>.profile</code>或 <code>.bashhrc</code>中<img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417173635469.png\" alt=\"image-20220417173635469\"></p>\n<p>临时的环境变量：<code>export</code>定义，特定于此会话</p>\n","site":{"data":{}},"excerpt":"<p>整理了一下学习Linux命令的笔记，特发此文，后续继续更新。</p>\n<p>在初学Linux时推荐两种方法：</p>\n<ol>\n<li>去相关社区、在线查询网站学习交流，我推荐两个： <a href=\"https://linuxtools-rst.readthedocs.io/zh_CN/latest/\">Linux工具快速教程 — Linux Tools Quick Tutorial (linuxtools-rst.readthedocs.io)</a> <a href=\"https://www.linuxcool.com/\">Linux命令大全(手册) – 真正好用的Linux命令在线查询网站 (linuxcool.com)</a></li>\n<li>使用<code>man 命令</code> 查看帮助文档</li>\n</ol>\n<h3 id=\"Shell\"><a href=\"#Shell\" class=\"headerlink\" title=\"Shell\"></a>Shell</h3>","more":"<h5 id=\"echo\"><a href=\"#echo\" class=\"headerlink\" title=\"echo\"></a>echo</h5><p>输出字符串或提取Shell变量的值</p>\n<p><code>$变量</code> ：提取变量的值</p>\n<p><code>echo $PATH</code> ：提取PATH环境变量并输出</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407160502862.png\" alt=\"image-20220407160502862\"></p>\n<p><code>$?</code>：提取最近一次Shell命令的返回值（退出状态）</p>\n<p>0表示没有错误，其它表示有错误</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220411172602554.png\" alt=\"image-20220411172602554\"></p>\n<h5 id=\"一般变量\"><a href=\"#一般变量\" class=\"headerlink\" title=\"一般变量\"></a>一般变量</h5><p>Linux下变量无需声明，一般做字符串处理，数值计算时转化为数字</p>\n<ul>\n<li>创建或修改变量：<code>变量名=变量值</code> (中间不能有空格)</li>\n<li>显式变量值：<code>echo $变量名</code></li>\n<li>删除变量：<code>unset 变量名</code></li>\n<li>导出变量名：<code>export 变量名</code></li>\n</ul>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220409195301371.png\" alt=\"image-20220409195301371\"></p>\n<h5 id=\"特殊的Shell变量\"><a href=\"#特殊的Shell变量\" class=\"headerlink\" title=\"特殊的Shell变量\"></a>特殊的Shell变量</h5><p><code>$!</code>:后台运行的最后一个进程的ID号</p>\n<p><code>$@</code>:与$*相同，但是使用时加引号，并在引号中返回每个参数，所有参数分解为包含若干个字符串的数组</p>\n<p><code>$#</code>:传递给脚本或者函数的参数个数</p>\n<p><code>$$</code>:执行本脚本程序的PID值</p>\n<p><code>$*</code>:所有参数组合成的一个字符串</p>\n<p><code>$?</code>:上一条语句的返回值</p>\n<p><code>$0</code>:脚本程序自身的名称(命令行名称)</p>\n<p><code>$1</code>、<code>$2</code>、<code>$3</code>:传给脚本或者函数的第一、二、三个参数</p>\n<p>编写一个shell脚本：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ <span class=\"variable\">$#</span> -gt 1 ];</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;\\$0程序名称:<span class=\"variable\">$0</span>,\\$1第一个参数是:<span class=\"variable\">$1</span>&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;\\$2第二个参数是:<span class=\"variable\">$2</span>,\\$*所有参数组合的字符串:$*&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">&quot;you need input beyond 2 pram&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;\\$$程序运行的PID值:$$&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>分别用<code>./specialshell.sh</code>和<code>source specialshell.sh</code>执行脚本，结果：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220411181826008.png\" alt=\"image-20220411181826008\"></p>\n<h5 id=\"shell脚本\"><a href=\"#shell脚本\" class=\"headerlink\" title=\"shell脚本\"></a>shell脚本</h5><p>当前目录创建一个test.sh, 加入:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\">for x in apple banna cake fruits</span><br><span class=\"line\">do</span><br><span class=\"line\">        echo &quot;I love eat $x&quot;</span><br><span class=\"line\">        sleep 1</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p>执行 <code>source test.sh</code></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220411105352232.png\" alt=\"image-20220411105352232\"></p>\n<h5 id=\"for语句\"><a href=\"#for语句\" class=\"headerlink\" title=\"for语句\"></a>for语句</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> list</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">     statements</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"until语句\"><a href=\"#until语句\" class=\"headerlink\" title=\"until语句\"></a>until语句</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">until</span> [expression]</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    statements</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a>if语句</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> [expression];</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    statements</span><br><span class=\"line\"><span class=\"keyword\">elif</span> [expression];</span><br><span class=\"line\"><span class=\"keyword\">then</span></span><br><span class=\"line\">    statements</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    statements</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"while语句\"><a href=\"#while语句\" class=\"headerlink\" title=\"while语句\"></a>while语句</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> expression</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    statements</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h5><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> 函数名()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    statements</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"test命令\"><a href=\"#test命令\" class=\"headerlink\" title=\"test命令\"></a>test命令</h5><p>用来做字符串比较、数值比较、文件测试、逻辑操作符。</p>\n<p>字符串比较</p>\n<p>符号</p>\n<p>含义</p>\n<p>=</p>\n<p>比较两个字符串是否相等。如：test “1” = “2”</p>\n<p>!=</p>\n<p>比较两个字符串是否不等</p>\n<p>-n</p>\n<p>检查字符串长度是否大于0。如：test -n “”</p>\n<p>-z</p>\n<p>检查字符串长度是否等于0</p>\n<p>数值比较</p>\n<p>符号</p>\n<p>含义</p>\n<p>-eq</p>\n<p>比较两个数值是否相等</p>\n<p>-ge</p>\n<p>比较前者是否大于等于后者</p>\n<p>-le</p>\n<p>比较后者是否大于等于前者</p>\n<p>-ne</p>\n<p>比较两个数值是否不等</p>\n<p>-gt</p>\n<p>比较前者是否大于后者</p>\n<p>-lt</p>\n<p>比较前者是否小于后者</p>\n<p>文件测试</p>\n<p>符号</p>\n<p>含义</p>\n<p>-d</p>\n<p>检查是否是一个目录。如：test -d .inputrc</p>\n<p>-f</p>\n<p>检查是否是一个文件</p>\n<p>-e</p>\n<p>检查文件名或者目录名是否存在</p>\n<p>-r</p>\n<p>检查对此文件是否有”读”权限</p>\n<p>-s</p>\n<p>检查文件长度是否大于0</p>\n<p>-w</p>\n<p>检查对此文件是否有”写”权限</p>\n<p>-x</p>\n<p>检查对此文件是否有”执行”权限</p>\n<p>逻辑操作</p>\n<p>符号</p>\n<p>含义</p>\n<p>!</p>\n<p>逻辑非（NOT）。如：test ! 1 -lt 2</p>\n<p>-a</p>\n<p>逻辑与（AND）。如：test 1 -lt 2 -a 2 -gt 3</p>\n<p>-o</p>\n<p>逻辑或（OR）。如：test 1 -lt 2 -o 2 -lt 3</p>\n<h3 id=\"GCC\"><a href=\"#GCC\" class=\"headerlink\" title=\"GCC\"></a><strong>GCC</strong></h3><p>gcc是多种语言、自由、跨平台的编译器</p>\n<h5 id=\"编译流程\"><a href=\"#编译流程\" class=\"headerlink\" title=\"编译流程\"></a>编译流程</h5><p>GCC将源代码便以为可执行程序的流程</p>\n<ol>\n<li>预处理(Preproccessing)</li>\n<li>编译(Compilation)</li>\n<li>汇编(Assemble)</li>\n<li>链接(Linking)</li>\n</ol>\n<p>常用参数</p>\n<ol>\n<li> -version 查看版本</li>\n<li> -v 输出编译的详细信息</li>\n<li> -std 指定标准</li>\n<li> -o 指定输出文件的名称</li>\n<li> -Wall 输出所有警告信息</li>\n<li> -c 直将源文件编译为object文件(.o)，而不进行链接，之后可用<code>gcc -o 可执行文件名称 out1.o out2.o out3.o</code>链接为可执行文件</li>\n<li> -shared 编译为共享库(*.dll，.so)</li>\n<li> -S 编译为汇编代码</li>\n</ol>\n<h3 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a><strong>命令</strong></h3><h5 id=\"useradd-参数-用户名\"><a href=\"#useradd-参数-用户名\" class=\"headerlink\" title=\"useradd [参数] 用户名\"></a>useradd [参数] 用户名</h5><p>新建一个用户</p>\n<p>参数</p>\n<p>作用</p>\n<p>-D</p>\n<p>改变新建用户的预设值</p>\n<p>-c</p>\n<p>添加备注文字</p>\n<p>-d</p>\n<p>新用户每次登录时所使用的家目录</p>\n<p>-e</p>\n<p>用户终止日期，格式为YYYY-MM-DD</p>\n<p>-f</p>\n<p>用户过期几日后永久停权。当值为0时用户立即被停权，而值为-1时则关闭此功能，预设值为-1</p>\n<p>-g</p>\n<p>指定用户对应的用户组</p>\n<p>-G</p>\n<p>定义此用户为多个不同组的成员</p>\n<p>-m</p>\n<p>用户目录不存在时自动创建</p>\n<p>-M</p>\n<p>不建立用户家目录，优先于/etc/login.defs文件设定</p>\n<p>-n</p>\n<p>取消建立以用户名称为名的群组</p>\n<p>-r</p>\n<p>建立系统账号</p>\n<p>-u</p>\n<p>指定用户id</p>\n<p>仅仅只是用<code>useradd 用户名</code>这个命令不能创建一个可以登录使用的用户，/home目录下没有对应的用户，也创建不了密码。</p>\n<p>需要用<code>useradd -m 用户名</code>创建一个可登录的，可以创建密码的用户。创建后可以在etc目录下的passwd添加这个新用户的相关信息。</p>\n<p>添加新用户www：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# useradd www</span><br></pre></td></tr></table></figure>\n\n<p>不创建家目录，并且禁止登陆：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# useradd -M -s /sbin/nologin www</span><br></pre></td></tr></table></figure>\n\n<p>添加新用户www，指定UID为666，指定shell类型为/bin/bash，指定归属用户组为root，cool成员：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# useradd -u 666 -s /bin/bash -G root,cool www</span><br></pre></td></tr></table></figure>\n\n<p>添加新用户www，设置家目录为/tmp/www，用户过期时间为2030/01/01.过期后两天停权：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@www ~]# useradd -e &quot;2030/01/01&quot; -f 2 -d /tmp/www www</span><br></pre></td></tr></table></figure>\n\n<p>此外，新增的用户不具有<code>sudo</code>权限，需要手动在<code>/etc/sudoer</code>增加新用户权限</p>\n<p>选项</p>\n<p>说明</p>\n<p>user ALL=(ALL) ALL</p>\n<p>允许用户user执行sudo命令(需要输入密码).</p>\n<p>%user ALL=(ALL) ALL</p>\n<p>允许用户组user里面的用户执行sudo命令(需要输入密码).</p>\n<p>user ALL=(ALL) NOPASSWD: ALL</p>\n<p>允许用户user执行sudo命令,并且在执行的时候不输入密码.</p>\n<p>%user ALL=(ALL) NOPASSWD: ALL</p>\n<p>ALL=(ALL)允许用户组user里面的用户执行sudo命令,并且在执行的时候不输入密码.</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220416233152507.png\" alt=\"image-20220416233152507\"></p>\n<p>更多信息查看文档 <code>man useradd</code></p>\n<h5 id=\"usermod-参数-用户名\"><a href=\"#usermod-参数-用户名\" class=\"headerlink\" title=\"usermod [参数] 用户名\"></a>usermod [参数] 用户名</h5><p>改变用户的信息。其中参数选项的作用与 <code>useradd</code> 类似。</p>\n<h5 id=\"who\"><a href=\"#who\" class=\"headerlink\" title=\"who\"></a>who</h5><p>产看当前shell用户</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417103032111.png\" alt=\"image-20220417103032111\"></p>\n<h5 id=\"id\"><a href=\"#id\" class=\"headerlink\" title=\"id\"></a>id</h5><p>查看当前用户的身份以及权限</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220409194409671.png\" alt=\"image-20220409194409671\"></p>\n<h5 id=\"make\"><a href=\"#make\" class=\"headerlink\" title=\"make\"></a>make</h5><p>Makefile 支持多线程并发操作make 命令只会编译我们修改过的文件，没有修改的文件不用重新编译</p>\n<p>Makefile 描述的是文件编译的相关规则，它的规则主要是两个部分组成，分别是依赖的关系和执行的命令</p>\n<h5 id=\"umask-S-权限掩码\"><a href=\"#umask-S-权限掩码\" class=\"headerlink\" title=\"umask [-S] (权限掩码)\"></a>umask [-S] (权限掩码)</h5><p>新建初始化文件的权限掩码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">umask #获取当前权限掩码</span><br><span class=\"line\">umask -S #获取当前权限的可读权限信息</span><br><span class=\"line\">umask 0000 #修改新建初始化目录文件的权限</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220414102213730.png\" alt=\"image-20220414102213730\"></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220414102305203.png\" alt=\"image-20220414102305203\"></p>\n<p>666&amp; umask</p>\n<p>新建初始化目录的权限</p>\n<p>777&amp; umask</p>\n<h5 id=\"ls-参数-正则表达式\"><a href=\"#ls-参数-正则表达式\" class=\"headerlink\" title=\"ls [参数] (正则表达式)\"></a>ls [参数] (正则表达式)</h5><p>文件的分类</p>\n<p>普通文件 <code>-</code> , 目录文件 <code>d</code> , （软）链接文件 <code>l</code> , 字符设备文件 <code>c</code> , 块设备文件 <code>b</code> , 管道文件 <code>p</code></p>\n<p>目录不是目录，是一种目录文件</p>\n<p>目录</p>\n<ul>\n<li>  r: 可以ls目录中的内容</li>\n<li>  w: 可以删除增加目录文件</li>\n<li>  x: 可以cd进入这个目录</li>\n</ul>\n<p>文件</p>\n<ul>\n<li>  r：read 可读</li>\n<li>  w：write 可写</li>\n<li>  x：增删</li>\n<li>  r：可运行</li>\n</ul>\n<p><code>ls -ld /etc</code> ： 查看目录拥有权限</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407151622771.png\" alt=\"image-20220407151622771\"></p>\n<h5 id=\"chmod-选项-文件或目录\"><a href=\"#chmod-选项-文件或目录\" class=\"headerlink\" title=\"chmod [选项] [文件或目录]\"></a>chmod [选项] [文件或目录]</h5><p>赋予文件或目录权限</p>\n<p><code>chmod u=wx etc</code> ：赋予etc目录 <code>w:增删</code> 和 <code>x:进入</code> 的权限</p>\n<p><code>chmod u-r etc</code> ：删去etc目录 <code>r：可ls</code> 的权限</p>\n<p>其中还可以用三位十进制数表示不同权限</p>\n<blockquote>\n<p>r :含义为 “可读”，用数字 4 表示 w:含义为 “可写”用数字 2 表示 x：含义为“可执行”用数字 1 表示 -：含义为“无权限”用数字0 表示</p>\n</blockquote>\n<p>所有者</p>\n<p>群组</p>\n<p>其他</p>\n<p>三位代表权限的数字</p>\n<p>rwx</p>\n<p>rwx</p>\n<p>rwx</p>\n<p>实际结果</p>\n<p>421</p>\n<p>421</p>\n<p>421</p>\n<p>777</p>\n<p>421</p>\n<p>401</p>\n<p>401</p>\n<p>705</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">chmod</span> 777 a.out </span><br><span class=\"line\"><span class=\"comment\">#777给auth.log文件赋予任何可读，可写，可执行权限</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 755 a.out</span><br><span class=\"line\"><span class=\"comment\">#755代表用户对该文件拥有读，写，执行的权限，同组和其它用户有读和执行权限，没有写权限</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"which-命令\"><a href=\"#which-命令\" class=\"headerlink\" title=\"which [命令]\"></a>which [命令]</h5><p>查看命令的安装路径</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407160526521.png\" alt=\"image-20220407160526521\"></p>\n<h5 id=\"mout-参数\"><a href=\"#mout-参数\" class=\"headerlink\" title=\"mout [参数]\"></a>mout [参数]</h5><p>挂载文件系统</p>\n<blockquote>\n<p>挂载：是指由操作系统使一个 <code>存储设备</code> (如硬盘、CD-ROM或共享资源)上的计算机文件或目录可供用户通过计算机的 <code>文件系统</code> 访问的一个过程。</p>\n<p>引自——<a href=\"https://baike.baidu.com/item/%E6%8C%82%E8%BD%BD\">挂载_百度百科 (baidu.com)</a></p>\n</blockquote>\n<p>当访问挂载点的时候，系统就知道要用哪些数据组织形式访问哪些类型的文件系统(或者说是哪些物理设备)。</p>\n<blockquote>\n<p>作用：将一个具体存储设备上的具体文件系统和操作系统中对应的文件系统驱动(模块)关联起来，并将这个具体文件系统中的文件和目录关系挂载到全局目录树上，形成一个“激活运行状态”的文件系统。</p>\n<p>引自——<a href=\"https://www.zhihu.com/answer/2437952746\">https://www.zhihu.com/answer/2437952746</a></p>\n</blockquote>\n<p>将/dev/sdb1分区挂载到/wg目录上的命令：<code>mount /dev/sdb1 /wg</code></p>\n<p>umount实现文件系统的卸载</p>\n<p>卸载/wg上的文件系统的命令：<code>umount /wg</code></p>\n<h5 id=\"export-参数\"><a href=\"#export-参数\" class=\"headerlink\" title=\"export [参数]\"></a>export [参数]</h5><p>将shell变量/函数输出为环境变量</p>\n<p><code>-p</code> ：列出所有shell赋予程序的环境变量</p>\n<p><code>-n</code> ：删除指定变量</p>\n<p>定义环境变量：<code># export MYENV</code></p>\n<p>赋值：<code># export MYENV=1111</code></p>\n<h5 id=\"fdisk-选项-设备\"><a href=\"#fdisk-选项-设备\" class=\"headerlink\" title=\"fdisk [选项] [设备]\"></a>fdisk [选项] [设备]</h5><p>操纵磁盘分区表</p>\n<p><code>-l</code>：列出所有分区表</p>\n<h5 id=\"df-参数-指定文件\"><a href=\"#df-参数-指定文件\" class=\"headerlink\" title=\"df [参数] [指定文件]\"></a>df [参数] [指定文件]</h5><p>显示磁盘空间使用情况</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407141532576.png\" alt=\"image-20220407141532576\"></p>\n<p><code>-a</code> ：显示所有系统文件</p>\n<p><code>-h</code> ：以易于human的阅读方式显示</p>\n<p><code>-l</code> ：只显示本地文件</p>\n<h5 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a>pwd</h5><p>打印当前工作目录(print working directory)</p>\n<h5 id=\"source-指定文件\"><a href=\"#source-指定文件\" class=\"headerlink\" title=\"source [指定文件]\"></a>source [指定文件]</h5><p>source命令通常用于执行刚修改的 <code>初始化</code> 文件，使之立即生效，不用注销重新登陆？</p>\n<h5 id=\"env\"><a href=\"#env\" class=\"headerlink\" title=\"env\"></a>env</h5><p>查看Shell环境变量</p>\n<h5 id=\"stat\"><a href=\"#stat\" class=\"headerlink\" title=\"stat\"></a>stat</h5><h5 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h5><p><code>netstat -ant grep 3306</code></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220407233817307.png\" alt=\"image-20220407233817307\"></p>\n<h5 id=\"fflush\"><a href=\"#fflush\" class=\"headerlink\" title=\"fflush\"></a>fflush</h5><h5 id=\"kill-参数\"><a href=\"#kill-参数\" class=\"headerlink\" title=\"kill [参数]\"></a>kill [参数]</h5><h3 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a><strong>文件</strong></h3><h5 id=\"etc-passwd\"><a href=\"#etc-passwd\" class=\"headerlink\" title=\"/etc/passwd\"></a>/etc/passwd</h5><p>系统用户配置文件，存储了系统中所有用户的基本信息。</p>\n<p>权限：所有用户可读</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/passwd</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220409193721743.png\" alt=\"image-20220409193721743\"></p>\n<p>名称</p>\n<p>说明</p>\n<p>用户名</p>\n<p>已创建的用户名</p>\n<p>加密口令</p>\n<p>x代表加密密码保存在<code>/etc/shadow</code>文件中</p>\n<p>用户ID</p>\n<p>代表用户的ID号，每个用户都有一个唯一的ID</p>\n<p>组ID</p>\n<p>代表群组的ID好，每个群组都有一个唯一的ID</p>\n<p>账号说明</p>\n<p>描述用户的信息</p>\n<p>主目录</p>\n<p>代表用户所在的家目录</p>\n<p>登录Shell</p>\n<p>代表用户使用Shell的类型</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220415181954137.png\" alt=\"image-20220415181954137\"></p>\n<h5 id=\"etc-profile\"><a href=\"#etc-profile\" class=\"headerlink\" title=\"/etc/profile\"></a>/etc/profile</h5><p>建立全系统通用的初始环境变量，每次用户登录时 <code>第一个</code> 被执行</p>\n<h5 id=\"etc-fstab\"><a href=\"#etc-fstab\" class=\"headerlink\" title=\"/etc/fstab\"></a>/etc/fstab</h5><p>系统启动时自动挂载。当系统启动时，系统会自动地从这个文件读取信息，并且会自动将此文件中指定的文件系统挂载到指定内目录。</p>\n<h3 id=\"额外\"><a href=\"#额外\" class=\"headerlink\" title=\"额外\"></a>额外</h3><h5 id=\"禁止root用户\"><a href=\"#禁止root用户\" class=\"headerlink\" title=\"禁止root用户\"></a>禁止root用户</h5><p>禁止root用户登录，并新建一个自己的用户</p>\n<ol>\n<li>新建wyz用户（具体查看useradd）</li>\n<li>赋予wyz 用户 sudo权限</li>\n<li>禁止root登录 <code>$ sudo vim /etc/ssh/sshd_config</code> 将<code>PermitRootLogin yes</code>更改为 <code>no</code> <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417163830390.png\" alt=\"image-20220417163830390\"></li>\n</ol>\n<h5 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h5><p>可执行(二进制)程序被系统加载到内存空间运行时，就是 <code>进程</code>。</p>\n<p>每个进程都有唯一的标识号—— <code>PID</code>，进程可以产生新的进程，构成父子关系并形成进程树(pstree)。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417164549862.png\" alt=\"image-20220417164549862\"></p>\n<p>进程都有一个 <code>用户标识</code>——对应运行此程序的用户ID。如果可执行文件没有设置<code>suid</code>和<code>sgid</code>，则进程的 <code>有效用户标识</code> 为此用户，否则为文件的所有者。</p>\n<p>每一个进程属于且仅属于一个 <code>进程组</code>，向进程组发送信号，则组内所有进程都能收到。</p>\n<p>每个进程都属于一个唯一的 <code>会话</code> 。用户登录后产生一个<code>会话</code>，会话包含若干进程组。会话的id是首进程组的id。一个会话中只有一个进程组是前台进程组，和控制终端交互，获取输入，接收信号。</p>\n<p>控制终端关闭时，进程会收到 <code>SIGHUP</code> 信号。</p>\n<p>除了PID为 0 的进程外，所有进程都有父进程。</p>\n<p>进程优先级 = 优先级别(PR) + 谦让值(NI)。优先级别从父进程继承而来，不可更改，可以用 <code>nice</code> 将进程默认的谦让值从 0 改大(或改小)。</p>\n<h5 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h5><p>全局的环境变量：存放在 <code>/etc/profile</code><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417174359704.png\" alt=\"image-20220417174359704\"></p>\n<p>特定用户的环境变量：存放在home目录的 <code>.profile</code>或 <code>.bashhrc</code>中<img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220417173635469.png\" alt=\"image-20220417173635469\"></p>\n<p>临时的环境变量：<code>export</code>定义，特定于此会话</p>"},{"title":"LiteChat 即时通讯","id":"1193","date":"2023-02-25T17:11:20.000Z","_content":"\n即时通讯体验地址：[https://chat.wangwangyz.site](https://chat.wangwangyz.site)\n\nGithub地址：[https://github.com/InvalidSyntaxxx/LiteChat-Client](https://github.com/InvalidSyntaxxx/LiteChat-Client)\n\n欢迎来唠嗑~\n\n### 项目概况\n\n##### 移动端\n\n![image-20230228141725927](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230228141725927.png)\n\n##### Web端\n\n![image-20230227234317901](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230227234317901.png)\n<!-- more -->\n### 项目功能\n\n1.  移动端兼容\n2.  用户信息的修改(头像/用户名/密码)\n3.  群聊/私聊\n4.  创建群/加入群/退群/模糊搜索群\n5.  添加好友/删好友/模糊搜索用户\n6.  消息分页\n7.  好友/群新消息提醒\n8.  表情包\n9.  图片发送/图片预览\n10.  在线人数统计\n11.  自定义主题\n12.  重连提醒\n13.  ChatGPT群聊/单人聊天\n14.  游客体验\n15.  书籍下载\n16.  游戏体验\n\n### 技术概览\n\n*   **Typescript**：JavaScript 的一个超集，它最大的优势是提供了类型系统和提高了代码的可读性和可维护性。\n*   **Vue2.6.x**：前端渐进式框架。\n*   **Socket/io**：实现实时通信，websocket第三方库。\n*   **Vuex**：专为 Vue.js 应用程序开发的状态管理模式。\n*   **Nestjs**：是一个用于构建高效、可扩展的 Node.js 服务端应用框架，基于 TypeScript 编写并且结合了 OOP1、FP2、FRP3 的相关理念。\n*   **Typeorm**: 支持最新的 JavaScript 特性并提供额外的特性以帮助你开发任何使用数据库的应用程序。\n*   **ES6+**：采用ES6+语法，箭头函数、async/await等等语法很好用。\n*   **SASS(SCSS)**：用SCSS做CSS预处理语言，可以使用最高效的方式，以少量的代码创建复杂的设计。","source":"_posts/litechat聊天室.md","raw":"---\ntitle: LiteChat 即时通讯\ntags:\n  - MySQL\n  - NestJS\n  - Nginx\n  - TypeScript\n  - Vue\nid: '1193'\ncategories:\n  - - 专业技术\n  - - 学习笔记\n  - - 文章\ndate: 2023-02-26 01:11:20\n---\n\n即时通讯体验地址：[https://chat.wangwangyz.site](https://chat.wangwangyz.site)\n\nGithub地址：[https://github.com/InvalidSyntaxxx/LiteChat-Client](https://github.com/InvalidSyntaxxx/LiteChat-Client)\n\n欢迎来唠嗑~\n\n### 项目概况\n\n##### 移动端\n\n![image-20230228141725927](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230228141725927.png)\n\n##### Web端\n\n![image-20230227234317901](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230227234317901.png)\n<!-- more -->\n### 项目功能\n\n1.  移动端兼容\n2.  用户信息的修改(头像/用户名/密码)\n3.  群聊/私聊\n4.  创建群/加入群/退群/模糊搜索群\n5.  添加好友/删好友/模糊搜索用户\n6.  消息分页\n7.  好友/群新消息提醒\n8.  表情包\n9.  图片发送/图片预览\n10.  在线人数统计\n11.  自定义主题\n12.  重连提醒\n13.  ChatGPT群聊/单人聊天\n14.  游客体验\n15.  书籍下载\n16.  游戏体验\n\n### 技术概览\n\n*   **Typescript**：JavaScript 的一个超集，它最大的优势是提供了类型系统和提高了代码的可读性和可维护性。\n*   **Vue2.6.x**：前端渐进式框架。\n*   **Socket/io**：实现实时通信，websocket第三方库。\n*   **Vuex**：专为 Vue.js 应用程序开发的状态管理模式。\n*   **Nestjs**：是一个用于构建高效、可扩展的 Node.js 服务端应用框架，基于 TypeScript 编写并且结合了 OOP1、FP2、FRP3 的相关理念。\n*   **Typeorm**: 支持最新的 JavaScript 特性并提供额外的特性以帮助你开发任何使用数据库的应用程序。\n*   **ES6+**：采用ES6+语法，箭头函数、async/await等等语法很好用。\n*   **SASS(SCSS)**：用SCSS做CSS预处理语言，可以使用最高效的方式，以少量的代码创建复杂的设计。","slug":"litechat聊天室","published":1,"updated":"2024-03-12T10:44:12.772Z","_id":"cltnrar45000ljry1azx5e7m3","comments":1,"layout":"post","photos":[],"link":"","content":"<p>即时通讯体验地址：<a href=\"https://chat.wangwangyz.site/\">https://chat.wangwangyz.site</a></p>\n<p>Github地址：<a href=\"https://github.com/InvalidSyntaxxx/LiteChat-Client\">https://github.com/InvalidSyntaxxx/LiteChat-Client</a></p>\n<p>欢迎来唠嗑~</p>\n<h3 id=\"项目概况\"><a href=\"#项目概况\" class=\"headerlink\" title=\"项目概况\"></a>项目概况</h3><h5 id=\"移动端\"><a href=\"#移动端\" class=\"headerlink\" title=\"移动端\"></a>移动端</h5><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230228141725927.png\" alt=\"image-20230228141725927\"></p>\n<h5 id=\"Web端\"><a href=\"#Web端\" class=\"headerlink\" title=\"Web端\"></a>Web端</h5><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230227234317901.png\" alt=\"image-20230227234317901\"></p>\n<span id=\"more\"></span>\n<h3 id=\"项目功能\"><a href=\"#项目功能\" class=\"headerlink\" title=\"项目功能\"></a>项目功能</h3><ol>\n<li> 移动端兼容</li>\n<li> 用户信息的修改(头像/用户名/密码)</li>\n<li> 群聊/私聊</li>\n<li> 创建群/加入群/退群/模糊搜索群</li>\n<li> 添加好友/删好友/模糊搜索用户</li>\n<li> 消息分页</li>\n<li> 好友/群新消息提醒</li>\n<li> 表情包</li>\n<li> 图片发送/图片预览</li>\n<li> 在线人数统计</li>\n<li> 自定义主题</li>\n<li> 重连提醒</li>\n<li> ChatGPT群聊/单人聊天</li>\n<li> 游客体验</li>\n<li> 书籍下载</li>\n<li> 游戏体验</li>\n</ol>\n<h3 id=\"技术概览\"><a href=\"#技术概览\" class=\"headerlink\" title=\"技术概览\"></a>技术概览</h3><ul>\n<li>  <strong>Typescript</strong>：JavaScript 的一个超集，它最大的优势是提供了类型系统和提高了代码的可读性和可维护性。</li>\n<li>  <strong>Vue2.6.x</strong>：前端渐进式框架。</li>\n<li>  <strong>Socket/io</strong>：实现实时通信，websocket第三方库。</li>\n<li>  <strong>Vuex</strong>：专为 Vue.js 应用程序开发的状态管理模式。</li>\n<li>  <strong>Nestjs</strong>：是一个用于构建高效、可扩展的 Node.js 服务端应用框架，基于 TypeScript 编写并且结合了 OOP1、FP2、FRP3 的相关理念。</li>\n<li>  <strong>Typeorm</strong>: 支持最新的 JavaScript 特性并提供额外的特性以帮助你开发任何使用数据库的应用程序。</li>\n<li>  **ES6+**：采用ES6+语法，箭头函数、async/await等等语法很好用。</li>\n<li>  **SASS(SCSS)**：用SCSS做CSS预处理语言，可以使用最高效的方式，以少量的代码创建复杂的设计。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>即时通讯体验地址：<a href=\"https://chat.wangwangyz.site/\">https://chat.wangwangyz.site</a></p>\n<p>Github地址：<a href=\"https://github.com/InvalidSyntaxxx/LiteChat-Client\">https://github.com/InvalidSyntaxxx/LiteChat-Client</a></p>\n<p>欢迎来唠嗑~</p>\n<h3 id=\"项目概况\"><a href=\"#项目概况\" class=\"headerlink\" title=\"项目概况\"></a>项目概况</h3><h5 id=\"移动端\"><a href=\"#移动端\" class=\"headerlink\" title=\"移动端\"></a>移动端</h5><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230228141725927.png\" alt=\"image-20230228141725927\"></p>\n<h5 id=\"Web端\"><a href=\"#Web端\" class=\"headerlink\" title=\"Web端\"></a>Web端</h5><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230227234317901.png\" alt=\"image-20230227234317901\"></p>","more":"<h3 id=\"项目功能\"><a href=\"#项目功能\" class=\"headerlink\" title=\"项目功能\"></a>项目功能</h3><ol>\n<li> 移动端兼容</li>\n<li> 用户信息的修改(头像/用户名/密码)</li>\n<li> 群聊/私聊</li>\n<li> 创建群/加入群/退群/模糊搜索群</li>\n<li> 添加好友/删好友/模糊搜索用户</li>\n<li> 消息分页</li>\n<li> 好友/群新消息提醒</li>\n<li> 表情包</li>\n<li> 图片发送/图片预览</li>\n<li> 在线人数统计</li>\n<li> 自定义主题</li>\n<li> 重连提醒</li>\n<li> ChatGPT群聊/单人聊天</li>\n<li> 游客体验</li>\n<li> 书籍下载</li>\n<li> 游戏体验</li>\n</ol>\n<h3 id=\"技术概览\"><a href=\"#技术概览\" class=\"headerlink\" title=\"技术概览\"></a>技术概览</h3><ul>\n<li>  <strong>Typescript</strong>：JavaScript 的一个超集，它最大的优势是提供了类型系统和提高了代码的可读性和可维护性。</li>\n<li>  <strong>Vue2.6.x</strong>：前端渐进式框架。</li>\n<li>  <strong>Socket/io</strong>：实现实时通信，websocket第三方库。</li>\n<li>  <strong>Vuex</strong>：专为 Vue.js 应用程序开发的状态管理模式。</li>\n<li>  <strong>Nestjs</strong>：是一个用于构建高效、可扩展的 Node.js 服务端应用框架，基于 TypeScript 编写并且结合了 OOP1、FP2、FRP3 的相关理念。</li>\n<li>  <strong>Typeorm</strong>: 支持最新的 JavaScript 特性并提供额外的特性以帮助你开发任何使用数据库的应用程序。</li>\n<li>  **ES6+**：采用ES6+语法，箭头函数、async/await等等语法很好用。</li>\n<li>  **SASS(SCSS)**：用SCSS做CSS预处理语言，可以使用最高效的方式，以少量的代码创建复杂的设计。</li>\n</ul>"},{"title":"MySQL性能优化","id":"1216","date":"2023-03-10T10:24:11.000Z","_content":"\n## MySQL性能调优\n\n![MYSQL性能优化](http://n.sinaimg.cn/games/3ece443e/20161013/MySQLXingNenDiaoYou.jpg)\n\n### 存储数据类型优化\n\n1.  尽量避免使用 NULL\n2.  尽量使用可以的最小数据类型。但也要确保没有低估需要存储的范围\n3.  整型比字符串操作代价更低\n4.  使用 MySQL 内建的数据类型（比如date、time、datetime），比用字符串更快\n\n#### 基本数据类型\n<!-- more -->\n1.  数字\n    \n2.  整数 - TINYINT (8) - SMALLINT (16) - MEDIUMINT (24) - INT (32) - BIGINT (64)\n    \n    *   整数类型有可选的 unsigned 属性\n    *   int(1)与int(11)，对于存储和计算来说，这两者本质是没有区别的\n3.  实数（存储小数、存储比 BIGINT 更大的数）\n    \n    *   float\n        \n    *   double\n        \n        > float 和 double支持使用标准的浮点运算进行近似的计算。\n        \n    *   decimal\n        \n        > decimal 类型用于存储精确的小数，支持精确的计算。 因为在进行精确计算时需要额外的空间和计算开销，所以尽量只对小数才使用decimal。比如，财务数据。另外如果数据量大的话，可以考虑使用bigint代替decimal，只需将存储的货币单位根据小数的位数乘以相应的倍数即可。\n        \n4.  字符串\n    \n    *   CHAR\n        \n        > 1、char 类型是定长的；2、适合存储很短的字符串，例如：密码的 md5 值；3、适合存储经常进行变更的值。\n        \n    *   VARCHAR\n        \n        > 1、字符串列的长度比平均长度大很多；2、列的更新很少，所以碎片不是问题；3、使用了像 UTF-8 这样复杂的字符集，因为该字符集中每个字符可能使用不同的字节来进行存储；4、存储可变长的字符串。\n        \n5.  BLOB 和 TEXT\n    \n    两者都是为存储很大的数据而设计的字符串数据类型，不同的是两者分别采用二进制和字符方式存储。\n    \n    MySQL 在处理两个类型的值时，处理基本相同，仅有的不同是 BLOB 类型是以二进制格式来存储的，所以没有排序规则和字符集，而 text 类型有排序规则和字符集。\n    \n6.  枚举\n    \n    枚举可以把一些不重复的字符串存储成一个预定义的集合。 MySQL 会在存储枚举类型时粉肠紧凑，会根据列的值的数量压缩到一个或者两个字节中。 MySQL 会在内部将每个值在列表中的位置保存成整数，而这些『数字–字符串』的对应关系，会保存在 .frm 文件中。 所以当该列需要新添加一个新的枚举值时，必须添加在之前枚举列表的最后面，否则就会出现数据错乱的问题。切记。\n    \n7.  日期类型\n    \n    *   DATETIME\n        \n        > 该类型能保存大范围的值，从 1001 年到 9999 年，精度为秒。他会把时间封装到 YYYYMMDDHHIISS 的整数中，没有时区概念。使用 8 个字节的存储空间。\n        \n    *   TIMESTAMP\n        \n        > 该类型保存了从 1970-01-01 00：00：00（格林威治时间）以来的秒数。该类型使用 4 个字节的存储空间，所以只能表示 1970 到 2023 年，其值还具有时区的概念。\n        \n8.  BIT\n    \n    存储更紧凑。但所有这些位类型，不管底层存储格式和存储方式，从技术上来说都是字符串类型。虽然用它存储数据更紧凑，但是对于大部分应用来说，最好避免使用该类型。\n    \n9.  SET\n    \n    特殊类型的数据\n    \n    > 某些数据的类型并不直接和内置的类型一致。所以需要一定的转换进行存储。\n    \n    低于秒级的时间戳\n    \n    > 低于秒级的时间需要在引用层做处理，一般可以通过存储两个或者多个列来存储（一个存储秒级的时间戳，另外的存储秒级以下的）\n    \n    ipv4 地址\n    \n    > 我们常见到有人会用 varchar (15) 来存错一个 IP 地址，IP 地址实际是一个 32 位的无符号整数，所以应该用无符号整数来存储 IP 地址。MySQL 提供了 INET\\_ATON () 和 INET\\_NTOA () 函数在这两表示方法之间转换。\n    \n\n#### IP地址存储\n\n通过在应用程序中进行 **字符型** 到 **无符号整型** 的转换，而不是使用MySQL的 `INET_ATON()` 函数，插入整数IP时MySQL的负载可能会稍微降低。\n\n[https://bafford.com/2009/03/09/mysql-performance-benefits-of-storing-integer-ip-addresses/](https://bafford.com/2009/03/09/mysql-performance-benefits-of-storing-integer-ip-addresses/)\n\n## 三层架构说明\n\n*   第一层，用于连接处理、授权认证、安全认证等等。大多数基于客户端 / 服务器端的工具或者服务器都有类似架构。\n*   第二层，是 MySQL 架构的核心部分。MySQL 的大部分核心服务功能大都在这一层。包括查询解析、分析、优化、缓存以及所有的内置函数的实现，还有所有的跨存储引擎的功能都在这一层实现：存储过程、触发器、试图等。\n*   第三层，存储引擎层。存储引擎负责 MySQL 中数据的存储和读取。每个存储引擎都有自己的优势和劣势。MySQL 服务器层通过 API 与存储引擎进行通信。存储引擎本身是不会解析 SQL，且不同的存储引擎之间也是不会相互通信。\n\n![img](http://n.sinaimg.cn/games/3ece443e/20160916/MySQLJiaGouTu1.png)\n\n## MySQL 服务器接收 / 处理一个查询请求的过程\n\n1.  当 MySQL 服务器接收到一个查询请求，首先会对当前的连接请求进行认证，认证其用户名和密码信息。\n2.  连接成功之后，会继续验证该连接是否具有执行某个特定查询的权限。\n3.  所有的验证都通过，如果是 select 操作，MySQL 会先检查查询缓存中是否存在该缓存，如果存在直接返回结果。不存在继续下一步。\n4.  解析查询，并创建内部数据结构（生成 解析树），然后对解析树进行各种优化（包括，重写查询，决定表的读取顺序、选择合适的索引等等）。\n5.  通过存储引擎存储或者提取结果。\n6.  如果是 select 操作，生成查询缓存。\n7.  返回结果。\n\n根据控制的不同层次，MySQL 的并发控制可以分为：\n\n*   服务器层\n*   存储引擎层\n\n实现并发控制的方法策略：**_锁机制_**\n\n*   共享锁（shared lock）<======> 读锁（read lock）\n*   排它锁（exclusive lock） <======> 写锁（write lock）\n\n如何选择适合的锁？**_锁策略_**\n\n*   锁的粒度越小，系统的并发性越高\n    \n*   所得操作越多，系统的开销越大\n    \n    > 所以所谓的锁策略，就是在锁的开销和数据的安全性之间寻求平衡。\n    \n\n## MySQL并发控制\n\n### MySQL 中锁策略类型\n\nMySQL 不同的存储引擎中用到的锁策略基本有两种。一种是表级锁，另一种是行级锁。\n\n*   表锁，一种开销最小的锁策略。\n    \n    > 一个用户对表进行写操作时，需要先获得写锁，这是其他用户读该表进行的读写操作都会进行阻塞。只有当前写操作被释放之后，其他人才能活的读锁。当当前表有读锁时，其他人也可以继续获得读锁。读锁是共享性的不同的读锁之间是互相不阻塞的。 另外，写锁的优先级高于读锁。所以当有多个锁请求存在是，读锁的请求会被优先插入到锁队列的前边。\n    \n*   行锁，最大程度支持并发处理，同时也是锁开销最大的锁策略。\n    \n    > 顾名思义，行级锁只在将要修改的记录行上进行锁操作，对其他的行的操作没有影响。\n    \n\n尽管我们一般提到的锁，都处于存储引擎这一层，但是 MySQL 本身在某些情况下，也会对锁策略进行控制。比如表的 alter table 操作，会对表本身使用表锁，而直接忽略存储引擎的锁机制。\n\n### MySQL 中死锁问题解决方法\n\n> 死锁，即两个或者多个事务在同一资源上相互占用，并请求占用对方已经占用的资源的情况。\n\n既然有锁存在，当然就会有死锁的情况发生。那么 MySQL 中是如何处理死锁问题的呢？ 死锁的通常解决方案有两种，即：\n\n*   死锁检测机制\n*   超时机制\n\nInnoDB 存储引擎在检测到有死锁发生的处理方法是，将当前持有最少的行级锁的事务进行回滚。待打破死锁后，重新执行因为死锁而回滚的事务。","source":"_posts/mysql性能优化.md","raw":"---\ntitle: MySQL性能优化\ntags:\n  - MySQL\nid: '1216'\ncategories:\n  - - 专业技术\n  - - 学习笔记\ndate: 2023-03-10 18:24:11\n---\n\n## MySQL性能调优\n\n![MYSQL性能优化](http://n.sinaimg.cn/games/3ece443e/20161013/MySQLXingNenDiaoYou.jpg)\n\n### 存储数据类型优化\n\n1.  尽量避免使用 NULL\n2.  尽量使用可以的最小数据类型。但也要确保没有低估需要存储的范围\n3.  整型比字符串操作代价更低\n4.  使用 MySQL 内建的数据类型（比如date、time、datetime），比用字符串更快\n\n#### 基本数据类型\n<!-- more -->\n1.  数字\n    \n2.  整数 - TINYINT (8) - SMALLINT (16) - MEDIUMINT (24) - INT (32) - BIGINT (64)\n    \n    *   整数类型有可选的 unsigned 属性\n    *   int(1)与int(11)，对于存储和计算来说，这两者本质是没有区别的\n3.  实数（存储小数、存储比 BIGINT 更大的数）\n    \n    *   float\n        \n    *   double\n        \n        > float 和 double支持使用标准的浮点运算进行近似的计算。\n        \n    *   decimal\n        \n        > decimal 类型用于存储精确的小数，支持精确的计算。 因为在进行精确计算时需要额外的空间和计算开销，所以尽量只对小数才使用decimal。比如，财务数据。另外如果数据量大的话，可以考虑使用bigint代替decimal，只需将存储的货币单位根据小数的位数乘以相应的倍数即可。\n        \n4.  字符串\n    \n    *   CHAR\n        \n        > 1、char 类型是定长的；2、适合存储很短的字符串，例如：密码的 md5 值；3、适合存储经常进行变更的值。\n        \n    *   VARCHAR\n        \n        > 1、字符串列的长度比平均长度大很多；2、列的更新很少，所以碎片不是问题；3、使用了像 UTF-8 这样复杂的字符集，因为该字符集中每个字符可能使用不同的字节来进行存储；4、存储可变长的字符串。\n        \n5.  BLOB 和 TEXT\n    \n    两者都是为存储很大的数据而设计的字符串数据类型，不同的是两者分别采用二进制和字符方式存储。\n    \n    MySQL 在处理两个类型的值时，处理基本相同，仅有的不同是 BLOB 类型是以二进制格式来存储的，所以没有排序规则和字符集，而 text 类型有排序规则和字符集。\n    \n6.  枚举\n    \n    枚举可以把一些不重复的字符串存储成一个预定义的集合。 MySQL 会在存储枚举类型时粉肠紧凑，会根据列的值的数量压缩到一个或者两个字节中。 MySQL 会在内部将每个值在列表中的位置保存成整数，而这些『数字–字符串』的对应关系，会保存在 .frm 文件中。 所以当该列需要新添加一个新的枚举值时，必须添加在之前枚举列表的最后面，否则就会出现数据错乱的问题。切记。\n    \n7.  日期类型\n    \n    *   DATETIME\n        \n        > 该类型能保存大范围的值，从 1001 年到 9999 年，精度为秒。他会把时间封装到 YYYYMMDDHHIISS 的整数中，没有时区概念。使用 8 个字节的存储空间。\n        \n    *   TIMESTAMP\n        \n        > 该类型保存了从 1970-01-01 00：00：00（格林威治时间）以来的秒数。该类型使用 4 个字节的存储空间，所以只能表示 1970 到 2023 年，其值还具有时区的概念。\n        \n8.  BIT\n    \n    存储更紧凑。但所有这些位类型，不管底层存储格式和存储方式，从技术上来说都是字符串类型。虽然用它存储数据更紧凑，但是对于大部分应用来说，最好避免使用该类型。\n    \n9.  SET\n    \n    特殊类型的数据\n    \n    > 某些数据的类型并不直接和内置的类型一致。所以需要一定的转换进行存储。\n    \n    低于秒级的时间戳\n    \n    > 低于秒级的时间需要在引用层做处理，一般可以通过存储两个或者多个列来存储（一个存储秒级的时间戳，另外的存储秒级以下的）\n    \n    ipv4 地址\n    \n    > 我们常见到有人会用 varchar (15) 来存错一个 IP 地址，IP 地址实际是一个 32 位的无符号整数，所以应该用无符号整数来存储 IP 地址。MySQL 提供了 INET\\_ATON () 和 INET\\_NTOA () 函数在这两表示方法之间转换。\n    \n\n#### IP地址存储\n\n通过在应用程序中进行 **字符型** 到 **无符号整型** 的转换，而不是使用MySQL的 `INET_ATON()` 函数，插入整数IP时MySQL的负载可能会稍微降低。\n\n[https://bafford.com/2009/03/09/mysql-performance-benefits-of-storing-integer-ip-addresses/](https://bafford.com/2009/03/09/mysql-performance-benefits-of-storing-integer-ip-addresses/)\n\n## 三层架构说明\n\n*   第一层，用于连接处理、授权认证、安全认证等等。大多数基于客户端 / 服务器端的工具或者服务器都有类似架构。\n*   第二层，是 MySQL 架构的核心部分。MySQL 的大部分核心服务功能大都在这一层。包括查询解析、分析、优化、缓存以及所有的内置函数的实现，还有所有的跨存储引擎的功能都在这一层实现：存储过程、触发器、试图等。\n*   第三层，存储引擎层。存储引擎负责 MySQL 中数据的存储和读取。每个存储引擎都有自己的优势和劣势。MySQL 服务器层通过 API 与存储引擎进行通信。存储引擎本身是不会解析 SQL，且不同的存储引擎之间也是不会相互通信。\n\n![img](http://n.sinaimg.cn/games/3ece443e/20160916/MySQLJiaGouTu1.png)\n\n## MySQL 服务器接收 / 处理一个查询请求的过程\n\n1.  当 MySQL 服务器接收到一个查询请求，首先会对当前的连接请求进行认证，认证其用户名和密码信息。\n2.  连接成功之后，会继续验证该连接是否具有执行某个特定查询的权限。\n3.  所有的验证都通过，如果是 select 操作，MySQL 会先检查查询缓存中是否存在该缓存，如果存在直接返回结果。不存在继续下一步。\n4.  解析查询，并创建内部数据结构（生成 解析树），然后对解析树进行各种优化（包括，重写查询，决定表的读取顺序、选择合适的索引等等）。\n5.  通过存储引擎存储或者提取结果。\n6.  如果是 select 操作，生成查询缓存。\n7.  返回结果。\n\n根据控制的不同层次，MySQL 的并发控制可以分为：\n\n*   服务器层\n*   存储引擎层\n\n实现并发控制的方法策略：**_锁机制_**\n\n*   共享锁（shared lock）<======> 读锁（read lock）\n*   排它锁（exclusive lock） <======> 写锁（write lock）\n\n如何选择适合的锁？**_锁策略_**\n\n*   锁的粒度越小，系统的并发性越高\n    \n*   所得操作越多，系统的开销越大\n    \n    > 所以所谓的锁策略，就是在锁的开销和数据的安全性之间寻求平衡。\n    \n\n## MySQL并发控制\n\n### MySQL 中锁策略类型\n\nMySQL 不同的存储引擎中用到的锁策略基本有两种。一种是表级锁，另一种是行级锁。\n\n*   表锁，一种开销最小的锁策略。\n    \n    > 一个用户对表进行写操作时，需要先获得写锁，这是其他用户读该表进行的读写操作都会进行阻塞。只有当前写操作被释放之后，其他人才能活的读锁。当当前表有读锁时，其他人也可以继续获得读锁。读锁是共享性的不同的读锁之间是互相不阻塞的。 另外，写锁的优先级高于读锁。所以当有多个锁请求存在是，读锁的请求会被优先插入到锁队列的前边。\n    \n*   行锁，最大程度支持并发处理，同时也是锁开销最大的锁策略。\n    \n    > 顾名思义，行级锁只在将要修改的记录行上进行锁操作，对其他的行的操作没有影响。\n    \n\n尽管我们一般提到的锁，都处于存储引擎这一层，但是 MySQL 本身在某些情况下，也会对锁策略进行控制。比如表的 alter table 操作，会对表本身使用表锁，而直接忽略存储引擎的锁机制。\n\n### MySQL 中死锁问题解决方法\n\n> 死锁，即两个或者多个事务在同一资源上相互占用，并请求占用对方已经占用的资源的情况。\n\n既然有锁存在，当然就会有死锁的情况发生。那么 MySQL 中是如何处理死锁问题的呢？ 死锁的通常解决方案有两种，即：\n\n*   死锁检测机制\n*   超时机制\n\nInnoDB 存储引擎在检测到有死锁发生的处理方法是，将当前持有最少的行级锁的事务进行回滚。待打破死锁后，重新执行因为死锁而回滚的事务。","slug":"mysql性能优化","published":1,"updated":"2024-03-12T02:24:18.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltnrar47000pjry1ead6ajsa","content":"<h2 id=\"MySQL性能调优\"><a href=\"#MySQL性能调优\" class=\"headerlink\" title=\"MySQL性能调优\"></a>MySQL性能调优</h2><p><img src=\"http://n.sinaimg.cn/games/3ece443e/20161013/MySQLXingNenDiaoYou.jpg\" alt=\"MYSQL性能优化\"></p>\n<h3 id=\"存储数据类型优化\"><a href=\"#存储数据类型优化\" class=\"headerlink\" title=\"存储数据类型优化\"></a>存储数据类型优化</h3><ol>\n<li> 尽量避免使用 NULL</li>\n<li> 尽量使用可以的最小数据类型。但也要确保没有低估需要存储的范围</li>\n<li> 整型比字符串操作代价更低</li>\n<li> 使用 MySQL 内建的数据类型（比如date、time、datetime），比用字符串更快</li>\n</ol>\n<h4 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h4><span id=\"more\"></span>\n<ol>\n<li>数字</li>\n<li>整数 - TINYINT (8) - SMALLINT (16) - MEDIUMINT (24) - INT (32) - BIGINT (64)<ul>\n<li>  整数类型有可选的 unsigned 属性</li>\n<li>  int(1)与int(11)，对于存储和计算来说，这两者本质是没有区别的</li>\n</ul>\n</li>\n<li>实数（存储小数、存储比 BIGINT 更大的数）<ul>\n<li>float</li>\n<li>double<blockquote>\n<p>float 和 double支持使用标准的浮点运算进行近似的计算。</p>\n</blockquote>\n</li>\n<li>decimal<blockquote>\n<p>decimal 类型用于存储精确的小数，支持精确的计算。 因为在进行精确计算时需要额外的空间和计算开销，所以尽量只对小数才使用decimal。比如，财务数据。另外如果数据量大的话，可以考虑使用bigint代替decimal，只需将存储的货币单位根据小数的位数乘以相应的倍数即可。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>字符串<ul>\n<li>CHAR<blockquote>\n<p>1、char 类型是定长的；2、适合存储很短的字符串，例如：密码的 md5 值；3、适合存储经常进行变更的值。</p>\n</blockquote>\n</li>\n<li>VARCHAR<blockquote>\n<p>1、字符串列的长度比平均长度大很多；2、列的更新很少，所以碎片不是问题；3、使用了像 UTF-8 这样复杂的字符集，因为该字符集中每个字符可能使用不同的字节来进行存储；4、存储可变长的字符串。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>BLOB 和 TEXT 两者都是为存储很大的数据而设计的字符串数据类型，不同的是两者分别采用二进制和字符方式存储。 MySQL 在处理两个类型的值时，处理基本相同，仅有的不同是 BLOB 类型是以二进制格式来存储的，所以没有排序规则和字符集，而 text 类型有排序规则和字符集。</li>\n<li>枚举 枚举可以把一些不重复的字符串存储成一个预定义的集合。 MySQL 会在存储枚举类型时粉肠紧凑，会根据列的值的数量压缩到一个或者两个字节中。 MySQL 会在内部将每个值在列表中的位置保存成整数，而这些『数字–字符串』的对应关系，会保存在 .frm 文件中。 所以当该列需要新添加一个新的枚举值时，必须添加在之前枚举列表的最后面，否则就会出现数据错乱的问题。切记。</li>\n<li>日期类型<ul>\n<li>DATETIME<blockquote>\n<p>该类型能保存大范围的值，从 1001 年到 9999 年，精度为秒。他会把时间封装到 YYYYMMDDHHIISS 的整数中，没有时区概念。使用 8 个字节的存储空间。</p>\n</blockquote>\n</li>\n<li>TIMESTAMP<blockquote>\n<p>该类型保存了从 1970-01-01 00：00：00（格林威治时间）以来的秒数。该类型使用 4 个字节的存储空间，所以只能表示 1970 到 2023 年，其值还具有时区的概念。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>BIT 存储更紧凑。但所有这些位类型，不管底层存储格式和存储方式，从技术上来说都是字符串类型。虽然用它存储数据更紧凑，但是对于大部分应用来说，最好避免使用该类型。</li>\n<li>SET 特殊类型的数据<blockquote>\n<p>某些数据的类型并不直接和内置的类型一致。所以需要一定的转换进行存储。</p>\n</blockquote>\n 低于秒级的时间戳<blockquote>\n<p>低于秒级的时间需要在引用层做处理，一般可以通过存储两个或者多个列来存储（一个存储秒级的时间戳，另外的存储秒级以下的）</p>\n</blockquote>\n ipv4 地址<blockquote>\n<p>我们常见到有人会用 varchar (15) 来存错一个 IP 地址，IP 地址实际是一个 32 位的无符号整数，所以应该用无符号整数来存储 IP 地址。MySQL 提供了 INET_ATON () 和 INET_NTOA () 函数在这两表示方法之间转换。</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"IP地址存储\"><a href=\"#IP地址存储\" class=\"headerlink\" title=\"IP地址存储\"></a>IP地址存储</h4><p>通过在应用程序中进行 <strong>字符型</strong> 到 <strong>无符号整型</strong> 的转换，而不是使用MySQL的 <code>INET_ATON()</code> 函数，插入整数IP时MySQL的负载可能会稍微降低。</p>\n<p><a href=\"https://bafford.com/2009/03/09/mysql-performance-benefits-of-storing-integer-ip-addresses/\">https://bafford.com/2009/03/09/mysql-performance-benefits-of-storing-integer-ip-addresses/</a></p>\n<h2 id=\"三层架构说明\"><a href=\"#三层架构说明\" class=\"headerlink\" title=\"三层架构说明\"></a>三层架构说明</h2><ul>\n<li>  第一层，用于连接处理、授权认证、安全认证等等。大多数基于客户端 / 服务器端的工具或者服务器都有类似架构。</li>\n<li>  第二层，是 MySQL 架构的核心部分。MySQL 的大部分核心服务功能大都在这一层。包括查询解析、分析、优化、缓存以及所有的内置函数的实现，还有所有的跨存储引擎的功能都在这一层实现：存储过程、触发器、试图等。</li>\n<li>  第三层，存储引擎层。存储引擎负责 MySQL 中数据的存储和读取。每个存储引擎都有自己的优势和劣势。MySQL 服务器层通过 API 与存储引擎进行通信。存储引擎本身是不会解析 SQL，且不同的存储引擎之间也是不会相互通信。</li>\n</ul>\n<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20160916/MySQLJiaGouTu1.png\" alt=\"img\"></p>\n<h2 id=\"MySQL-服务器接收-处理一个查询请求的过程\"><a href=\"#MySQL-服务器接收-处理一个查询请求的过程\" class=\"headerlink\" title=\"MySQL 服务器接收 / 处理一个查询请求的过程\"></a>MySQL 服务器接收 / 处理一个查询请求的过程</h2><ol>\n<li> 当 MySQL 服务器接收到一个查询请求，首先会对当前的连接请求进行认证，认证其用户名和密码信息。</li>\n<li> 连接成功之后，会继续验证该连接是否具有执行某个特定查询的权限。</li>\n<li> 所有的验证都通过，如果是 select 操作，MySQL 会先检查查询缓存中是否存在该缓存，如果存在直接返回结果。不存在继续下一步。</li>\n<li> 解析查询，并创建内部数据结构（生成 解析树），然后对解析树进行各种优化（包括，重写查询，决定表的读取顺序、选择合适的索引等等）。</li>\n<li> 通过存储引擎存储或者提取结果。</li>\n<li> 如果是 select 操作，生成查询缓存。</li>\n<li> 返回结果。</li>\n</ol>\n<p>根据控制的不同层次，MySQL 的并发控制可以分为：</p>\n<ul>\n<li>  服务器层</li>\n<li>  存储引擎层</li>\n</ul>\n<p>实现并发控制的方法策略：**<em>锁机制</em>**</p>\n<ul>\n<li>  共享锁（shared lock）&lt;======&gt; 读锁（read lock）</li>\n<li>  排它锁（exclusive lock） &lt;======&gt; 写锁（write lock）</li>\n</ul>\n<p>如何选择适合的锁？**<em>锁策略</em>**</p>\n<ul>\n<li>锁的粒度越小，系统的并发性越高</li>\n<li>所得操作越多，系统的开销越大<blockquote>\n<p>所以所谓的锁策略，就是在锁的开销和数据的安全性之间寻求平衡。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"MySQL并发控制\"><a href=\"#MySQL并发控制\" class=\"headerlink\" title=\"MySQL并发控制\"></a>MySQL并发控制</h2><h3 id=\"MySQL-中锁策略类型\"><a href=\"#MySQL-中锁策略类型\" class=\"headerlink\" title=\"MySQL 中锁策略类型\"></a>MySQL 中锁策略类型</h3><p>MySQL 不同的存储引擎中用到的锁策略基本有两种。一种是表级锁，另一种是行级锁。</p>\n<ul>\n<li>表锁，一种开销最小的锁策略。<blockquote>\n<p>一个用户对表进行写操作时，需要先获得写锁，这是其他用户读该表进行的读写操作都会进行阻塞。只有当前写操作被释放之后，其他人才能活的读锁。当当前表有读锁时，其他人也可以继续获得读锁。读锁是共享性的不同的读锁之间是互相不阻塞的。 另外，写锁的优先级高于读锁。所以当有多个锁请求存在是，读锁的请求会被优先插入到锁队列的前边。</p>\n</blockquote>\n</li>\n<li>行锁，最大程度支持并发处理，同时也是锁开销最大的锁策略。<blockquote>\n<p>顾名思义，行级锁只在将要修改的记录行上进行锁操作，对其他的行的操作没有影响。</p>\n</blockquote>\n</li>\n</ul>\n<p>尽管我们一般提到的锁，都处于存储引擎这一层，但是 MySQL 本身在某些情况下，也会对锁策略进行控制。比如表的 alter table 操作，会对表本身使用表锁，而直接忽略存储引擎的锁机制。</p>\n<h3 id=\"MySQL-中死锁问题解决方法\"><a href=\"#MySQL-中死锁问题解决方法\" class=\"headerlink\" title=\"MySQL 中死锁问题解决方法\"></a>MySQL 中死锁问题解决方法</h3><blockquote>\n<p>死锁，即两个或者多个事务在同一资源上相互占用，并请求占用对方已经占用的资源的情况。</p>\n</blockquote>\n<p>既然有锁存在，当然就会有死锁的情况发生。那么 MySQL 中是如何处理死锁问题的呢？ 死锁的通常解决方案有两种，即：</p>\n<ul>\n<li>  死锁检测机制</li>\n<li>  超时机制</li>\n</ul>\n<p>InnoDB 存储引擎在检测到有死锁发生的处理方法是，将当前持有最少的行级锁的事务进行回滚。待打破死锁后，重新执行因为死锁而回滚的事务。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"MySQL性能调优\"><a href=\"#MySQL性能调优\" class=\"headerlink\" title=\"MySQL性能调优\"></a>MySQL性能调优</h2><p><img src=\"http://n.sinaimg.cn/games/3ece443e/20161013/MySQLXingNenDiaoYou.jpg\" alt=\"MYSQL性能优化\"></p>\n<h3 id=\"存储数据类型优化\"><a href=\"#存储数据类型优化\" class=\"headerlink\" title=\"存储数据类型优化\"></a>存储数据类型优化</h3><ol>\n<li> 尽量避免使用 NULL</li>\n<li> 尽量使用可以的最小数据类型。但也要确保没有低估需要存储的范围</li>\n<li> 整型比字符串操作代价更低</li>\n<li> 使用 MySQL 内建的数据类型（比如date、time、datetime），比用字符串更快</li>\n</ol>\n<h4 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h4>","more":"<ol>\n<li>数字</li>\n<li>整数 - TINYINT (8) - SMALLINT (16) - MEDIUMINT (24) - INT (32) - BIGINT (64)<ul>\n<li>  整数类型有可选的 unsigned 属性</li>\n<li>  int(1)与int(11)，对于存储和计算来说，这两者本质是没有区别的</li>\n</ul>\n</li>\n<li>实数（存储小数、存储比 BIGINT 更大的数）<ul>\n<li>float</li>\n<li>double<blockquote>\n<p>float 和 double支持使用标准的浮点运算进行近似的计算。</p>\n</blockquote>\n</li>\n<li>decimal<blockquote>\n<p>decimal 类型用于存储精确的小数，支持精确的计算。 因为在进行精确计算时需要额外的空间和计算开销，所以尽量只对小数才使用decimal。比如，财务数据。另外如果数据量大的话，可以考虑使用bigint代替decimal，只需将存储的货币单位根据小数的位数乘以相应的倍数即可。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>字符串<ul>\n<li>CHAR<blockquote>\n<p>1、char 类型是定长的；2、适合存储很短的字符串，例如：密码的 md5 值；3、适合存储经常进行变更的值。</p>\n</blockquote>\n</li>\n<li>VARCHAR<blockquote>\n<p>1、字符串列的长度比平均长度大很多；2、列的更新很少，所以碎片不是问题；3、使用了像 UTF-8 这样复杂的字符集，因为该字符集中每个字符可能使用不同的字节来进行存储；4、存储可变长的字符串。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>BLOB 和 TEXT 两者都是为存储很大的数据而设计的字符串数据类型，不同的是两者分别采用二进制和字符方式存储。 MySQL 在处理两个类型的值时，处理基本相同，仅有的不同是 BLOB 类型是以二进制格式来存储的，所以没有排序规则和字符集，而 text 类型有排序规则和字符集。</li>\n<li>枚举 枚举可以把一些不重复的字符串存储成一个预定义的集合。 MySQL 会在存储枚举类型时粉肠紧凑，会根据列的值的数量压缩到一个或者两个字节中。 MySQL 会在内部将每个值在列表中的位置保存成整数，而这些『数字–字符串』的对应关系，会保存在 .frm 文件中。 所以当该列需要新添加一个新的枚举值时，必须添加在之前枚举列表的最后面，否则就会出现数据错乱的问题。切记。</li>\n<li>日期类型<ul>\n<li>DATETIME<blockquote>\n<p>该类型能保存大范围的值，从 1001 年到 9999 年，精度为秒。他会把时间封装到 YYYYMMDDHHIISS 的整数中，没有时区概念。使用 8 个字节的存储空间。</p>\n</blockquote>\n</li>\n<li>TIMESTAMP<blockquote>\n<p>该类型保存了从 1970-01-01 00：00：00（格林威治时间）以来的秒数。该类型使用 4 个字节的存储空间，所以只能表示 1970 到 2023 年，其值还具有时区的概念。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>BIT 存储更紧凑。但所有这些位类型，不管底层存储格式和存储方式，从技术上来说都是字符串类型。虽然用它存储数据更紧凑，但是对于大部分应用来说，最好避免使用该类型。</li>\n<li>SET 特殊类型的数据<blockquote>\n<p>某些数据的类型并不直接和内置的类型一致。所以需要一定的转换进行存储。</p>\n</blockquote>\n 低于秒级的时间戳<blockquote>\n<p>低于秒级的时间需要在引用层做处理，一般可以通过存储两个或者多个列来存储（一个存储秒级的时间戳，另外的存储秒级以下的）</p>\n</blockquote>\n ipv4 地址<blockquote>\n<p>我们常见到有人会用 varchar (15) 来存错一个 IP 地址，IP 地址实际是一个 32 位的无符号整数，所以应该用无符号整数来存储 IP 地址。MySQL 提供了 INET_ATON () 和 INET_NTOA () 函数在这两表示方法之间转换。</p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"IP地址存储\"><a href=\"#IP地址存储\" class=\"headerlink\" title=\"IP地址存储\"></a>IP地址存储</h4><p>通过在应用程序中进行 <strong>字符型</strong> 到 <strong>无符号整型</strong> 的转换，而不是使用MySQL的 <code>INET_ATON()</code> 函数，插入整数IP时MySQL的负载可能会稍微降低。</p>\n<p><a href=\"https://bafford.com/2009/03/09/mysql-performance-benefits-of-storing-integer-ip-addresses/\">https://bafford.com/2009/03/09/mysql-performance-benefits-of-storing-integer-ip-addresses/</a></p>\n<h2 id=\"三层架构说明\"><a href=\"#三层架构说明\" class=\"headerlink\" title=\"三层架构说明\"></a>三层架构说明</h2><ul>\n<li>  第一层，用于连接处理、授权认证、安全认证等等。大多数基于客户端 / 服务器端的工具或者服务器都有类似架构。</li>\n<li>  第二层，是 MySQL 架构的核心部分。MySQL 的大部分核心服务功能大都在这一层。包括查询解析、分析、优化、缓存以及所有的内置函数的实现，还有所有的跨存储引擎的功能都在这一层实现：存储过程、触发器、试图等。</li>\n<li>  第三层，存储引擎层。存储引擎负责 MySQL 中数据的存储和读取。每个存储引擎都有自己的优势和劣势。MySQL 服务器层通过 API 与存储引擎进行通信。存储引擎本身是不会解析 SQL，且不同的存储引擎之间也是不会相互通信。</li>\n</ul>\n<p><img src=\"http://n.sinaimg.cn/games/3ece443e/20160916/MySQLJiaGouTu1.png\" alt=\"img\"></p>\n<h2 id=\"MySQL-服务器接收-处理一个查询请求的过程\"><a href=\"#MySQL-服务器接收-处理一个查询请求的过程\" class=\"headerlink\" title=\"MySQL 服务器接收 / 处理一个查询请求的过程\"></a>MySQL 服务器接收 / 处理一个查询请求的过程</h2><ol>\n<li> 当 MySQL 服务器接收到一个查询请求，首先会对当前的连接请求进行认证，认证其用户名和密码信息。</li>\n<li> 连接成功之后，会继续验证该连接是否具有执行某个特定查询的权限。</li>\n<li> 所有的验证都通过，如果是 select 操作，MySQL 会先检查查询缓存中是否存在该缓存，如果存在直接返回结果。不存在继续下一步。</li>\n<li> 解析查询，并创建内部数据结构（生成 解析树），然后对解析树进行各种优化（包括，重写查询，决定表的读取顺序、选择合适的索引等等）。</li>\n<li> 通过存储引擎存储或者提取结果。</li>\n<li> 如果是 select 操作，生成查询缓存。</li>\n<li> 返回结果。</li>\n</ol>\n<p>根据控制的不同层次，MySQL 的并发控制可以分为：</p>\n<ul>\n<li>  服务器层</li>\n<li>  存储引擎层</li>\n</ul>\n<p>实现并发控制的方法策略：**<em>锁机制</em>**</p>\n<ul>\n<li>  共享锁（shared lock）&lt;======&gt; 读锁（read lock）</li>\n<li>  排它锁（exclusive lock） &lt;======&gt; 写锁（write lock）</li>\n</ul>\n<p>如何选择适合的锁？**<em>锁策略</em>**</p>\n<ul>\n<li>锁的粒度越小，系统的并发性越高</li>\n<li>所得操作越多，系统的开销越大<blockquote>\n<p>所以所谓的锁策略，就是在锁的开销和数据的安全性之间寻求平衡。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"MySQL并发控制\"><a href=\"#MySQL并发控制\" class=\"headerlink\" title=\"MySQL并发控制\"></a>MySQL并发控制</h2><h3 id=\"MySQL-中锁策略类型\"><a href=\"#MySQL-中锁策略类型\" class=\"headerlink\" title=\"MySQL 中锁策略类型\"></a>MySQL 中锁策略类型</h3><p>MySQL 不同的存储引擎中用到的锁策略基本有两种。一种是表级锁，另一种是行级锁。</p>\n<ul>\n<li>表锁，一种开销最小的锁策略。<blockquote>\n<p>一个用户对表进行写操作时，需要先获得写锁，这是其他用户读该表进行的读写操作都会进行阻塞。只有当前写操作被释放之后，其他人才能活的读锁。当当前表有读锁时，其他人也可以继续获得读锁。读锁是共享性的不同的读锁之间是互相不阻塞的。 另外，写锁的优先级高于读锁。所以当有多个锁请求存在是，读锁的请求会被优先插入到锁队列的前边。</p>\n</blockquote>\n</li>\n<li>行锁，最大程度支持并发处理，同时也是锁开销最大的锁策略。<blockquote>\n<p>顾名思义，行级锁只在将要修改的记录行上进行锁操作，对其他的行的操作没有影响。</p>\n</blockquote>\n</li>\n</ul>\n<p>尽管我们一般提到的锁，都处于存储引擎这一层，但是 MySQL 本身在某些情况下，也会对锁策略进行控制。比如表的 alter table 操作，会对表本身使用表锁，而直接忽略存储引擎的锁机制。</p>\n<h3 id=\"MySQL-中死锁问题解决方法\"><a href=\"#MySQL-中死锁问题解决方法\" class=\"headerlink\" title=\"MySQL 中死锁问题解决方法\"></a>MySQL 中死锁问题解决方法</h3><blockquote>\n<p>死锁，即两个或者多个事务在同一资源上相互占用，并请求占用对方已经占用的资源的情况。</p>\n</blockquote>\n<p>既然有锁存在，当然就会有死锁的情况发生。那么 MySQL 中是如何处理死锁问题的呢？ 死锁的通常解决方案有两种，即：</p>\n<ul>\n<li>  死锁检测机制</li>\n<li>  超时机制</li>\n</ul>\n<p>InnoDB 存储引擎在检测到有死锁发生的处理方法是，将当前持有最少的行级锁的事务进行回滚。待打破死锁后，重新执行因为死锁而回滚的事务。</p>"},{"title":"Nginx原理剖析（一）","id":"1213","date":"2023-03-08T15:59:41.000Z","_content":"\n[http://www.aosabook.org/en/nginx.html](http://www.aosabook.org/en/nginx.html)\n\n[https://www.kancloud.cn/kancloud/master-nginx-develop/51798](https://www.kancloud.cn/kancloud/master-nginx-develop/51798)\n\n## Nginx概述\n\nNginx 是一个 `模块化`、`事件驱动`、`异步`、`单线程`和`非阻塞` 的 Web服务器，大量使用 **多路复用** 和 **事件通知** ，并将特定任务用于单独进程。Nginx `worker` 可以处理数千个并发连接和请求。\n\n### Nginx代码结构\n\n```shell\n.\n├── auto       #自动检测系统环境以及编译相关的脚本\n│   ├── cc     #关于编译器相关的编译选项的检测脚本\n│   ├── lib    #nginx编译所需要的一些库的检测脚本\n│   ├── os     #与平台相关的一些系统参数与系统调用相关的检测\n│   └── types  #与数据类型相关的一些辅助脚本\n├── conf       #存放默认配置文件，在make install后，会拷贝到安装目录中去\n├── contrib    #存放一些实用工具，如geo配置生成工具（geo2nginx.pl）\n├── html       #存放默认的网页文件，在make install后，会拷贝到安装目录中去\n├── man        #nginx的man手册\n└── src        #存放nginx的源代码\n    ├── core  #nginx的核心源代码，包括常用数据结构的定义，以及nginx初始化运行的核心代码如main函数\n    ├── event  #对系统事件处理机制的封装，以及定时器的实现相关代码\n    │   └── modules #不同事件处理方式的模块化，如select、poll、epoll、kqueue等\n    ├── http   #nginx作为http服务器相关的代码\n    │   └── modules #包含http的各种功能模块\n    ├── mail   #nginx作为邮件代理服务器相关的代码\n    ├── misc   #一些辅助代码，测试c++头的兼容性，以及对google_perftools的支持\n    └── os     #主要是对各种不同体系统结构所提供的系统函数的封装，对外提供统一的系统调用接口\n```\n<!-- more -->\n### Worker模型\n\n**Nginx 不会为每个连接创建一个进程或线程**\n\nNginx 所做的是检查网络和存储的状态，初始化新连接，将它们添加到运行循环，并异步处理直到完成，此时连接被释放并从运行循环中删除。\n\nNginx通过`kqueue`、`epoll`和`事件端口`等获得有关入站和出站流量、磁盘操作、Socket读取或写入、超时等的异步反馈\n\nnginx 生成多个`worker` 来处理连接，所以它可以很好地跨多个内核进行扩展？\n\n`worker`对于某些磁盘使用和 CPU 负载模式，应调整Nginx 的数量 ：如果负载模式是 CPU 密集型的——例如，处理大量 TCP/IP、执行 SSL 或压缩——Nginx 的数量应与 CPU 内核的数量相匹配`worker`；如果负载主要受磁盘 I/O 限制——例如，从存储中提供不同的内容集，或大量代理 ，`worker`的数量可能是CPU核心数量的一倍半到两倍。\n\n[Nginx 1.9.11开始增加加载动态模块支持，从此不再需要替换nginx文件即可增加第三方扩展](https://developer.aliyun.com/article/311836)\n\n### Nginx 进程角色\n\nNginx 在内存中运行多个进程；有一个主进程和多个`worker`进程。在 nginx 1.x 版本中，所有进程都是单线程的。所有进程主要使用 **共享内存** 进行进程间通信。\n\n主进程负责以下任务：\n\n*   读取和验证配置\n*   创建、绑定和关闭Socket\n*   `worker`启动、终止和维护配置的进程数\n*   在不中断服务的情况下重新配置\n*   控制不间断的二进制升级（启动新的二进制文件并在必要时回滚）\n*   重新打开日志文件\n*   编译嵌入式 Perl 脚本\n\n这些`worker`进程接受、处理和处理来自客户端的连接，提供反向代理和过滤功能，并完成 nginx 能够完成的几乎所有其他工作。\n\n\\*+ 缓存加载程序进程负责检查磁盘缓存项并使用缓存元数据填充 nginx 的内存数据库。本质上，缓存加载器准备 nginx 实例来处理已经存储在磁盘上专门分配的目录结构中的文件。它遍历目录，检查缓存内容元数据，更新共享内存中的相关条目，然后在一切干净并准备好使用时退出。\n\n\\*+ 缓存管理器主要负责缓存过期和失效。它在 nginx 正常运行期间保留在内存中，并在出现故障时由主进程重新启动。\n\n### Nginx配置\n\nnginx 配置保存在许多纯文本文件中，这些文件通常位于`/usr/local/etc/nginx`or 中`/etc/nginx`。主配置文件通常称为 `nginx.conf`\n\n配置文件最初由主进程读取和验证。nginx 配置的编译只读形式可供进程使用，`worker`因为它们是从主进程派生出来的。配置结构由通常的虚拟内存管理机制自动共享。\n\nnginx 配置有几个不同的上下文如：`main`, `http`, `server`, `upstream`, `location`（以及 `mail`邮件代理）用于指令块。上下文永远不会重叠。\n\n### Nginx内幕\n\n大多数特定于协议和应用程序的功能都是由 nginx 模块完成的，而不是核心。\n\n在内部，nginx通过模块的管道或链处理连接。换句话说，每个操作都有一个模块在做相关的工作；例如，压缩、修改内容、执行服务器端包括、通过FastCGI或uwsgi协议与上游应用服务器通信或与memcached通信。","source":"_posts/nginx原理剖析（一）.md","raw":"---\ntitle: Nginx原理剖析（一）\ntags:\n  - Linux\n  - Nginx\nid: '1213'\ncategories:\n  - - 专业技术\n  - - 学习笔记\ndate: 2023-03-08 23:59:41\n---\n\n[http://www.aosabook.org/en/nginx.html](http://www.aosabook.org/en/nginx.html)\n\n[https://www.kancloud.cn/kancloud/master-nginx-develop/51798](https://www.kancloud.cn/kancloud/master-nginx-develop/51798)\n\n## Nginx概述\n\nNginx 是一个 `模块化`、`事件驱动`、`异步`、`单线程`和`非阻塞` 的 Web服务器，大量使用 **多路复用** 和 **事件通知** ，并将特定任务用于单独进程。Nginx `worker` 可以处理数千个并发连接和请求。\n\n### Nginx代码结构\n\n```shell\n.\n├── auto       #自动检测系统环境以及编译相关的脚本\n│   ├── cc     #关于编译器相关的编译选项的检测脚本\n│   ├── lib    #nginx编译所需要的一些库的检测脚本\n│   ├── os     #与平台相关的一些系统参数与系统调用相关的检测\n│   └── types  #与数据类型相关的一些辅助脚本\n├── conf       #存放默认配置文件，在make install后，会拷贝到安装目录中去\n├── contrib    #存放一些实用工具，如geo配置生成工具（geo2nginx.pl）\n├── html       #存放默认的网页文件，在make install后，会拷贝到安装目录中去\n├── man        #nginx的man手册\n└── src        #存放nginx的源代码\n    ├── core  #nginx的核心源代码，包括常用数据结构的定义，以及nginx初始化运行的核心代码如main函数\n    ├── event  #对系统事件处理机制的封装，以及定时器的实现相关代码\n    │   └── modules #不同事件处理方式的模块化，如select、poll、epoll、kqueue等\n    ├── http   #nginx作为http服务器相关的代码\n    │   └── modules #包含http的各种功能模块\n    ├── mail   #nginx作为邮件代理服务器相关的代码\n    ├── misc   #一些辅助代码，测试c++头的兼容性，以及对google_perftools的支持\n    └── os     #主要是对各种不同体系统结构所提供的系统函数的封装，对外提供统一的系统调用接口\n```\n<!-- more -->\n### Worker模型\n\n**Nginx 不会为每个连接创建一个进程或线程**\n\nNginx 所做的是检查网络和存储的状态，初始化新连接，将它们添加到运行循环，并异步处理直到完成，此时连接被释放并从运行循环中删除。\n\nNginx通过`kqueue`、`epoll`和`事件端口`等获得有关入站和出站流量、磁盘操作、Socket读取或写入、超时等的异步反馈\n\nnginx 生成多个`worker` 来处理连接，所以它可以很好地跨多个内核进行扩展？\n\n`worker`对于某些磁盘使用和 CPU 负载模式，应调整Nginx 的数量 ：如果负载模式是 CPU 密集型的——例如，处理大量 TCP/IP、执行 SSL 或压缩——Nginx 的数量应与 CPU 内核的数量相匹配`worker`；如果负载主要受磁盘 I/O 限制——例如，从存储中提供不同的内容集，或大量代理 ，`worker`的数量可能是CPU核心数量的一倍半到两倍。\n\n[Nginx 1.9.11开始增加加载动态模块支持，从此不再需要替换nginx文件即可增加第三方扩展](https://developer.aliyun.com/article/311836)\n\n### Nginx 进程角色\n\nNginx 在内存中运行多个进程；有一个主进程和多个`worker`进程。在 nginx 1.x 版本中，所有进程都是单线程的。所有进程主要使用 **共享内存** 进行进程间通信。\n\n主进程负责以下任务：\n\n*   读取和验证配置\n*   创建、绑定和关闭Socket\n*   `worker`启动、终止和维护配置的进程数\n*   在不中断服务的情况下重新配置\n*   控制不间断的二进制升级（启动新的二进制文件并在必要时回滚）\n*   重新打开日志文件\n*   编译嵌入式 Perl 脚本\n\n这些`worker`进程接受、处理和处理来自客户端的连接，提供反向代理和过滤功能，并完成 nginx 能够完成的几乎所有其他工作。\n\n\\*+ 缓存加载程序进程负责检查磁盘缓存项并使用缓存元数据填充 nginx 的内存数据库。本质上，缓存加载器准备 nginx 实例来处理已经存储在磁盘上专门分配的目录结构中的文件。它遍历目录，检查缓存内容元数据，更新共享内存中的相关条目，然后在一切干净并准备好使用时退出。\n\n\\*+ 缓存管理器主要负责缓存过期和失效。它在 nginx 正常运行期间保留在内存中，并在出现故障时由主进程重新启动。\n\n### Nginx配置\n\nnginx 配置保存在许多纯文本文件中，这些文件通常位于`/usr/local/etc/nginx`or 中`/etc/nginx`。主配置文件通常称为 `nginx.conf`\n\n配置文件最初由主进程读取和验证。nginx 配置的编译只读形式可供进程使用，`worker`因为它们是从主进程派生出来的。配置结构由通常的虚拟内存管理机制自动共享。\n\nnginx 配置有几个不同的上下文如：`main`, `http`, `server`, `upstream`, `location`（以及 `mail`邮件代理）用于指令块。上下文永远不会重叠。\n\n### Nginx内幕\n\n大多数特定于协议和应用程序的功能都是由 nginx 模块完成的，而不是核心。\n\n在内部，nginx通过模块的管道或链处理连接。换句话说，每个操作都有一个模块在做相关的工作；例如，压缩、修改内容、执行服务器端包括、通过FastCGI或uwsgi协议与上游应用服务器通信或与memcached通信。","slug":"nginx原理剖析（一）","published":1,"updated":"2024-03-12T02:24:18.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltnrar49000rjry1azhcg7qo","content":"<p><a href=\"http://www.aosabook.org/en/nginx.html\">http://www.aosabook.org/en/nginx.html</a></p>\n<p><a href=\"https://www.kancloud.cn/kancloud/master-nginx-develop/51798\">https://www.kancloud.cn/kancloud/master-nginx-develop/51798</a></p>\n<h2 id=\"Nginx概述\"><a href=\"#Nginx概述\" class=\"headerlink\" title=\"Nginx概述\"></a>Nginx概述</h2><p>Nginx 是一个 <code>模块化</code>、<code>事件驱动</code>、<code>异步</code>、<code>单线程</code>和<code>非阻塞</code> 的 Web服务器，大量使用 <strong>多路复用</strong> 和 <strong>事件通知</strong> ，并将特定任务用于单独进程。Nginx <code>worker</code> 可以处理数千个并发连接和请求。</p>\n<h3 id=\"Nginx代码结构\"><a href=\"#Nginx代码结构\" class=\"headerlink\" title=\"Nginx代码结构\"></a>Nginx代码结构</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── auto       #自动检测系统环境以及编译相关的脚本</span><br><span class=\"line\">│   ├── cc     #关于编译器相关的编译选项的检测脚本</span><br><span class=\"line\">│   ├── lib    #nginx编译所需要的一些库的检测脚本</span><br><span class=\"line\">│   ├── os     #与平台相关的一些系统参数与系统调用相关的检测</span><br><span class=\"line\">│   └── types  #与数据类型相关的一些辅助脚本</span><br><span class=\"line\">├── conf       #存放默认配置文件，在make install后，会拷贝到安装目录中去</span><br><span class=\"line\">├── contrib    #存放一些实用工具，如geo配置生成工具（geo2nginx.pl）</span><br><span class=\"line\">├── html       #存放默认的网页文件，在make install后，会拷贝到安装目录中去</span><br><span class=\"line\">├── man        #nginx的man手册</span><br><span class=\"line\">└── src        #存放nginx的源代码</span><br><span class=\"line\">    ├── core  #nginx的核心源代码，包括常用数据结构的定义，以及nginx初始化运行的核心代码如main函数</span><br><span class=\"line\">    ├── event  #对系统事件处理机制的封装，以及定时器的实现相关代码</span><br><span class=\"line\">    │   └── modules #不同事件处理方式的模块化，如select、poll、epoll、kqueue等</span><br><span class=\"line\">    ├── http   #nginx作为http服务器相关的代码</span><br><span class=\"line\">    │   └── modules #包含http的各种功能模块</span><br><span class=\"line\">    ├── mail   #nginx作为邮件代理服务器相关的代码</span><br><span class=\"line\">    ├── misc   #一些辅助代码，测试c++头的兼容性，以及对google_perftools的支持</span><br><span class=\"line\">    └── os     #主要是对各种不同体系统结构所提供的系统函数的封装，对外提供统一的系统调用接口</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<h3 id=\"Worker模型\"><a href=\"#Worker模型\" class=\"headerlink\" title=\"Worker模型\"></a>Worker模型</h3><p><strong>Nginx 不会为每个连接创建一个进程或线程</strong></p>\n<p>Nginx 所做的是检查网络和存储的状态，初始化新连接，将它们添加到运行循环，并异步处理直到完成，此时连接被释放并从运行循环中删除。</p>\n<p>Nginx通过<code>kqueue</code>、<code>epoll</code>和<code>事件端口</code>等获得有关入站和出站流量、磁盘操作、Socket读取或写入、超时等的异步反馈</p>\n<p>nginx 生成多个<code>worker</code> 来处理连接，所以它可以很好地跨多个内核进行扩展？</p>\n<p><code>worker</code>对于某些磁盘使用和 CPU 负载模式，应调整Nginx 的数量 ：如果负载模式是 CPU 密集型的——例如，处理大量 TCP/IP、执行 SSL 或压缩——Nginx 的数量应与 CPU 内核的数量相匹配<code>worker</code>；如果负载主要受磁盘 I/O 限制——例如，从存储中提供不同的内容集，或大量代理 ，<code>worker</code>的数量可能是CPU核心数量的一倍半到两倍。</p>\n<p><a href=\"https://developer.aliyun.com/article/311836\">Nginx 1.9.11开始增加加载动态模块支持，从此不再需要替换nginx文件即可增加第三方扩展</a></p>\n<h3 id=\"Nginx-进程角色\"><a href=\"#Nginx-进程角色\" class=\"headerlink\" title=\"Nginx 进程角色\"></a>Nginx 进程角色</h3><p>Nginx 在内存中运行多个进程；有一个主进程和多个<code>worker</code>进程。在 nginx 1.x 版本中，所有进程都是单线程的。所有进程主要使用 <strong>共享内存</strong> 进行进程间通信。</p>\n<p>主进程负责以下任务：</p>\n<ul>\n<li>  读取和验证配置</li>\n<li>  创建、绑定和关闭Socket</li>\n<li>  <code>worker</code>启动、终止和维护配置的进程数</li>\n<li>  在不中断服务的情况下重新配置</li>\n<li>  控制不间断的二进制升级（启动新的二进制文件并在必要时回滚）</li>\n<li>  重新打开日志文件</li>\n<li>  编译嵌入式 Perl 脚本</li>\n</ul>\n<p>这些<code>worker</code>进程接受、处理和处理来自客户端的连接，提供反向代理和过滤功能，并完成 nginx 能够完成的几乎所有其他工作。</p>\n<p>*+ 缓存加载程序进程负责检查磁盘缓存项并使用缓存元数据填充 nginx 的内存数据库。本质上，缓存加载器准备 nginx 实例来处理已经存储在磁盘上专门分配的目录结构中的文件。它遍历目录，检查缓存内容元数据，更新共享内存中的相关条目，然后在一切干净并准备好使用时退出。</p>\n<p>*+ 缓存管理器主要负责缓存过期和失效。它在 nginx 正常运行期间保留在内存中，并在出现故障时由主进程重新启动。</p>\n<h3 id=\"Nginx配置\"><a href=\"#Nginx配置\" class=\"headerlink\" title=\"Nginx配置\"></a>Nginx配置</h3><p>nginx 配置保存在许多纯文本文件中，这些文件通常位于<code>/usr/local/etc/nginx</code>or 中<code>/etc/nginx</code>。主配置文件通常称为 <code>nginx.conf</code></p>\n<p>配置文件最初由主进程读取和验证。nginx 配置的编译只读形式可供进程使用，<code>worker</code>因为它们是从主进程派生出来的。配置结构由通常的虚拟内存管理机制自动共享。</p>\n<p>nginx 配置有几个不同的上下文如：<code>main</code>, <code>http</code>, <code>server</code>, <code>upstream</code>, <code>location</code>（以及 <code>mail</code>邮件代理）用于指令块。上下文永远不会重叠。</p>\n<h3 id=\"Nginx内幕\"><a href=\"#Nginx内幕\" class=\"headerlink\" title=\"Nginx内幕\"></a>Nginx内幕</h3><p>大多数特定于协议和应用程序的功能都是由 nginx 模块完成的，而不是核心。</p>\n<p>在内部，nginx通过模块的管道或链处理连接。换句话说，每个操作都有一个模块在做相关的工作；例如，压缩、修改内容、执行服务器端包括、通过FastCGI或uwsgi协议与上游应用服务器通信或与memcached通信。</p>\n","site":{"data":{}},"excerpt":"<p><a href=\"http://www.aosabook.org/en/nginx.html\">http://www.aosabook.org/en/nginx.html</a></p>\n<p><a href=\"https://www.kancloud.cn/kancloud/master-nginx-develop/51798\">https://www.kancloud.cn/kancloud/master-nginx-develop/51798</a></p>\n<h2 id=\"Nginx概述\"><a href=\"#Nginx概述\" class=\"headerlink\" title=\"Nginx概述\"></a>Nginx概述</h2><p>Nginx 是一个 <code>模块化</code>、<code>事件驱动</code>、<code>异步</code>、<code>单线程</code>和<code>非阻塞</code> 的 Web服务器，大量使用 <strong>多路复用</strong> 和 <strong>事件通知</strong> ，并将特定任务用于单独进程。Nginx <code>worker</code> 可以处理数千个并发连接和请求。</p>\n<h3 id=\"Nginx代码结构\"><a href=\"#Nginx代码结构\" class=\"headerlink\" title=\"Nginx代码结构\"></a>Nginx代码结构</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── auto       #自动检测系统环境以及编译相关的脚本</span><br><span class=\"line\">│   ├── cc     #关于编译器相关的编译选项的检测脚本</span><br><span class=\"line\">│   ├── lib    #nginx编译所需要的一些库的检测脚本</span><br><span class=\"line\">│   ├── os     #与平台相关的一些系统参数与系统调用相关的检测</span><br><span class=\"line\">│   └── types  #与数据类型相关的一些辅助脚本</span><br><span class=\"line\">├── conf       #存放默认配置文件，在make install后，会拷贝到安装目录中去</span><br><span class=\"line\">├── contrib    #存放一些实用工具，如geo配置生成工具（geo2nginx.pl）</span><br><span class=\"line\">├── html       #存放默认的网页文件，在make install后，会拷贝到安装目录中去</span><br><span class=\"line\">├── man        #nginx的man手册</span><br><span class=\"line\">└── src        #存放nginx的源代码</span><br><span class=\"line\">    ├── core  #nginx的核心源代码，包括常用数据结构的定义，以及nginx初始化运行的核心代码如main函数</span><br><span class=\"line\">    ├── event  #对系统事件处理机制的封装，以及定时器的实现相关代码</span><br><span class=\"line\">    │   └── modules #不同事件处理方式的模块化，如select、poll、epoll、kqueue等</span><br><span class=\"line\">    ├── http   #nginx作为http服务器相关的代码</span><br><span class=\"line\">    │   └── modules #包含http的各种功能模块</span><br><span class=\"line\">    ├── mail   #nginx作为邮件代理服务器相关的代码</span><br><span class=\"line\">    ├── misc   #一些辅助代码，测试c++头的兼容性，以及对google_perftools的支持</span><br><span class=\"line\">    └── os     #主要是对各种不同体系统结构所提供的系统函数的封装，对外提供统一的系统调用接口</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"Worker模型\"><a href=\"#Worker模型\" class=\"headerlink\" title=\"Worker模型\"></a>Worker模型</h3><p><strong>Nginx 不会为每个连接创建一个进程或线程</strong></p>\n<p>Nginx 所做的是检查网络和存储的状态，初始化新连接，将它们添加到运行循环，并异步处理直到完成，此时连接被释放并从运行循环中删除。</p>\n<p>Nginx通过<code>kqueue</code>、<code>epoll</code>和<code>事件端口</code>等获得有关入站和出站流量、磁盘操作、Socket读取或写入、超时等的异步反馈</p>\n<p>nginx 生成多个<code>worker</code> 来处理连接，所以它可以很好地跨多个内核进行扩展？</p>\n<p><code>worker</code>对于某些磁盘使用和 CPU 负载模式，应调整Nginx 的数量 ：如果负载模式是 CPU 密集型的——例如，处理大量 TCP/IP、执行 SSL 或压缩——Nginx 的数量应与 CPU 内核的数量相匹配<code>worker</code>；如果负载主要受磁盘 I/O 限制——例如，从存储中提供不同的内容集，或大量代理 ，<code>worker</code>的数量可能是CPU核心数量的一倍半到两倍。</p>\n<p><a href=\"https://developer.aliyun.com/article/311836\">Nginx 1.9.11开始增加加载动态模块支持，从此不再需要替换nginx文件即可增加第三方扩展</a></p>\n<h3 id=\"Nginx-进程角色\"><a href=\"#Nginx-进程角色\" class=\"headerlink\" title=\"Nginx 进程角色\"></a>Nginx 进程角色</h3><p>Nginx 在内存中运行多个进程；有一个主进程和多个<code>worker</code>进程。在 nginx 1.x 版本中，所有进程都是单线程的。所有进程主要使用 <strong>共享内存</strong> 进行进程间通信。</p>\n<p>主进程负责以下任务：</p>\n<ul>\n<li>  读取和验证配置</li>\n<li>  创建、绑定和关闭Socket</li>\n<li>  <code>worker</code>启动、终止和维护配置的进程数</li>\n<li>  在不中断服务的情况下重新配置</li>\n<li>  控制不间断的二进制升级（启动新的二进制文件并在必要时回滚）</li>\n<li>  重新打开日志文件</li>\n<li>  编译嵌入式 Perl 脚本</li>\n</ul>\n<p>这些<code>worker</code>进程接受、处理和处理来自客户端的连接，提供反向代理和过滤功能，并完成 nginx 能够完成的几乎所有其他工作。</p>\n<p>*+ 缓存加载程序进程负责检查磁盘缓存项并使用缓存元数据填充 nginx 的内存数据库。本质上，缓存加载器准备 nginx 实例来处理已经存储在磁盘上专门分配的目录结构中的文件。它遍历目录，检查缓存内容元数据，更新共享内存中的相关条目，然后在一切干净并准备好使用时退出。</p>\n<p>*+ 缓存管理器主要负责缓存过期和失效。它在 nginx 正常运行期间保留在内存中，并在出现故障时由主进程重新启动。</p>\n<h3 id=\"Nginx配置\"><a href=\"#Nginx配置\" class=\"headerlink\" title=\"Nginx配置\"></a>Nginx配置</h3><p>nginx 配置保存在许多纯文本文件中，这些文件通常位于<code>/usr/local/etc/nginx</code>or 中<code>/etc/nginx</code>。主配置文件通常称为 <code>nginx.conf</code></p>\n<p>配置文件最初由主进程读取和验证。nginx 配置的编译只读形式可供进程使用，<code>worker</code>因为它们是从主进程派生出来的。配置结构由通常的虚拟内存管理机制自动共享。</p>\n<p>nginx 配置有几个不同的上下文如：<code>main</code>, <code>http</code>, <code>server</code>, <code>upstream</code>, <code>location</code>（以及 <code>mail</code>邮件代理）用于指令块。上下文永远不会重叠。</p>\n<h3 id=\"Nginx内幕\"><a href=\"#Nginx内幕\" class=\"headerlink\" title=\"Nginx内幕\"></a>Nginx内幕</h3><p>大多数特定于协议和应用程序的功能都是由 nginx 模块完成的，而不是核心。</p>\n<p>在内部，nginx通过模块的管道或链处理连接。换句话说，每个操作都有一个模块在做相关的工作；例如，压缩、修改内容、执行服务器端包括、通过FastCGI或uwsgi协议与上游应用服务器通信或与memcached通信。</p>"},{"title":"Python3爬Bing所有壁纸","id":"1082","date":"2022-04-27T10:59:47.000Z","_content":"\n#### 前期工作\n\n找bing的每日一图壁纸，观察网页结构\n\n![image-20220428154318726](https://img-blog.csdnimg.cn/img_convert/cd14a1e7254fe64c855517a0eb1f53d5.png)\n\n①是图片的描述\n\n②是图片的时间\n\n③是图片的下载地址\n\n④是当前页面page的页数1和总页数187\n<!-- more -->\n#### 编写功能函数\n\n捕获不同page网页html信息，用requests库：\n\n```python\n# param：页面的相应地址\n# return：成功则返回相应DOM文档，失败则返回信息msg\ndef get_response_text(pageNum):\n    msg=\"\"\n    try:\n        currentSite = mainSite + \"/?p=\" + str(pageNum)\n        respose = requests.get(url=currentSite,headers=myheader)\n        status_code = respose.status_code\n        if 200 <= status_code < 300:\n            msg = '请求站点操作成功'\n            return respose.text\n        elif status_code == 401:\n            msg = '请求站点匿名用户访问权限资源时的异常'\n        elif status_code == 403:\n            msg = '请求站点无访问权限，请联系管理员授予权限'\n        elif status_code == 404:\n            msg = '请求站点请求的资源不存在'\n        elif status_code == 500:\n            msg = '请求站点请求资源的系统异常，请稍后重试'\n        else:\n            msg = '请求站点未知返回代码'\n    except requests.exceptions.ConnectionError as e:\n        print(\"连接错误，请求站点是否可以访问？是否有网络或网络不稳定？\\n请检查网络问题...\\n\"+e)\n        time.sleep(10)\n    except requests.exceptions.InvalidURL as e:\n        print(\"非法的URL，请验证URL是否正确或网站是否存在\\n\"+e)\n    except requests.exceptions.ReadTimeout:\n        print(\"请求站点远程服务器无响应数据\")\n        time.sleep(10)\n    except:\n        print(\"请求站点遇到未知错误...\")\n        time.sleep(10)\n    finally:\n        print(msg)\n    return msg\n```\n\n返回当前page所有的图片信息\n\n```python\n#根据不同页面返回图片的信息\ndef get_PicUrlList(pageNum):\n    url_list = []\n    mainText = get_response_text(pageNum)\n    #正则规则\n    rule = re.compile(r'class=\"description\"><h3>(.*?) \\(©.*?<em class=\"t\">(.*?)</em>.*?class=\\\"ctrl download\\\" href=\\\"(.*?)\\\" target')\n    result_groups = re.findall(rule,mainText)\n    #由网页结构可知：匹配结果i[0]、i[1]、i[2]分别代表图片的描述、图片的时间、图片的下载地址\n    if result_groups:\n        for i in result_groups:\n            img_info={\n                'description':i[0],\n                'time':i[1],\n                'url':mainSite+i[2]\n            }\n            url_list.append(img_info)\n    else:\n        print(\"No match!!\")\n    return url_list\n```\n\n下载函数，用shell的wget，下载速度更快更稳定\n\n```python\ndef downloadPic(img_info):\n    global success,fail\n    try:\n        #利用Shell下载图片\n            os.system(\"sudo wget \"+img_info['url']+\" -q -O /mnt/c/Users/86199/OneDrive/图片/\"+img_info['description']+img_info['time']+'.jpg')\n            success.append(img_info)\n            print(img_info['description']+img_info['time']+'.png', '保存成功!')\n        #每隔一分钟下载一张\n            #time.sleep(60)\n    except:\n        fail.append(img_info)\n        print(\"something wrong!\\n\")\n```\n\n增加一个程序退出时执行函数，把下载信息写入\n\n```python\n@atexit.register\ndef write_info():\n    with open('info.txt','w',encoding='utf-8') as file:\n        file.write(\"fail:\"+str(fail)+(\"\\n\")+ \"total:\" + str(len(fail))\n        +\"success:\"+str(success)+(\"\\n\")+ \"total:\" + str(len(success))\n        +\"current-page:\"+str(currentPage))\n```\n\n主运行功能函数\n\n```python\ndef main_run():\n    global completeCount,failCount,currentPage, totalPage\n    for i in range(totalPage):\n        url_list = get_PicUrlList(currentPage)\n        for img_info in url_list:\n            print(\"正在下载：\"+img_info['description']+\"\\t图片\")\n            downloadPic(img_info)\n        print('page:' + str(currentPage) + 'complete')\n        currentPage += 1\n        with open('info.txt','w',encoding='utf-8') as file:\n            file.write(\"fail:\"+str(fail)+(\"\\n\")+ \"total:\" + str(len(fail))\n             +\"success:\"+str(success)+(\"\\n\")+ \"total:\" + str(len(success))\n             +\"current-page:\"+str(currentPage))\n```\n\n总文件`main.py`\n\n```python\nimport os\nimport random\nimport re\nimport time\nimport requests\nimport atexit\n\ntotalPage = 187 #网站的总页数\ncurrentPage = 1 #当前爬取图片的页数\nmyheader = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n                      'Chrome/99.0.4844.74 Safari/537.36 Edg/99.0.1150.46 '\n    }\nstatusCode = 0 #爬取时返回的HTTP状态码\nmainSite = \"https://bing.ioliu.cn\" #要爬的网页\npic_url_list = [] #图片的下载地址\nfail=[] #下载失败的url\nsuccess=[] #下载成功的url\n\n# param：页面的相应地址\n# return：成功直接返回相应DOM文档，失败返回 \"什么也没有\"\ndef get_response_text(pageNum):\n    msg=\"\"\n    try:\n        currentSite = mainSite + \"/?p=\" + str(pageNum)\n        respose = requests.get(url=currentSite,headers=myheader)\n        status_code = respose.status_code\n        if 200 <= status_code < 300:\n            msg = '请求站点操作成功'\n        elif status_code == 401:\n            msg = '请求站点匿名用户访问权限资源时的异常'\n        elif status_code == 403:\n            msg = '请求站点无访问权限，请联系管理员授予权限'\n        elif status_code == 404:\n            msg = '请求站点请求的资源不存在'\n        elif status_code == 500:\n            msg = '请求站点请求资源的系统异常，请稍后重试'\n        else:\n            msg = '请求站点未知返回代码'\n    except requests.exceptions.ConnectionError as e:\n        print(\"连接错误，请求站点是否可以访问？是否有网络或网络不稳定？\\n请检查网络问题...\\n\"+e)\n        time.sleep(10)\n    except requests.exceptions.InvalidURL as e:\n        print(\"非法的URL，请验证URL是否正确或网站是否存在\\n\"+e)\n    except requests.exceptions.ReadTimeout:\n        print(\"请求站点远程服务器无响应数据\")\n        time.sleep(10)\n    except:\n        print(\"请求站点遇到未知错误...\")\n        time.sleep(10)\n    finally:\n        print(msg)\n        return respose.text \ndef get_PicUrlList(pageNum):\n\n    url_list = []\n    mainText = get_response_text(pageNum)\n    rule = re.compile(r'class=\"description\"><h3>(.*?) \\(©.*?<em class=\"t\">(.*?)</em>.*?class=\\\"ctrl download\\\" href=\\\"(.*?)\\\" target')\n    result_groups = re.findall(rule,mainText)\n\n    if result_groups:\n        for i in result_groups:\n            img_info={\n                'description':i[0],\n                'time':i[1],\n                'url':mainSite+i[2]\n            }\n            url_list.append(img_info)\n    else:\n        print(\"No match!!\")\n    return url_list\n\ndef downloadPic(img_info):\n    global success,fail\n    try:\n        #利用Shell下载图片\n            os.system(\"sudo wget \"+img_info['url']+\" -q -O /mnt/c/Users/86199/OneDrive/图片/\"+img_info['description']+img_info['time']+'.jpg')\n            success.append(img_info)\n            print(img_info['description']+img_info['time']+'.png', '保存成功!')\n        #每隔一分钟下载一张\n            # time.sleep(60)\n    except:\n        fail.append(img_info)\n        print(\"something wrong!\\n\")\n\ndef main_run():\n    global completeCount,failCount,currentPage, totalPage\n    for i in range(totalPage):\n        url_list = get_PicUrlList(currentPage)\n        for img_info in url_list:\n            print(\"正在下载：\"+img_info['description']+\"\\t图片\")\n            downloadPic(img_info)\n        print('page:' + str(currentPage) + 'complete')\n        currentPage += 1\n        with open('info.txt','w',encoding='utf-8') as file:\n            file.write(\"fail:\"+str(fail)+(\"\\n\")+ \"total:\" + str(len(fail))\n             +\"success:\"+str(success)+(\"\\n\")+ \"total:\" + str(len(success))\n             +\"current-page:\"+str(currentPage))\n\n@atexit.register\ndef write_info():\n    with open('info.txt','w',encoding='utf-8') as file:\n        file.write(\"fail:\"+str(fail)+(\"\\n\")+ \"total:\" + str(len(fail))\n        +\"success:\"+str(success)+(\"\\n\")+ \"total:\" + str(len(success))\n        +\"current-page:\"+str(currentPage))\n\nif __name__== \"__main__\":\n    main_run()\n```\n\n#### linux下挂起后台开跑\n\n```shell\nsudo nohup python3 main.py > run.out 2>&1 &\n```\n\n#### 测试结果\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/a35d0cdbbc994bb0a99d64cb72a9dd9f.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/46c6c5c333cf4d2fbe8054e337a1c812.png)\n\n`info.txt`: ![image-20220428155204611](https://img-blog.csdnimg.cn/img_convert/b52d5ec4c0a3071f18bbfc0b6291a023.png)\n\n#### 注意事项\n\n在下载图片的那个功能函数里，需要根据自己的主机修改下载目录， 最好每下载一张就歇一会，我不知道网站有没有反爬，一直下载可能会被识别到时候IP被禁了就不好了。 源站有流量限制，本身下载就很慢（估计很多人都拿来爬。。。），如果没看到结果先自己用自己的电脑下载看能不能下\n\n#### 相关教程\n\n[atexit --- 退出处理器 — Python 3.10.4 文档](https://docs.python.org/zh-cn/3/library/atexit.html)\n\n`atexit`模块定义了清理函数的注册和反注册函数. 被注册的函数会在解释器正常终止时执行. `atexit`会按照注册顺序的_逆序_执行; 如果你注册了 `A`, `B` 和 `C`, 那么在解释器终止时会依序执行 `C`, `B`, `A`.\n\n**注意:** 通过该模块注册的函数, 在程序被未被 Python 捕获的信号杀死时并不会执行, 在检测到 Python 内部致命错误以及调用了`os._exit()` 时也不会执行.\n\n```\n用法： wget [选项]... [URL]...\n\n 长选项所必须的参数在使用短选项时也是必须的。\n\n 启动：\n   -V,  --version           显示 Wget 的版本信息并退出。\n   -h,  --help              打印此帮助。\n   -b,  --background        启动后转入后台。\n   -e,  --execute=COMMAND   运行一个“.wgetrc”风格的命令。\n\n 日志和输入文件：\n   -o,  --output-file=FILE    将日志信息写入 FILE。\n   -a,  --append-output=FILE  将信息添加至 FILE。\n   -d,  --debug               打印大量调试信息。\n   -q,  --quiet               安静模式 (无信息输出)。\n   -v,  --verbose             详尽的输出 (此为默认值)。\n   -nv, --no-verbose          关闭详尽输出，但不进入安静模式。\n        --report-speed=TYPE   Output bandwidth as TYPE.  TYPE can be bits.\n   -i,  --input-file=FILE     下载本地或外部 FILE 中的 URLs。\n   -F,  --force-html          把输入文件当成 HTML 文件。\n   -B,  --base=URL            解析与 URL 相关的\n                              HTML 输入文件 (由 -i -F 选项指定)。\n        --config=FILE         Specify config file to use.\n\n 下载：\n   -t,  --tries=NUMBER            设置重试次数为 NUMBER (0 代表无限制)。\n        --retry-connrefused       即使拒绝连接也是重试。\n   -O,  --output-document=FILE    将文档写入 FILE。\n   -nc, --no-clobber              skip downloads that would download to\n                                  existing files (overwriting them).\n   -c,  --continue                断点续传下载文件。\n        --progress=TYPE           选择进度条类型。\n   -N,  --timestamping            只获取比本地文件新的文件。\n   --no-use-server-timestamps     不用服务器上的时间戳来设置本地文件。\n   -S,  --server-response         打印服务器响应。\n        --spider                  不下载任何文件。\n   -T,  --timeout=SECONDS         将所有超时设为 SECONDS 秒。\n        --dns-timeout=SECS        设置 DNS 查寻超时为 SECS 秒。\n        --connect-timeout=SECS    设置连接超时为 SECS 秒。\n        --read-timeout=SECS       设置读取超时为 SECS 秒。\n   -w,  --wait=SECONDS            等待间隔为 SECONDS 秒。\n        --waitretry=SECONDS       在获取文件的重试期间等待 1..SECONDS 秒。\n        --random-wait             获取多个文件时，每次随机等待间隔\n                                  0.5*WAIT...1.5*WAIT 秒。\n        --no-proxy                禁止使用代理。\n   -Q,  --quota=NUMBER            设置获取配额为 NUMBER 字节。\n        --bind-address=ADDRESS    绑定至本地主机上的 ADDRESS (主机名或是 IP)。\n        --limit-rate=RATE         限制下载速率为 RATE。\n        --no-dns-cache            关闭 DNS 查寻缓存。\n        --restrict-file-names=OS  限定文件名中的字符为 OS 允许的字符。\n        --ignore-case             匹配文件/目录时忽略大小写。\n   -4,  --inet4-only              仅连接至 IPv4 地址。\n   -6,  --inet6-only              仅连接至 IPv6 地址。\n        --prefer-family=FAMILY    首先连接至指定协议的地址\n                                  FAMILY 为 IPv6，IPv4 或是 none。\n        --user=USER               将 ftp 和 http 的用户名均设置为 USER。\n        --password=PASS           将 ftp 和 http 的密码均设置为 PASS。\n        --ask-password            提示输入密码。\n        --no-iri                  关闭 IRI 支持。\n        --local-encoding=ENC      IRI (国际化资源标识符) 使用 ENC 作为本地编码。\n        --remote-encoding=ENC     使用 ENC 作为默认远程编码。\n        --unlink                  remove file before clobber.\n\n 目录：\n   -nd, --no-directories           不创建目录。\n   -x,  --force-directories        强制创建目录。\n   -nH, --no-host-directories      不要创建主目录。\n        --protocol-directories     在目录中使用协议名称。\n   -P,  --directory-prefix=PREFIX  以 PREFIX/... 保存文件\n        --cut-dirs=NUMBER          忽略远程目录中 NUMBER 个目录层。\n\n HTTP 选项：\n        --http-user=USER        设置 http 用户名为 USER。\n        --http-password=PASS    设置 http 密码为 PASS。\n        --no-cache              不在服务器上缓存数据。\n        --default-page=NAME     改变默认页\n                                (默认页通常是“index.html”)。\n   -E,  --adjust-extension      以合适的扩展名保存 HTML/CSS 文档。\n        --ignore-length         忽略头部的‘Content-Length’区域。\n        --header=STRING         在头部插入 STRING。\n        --max-redirect          每页所允许的最大重定向。\n        --proxy-user=USER       使用 USER 作为代理用户名。\n        --proxy-password=PASS   使用 PASS 作为代理密码。\n        --referer=URL           在 HTTP 请求头包含‘Referer: URL’。\n        --save-headers          将 HTTP 头保存至文件。\n   -U,  --user-agent=AGENT      标识为 AGENT 而不是 Wget/VERSION。\n        --no-http-keep-alive    禁用 HTTP keep-alive (永久连接)。\n        --no-cookies            不使用 cookies。\n        --load-cookies=FILE     会话开始前从 FILE 中载入 cookies。\n        --save-cookies=FILE     会话结束后保存 cookies 至 FILE。\n        --keep-session-cookies  载入并保存会话 (非永久) cookies。\n        --post-data=STRING      使用 POST 方式；把 STRING 作为数据发送。\n        --post-file=FILE        使用 POST 方式；发送 FILE 内容。\n        --content-disposition   当选中本地文件名时\n                                允许 Content-Disposition 头部 (尚在实验)。\n        --content-on-error      output the received content on server errors.\n        --auth-no-challenge     发送不含服务器询问的首次等待\n                                的基本 HTTP 验证信息。\n\n HTTPS (SSL/TLS) 选项：\n        --secure-protocol=PR     choose secure protocol, one of auto, SSLv2,\n                                 SSLv3, TLSv1, TLSv1_1 and TLSv1_2.\n        --no-check-certificate   不要验证服务器的证书。\n        --certificate=FILE       客户端证书文件。\n        --certificate-type=TYPE  客户端证书类型，PEM 或 DER。\n        --private-key=FILE       私钥文件。\n        --private-key-type=TYPE  私钥文件类型，PEM 或 DER。\n        --ca-certificate=FILE    带有一组 CA 认证的文件。\n        --ca-directory=DIR       保存 CA 认证的哈希列表的目录。\n        --random-file=FILE       带有生成 SSL PRNG 的随机数据的文件。\n        --egd-file=FILE          用于命名带有随机数据的 EGD 套接字的文件。\n\n FTP 选项：\n        --ftp-user=USER         设置 ftp 用户名为 USER。\n        --ftp-password=PASS     设置 ftp 密码为 PASS。\n        --no-remove-listing     不要删除‘.listing’文件。\n        --no-glob               不在 FTP 文件名中使用通配符展开。\n        --no-passive-ftp        禁用“passive”传输模式。\n        --preserve-permissions  保留远程文件的权限。\n        --retr-symlinks         递归目录时，获取链接的文件 (而非目录)。\n\n WARC options:\n        --warc-file=FILENAME      save request/response data to a .warc.gz file.\n        --warc-header=STRING      insert STRING into the warcinfo record.\n        --warc-max-size=NUMBER    set maximum size of WARC files to NUMBER.\n        --warc-cdx                write CDX index files.\n        --warc-dedup=FILENAME     do not store records listed in this CDX file.\n        --no-warc-compression     do not compress WARC files with GZIP.\n        --no-warc-digests         do not calculate SHA1 digests.\n        --no-warc-keep-log        do not store the log file in a WARC record.\n        --warc-tempdir=DIRECTORY  location for temporary files created by the\n                                  WARC writer.\n\n 递归下载：\n   -r,  --recursive          指定递归下载。\n   -l,  --level=NUMBER       最大递归深度 (inf 或 0 代表无限制，即全部下载)。\n        --delete-after       下载完成后删除本地文件。\n   -k,  --convert-links      让下载得到的 HTML 或 CSS 中的链接指向本地文件。\n   --backups=N   before writing file X, rotate up to N backup files.\n   -K,  --backup-converted   在转换文件 X 前先将它备份为 X.orig。\n   -m,  --mirror             -N -r -l inf --no-remove-listing 的缩写形式。\n   -p,  --page-requisites    下载所有用于显示 HTML 页面的图片之类的元素。\n        --strict-comments    用严格方式 (SGML) 处理 HTML 注释。\n\n 递归接受/拒绝：\n   -A,  --accept=LIST               逗号分隔的可接受的扩展名列表。\n   -R,  --reject=LIST               逗号分隔的要拒绝的扩展名列表。\n        --accept-regex=REGEX        regex matching accepted URLs.\n        --reject-regex=REGEX        regex matching rejected URLs.\n        --regex-type=TYPE           regex type (posixpcre).\n   -D,  --domains=LIST              逗号分隔的可接受的域列表。\n        --exclude-domains=LIST      逗号分隔的要拒绝的域列表。\n        --follow-ftp                跟踪 HTML 文档中的 FTP 链接。\n        --follow-tags=LIST          逗号分隔的跟踪的 HTML 标识列表。\n        --ignore-tags=LIST          逗号分隔的忽略的 HTML 标识列表。\n   -H,  --span-hosts                递归时转向外部主机。\n   -L,  --relative                  只跟踪有关系的链接。\n   -I,  --include-directories=LIST  允许目录的列表。\n   --trust-server-names             use the name specified by the redirection\n                                    url last component.\n   -X,  --exclude-directories=LIST  排除目录的列表。\n   -np, --no-parent                 不追溯至父目录。\n```","source":"_posts/python3爬bing所有壁纸.md","raw":"---\ntitle: Python3爬Bing所有壁纸\ntags:\n  - Linux\n  - Python\nid: '1082'\ncategories:\n  - - 学习笔记\n  - - 文章\ndate: 2022-04-27 18:59:47\n---\n\n#### 前期工作\n\n找bing的每日一图壁纸，观察网页结构\n\n![image-20220428154318726](https://img-blog.csdnimg.cn/img_convert/cd14a1e7254fe64c855517a0eb1f53d5.png)\n\n①是图片的描述\n\n②是图片的时间\n\n③是图片的下载地址\n\n④是当前页面page的页数1和总页数187\n<!-- more -->\n#### 编写功能函数\n\n捕获不同page网页html信息，用requests库：\n\n```python\n# param：页面的相应地址\n# return：成功则返回相应DOM文档，失败则返回信息msg\ndef get_response_text(pageNum):\n    msg=\"\"\n    try:\n        currentSite = mainSite + \"/?p=\" + str(pageNum)\n        respose = requests.get(url=currentSite,headers=myheader)\n        status_code = respose.status_code\n        if 200 <= status_code < 300:\n            msg = '请求站点操作成功'\n            return respose.text\n        elif status_code == 401:\n            msg = '请求站点匿名用户访问权限资源时的异常'\n        elif status_code == 403:\n            msg = '请求站点无访问权限，请联系管理员授予权限'\n        elif status_code == 404:\n            msg = '请求站点请求的资源不存在'\n        elif status_code == 500:\n            msg = '请求站点请求资源的系统异常，请稍后重试'\n        else:\n            msg = '请求站点未知返回代码'\n    except requests.exceptions.ConnectionError as e:\n        print(\"连接错误，请求站点是否可以访问？是否有网络或网络不稳定？\\n请检查网络问题...\\n\"+e)\n        time.sleep(10)\n    except requests.exceptions.InvalidURL as e:\n        print(\"非法的URL，请验证URL是否正确或网站是否存在\\n\"+e)\n    except requests.exceptions.ReadTimeout:\n        print(\"请求站点远程服务器无响应数据\")\n        time.sleep(10)\n    except:\n        print(\"请求站点遇到未知错误...\")\n        time.sleep(10)\n    finally:\n        print(msg)\n    return msg\n```\n\n返回当前page所有的图片信息\n\n```python\n#根据不同页面返回图片的信息\ndef get_PicUrlList(pageNum):\n    url_list = []\n    mainText = get_response_text(pageNum)\n    #正则规则\n    rule = re.compile(r'class=\"description\"><h3>(.*?) \\(©.*?<em class=\"t\">(.*?)</em>.*?class=\\\"ctrl download\\\" href=\\\"(.*?)\\\" target')\n    result_groups = re.findall(rule,mainText)\n    #由网页结构可知：匹配结果i[0]、i[1]、i[2]分别代表图片的描述、图片的时间、图片的下载地址\n    if result_groups:\n        for i in result_groups:\n            img_info={\n                'description':i[0],\n                'time':i[1],\n                'url':mainSite+i[2]\n            }\n            url_list.append(img_info)\n    else:\n        print(\"No match!!\")\n    return url_list\n```\n\n下载函数，用shell的wget，下载速度更快更稳定\n\n```python\ndef downloadPic(img_info):\n    global success,fail\n    try:\n        #利用Shell下载图片\n            os.system(\"sudo wget \"+img_info['url']+\" -q -O /mnt/c/Users/86199/OneDrive/图片/\"+img_info['description']+img_info['time']+'.jpg')\n            success.append(img_info)\n            print(img_info['description']+img_info['time']+'.png', '保存成功!')\n        #每隔一分钟下载一张\n            #time.sleep(60)\n    except:\n        fail.append(img_info)\n        print(\"something wrong!\\n\")\n```\n\n增加一个程序退出时执行函数，把下载信息写入\n\n```python\n@atexit.register\ndef write_info():\n    with open('info.txt','w',encoding='utf-8') as file:\n        file.write(\"fail:\"+str(fail)+(\"\\n\")+ \"total:\" + str(len(fail))\n        +\"success:\"+str(success)+(\"\\n\")+ \"total:\" + str(len(success))\n        +\"current-page:\"+str(currentPage))\n```\n\n主运行功能函数\n\n```python\ndef main_run():\n    global completeCount,failCount,currentPage, totalPage\n    for i in range(totalPage):\n        url_list = get_PicUrlList(currentPage)\n        for img_info in url_list:\n            print(\"正在下载：\"+img_info['description']+\"\\t图片\")\n            downloadPic(img_info)\n        print('page:' + str(currentPage) + 'complete')\n        currentPage += 1\n        with open('info.txt','w',encoding='utf-8') as file:\n            file.write(\"fail:\"+str(fail)+(\"\\n\")+ \"total:\" + str(len(fail))\n             +\"success:\"+str(success)+(\"\\n\")+ \"total:\" + str(len(success))\n             +\"current-page:\"+str(currentPage))\n```\n\n总文件`main.py`\n\n```python\nimport os\nimport random\nimport re\nimport time\nimport requests\nimport atexit\n\ntotalPage = 187 #网站的总页数\ncurrentPage = 1 #当前爬取图片的页数\nmyheader = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '\n                      'Chrome/99.0.4844.74 Safari/537.36 Edg/99.0.1150.46 '\n    }\nstatusCode = 0 #爬取时返回的HTTP状态码\nmainSite = \"https://bing.ioliu.cn\" #要爬的网页\npic_url_list = [] #图片的下载地址\nfail=[] #下载失败的url\nsuccess=[] #下载成功的url\n\n# param：页面的相应地址\n# return：成功直接返回相应DOM文档，失败返回 \"什么也没有\"\ndef get_response_text(pageNum):\n    msg=\"\"\n    try:\n        currentSite = mainSite + \"/?p=\" + str(pageNum)\n        respose = requests.get(url=currentSite,headers=myheader)\n        status_code = respose.status_code\n        if 200 <= status_code < 300:\n            msg = '请求站点操作成功'\n        elif status_code == 401:\n            msg = '请求站点匿名用户访问权限资源时的异常'\n        elif status_code == 403:\n            msg = '请求站点无访问权限，请联系管理员授予权限'\n        elif status_code == 404:\n            msg = '请求站点请求的资源不存在'\n        elif status_code == 500:\n            msg = '请求站点请求资源的系统异常，请稍后重试'\n        else:\n            msg = '请求站点未知返回代码'\n    except requests.exceptions.ConnectionError as e:\n        print(\"连接错误，请求站点是否可以访问？是否有网络或网络不稳定？\\n请检查网络问题...\\n\"+e)\n        time.sleep(10)\n    except requests.exceptions.InvalidURL as e:\n        print(\"非法的URL，请验证URL是否正确或网站是否存在\\n\"+e)\n    except requests.exceptions.ReadTimeout:\n        print(\"请求站点远程服务器无响应数据\")\n        time.sleep(10)\n    except:\n        print(\"请求站点遇到未知错误...\")\n        time.sleep(10)\n    finally:\n        print(msg)\n        return respose.text \ndef get_PicUrlList(pageNum):\n\n    url_list = []\n    mainText = get_response_text(pageNum)\n    rule = re.compile(r'class=\"description\"><h3>(.*?) \\(©.*?<em class=\"t\">(.*?)</em>.*?class=\\\"ctrl download\\\" href=\\\"(.*?)\\\" target')\n    result_groups = re.findall(rule,mainText)\n\n    if result_groups:\n        for i in result_groups:\n            img_info={\n                'description':i[0],\n                'time':i[1],\n                'url':mainSite+i[2]\n            }\n            url_list.append(img_info)\n    else:\n        print(\"No match!!\")\n    return url_list\n\ndef downloadPic(img_info):\n    global success,fail\n    try:\n        #利用Shell下载图片\n            os.system(\"sudo wget \"+img_info['url']+\" -q -O /mnt/c/Users/86199/OneDrive/图片/\"+img_info['description']+img_info['time']+'.jpg')\n            success.append(img_info)\n            print(img_info['description']+img_info['time']+'.png', '保存成功!')\n        #每隔一分钟下载一张\n            # time.sleep(60)\n    except:\n        fail.append(img_info)\n        print(\"something wrong!\\n\")\n\ndef main_run():\n    global completeCount,failCount,currentPage, totalPage\n    for i in range(totalPage):\n        url_list = get_PicUrlList(currentPage)\n        for img_info in url_list:\n            print(\"正在下载：\"+img_info['description']+\"\\t图片\")\n            downloadPic(img_info)\n        print('page:' + str(currentPage) + 'complete')\n        currentPage += 1\n        with open('info.txt','w',encoding='utf-8') as file:\n            file.write(\"fail:\"+str(fail)+(\"\\n\")+ \"total:\" + str(len(fail))\n             +\"success:\"+str(success)+(\"\\n\")+ \"total:\" + str(len(success))\n             +\"current-page:\"+str(currentPage))\n\n@atexit.register\ndef write_info():\n    with open('info.txt','w',encoding='utf-8') as file:\n        file.write(\"fail:\"+str(fail)+(\"\\n\")+ \"total:\" + str(len(fail))\n        +\"success:\"+str(success)+(\"\\n\")+ \"total:\" + str(len(success))\n        +\"current-page:\"+str(currentPage))\n\nif __name__== \"__main__\":\n    main_run()\n```\n\n#### linux下挂起后台开跑\n\n```shell\nsudo nohup python3 main.py > run.out 2>&1 &\n```\n\n#### 测试结果\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/a35d0cdbbc994bb0a99d64cb72a9dd9f.png)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/46c6c5c333cf4d2fbe8054e337a1c812.png)\n\n`info.txt`: ![image-20220428155204611](https://img-blog.csdnimg.cn/img_convert/b52d5ec4c0a3071f18bbfc0b6291a023.png)\n\n#### 注意事项\n\n在下载图片的那个功能函数里，需要根据自己的主机修改下载目录， 最好每下载一张就歇一会，我不知道网站有没有反爬，一直下载可能会被识别到时候IP被禁了就不好了。 源站有流量限制，本身下载就很慢（估计很多人都拿来爬。。。），如果没看到结果先自己用自己的电脑下载看能不能下\n\n#### 相关教程\n\n[atexit --- 退出处理器 — Python 3.10.4 文档](https://docs.python.org/zh-cn/3/library/atexit.html)\n\n`atexit`模块定义了清理函数的注册和反注册函数. 被注册的函数会在解释器正常终止时执行. `atexit`会按照注册顺序的_逆序_执行; 如果你注册了 `A`, `B` 和 `C`, 那么在解释器终止时会依序执行 `C`, `B`, `A`.\n\n**注意:** 通过该模块注册的函数, 在程序被未被 Python 捕获的信号杀死时并不会执行, 在检测到 Python 内部致命错误以及调用了`os._exit()` 时也不会执行.\n\n```\n用法： wget [选项]... [URL]...\n\n 长选项所必须的参数在使用短选项时也是必须的。\n\n 启动：\n   -V,  --version           显示 Wget 的版本信息并退出。\n   -h,  --help              打印此帮助。\n   -b,  --background        启动后转入后台。\n   -e,  --execute=COMMAND   运行一个“.wgetrc”风格的命令。\n\n 日志和输入文件：\n   -o,  --output-file=FILE    将日志信息写入 FILE。\n   -a,  --append-output=FILE  将信息添加至 FILE。\n   -d,  --debug               打印大量调试信息。\n   -q,  --quiet               安静模式 (无信息输出)。\n   -v,  --verbose             详尽的输出 (此为默认值)。\n   -nv, --no-verbose          关闭详尽输出，但不进入安静模式。\n        --report-speed=TYPE   Output bandwidth as TYPE.  TYPE can be bits.\n   -i,  --input-file=FILE     下载本地或外部 FILE 中的 URLs。\n   -F,  --force-html          把输入文件当成 HTML 文件。\n   -B,  --base=URL            解析与 URL 相关的\n                              HTML 输入文件 (由 -i -F 选项指定)。\n        --config=FILE         Specify config file to use.\n\n 下载：\n   -t,  --tries=NUMBER            设置重试次数为 NUMBER (0 代表无限制)。\n        --retry-connrefused       即使拒绝连接也是重试。\n   -O,  --output-document=FILE    将文档写入 FILE。\n   -nc, --no-clobber              skip downloads that would download to\n                                  existing files (overwriting them).\n   -c,  --continue                断点续传下载文件。\n        --progress=TYPE           选择进度条类型。\n   -N,  --timestamping            只获取比本地文件新的文件。\n   --no-use-server-timestamps     不用服务器上的时间戳来设置本地文件。\n   -S,  --server-response         打印服务器响应。\n        --spider                  不下载任何文件。\n   -T,  --timeout=SECONDS         将所有超时设为 SECONDS 秒。\n        --dns-timeout=SECS        设置 DNS 查寻超时为 SECS 秒。\n        --connect-timeout=SECS    设置连接超时为 SECS 秒。\n        --read-timeout=SECS       设置读取超时为 SECS 秒。\n   -w,  --wait=SECONDS            等待间隔为 SECONDS 秒。\n        --waitretry=SECONDS       在获取文件的重试期间等待 1..SECONDS 秒。\n        --random-wait             获取多个文件时，每次随机等待间隔\n                                  0.5*WAIT...1.5*WAIT 秒。\n        --no-proxy                禁止使用代理。\n   -Q,  --quota=NUMBER            设置获取配额为 NUMBER 字节。\n        --bind-address=ADDRESS    绑定至本地主机上的 ADDRESS (主机名或是 IP)。\n        --limit-rate=RATE         限制下载速率为 RATE。\n        --no-dns-cache            关闭 DNS 查寻缓存。\n        --restrict-file-names=OS  限定文件名中的字符为 OS 允许的字符。\n        --ignore-case             匹配文件/目录时忽略大小写。\n   -4,  --inet4-only              仅连接至 IPv4 地址。\n   -6,  --inet6-only              仅连接至 IPv6 地址。\n        --prefer-family=FAMILY    首先连接至指定协议的地址\n                                  FAMILY 为 IPv6，IPv4 或是 none。\n        --user=USER               将 ftp 和 http 的用户名均设置为 USER。\n        --password=PASS           将 ftp 和 http 的密码均设置为 PASS。\n        --ask-password            提示输入密码。\n        --no-iri                  关闭 IRI 支持。\n        --local-encoding=ENC      IRI (国际化资源标识符) 使用 ENC 作为本地编码。\n        --remote-encoding=ENC     使用 ENC 作为默认远程编码。\n        --unlink                  remove file before clobber.\n\n 目录：\n   -nd, --no-directories           不创建目录。\n   -x,  --force-directories        强制创建目录。\n   -nH, --no-host-directories      不要创建主目录。\n        --protocol-directories     在目录中使用协议名称。\n   -P,  --directory-prefix=PREFIX  以 PREFIX/... 保存文件\n        --cut-dirs=NUMBER          忽略远程目录中 NUMBER 个目录层。\n\n HTTP 选项：\n        --http-user=USER        设置 http 用户名为 USER。\n        --http-password=PASS    设置 http 密码为 PASS。\n        --no-cache              不在服务器上缓存数据。\n        --default-page=NAME     改变默认页\n                                (默认页通常是“index.html”)。\n   -E,  --adjust-extension      以合适的扩展名保存 HTML/CSS 文档。\n        --ignore-length         忽略头部的‘Content-Length’区域。\n        --header=STRING         在头部插入 STRING。\n        --max-redirect          每页所允许的最大重定向。\n        --proxy-user=USER       使用 USER 作为代理用户名。\n        --proxy-password=PASS   使用 PASS 作为代理密码。\n        --referer=URL           在 HTTP 请求头包含‘Referer: URL’。\n        --save-headers          将 HTTP 头保存至文件。\n   -U,  --user-agent=AGENT      标识为 AGENT 而不是 Wget/VERSION。\n        --no-http-keep-alive    禁用 HTTP keep-alive (永久连接)。\n        --no-cookies            不使用 cookies。\n        --load-cookies=FILE     会话开始前从 FILE 中载入 cookies。\n        --save-cookies=FILE     会话结束后保存 cookies 至 FILE。\n        --keep-session-cookies  载入并保存会话 (非永久) cookies。\n        --post-data=STRING      使用 POST 方式；把 STRING 作为数据发送。\n        --post-file=FILE        使用 POST 方式；发送 FILE 内容。\n        --content-disposition   当选中本地文件名时\n                                允许 Content-Disposition 头部 (尚在实验)。\n        --content-on-error      output the received content on server errors.\n        --auth-no-challenge     发送不含服务器询问的首次等待\n                                的基本 HTTP 验证信息。\n\n HTTPS (SSL/TLS) 选项：\n        --secure-protocol=PR     choose secure protocol, one of auto, SSLv2,\n                                 SSLv3, TLSv1, TLSv1_1 and TLSv1_2.\n        --no-check-certificate   不要验证服务器的证书。\n        --certificate=FILE       客户端证书文件。\n        --certificate-type=TYPE  客户端证书类型，PEM 或 DER。\n        --private-key=FILE       私钥文件。\n        --private-key-type=TYPE  私钥文件类型，PEM 或 DER。\n        --ca-certificate=FILE    带有一组 CA 认证的文件。\n        --ca-directory=DIR       保存 CA 认证的哈希列表的目录。\n        --random-file=FILE       带有生成 SSL PRNG 的随机数据的文件。\n        --egd-file=FILE          用于命名带有随机数据的 EGD 套接字的文件。\n\n FTP 选项：\n        --ftp-user=USER         设置 ftp 用户名为 USER。\n        --ftp-password=PASS     设置 ftp 密码为 PASS。\n        --no-remove-listing     不要删除‘.listing’文件。\n        --no-glob               不在 FTP 文件名中使用通配符展开。\n        --no-passive-ftp        禁用“passive”传输模式。\n        --preserve-permissions  保留远程文件的权限。\n        --retr-symlinks         递归目录时，获取链接的文件 (而非目录)。\n\n WARC options:\n        --warc-file=FILENAME      save request/response data to a .warc.gz file.\n        --warc-header=STRING      insert STRING into the warcinfo record.\n        --warc-max-size=NUMBER    set maximum size of WARC files to NUMBER.\n        --warc-cdx                write CDX index files.\n        --warc-dedup=FILENAME     do not store records listed in this CDX file.\n        --no-warc-compression     do not compress WARC files with GZIP.\n        --no-warc-digests         do not calculate SHA1 digests.\n        --no-warc-keep-log        do not store the log file in a WARC record.\n        --warc-tempdir=DIRECTORY  location for temporary files created by the\n                                  WARC writer.\n\n 递归下载：\n   -r,  --recursive          指定递归下载。\n   -l,  --level=NUMBER       最大递归深度 (inf 或 0 代表无限制，即全部下载)。\n        --delete-after       下载完成后删除本地文件。\n   -k,  --convert-links      让下载得到的 HTML 或 CSS 中的链接指向本地文件。\n   --backups=N   before writing file X, rotate up to N backup files.\n   -K,  --backup-converted   在转换文件 X 前先将它备份为 X.orig。\n   -m,  --mirror             -N -r -l inf --no-remove-listing 的缩写形式。\n   -p,  --page-requisites    下载所有用于显示 HTML 页面的图片之类的元素。\n        --strict-comments    用严格方式 (SGML) 处理 HTML 注释。\n\n 递归接受/拒绝：\n   -A,  --accept=LIST               逗号分隔的可接受的扩展名列表。\n   -R,  --reject=LIST               逗号分隔的要拒绝的扩展名列表。\n        --accept-regex=REGEX        regex matching accepted URLs.\n        --reject-regex=REGEX        regex matching rejected URLs.\n        --regex-type=TYPE           regex type (posixpcre).\n   -D,  --domains=LIST              逗号分隔的可接受的域列表。\n        --exclude-domains=LIST      逗号分隔的要拒绝的域列表。\n        --follow-ftp                跟踪 HTML 文档中的 FTP 链接。\n        --follow-tags=LIST          逗号分隔的跟踪的 HTML 标识列表。\n        --ignore-tags=LIST          逗号分隔的忽略的 HTML 标识列表。\n   -H,  --span-hosts                递归时转向外部主机。\n   -L,  --relative                  只跟踪有关系的链接。\n   -I,  --include-directories=LIST  允许目录的列表。\n   --trust-server-names             use the name specified by the redirection\n                                    url last component.\n   -X,  --exclude-directories=LIST  排除目录的列表。\n   -np, --no-parent                 不追溯至父目录。\n```","slug":"python3爬bing所有壁纸","published":1,"updated":"2024-03-12T02:24:18.684Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltnrar4a000vjry11qmw6oxj","content":"<h4 id=\"前期工作\"><a href=\"#前期工作\" class=\"headerlink\" title=\"前期工作\"></a>前期工作</h4><p>找bing的每日一图壁纸，观察网页结构</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/cd14a1e7254fe64c855517a0eb1f53d5.png\" alt=\"image-20220428154318726\"></p>\n<p>①是图片的描述</p>\n<p>②是图片的时间</p>\n<p>③是图片的下载地址</p>\n<p>④是当前页面page的页数1和总页数187</p>\n<span id=\"more\"></span>\n<h4 id=\"编写功能函数\"><a href=\"#编写功能函数\" class=\"headerlink\" title=\"编写功能函数\"></a>编写功能函数</h4><p>捕获不同page网页html信息，用requests库：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># param：页面的相应地址</span></span><br><span class=\"line\"><span class=\"comment\"># return：成功则返回相应DOM文档，失败则返回信息msg</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_response_text</span>(<span class=\"params\">pageNum</span>):</span><br><span class=\"line\">    msg=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        currentSite = mainSite + <span class=\"string\">&quot;/?p=&quot;</span> + <span class=\"built_in\">str</span>(pageNum)</span><br><span class=\"line\">        respose = requests.get(url=currentSite,headers=myheader)</span><br><span class=\"line\">        status_code = respose.status_code</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">200</span> &lt;= status_code &lt; <span class=\"number\">300</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点操作成功&#x27;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> respose.text</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> status_code == <span class=\"number\">401</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点匿名用户访问权限资源时的异常&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> status_code == <span class=\"number\">403</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点无访问权限，请联系管理员授予权限&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> status_code == <span class=\"number\">404</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点请求的资源不存在&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> status_code == <span class=\"number\">500</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点请求资源的系统异常，请稍后重试&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点未知返回代码&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> requests.exceptions.ConnectionError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;连接错误，请求站点是否可以访问？是否有网络或网络不稳定？\\n请检查网络问题...\\n&quot;</span>+e)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> requests.exceptions.InvalidURL <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;非法的URL，请验证URL是否正确或网站是否存在\\n&quot;</span>+e)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> requests.exceptions.ReadTimeout:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求站点远程服务器无响应数据&quot;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求站点遇到未知错误...&quot;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(msg)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg</span><br></pre></td></tr></table></figure>\n\n<p>返回当前page所有的图片信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#根据不同页面返回图片的信息</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_PicUrlList</span>(<span class=\"params\">pageNum</span>):</span><br><span class=\"line\">    url_list = []</span><br><span class=\"line\">    mainText = get_response_text(pageNum)</span><br><span class=\"line\">    <span class=\"comment\">#正则规则</span></span><br><span class=\"line\">    rule = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;class=&quot;description&quot;&gt;&lt;h3&gt;(.*?) \\(©.*?&lt;em class=&quot;t&quot;&gt;(.*?)&lt;/em&gt;.*?class=\\&quot;ctrl download\\&quot; href=\\&quot;(.*?)\\&quot; target&#x27;</span>)</span><br><span class=\"line\">    result_groups = re.findall(rule,mainText)</span><br><span class=\"line\">    <span class=\"comment\">#由网页结构可知：匹配结果i[0]、i[1]、i[2]分别代表图片的描述、图片的时间、图片的下载地址</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> result_groups:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> result_groups:</span><br><span class=\"line\">            img_info=&#123;</span><br><span class=\"line\">                <span class=\"string\">&#x27;description&#x27;</span>:i[<span class=\"number\">0</span>],</span><br><span class=\"line\">                <span class=\"string\">&#x27;time&#x27;</span>:i[<span class=\"number\">1</span>],</span><br><span class=\"line\">                <span class=\"string\">&#x27;url&#x27;</span>:mainSite+i[<span class=\"number\">2</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            url_list.append(img_info)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;No match!!&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url_list</span><br></pre></td></tr></table></figure>\n\n<p>下载函数，用shell的wget，下载速度更快更稳定</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">downloadPic</span>(<span class=\"params\">img_info</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> success,fail</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\">#利用Shell下载图片</span></span><br><span class=\"line\">            os.system(<span class=\"string\">&quot;sudo wget &quot;</span>+img_info[<span class=\"string\">&#x27;url&#x27;</span>]+<span class=\"string\">&quot; -q -O /mnt/c/Users/86199/OneDrive/图片/&quot;</span>+img_info[<span class=\"string\">&#x27;description&#x27;</span>]+img_info[<span class=\"string\">&#x27;time&#x27;</span>]+<span class=\"string\">&#x27;.jpg&#x27;</span>)</span><br><span class=\"line\">            success.append(img_info)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(img_info[<span class=\"string\">&#x27;description&#x27;</span>]+img_info[<span class=\"string\">&#x27;time&#x27;</span>]+<span class=\"string\">&#x27;.png&#x27;</span>, <span class=\"string\">&#x27;保存成功!&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\">#每隔一分钟下载一张</span></span><br><span class=\"line\">            <span class=\"comment\">#time.sleep(60)</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        fail.append(img_info)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;something wrong!\\n&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>增加一个程序退出时执行函数，把下载信息写入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@atexit.register</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">write_info</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;info.txt&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">        file.write(<span class=\"string\">&quot;fail:&quot;</span>+<span class=\"built_in\">str</span>(fail)+(<span class=\"string\">&quot;\\n&quot;</span>)+ <span class=\"string\">&quot;total:&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(fail))</span><br><span class=\"line\">        +<span class=\"string\">&quot;success:&quot;</span>+<span class=\"built_in\">str</span>(success)+(<span class=\"string\">&quot;\\n&quot;</span>)+ <span class=\"string\">&quot;total:&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(success))</span><br><span class=\"line\">        +<span class=\"string\">&quot;current-page:&quot;</span>+<span class=\"built_in\">str</span>(currentPage))</span><br></pre></td></tr></table></figure>\n\n<p>主运行功能函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main_run</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> completeCount,failCount,currentPage, totalPage</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(totalPage):</span><br><span class=\"line\">        url_list = get_PicUrlList(currentPage)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> img_info <span class=\"keyword\">in</span> url_list:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在下载：&quot;</span>+img_info[<span class=\"string\">&#x27;description&#x27;</span>]+<span class=\"string\">&quot;\\t图片&quot;</span>)</span><br><span class=\"line\">            downloadPic(img_info)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;page:&#x27;</span> + <span class=\"built_in\">str</span>(currentPage) + <span class=\"string\">&#x27;complete&#x27;</span>)</span><br><span class=\"line\">        currentPage += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;info.txt&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">            file.write(<span class=\"string\">&quot;fail:&quot;</span>+<span class=\"built_in\">str</span>(fail)+(<span class=\"string\">&quot;\\n&quot;</span>)+ <span class=\"string\">&quot;total:&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(fail))</span><br><span class=\"line\">             +<span class=\"string\">&quot;success:&quot;</span>+<span class=\"built_in\">str</span>(success)+(<span class=\"string\">&quot;\\n&quot;</span>)+ <span class=\"string\">&quot;total:&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(success))</span><br><span class=\"line\">             +<span class=\"string\">&quot;current-page:&quot;</span>+<span class=\"built_in\">str</span>(currentPage))</span><br></pre></td></tr></table></figure>\n\n<p>总文件<code>main.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> atexit</span><br><span class=\"line\"></span><br><span class=\"line\">totalPage = <span class=\"number\">187</span> <span class=\"comment\">#网站的总页数</span></span><br><span class=\"line\">currentPage = <span class=\"number\">1</span> <span class=\"comment\">#当前爬取图片的页数</span></span><br><span class=\"line\">myheader = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;Chrome/99.0.4844.74 Safari/537.36 Edg/99.0.1150.46 &#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">statusCode = <span class=\"number\">0</span> <span class=\"comment\">#爬取时返回的HTTP状态码</span></span><br><span class=\"line\">mainSite = <span class=\"string\">&quot;https://bing.ioliu.cn&quot;</span> <span class=\"comment\">#要爬的网页</span></span><br><span class=\"line\">pic_url_list = [] <span class=\"comment\">#图片的下载地址</span></span><br><span class=\"line\">fail=[] <span class=\"comment\">#下载失败的url</span></span><br><span class=\"line\">success=[] <span class=\"comment\">#下载成功的url</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># param：页面的相应地址</span></span><br><span class=\"line\"><span class=\"comment\"># return：成功直接返回相应DOM文档，失败返回 &quot;什么也没有&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_response_text</span>(<span class=\"params\">pageNum</span>):</span><br><span class=\"line\">    msg=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        currentSite = mainSite + <span class=\"string\">&quot;/?p=&quot;</span> + <span class=\"built_in\">str</span>(pageNum)</span><br><span class=\"line\">        respose = requests.get(url=currentSite,headers=myheader)</span><br><span class=\"line\">        status_code = respose.status_code</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">200</span> &lt;= status_code &lt; <span class=\"number\">300</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点操作成功&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> status_code == <span class=\"number\">401</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点匿名用户访问权限资源时的异常&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> status_code == <span class=\"number\">403</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点无访问权限，请联系管理员授予权限&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> status_code == <span class=\"number\">404</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点请求的资源不存在&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> status_code == <span class=\"number\">500</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点请求资源的系统异常，请稍后重试&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点未知返回代码&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> requests.exceptions.ConnectionError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;连接错误，请求站点是否可以访问？是否有网络或网络不稳定？\\n请检查网络问题...\\n&quot;</span>+e)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> requests.exceptions.InvalidURL <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;非法的URL，请验证URL是否正确或网站是否存在\\n&quot;</span>+e)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> requests.exceptions.ReadTimeout:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求站点远程服务器无响应数据&quot;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求站点遇到未知错误...&quot;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(msg)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> respose.text </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_PicUrlList</span>(<span class=\"params\">pageNum</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    url_list = []</span><br><span class=\"line\">    mainText = get_response_text(pageNum)</span><br><span class=\"line\">    rule = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;class=&quot;description&quot;&gt;&lt;h3&gt;(.*?) \\(©.*?&lt;em class=&quot;t&quot;&gt;(.*?)&lt;/em&gt;.*?class=\\&quot;ctrl download\\&quot; href=\\&quot;(.*?)\\&quot; target&#x27;</span>)</span><br><span class=\"line\">    result_groups = re.findall(rule,mainText)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> result_groups:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> result_groups:</span><br><span class=\"line\">            img_info=&#123;</span><br><span class=\"line\">                <span class=\"string\">&#x27;description&#x27;</span>:i[<span class=\"number\">0</span>],</span><br><span class=\"line\">                <span class=\"string\">&#x27;time&#x27;</span>:i[<span class=\"number\">1</span>],</span><br><span class=\"line\">                <span class=\"string\">&#x27;url&#x27;</span>:mainSite+i[<span class=\"number\">2</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            url_list.append(img_info)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;No match!!&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url_list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">downloadPic</span>(<span class=\"params\">img_info</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> success,fail</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\">#利用Shell下载图片</span></span><br><span class=\"line\">            os.system(<span class=\"string\">&quot;sudo wget &quot;</span>+img_info[<span class=\"string\">&#x27;url&#x27;</span>]+<span class=\"string\">&quot; -q -O /mnt/c/Users/86199/OneDrive/图片/&quot;</span>+img_info[<span class=\"string\">&#x27;description&#x27;</span>]+img_info[<span class=\"string\">&#x27;time&#x27;</span>]+<span class=\"string\">&#x27;.jpg&#x27;</span>)</span><br><span class=\"line\">            success.append(img_info)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(img_info[<span class=\"string\">&#x27;description&#x27;</span>]+img_info[<span class=\"string\">&#x27;time&#x27;</span>]+<span class=\"string\">&#x27;.png&#x27;</span>, <span class=\"string\">&#x27;保存成功!&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\">#每隔一分钟下载一张</span></span><br><span class=\"line\">            <span class=\"comment\"># time.sleep(60)</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        fail.append(img_info)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;something wrong!\\n&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main_run</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> completeCount,failCount,currentPage, totalPage</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(totalPage):</span><br><span class=\"line\">        url_list = get_PicUrlList(currentPage)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> img_info <span class=\"keyword\">in</span> url_list:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在下载：&quot;</span>+img_info[<span class=\"string\">&#x27;description&#x27;</span>]+<span class=\"string\">&quot;\\t图片&quot;</span>)</span><br><span class=\"line\">            downloadPic(img_info)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;page:&#x27;</span> + <span class=\"built_in\">str</span>(currentPage) + <span class=\"string\">&#x27;complete&#x27;</span>)</span><br><span class=\"line\">        currentPage += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;info.txt&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">            file.write(<span class=\"string\">&quot;fail:&quot;</span>+<span class=\"built_in\">str</span>(fail)+(<span class=\"string\">&quot;\\n&quot;</span>)+ <span class=\"string\">&quot;total:&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(fail))</span><br><span class=\"line\">             +<span class=\"string\">&quot;success:&quot;</span>+<span class=\"built_in\">str</span>(success)+(<span class=\"string\">&quot;\\n&quot;</span>)+ <span class=\"string\">&quot;total:&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(success))</span><br><span class=\"line\">             +<span class=\"string\">&quot;current-page:&quot;</span>+<span class=\"built_in\">str</span>(currentPage))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@atexit.register</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">write_info</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;info.txt&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">        file.write(<span class=\"string\">&quot;fail:&quot;</span>+<span class=\"built_in\">str</span>(fail)+(<span class=\"string\">&quot;\\n&quot;</span>)+ <span class=\"string\">&quot;total:&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(fail))</span><br><span class=\"line\">        +<span class=\"string\">&quot;success:&quot;</span>+<span class=\"built_in\">str</span>(success)+(<span class=\"string\">&quot;\\n&quot;</span>)+ <span class=\"string\">&quot;total:&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(success))</span><br><span class=\"line\">        +<span class=\"string\">&quot;current-page:&quot;</span>+<span class=\"built_in\">str</span>(currentPage))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__== <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main_run()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"linux下挂起后台开跑\"><a href=\"#linux下挂起后台开跑\" class=\"headerlink\" title=\"linux下挂起后台开跑\"></a>linux下挂起后台开跑</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nohup python3 main.py &gt; run.out 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h4><p><img src=\"https://img-blog.csdnimg.cn/a35d0cdbbc994bb0a99d64cb72a9dd9f.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/46c6c5c333cf4d2fbe8054e337a1c812.png\" alt=\"在这里插入图片描述\"></p>\n<p><code>info.txt</code>: <img src=\"https://img-blog.csdnimg.cn/img_convert/b52d5ec4c0a3071f18bbfc0b6291a023.png\" alt=\"image-20220428155204611\"></p>\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><p>在下载图片的那个功能函数里，需要根据自己的主机修改下载目录， 最好每下载一张就歇一会，我不知道网站有没有反爬，一直下载可能会被识别到时候IP被禁了就不好了。 源站有流量限制，本身下载就很慢（估计很多人都拿来爬。。。），如果没看到结果先自己用自己的电脑下载看能不能下</p>\n<h4 id=\"相关教程\"><a href=\"#相关教程\" class=\"headerlink\" title=\"相关教程\"></a>相关教程</h4><p><a href=\"https://docs.python.org/zh-cn/3/library/atexit.html\">atexit — 退出处理器 — Python 3.10.4 文档</a></p>\n<p><code>atexit</code>模块定义了清理函数的注册和反注册函数. 被注册的函数会在解释器正常终止时执行. <code>atexit</code>会按照注册顺序的_逆序_执行; 如果你注册了 <code>A</code>, <code>B</code> 和 <code>C</code>, 那么在解释器终止时会依序执行 <code>C</code>, <code>B</code>, <code>A</code>.</p>\n<p><strong>注意:</strong> 通过该模块注册的函数, 在程序被未被 Python 捕获的信号杀死时并不会执行, 在检测到 Python 内部致命错误以及调用了<code>os._exit()</code> 时也不会执行.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法： wget [选项]... [URL]...</span><br><span class=\"line\"></span><br><span class=\"line\"> 长选项所必须的参数在使用短选项时也是必须的。</span><br><span class=\"line\"></span><br><span class=\"line\"> 启动：</span><br><span class=\"line\">   -V,  --version           显示 Wget 的版本信息并退出。</span><br><span class=\"line\">   -h,  --help              打印此帮助。</span><br><span class=\"line\">   -b,  --background        启动后转入后台。</span><br><span class=\"line\">   -e,  --execute=COMMAND   运行一个“.wgetrc”风格的命令。</span><br><span class=\"line\"></span><br><span class=\"line\"> 日志和输入文件：</span><br><span class=\"line\">   -o,  --output-file=FILE    将日志信息写入 FILE。</span><br><span class=\"line\">   -a,  --append-output=FILE  将信息添加至 FILE。</span><br><span class=\"line\">   -d,  --debug               打印大量调试信息。</span><br><span class=\"line\">   -q,  --quiet               安静模式 (无信息输出)。</span><br><span class=\"line\">   -v,  --verbose             详尽的输出 (此为默认值)。</span><br><span class=\"line\">   -nv, --no-verbose          关闭详尽输出，但不进入安静模式。</span><br><span class=\"line\">        --report-speed=TYPE   Output bandwidth as TYPE.  TYPE can be bits.</span><br><span class=\"line\">   -i,  --input-file=FILE     下载本地或外部 FILE 中的 URLs。</span><br><span class=\"line\">   -F,  --force-html          把输入文件当成 HTML 文件。</span><br><span class=\"line\">   -B,  --base=URL            解析与 URL 相关的</span><br><span class=\"line\">                              HTML 输入文件 (由 -i -F 选项指定)。</span><br><span class=\"line\">        --config=FILE         Specify config file to use.</span><br><span class=\"line\"></span><br><span class=\"line\"> 下载：</span><br><span class=\"line\">   -t,  --tries=NUMBER            设置重试次数为 NUMBER (0 代表无限制)。</span><br><span class=\"line\">        --retry-connrefused       即使拒绝连接也是重试。</span><br><span class=\"line\">   -O,  --output-document=FILE    将文档写入 FILE。</span><br><span class=\"line\">   -nc, --no-clobber              skip downloads that would download to</span><br><span class=\"line\">                                  existing files (overwriting them).</span><br><span class=\"line\">   -c,  --continue                断点续传下载文件。</span><br><span class=\"line\">        --progress=TYPE           选择进度条类型。</span><br><span class=\"line\">   -N,  --timestamping            只获取比本地文件新的文件。</span><br><span class=\"line\">   --no-use-server-timestamps     不用服务器上的时间戳来设置本地文件。</span><br><span class=\"line\">   -S,  --server-response         打印服务器响应。</span><br><span class=\"line\">        --spider                  不下载任何文件。</span><br><span class=\"line\">   -T,  --timeout=SECONDS         将所有超时设为 SECONDS 秒。</span><br><span class=\"line\">        --dns-timeout=SECS        设置 DNS 查寻超时为 SECS 秒。</span><br><span class=\"line\">        --connect-timeout=SECS    设置连接超时为 SECS 秒。</span><br><span class=\"line\">        --read-timeout=SECS       设置读取超时为 SECS 秒。</span><br><span class=\"line\">   -w,  --wait=SECONDS            等待间隔为 SECONDS 秒。</span><br><span class=\"line\">        --waitretry=SECONDS       在获取文件的重试期间等待 1..SECONDS 秒。</span><br><span class=\"line\">        --random-wait             获取多个文件时，每次随机等待间隔</span><br><span class=\"line\">                                  0.5*WAIT...1.5*WAIT 秒。</span><br><span class=\"line\">        --no-proxy                禁止使用代理。</span><br><span class=\"line\">   -Q,  --quota=NUMBER            设置获取配额为 NUMBER 字节。</span><br><span class=\"line\">        --bind-address=ADDRESS    绑定至本地主机上的 ADDRESS (主机名或是 IP)。</span><br><span class=\"line\">        --limit-rate=RATE         限制下载速率为 RATE。</span><br><span class=\"line\">        --no-dns-cache            关闭 DNS 查寻缓存。</span><br><span class=\"line\">        --restrict-file-names=OS  限定文件名中的字符为 OS 允许的字符。</span><br><span class=\"line\">        --ignore-case             匹配文件/目录时忽略大小写。</span><br><span class=\"line\">   -4,  --inet4-only              仅连接至 IPv4 地址。</span><br><span class=\"line\">   -6,  --inet6-only              仅连接至 IPv6 地址。</span><br><span class=\"line\">        --prefer-family=FAMILY    首先连接至指定协议的地址</span><br><span class=\"line\">                                  FAMILY 为 IPv6，IPv4 或是 none。</span><br><span class=\"line\">        --user=USER               将 ftp 和 http 的用户名均设置为 USER。</span><br><span class=\"line\">        --password=PASS           将 ftp 和 http 的密码均设置为 PASS。</span><br><span class=\"line\">        --ask-password            提示输入密码。</span><br><span class=\"line\">        --no-iri                  关闭 IRI 支持。</span><br><span class=\"line\">        --local-encoding=ENC      IRI (国际化资源标识符) 使用 ENC 作为本地编码。</span><br><span class=\"line\">        --remote-encoding=ENC     使用 ENC 作为默认远程编码。</span><br><span class=\"line\">        --unlink                  remove file before clobber.</span><br><span class=\"line\"></span><br><span class=\"line\"> 目录：</span><br><span class=\"line\">   -nd, --no-directories           不创建目录。</span><br><span class=\"line\">   -x,  --force-directories        强制创建目录。</span><br><span class=\"line\">   -nH, --no-host-directories      不要创建主目录。</span><br><span class=\"line\">        --protocol-directories     在目录中使用协议名称。</span><br><span class=\"line\">   -P,  --directory-prefix=PREFIX  以 PREFIX/... 保存文件</span><br><span class=\"line\">        --cut-dirs=NUMBER          忽略远程目录中 NUMBER 个目录层。</span><br><span class=\"line\"></span><br><span class=\"line\"> HTTP 选项：</span><br><span class=\"line\">        --http-user=USER        设置 http 用户名为 USER。</span><br><span class=\"line\">        --http-password=PASS    设置 http 密码为 PASS。</span><br><span class=\"line\">        --no-cache              不在服务器上缓存数据。</span><br><span class=\"line\">        --default-page=NAME     改变默认页</span><br><span class=\"line\">                                (默认页通常是“index.html”)。</span><br><span class=\"line\">   -E,  --adjust-extension      以合适的扩展名保存 HTML/CSS 文档。</span><br><span class=\"line\">        --ignore-length         忽略头部的‘Content-Length’区域。</span><br><span class=\"line\">        --header=STRING         在头部插入 STRING。</span><br><span class=\"line\">        --max-redirect          每页所允许的最大重定向。</span><br><span class=\"line\">        --proxy-user=USER       使用 USER 作为代理用户名。</span><br><span class=\"line\">        --proxy-password=PASS   使用 PASS 作为代理密码。</span><br><span class=\"line\">        --referer=URL           在 HTTP 请求头包含‘Referer: URL’。</span><br><span class=\"line\">        --save-headers          将 HTTP 头保存至文件。</span><br><span class=\"line\">   -U,  --user-agent=AGENT      标识为 AGENT 而不是 Wget/VERSION。</span><br><span class=\"line\">        --no-http-keep-alive    禁用 HTTP keep-alive (永久连接)。</span><br><span class=\"line\">        --no-cookies            不使用 cookies。</span><br><span class=\"line\">        --load-cookies=FILE     会话开始前从 FILE 中载入 cookies。</span><br><span class=\"line\">        --save-cookies=FILE     会话结束后保存 cookies 至 FILE。</span><br><span class=\"line\">        --keep-session-cookies  载入并保存会话 (非永久) cookies。</span><br><span class=\"line\">        --post-data=STRING      使用 POST 方式；把 STRING 作为数据发送。</span><br><span class=\"line\">        --post-file=FILE        使用 POST 方式；发送 FILE 内容。</span><br><span class=\"line\">        --content-disposition   当选中本地文件名时</span><br><span class=\"line\">                                允许 Content-Disposition 头部 (尚在实验)。</span><br><span class=\"line\">        --content-on-error      output the received content on server errors.</span><br><span class=\"line\">        --auth-no-challenge     发送不含服务器询问的首次等待</span><br><span class=\"line\">                                的基本 HTTP 验证信息。</span><br><span class=\"line\"></span><br><span class=\"line\"> HTTPS (SSL/TLS) 选项：</span><br><span class=\"line\">        --secure-protocol=PR     choose secure protocol, one of auto, SSLv2,</span><br><span class=\"line\">                                 SSLv3, TLSv1, TLSv1_1 and TLSv1_2.</span><br><span class=\"line\">        --no-check-certificate   不要验证服务器的证书。</span><br><span class=\"line\">        --certificate=FILE       客户端证书文件。</span><br><span class=\"line\">        --certificate-type=TYPE  客户端证书类型，PEM 或 DER。</span><br><span class=\"line\">        --private-key=FILE       私钥文件。</span><br><span class=\"line\">        --private-key-type=TYPE  私钥文件类型，PEM 或 DER。</span><br><span class=\"line\">        --ca-certificate=FILE    带有一组 CA 认证的文件。</span><br><span class=\"line\">        --ca-directory=DIR       保存 CA 认证的哈希列表的目录。</span><br><span class=\"line\">        --random-file=FILE       带有生成 SSL PRNG 的随机数据的文件。</span><br><span class=\"line\">        --egd-file=FILE          用于命名带有随机数据的 EGD 套接字的文件。</span><br><span class=\"line\"></span><br><span class=\"line\"> FTP 选项：</span><br><span class=\"line\">        --ftp-user=USER         设置 ftp 用户名为 USER。</span><br><span class=\"line\">        --ftp-password=PASS     设置 ftp 密码为 PASS。</span><br><span class=\"line\">        --no-remove-listing     不要删除‘.listing’文件。</span><br><span class=\"line\">        --no-glob               不在 FTP 文件名中使用通配符展开。</span><br><span class=\"line\">        --no-passive-ftp        禁用“passive”传输模式。</span><br><span class=\"line\">        --preserve-permissions  保留远程文件的权限。</span><br><span class=\"line\">        --retr-symlinks         递归目录时，获取链接的文件 (而非目录)。</span><br><span class=\"line\"></span><br><span class=\"line\"> WARC options:</span><br><span class=\"line\">        --warc-file=FILENAME      save request/response data to a .warc.gz file.</span><br><span class=\"line\">        --warc-header=STRING      insert STRING into the warcinfo record.</span><br><span class=\"line\">        --warc-max-size=NUMBER    set maximum size of WARC files to NUMBER.</span><br><span class=\"line\">        --warc-cdx                write CDX index files.</span><br><span class=\"line\">        --warc-dedup=FILENAME     do not store records listed in this CDX file.</span><br><span class=\"line\">        --no-warc-compression     do not compress WARC files with GZIP.</span><br><span class=\"line\">        --no-warc-digests         do not calculate SHA1 digests.</span><br><span class=\"line\">        --no-warc-keep-log        do not store the log file in a WARC record.</span><br><span class=\"line\">        --warc-tempdir=DIRECTORY  location for temporary files created by the</span><br><span class=\"line\">                                  WARC writer.</span><br><span class=\"line\"></span><br><span class=\"line\"> 递归下载：</span><br><span class=\"line\">   -r,  --recursive          指定递归下载。</span><br><span class=\"line\">   -l,  --level=NUMBER       最大递归深度 (inf 或 0 代表无限制，即全部下载)。</span><br><span class=\"line\">        --delete-after       下载完成后删除本地文件。</span><br><span class=\"line\">   -k,  --convert-links      让下载得到的 HTML 或 CSS 中的链接指向本地文件。</span><br><span class=\"line\">   --backups=N   before writing file X, rotate up to N backup files.</span><br><span class=\"line\">   -K,  --backup-converted   在转换文件 X 前先将它备份为 X.orig。</span><br><span class=\"line\">   -m,  --mirror             -N -r -l inf --no-remove-listing 的缩写形式。</span><br><span class=\"line\">   -p,  --page-requisites    下载所有用于显示 HTML 页面的图片之类的元素。</span><br><span class=\"line\">        --strict-comments    用严格方式 (SGML) 处理 HTML 注释。</span><br><span class=\"line\"></span><br><span class=\"line\"> 递归接受/拒绝：</span><br><span class=\"line\">   -A,  --accept=LIST               逗号分隔的可接受的扩展名列表。</span><br><span class=\"line\">   -R,  --reject=LIST               逗号分隔的要拒绝的扩展名列表。</span><br><span class=\"line\">        --accept-regex=REGEX        regex matching accepted URLs.</span><br><span class=\"line\">        --reject-regex=REGEX        regex matching rejected URLs.</span><br><span class=\"line\">        --regex-type=TYPE           regex type (posixpcre).</span><br><span class=\"line\">   -D,  --domains=LIST              逗号分隔的可接受的域列表。</span><br><span class=\"line\">        --exclude-domains=LIST      逗号分隔的要拒绝的域列表。</span><br><span class=\"line\">        --follow-ftp                跟踪 HTML 文档中的 FTP 链接。</span><br><span class=\"line\">        --follow-tags=LIST          逗号分隔的跟踪的 HTML 标识列表。</span><br><span class=\"line\">        --ignore-tags=LIST          逗号分隔的忽略的 HTML 标识列表。</span><br><span class=\"line\">   -H,  --span-hosts                递归时转向外部主机。</span><br><span class=\"line\">   -L,  --relative                  只跟踪有关系的链接。</span><br><span class=\"line\">   -I,  --include-directories=LIST  允许目录的列表。</span><br><span class=\"line\">   --trust-server-names             use the name specified by the redirection</span><br><span class=\"line\">                                    url last component.</span><br><span class=\"line\">   -X,  --exclude-directories=LIST  排除目录的列表。</span><br><span class=\"line\">   -np, --no-parent                 不追溯至父目录。</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"前期工作\"><a href=\"#前期工作\" class=\"headerlink\" title=\"前期工作\"></a>前期工作</h4><p>找bing的每日一图壁纸，观察网页结构</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/cd14a1e7254fe64c855517a0eb1f53d5.png\" alt=\"image-20220428154318726\"></p>\n<p>①是图片的描述</p>\n<p>②是图片的时间</p>\n<p>③是图片的下载地址</p>\n<p>④是当前页面page的页数1和总页数187</p>","more":"<h4 id=\"编写功能函数\"><a href=\"#编写功能函数\" class=\"headerlink\" title=\"编写功能函数\"></a>编写功能函数</h4><p>捕获不同page网页html信息，用requests库：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># param：页面的相应地址</span></span><br><span class=\"line\"><span class=\"comment\"># return：成功则返回相应DOM文档，失败则返回信息msg</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_response_text</span>(<span class=\"params\">pageNum</span>):</span><br><span class=\"line\">    msg=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        currentSite = mainSite + <span class=\"string\">&quot;/?p=&quot;</span> + <span class=\"built_in\">str</span>(pageNum)</span><br><span class=\"line\">        respose = requests.get(url=currentSite,headers=myheader)</span><br><span class=\"line\">        status_code = respose.status_code</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">200</span> &lt;= status_code &lt; <span class=\"number\">300</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点操作成功&#x27;</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> respose.text</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> status_code == <span class=\"number\">401</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点匿名用户访问权限资源时的异常&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> status_code == <span class=\"number\">403</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点无访问权限，请联系管理员授予权限&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> status_code == <span class=\"number\">404</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点请求的资源不存在&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> status_code == <span class=\"number\">500</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点请求资源的系统异常，请稍后重试&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点未知返回代码&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> requests.exceptions.ConnectionError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;连接错误，请求站点是否可以访问？是否有网络或网络不稳定？\\n请检查网络问题...\\n&quot;</span>+e)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> requests.exceptions.InvalidURL <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;非法的URL，请验证URL是否正确或网站是否存在\\n&quot;</span>+e)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> requests.exceptions.ReadTimeout:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求站点远程服务器无响应数据&quot;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求站点遇到未知错误...&quot;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(msg)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> msg</span><br></pre></td></tr></table></figure>\n\n<p>返回当前page所有的图片信息</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#根据不同页面返回图片的信息</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_PicUrlList</span>(<span class=\"params\">pageNum</span>):</span><br><span class=\"line\">    url_list = []</span><br><span class=\"line\">    mainText = get_response_text(pageNum)</span><br><span class=\"line\">    <span class=\"comment\">#正则规则</span></span><br><span class=\"line\">    rule = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;class=&quot;description&quot;&gt;&lt;h3&gt;(.*?) \\(©.*?&lt;em class=&quot;t&quot;&gt;(.*?)&lt;/em&gt;.*?class=\\&quot;ctrl download\\&quot; href=\\&quot;(.*?)\\&quot; target&#x27;</span>)</span><br><span class=\"line\">    result_groups = re.findall(rule,mainText)</span><br><span class=\"line\">    <span class=\"comment\">#由网页结构可知：匹配结果i[0]、i[1]、i[2]分别代表图片的描述、图片的时间、图片的下载地址</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> result_groups:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> result_groups:</span><br><span class=\"line\">            img_info=&#123;</span><br><span class=\"line\">                <span class=\"string\">&#x27;description&#x27;</span>:i[<span class=\"number\">0</span>],</span><br><span class=\"line\">                <span class=\"string\">&#x27;time&#x27;</span>:i[<span class=\"number\">1</span>],</span><br><span class=\"line\">                <span class=\"string\">&#x27;url&#x27;</span>:mainSite+i[<span class=\"number\">2</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            url_list.append(img_info)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;No match!!&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url_list</span><br></pre></td></tr></table></figure>\n\n<p>下载函数，用shell的wget，下载速度更快更稳定</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">downloadPic</span>(<span class=\"params\">img_info</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> success,fail</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\">#利用Shell下载图片</span></span><br><span class=\"line\">            os.system(<span class=\"string\">&quot;sudo wget &quot;</span>+img_info[<span class=\"string\">&#x27;url&#x27;</span>]+<span class=\"string\">&quot; -q -O /mnt/c/Users/86199/OneDrive/图片/&quot;</span>+img_info[<span class=\"string\">&#x27;description&#x27;</span>]+img_info[<span class=\"string\">&#x27;time&#x27;</span>]+<span class=\"string\">&#x27;.jpg&#x27;</span>)</span><br><span class=\"line\">            success.append(img_info)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(img_info[<span class=\"string\">&#x27;description&#x27;</span>]+img_info[<span class=\"string\">&#x27;time&#x27;</span>]+<span class=\"string\">&#x27;.png&#x27;</span>, <span class=\"string\">&#x27;保存成功!&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\">#每隔一分钟下载一张</span></span><br><span class=\"line\">            <span class=\"comment\">#time.sleep(60)</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        fail.append(img_info)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;something wrong!\\n&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>增加一个程序退出时执行函数，把下载信息写入</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@atexit.register</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">write_info</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;info.txt&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">        file.write(<span class=\"string\">&quot;fail:&quot;</span>+<span class=\"built_in\">str</span>(fail)+(<span class=\"string\">&quot;\\n&quot;</span>)+ <span class=\"string\">&quot;total:&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(fail))</span><br><span class=\"line\">        +<span class=\"string\">&quot;success:&quot;</span>+<span class=\"built_in\">str</span>(success)+(<span class=\"string\">&quot;\\n&quot;</span>)+ <span class=\"string\">&quot;total:&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(success))</span><br><span class=\"line\">        +<span class=\"string\">&quot;current-page:&quot;</span>+<span class=\"built_in\">str</span>(currentPage))</span><br></pre></td></tr></table></figure>\n\n<p>主运行功能函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main_run</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> completeCount,failCount,currentPage, totalPage</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(totalPage):</span><br><span class=\"line\">        url_list = get_PicUrlList(currentPage)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> img_info <span class=\"keyword\">in</span> url_list:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在下载：&quot;</span>+img_info[<span class=\"string\">&#x27;description&#x27;</span>]+<span class=\"string\">&quot;\\t图片&quot;</span>)</span><br><span class=\"line\">            downloadPic(img_info)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;page:&#x27;</span> + <span class=\"built_in\">str</span>(currentPage) + <span class=\"string\">&#x27;complete&#x27;</span>)</span><br><span class=\"line\">        currentPage += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;info.txt&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">            file.write(<span class=\"string\">&quot;fail:&quot;</span>+<span class=\"built_in\">str</span>(fail)+(<span class=\"string\">&quot;\\n&quot;</span>)+ <span class=\"string\">&quot;total:&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(fail))</span><br><span class=\"line\">             +<span class=\"string\">&quot;success:&quot;</span>+<span class=\"built_in\">str</span>(success)+(<span class=\"string\">&quot;\\n&quot;</span>)+ <span class=\"string\">&quot;total:&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(success))</span><br><span class=\"line\">             +<span class=\"string\">&quot;current-page:&quot;</span>+<span class=\"built_in\">str</span>(currentPage))</span><br></pre></td></tr></table></figure>\n\n<p>总文件<code>main.py</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> atexit</span><br><span class=\"line\"></span><br><span class=\"line\">totalPage = <span class=\"number\">187</span> <span class=\"comment\">#网站的总页数</span></span><br><span class=\"line\">currentPage = <span class=\"number\">1</span> <span class=\"comment\">#当前爬取图片的页数</span></span><br><span class=\"line\">myheader = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;User-Agent&#x27;</span>: <span class=\"string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class=\"line\">                      <span class=\"string\">&#x27;Chrome/99.0.4844.74 Safari/537.36 Edg/99.0.1150.46 &#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">statusCode = <span class=\"number\">0</span> <span class=\"comment\">#爬取时返回的HTTP状态码</span></span><br><span class=\"line\">mainSite = <span class=\"string\">&quot;https://bing.ioliu.cn&quot;</span> <span class=\"comment\">#要爬的网页</span></span><br><span class=\"line\">pic_url_list = [] <span class=\"comment\">#图片的下载地址</span></span><br><span class=\"line\">fail=[] <span class=\"comment\">#下载失败的url</span></span><br><span class=\"line\">success=[] <span class=\"comment\">#下载成功的url</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># param：页面的相应地址</span></span><br><span class=\"line\"><span class=\"comment\"># return：成功直接返回相应DOM文档，失败返回 &quot;什么也没有&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_response_text</span>(<span class=\"params\">pageNum</span>):</span><br><span class=\"line\">    msg=<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        currentSite = mainSite + <span class=\"string\">&quot;/?p=&quot;</span> + <span class=\"built_in\">str</span>(pageNum)</span><br><span class=\"line\">        respose = requests.get(url=currentSite,headers=myheader)</span><br><span class=\"line\">        status_code = respose.status_code</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">200</span> &lt;= status_code &lt; <span class=\"number\">300</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点操作成功&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> status_code == <span class=\"number\">401</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点匿名用户访问权限资源时的异常&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> status_code == <span class=\"number\">403</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点无访问权限，请联系管理员授予权限&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> status_code == <span class=\"number\">404</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点请求的资源不存在&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> status_code == <span class=\"number\">500</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点请求资源的系统异常，请稍后重试&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            msg = <span class=\"string\">&#x27;请求站点未知返回代码&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> requests.exceptions.ConnectionError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;连接错误，请求站点是否可以访问？是否有网络或网络不稳定？\\n请检查网络问题...\\n&quot;</span>+e)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> requests.exceptions.InvalidURL <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;非法的URL，请验证URL是否正确或网站是否存在\\n&quot;</span>+e)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> requests.exceptions.ReadTimeout:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求站点远程服务器无响应数据&quot;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;请求站点遇到未知错误...&quot;</span>)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(msg)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> respose.text </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_PicUrlList</span>(<span class=\"params\">pageNum</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    url_list = []</span><br><span class=\"line\">    mainText = get_response_text(pageNum)</span><br><span class=\"line\">    rule = re.<span class=\"built_in\">compile</span>(<span class=\"string\">r&#x27;class=&quot;description&quot;&gt;&lt;h3&gt;(.*?) \\(©.*?&lt;em class=&quot;t&quot;&gt;(.*?)&lt;/em&gt;.*?class=\\&quot;ctrl download\\&quot; href=\\&quot;(.*?)\\&quot; target&#x27;</span>)</span><br><span class=\"line\">    result_groups = re.findall(rule,mainText)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> result_groups:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> result_groups:</span><br><span class=\"line\">            img_info=&#123;</span><br><span class=\"line\">                <span class=\"string\">&#x27;description&#x27;</span>:i[<span class=\"number\">0</span>],</span><br><span class=\"line\">                <span class=\"string\">&#x27;time&#x27;</span>:i[<span class=\"number\">1</span>],</span><br><span class=\"line\">                <span class=\"string\">&#x27;url&#x27;</span>:mainSite+i[<span class=\"number\">2</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            url_list.append(img_info)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;No match!!&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url_list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">downloadPic</span>(<span class=\"params\">img_info</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> success,fail</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\">#利用Shell下载图片</span></span><br><span class=\"line\">            os.system(<span class=\"string\">&quot;sudo wget &quot;</span>+img_info[<span class=\"string\">&#x27;url&#x27;</span>]+<span class=\"string\">&quot; -q -O /mnt/c/Users/86199/OneDrive/图片/&quot;</span>+img_info[<span class=\"string\">&#x27;description&#x27;</span>]+img_info[<span class=\"string\">&#x27;time&#x27;</span>]+<span class=\"string\">&#x27;.jpg&#x27;</span>)</span><br><span class=\"line\">            success.append(img_info)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(img_info[<span class=\"string\">&#x27;description&#x27;</span>]+img_info[<span class=\"string\">&#x27;time&#x27;</span>]+<span class=\"string\">&#x27;.png&#x27;</span>, <span class=\"string\">&#x27;保存成功!&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\">#每隔一分钟下载一张</span></span><br><span class=\"line\">            <span class=\"comment\"># time.sleep(60)</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        fail.append(img_info)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;something wrong!\\n&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main_run</span>():</span><br><span class=\"line\">    <span class=\"keyword\">global</span> completeCount,failCount,currentPage, totalPage</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(totalPage):</span><br><span class=\"line\">        url_list = get_PicUrlList(currentPage)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> img_info <span class=\"keyword\">in</span> url_list:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;正在下载：&quot;</span>+img_info[<span class=\"string\">&#x27;description&#x27;</span>]+<span class=\"string\">&quot;\\t图片&quot;</span>)</span><br><span class=\"line\">            downloadPic(img_info)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;page:&#x27;</span> + <span class=\"built_in\">str</span>(currentPage) + <span class=\"string\">&#x27;complete&#x27;</span>)</span><br><span class=\"line\">        currentPage += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;info.txt&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">            file.write(<span class=\"string\">&quot;fail:&quot;</span>+<span class=\"built_in\">str</span>(fail)+(<span class=\"string\">&quot;\\n&quot;</span>)+ <span class=\"string\">&quot;total:&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(fail))</span><br><span class=\"line\">             +<span class=\"string\">&quot;success:&quot;</span>+<span class=\"built_in\">str</span>(success)+(<span class=\"string\">&quot;\\n&quot;</span>)+ <span class=\"string\">&quot;total:&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(success))</span><br><span class=\"line\">             +<span class=\"string\">&quot;current-page:&quot;</span>+<span class=\"built_in\">str</span>(currentPage))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@atexit.register</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">write_info</span>():</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;info.txt&#x27;</span>,<span class=\"string\">&#x27;w&#x27;</span>,encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">        file.write(<span class=\"string\">&quot;fail:&quot;</span>+<span class=\"built_in\">str</span>(fail)+(<span class=\"string\">&quot;\\n&quot;</span>)+ <span class=\"string\">&quot;total:&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(fail))</span><br><span class=\"line\">        +<span class=\"string\">&quot;success:&quot;</span>+<span class=\"built_in\">str</span>(success)+(<span class=\"string\">&quot;\\n&quot;</span>)+ <span class=\"string\">&quot;total:&quot;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(success))</span><br><span class=\"line\">        +<span class=\"string\">&quot;current-page:&quot;</span>+<span class=\"built_in\">str</span>(currentPage))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__== <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    main_run()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"linux下挂起后台开跑\"><a href=\"#linux下挂起后台开跑\" class=\"headerlink\" title=\"linux下挂起后台开跑\"></a>linux下挂起后台开跑</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nohup python3 main.py &gt; run.out 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h4><p><img src=\"https://img-blog.csdnimg.cn/a35d0cdbbc994bb0a99d64cb72a9dd9f.png\" alt=\"在这里插入图片描述\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/46c6c5c333cf4d2fbe8054e337a1c812.png\" alt=\"在这里插入图片描述\"></p>\n<p><code>info.txt</code>: <img src=\"https://img-blog.csdnimg.cn/img_convert/b52d5ec4c0a3071f18bbfc0b6291a023.png\" alt=\"image-20220428155204611\"></p>\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><p>在下载图片的那个功能函数里，需要根据自己的主机修改下载目录， 最好每下载一张就歇一会，我不知道网站有没有反爬，一直下载可能会被识别到时候IP被禁了就不好了。 源站有流量限制，本身下载就很慢（估计很多人都拿来爬。。。），如果没看到结果先自己用自己的电脑下载看能不能下</p>\n<h4 id=\"相关教程\"><a href=\"#相关教程\" class=\"headerlink\" title=\"相关教程\"></a>相关教程</h4><p><a href=\"https://docs.python.org/zh-cn/3/library/atexit.html\">atexit — 退出处理器 — Python 3.10.4 文档</a></p>\n<p><code>atexit</code>模块定义了清理函数的注册和反注册函数. 被注册的函数会在解释器正常终止时执行. <code>atexit</code>会按照注册顺序的_逆序_执行; 如果你注册了 <code>A</code>, <code>B</code> 和 <code>C</code>, 那么在解释器终止时会依序执行 <code>C</code>, <code>B</code>, <code>A</code>.</p>\n<p><strong>注意:</strong> 通过该模块注册的函数, 在程序被未被 Python 捕获的信号杀死时并不会执行, 在检测到 Python 内部致命错误以及调用了<code>os._exit()</code> 时也不会执行.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用法： wget [选项]... [URL]...</span><br><span class=\"line\"></span><br><span class=\"line\"> 长选项所必须的参数在使用短选项时也是必须的。</span><br><span class=\"line\"></span><br><span class=\"line\"> 启动：</span><br><span class=\"line\">   -V,  --version           显示 Wget 的版本信息并退出。</span><br><span class=\"line\">   -h,  --help              打印此帮助。</span><br><span class=\"line\">   -b,  --background        启动后转入后台。</span><br><span class=\"line\">   -e,  --execute=COMMAND   运行一个“.wgetrc”风格的命令。</span><br><span class=\"line\"></span><br><span class=\"line\"> 日志和输入文件：</span><br><span class=\"line\">   -o,  --output-file=FILE    将日志信息写入 FILE。</span><br><span class=\"line\">   -a,  --append-output=FILE  将信息添加至 FILE。</span><br><span class=\"line\">   -d,  --debug               打印大量调试信息。</span><br><span class=\"line\">   -q,  --quiet               安静模式 (无信息输出)。</span><br><span class=\"line\">   -v,  --verbose             详尽的输出 (此为默认值)。</span><br><span class=\"line\">   -nv, --no-verbose          关闭详尽输出，但不进入安静模式。</span><br><span class=\"line\">        --report-speed=TYPE   Output bandwidth as TYPE.  TYPE can be bits.</span><br><span class=\"line\">   -i,  --input-file=FILE     下载本地或外部 FILE 中的 URLs。</span><br><span class=\"line\">   -F,  --force-html          把输入文件当成 HTML 文件。</span><br><span class=\"line\">   -B,  --base=URL            解析与 URL 相关的</span><br><span class=\"line\">                              HTML 输入文件 (由 -i -F 选项指定)。</span><br><span class=\"line\">        --config=FILE         Specify config file to use.</span><br><span class=\"line\"></span><br><span class=\"line\"> 下载：</span><br><span class=\"line\">   -t,  --tries=NUMBER            设置重试次数为 NUMBER (0 代表无限制)。</span><br><span class=\"line\">        --retry-connrefused       即使拒绝连接也是重试。</span><br><span class=\"line\">   -O,  --output-document=FILE    将文档写入 FILE。</span><br><span class=\"line\">   -nc, --no-clobber              skip downloads that would download to</span><br><span class=\"line\">                                  existing files (overwriting them).</span><br><span class=\"line\">   -c,  --continue                断点续传下载文件。</span><br><span class=\"line\">        --progress=TYPE           选择进度条类型。</span><br><span class=\"line\">   -N,  --timestamping            只获取比本地文件新的文件。</span><br><span class=\"line\">   --no-use-server-timestamps     不用服务器上的时间戳来设置本地文件。</span><br><span class=\"line\">   -S,  --server-response         打印服务器响应。</span><br><span class=\"line\">        --spider                  不下载任何文件。</span><br><span class=\"line\">   -T,  --timeout=SECONDS         将所有超时设为 SECONDS 秒。</span><br><span class=\"line\">        --dns-timeout=SECS        设置 DNS 查寻超时为 SECS 秒。</span><br><span class=\"line\">        --connect-timeout=SECS    设置连接超时为 SECS 秒。</span><br><span class=\"line\">        --read-timeout=SECS       设置读取超时为 SECS 秒。</span><br><span class=\"line\">   -w,  --wait=SECONDS            等待间隔为 SECONDS 秒。</span><br><span class=\"line\">        --waitretry=SECONDS       在获取文件的重试期间等待 1..SECONDS 秒。</span><br><span class=\"line\">        --random-wait             获取多个文件时，每次随机等待间隔</span><br><span class=\"line\">                                  0.5*WAIT...1.5*WAIT 秒。</span><br><span class=\"line\">        --no-proxy                禁止使用代理。</span><br><span class=\"line\">   -Q,  --quota=NUMBER            设置获取配额为 NUMBER 字节。</span><br><span class=\"line\">        --bind-address=ADDRESS    绑定至本地主机上的 ADDRESS (主机名或是 IP)。</span><br><span class=\"line\">        --limit-rate=RATE         限制下载速率为 RATE。</span><br><span class=\"line\">        --no-dns-cache            关闭 DNS 查寻缓存。</span><br><span class=\"line\">        --restrict-file-names=OS  限定文件名中的字符为 OS 允许的字符。</span><br><span class=\"line\">        --ignore-case             匹配文件/目录时忽略大小写。</span><br><span class=\"line\">   -4,  --inet4-only              仅连接至 IPv4 地址。</span><br><span class=\"line\">   -6,  --inet6-only              仅连接至 IPv6 地址。</span><br><span class=\"line\">        --prefer-family=FAMILY    首先连接至指定协议的地址</span><br><span class=\"line\">                                  FAMILY 为 IPv6，IPv4 或是 none。</span><br><span class=\"line\">        --user=USER               将 ftp 和 http 的用户名均设置为 USER。</span><br><span class=\"line\">        --password=PASS           将 ftp 和 http 的密码均设置为 PASS。</span><br><span class=\"line\">        --ask-password            提示输入密码。</span><br><span class=\"line\">        --no-iri                  关闭 IRI 支持。</span><br><span class=\"line\">        --local-encoding=ENC      IRI (国际化资源标识符) 使用 ENC 作为本地编码。</span><br><span class=\"line\">        --remote-encoding=ENC     使用 ENC 作为默认远程编码。</span><br><span class=\"line\">        --unlink                  remove file before clobber.</span><br><span class=\"line\"></span><br><span class=\"line\"> 目录：</span><br><span class=\"line\">   -nd, --no-directories           不创建目录。</span><br><span class=\"line\">   -x,  --force-directories        强制创建目录。</span><br><span class=\"line\">   -nH, --no-host-directories      不要创建主目录。</span><br><span class=\"line\">        --protocol-directories     在目录中使用协议名称。</span><br><span class=\"line\">   -P,  --directory-prefix=PREFIX  以 PREFIX/... 保存文件</span><br><span class=\"line\">        --cut-dirs=NUMBER          忽略远程目录中 NUMBER 个目录层。</span><br><span class=\"line\"></span><br><span class=\"line\"> HTTP 选项：</span><br><span class=\"line\">        --http-user=USER        设置 http 用户名为 USER。</span><br><span class=\"line\">        --http-password=PASS    设置 http 密码为 PASS。</span><br><span class=\"line\">        --no-cache              不在服务器上缓存数据。</span><br><span class=\"line\">        --default-page=NAME     改变默认页</span><br><span class=\"line\">                                (默认页通常是“index.html”)。</span><br><span class=\"line\">   -E,  --adjust-extension      以合适的扩展名保存 HTML/CSS 文档。</span><br><span class=\"line\">        --ignore-length         忽略头部的‘Content-Length’区域。</span><br><span class=\"line\">        --header=STRING         在头部插入 STRING。</span><br><span class=\"line\">        --max-redirect          每页所允许的最大重定向。</span><br><span class=\"line\">        --proxy-user=USER       使用 USER 作为代理用户名。</span><br><span class=\"line\">        --proxy-password=PASS   使用 PASS 作为代理密码。</span><br><span class=\"line\">        --referer=URL           在 HTTP 请求头包含‘Referer: URL’。</span><br><span class=\"line\">        --save-headers          将 HTTP 头保存至文件。</span><br><span class=\"line\">   -U,  --user-agent=AGENT      标识为 AGENT 而不是 Wget/VERSION。</span><br><span class=\"line\">        --no-http-keep-alive    禁用 HTTP keep-alive (永久连接)。</span><br><span class=\"line\">        --no-cookies            不使用 cookies。</span><br><span class=\"line\">        --load-cookies=FILE     会话开始前从 FILE 中载入 cookies。</span><br><span class=\"line\">        --save-cookies=FILE     会话结束后保存 cookies 至 FILE。</span><br><span class=\"line\">        --keep-session-cookies  载入并保存会话 (非永久) cookies。</span><br><span class=\"line\">        --post-data=STRING      使用 POST 方式；把 STRING 作为数据发送。</span><br><span class=\"line\">        --post-file=FILE        使用 POST 方式；发送 FILE 内容。</span><br><span class=\"line\">        --content-disposition   当选中本地文件名时</span><br><span class=\"line\">                                允许 Content-Disposition 头部 (尚在实验)。</span><br><span class=\"line\">        --content-on-error      output the received content on server errors.</span><br><span class=\"line\">        --auth-no-challenge     发送不含服务器询问的首次等待</span><br><span class=\"line\">                                的基本 HTTP 验证信息。</span><br><span class=\"line\"></span><br><span class=\"line\"> HTTPS (SSL/TLS) 选项：</span><br><span class=\"line\">        --secure-protocol=PR     choose secure protocol, one of auto, SSLv2,</span><br><span class=\"line\">                                 SSLv3, TLSv1, TLSv1_1 and TLSv1_2.</span><br><span class=\"line\">        --no-check-certificate   不要验证服务器的证书。</span><br><span class=\"line\">        --certificate=FILE       客户端证书文件。</span><br><span class=\"line\">        --certificate-type=TYPE  客户端证书类型，PEM 或 DER。</span><br><span class=\"line\">        --private-key=FILE       私钥文件。</span><br><span class=\"line\">        --private-key-type=TYPE  私钥文件类型，PEM 或 DER。</span><br><span class=\"line\">        --ca-certificate=FILE    带有一组 CA 认证的文件。</span><br><span class=\"line\">        --ca-directory=DIR       保存 CA 认证的哈希列表的目录。</span><br><span class=\"line\">        --random-file=FILE       带有生成 SSL PRNG 的随机数据的文件。</span><br><span class=\"line\">        --egd-file=FILE          用于命名带有随机数据的 EGD 套接字的文件。</span><br><span class=\"line\"></span><br><span class=\"line\"> FTP 选项：</span><br><span class=\"line\">        --ftp-user=USER         设置 ftp 用户名为 USER。</span><br><span class=\"line\">        --ftp-password=PASS     设置 ftp 密码为 PASS。</span><br><span class=\"line\">        --no-remove-listing     不要删除‘.listing’文件。</span><br><span class=\"line\">        --no-glob               不在 FTP 文件名中使用通配符展开。</span><br><span class=\"line\">        --no-passive-ftp        禁用“passive”传输模式。</span><br><span class=\"line\">        --preserve-permissions  保留远程文件的权限。</span><br><span class=\"line\">        --retr-symlinks         递归目录时，获取链接的文件 (而非目录)。</span><br><span class=\"line\"></span><br><span class=\"line\"> WARC options:</span><br><span class=\"line\">        --warc-file=FILENAME      save request/response data to a .warc.gz file.</span><br><span class=\"line\">        --warc-header=STRING      insert STRING into the warcinfo record.</span><br><span class=\"line\">        --warc-max-size=NUMBER    set maximum size of WARC files to NUMBER.</span><br><span class=\"line\">        --warc-cdx                write CDX index files.</span><br><span class=\"line\">        --warc-dedup=FILENAME     do not store records listed in this CDX file.</span><br><span class=\"line\">        --no-warc-compression     do not compress WARC files with GZIP.</span><br><span class=\"line\">        --no-warc-digests         do not calculate SHA1 digests.</span><br><span class=\"line\">        --no-warc-keep-log        do not store the log file in a WARC record.</span><br><span class=\"line\">        --warc-tempdir=DIRECTORY  location for temporary files created by the</span><br><span class=\"line\">                                  WARC writer.</span><br><span class=\"line\"></span><br><span class=\"line\"> 递归下载：</span><br><span class=\"line\">   -r,  --recursive          指定递归下载。</span><br><span class=\"line\">   -l,  --level=NUMBER       最大递归深度 (inf 或 0 代表无限制，即全部下载)。</span><br><span class=\"line\">        --delete-after       下载完成后删除本地文件。</span><br><span class=\"line\">   -k,  --convert-links      让下载得到的 HTML 或 CSS 中的链接指向本地文件。</span><br><span class=\"line\">   --backups=N   before writing file X, rotate up to N backup files.</span><br><span class=\"line\">   -K,  --backup-converted   在转换文件 X 前先将它备份为 X.orig。</span><br><span class=\"line\">   -m,  --mirror             -N -r -l inf --no-remove-listing 的缩写形式。</span><br><span class=\"line\">   -p,  --page-requisites    下载所有用于显示 HTML 页面的图片之类的元素。</span><br><span class=\"line\">        --strict-comments    用严格方式 (SGML) 处理 HTML 注释。</span><br><span class=\"line\"></span><br><span class=\"line\"> 递归接受/拒绝：</span><br><span class=\"line\">   -A,  --accept=LIST               逗号分隔的可接受的扩展名列表。</span><br><span class=\"line\">   -R,  --reject=LIST               逗号分隔的要拒绝的扩展名列表。</span><br><span class=\"line\">        --accept-regex=REGEX        regex matching accepted URLs.</span><br><span class=\"line\">        --reject-regex=REGEX        regex matching rejected URLs.</span><br><span class=\"line\">        --regex-type=TYPE           regex type (posixpcre).</span><br><span class=\"line\">   -D,  --domains=LIST              逗号分隔的可接受的域列表。</span><br><span class=\"line\">        --exclude-domains=LIST      逗号分隔的要拒绝的域列表。</span><br><span class=\"line\">        --follow-ftp                跟踪 HTML 文档中的 FTP 链接。</span><br><span class=\"line\">        --follow-tags=LIST          逗号分隔的跟踪的 HTML 标识列表。</span><br><span class=\"line\">        --ignore-tags=LIST          逗号分隔的忽略的 HTML 标识列表。</span><br><span class=\"line\">   -H,  --span-hosts                递归时转向外部主机。</span><br><span class=\"line\">   -L,  --relative                  只跟踪有关系的链接。</span><br><span class=\"line\">   -I,  --include-directories=LIST  允许目录的列表。</span><br><span class=\"line\">   --trust-server-names             use the name specified by the redirection</span><br><span class=\"line\">                                    url last component.</span><br><span class=\"line\">   -X,  --exclude-directories=LIST  排除目录的列表。</span><br><span class=\"line\">   -np, --no-parent                 不追溯至父目录。</span><br></pre></td></tr></table></figure>"},{"title":"Python学习笔记二()","id":"766","date":"2022-03-19T10:02:09.000Z","_content":"\n### 1.、随机数\n\n*   随机数\n    \n    ```python\n    >>>import random\n    >>>random.seed()#设置随机数种子\n    >>>random.randint(1,100)#生成1-100随机整数\n    >>>random.uniform(-100,100)#生成-100到100的随机浮点数\n    >>>round(random.uniform(-100,100),2)#保留两位小数\n    ```\n    \n*   随机数组\n    \n    ```python\n    >>>import numpy as np\n    >>>rand = np.random\n    >>>rand.randint(1,100,(3,6))#生成3个数组，每个数组由6个1-100的随机整数组成\n    >>>rand.rand(4)*100#生成1个数组，由4个0-100的随机浮点数组成。rand()返回值为[0,1]\n    ```\n    \n\n### 2、Numpy扩展包\n<!-- more -->\nndarray(代表一种特殊的数据结构—n维数组)是numpy的灵魂，Python中的列表和元组内存大、计算时间长。使用数组能优化这些缺点。\n\n###### 2.1 ndarray创建\n\n```python\n#导入numpy包\nimport numpy as np\n#第一种方法,和内置函数range类似,速度更快，返回的是ndarray类型\nmyarray1 = np.arange(1,10,2)#[1 3 5 7 9]\n#第二种方法\nmyarray2 = np.array([1,3,5,7,9])#[1 3 5 7 9]\n#第三种方法,返回几行几列填满相同一个元素的数组\nmyarray3 = np.full((2,3),6)#[[6 6 6] [6 6 6]]\n#第四种，生成随机数组，可用np.random.RandomState()指定随机种子数\nmyarray4 = np.random.randint(0,10,(2,3))#[[1 3 8] [8 4 2]]\n```\n\n###### 2.2 主要特征\n\n*   shape(形状)\n    \n    指定数组是一维数组或多维数组，shape=(2,15)代表2行15列的数组，且`shape=`可以省略。\n    \n*   dtype(元素类型)\n    \n    指定数组元素类型，dtype=np.int代表元素为numpy中的int型。ndarray的类型比Python自带的多\n    \n\n###### 2.3 切片/读取\n\n*   规则切片操作\n    \n    ndarray数组支持像list那样的规则切片操作\n    \n*   不规则切片操作\n    \n    也可以使用Fancy Indexing方法进行不规则切片操作, 格式为 `[[index1,index2,index3...]]`, 即方括号内嵌套方括号。比如我想取数组的索引为第1个、第2个、第4个、第5个。\n    \n    ```python\n    fancy_index = np.arange(0,100)\n    fancy_index[[1,2,4,5]]\n    #[1 2 4 5]\n    ```\n    \n\n###### 2.4 多维数组的切片\n\n以二维数组为例\n\n```python\n#切片的使用，[行进行切片,列进行切片] 即[start:stop:step,start:stop:step]\n#获取所有行\nprint(a[:,:])\n#结果：\n#[[ 0  1  2]\n# [ 3  4  5]\n# [ 6  7  8]\n# [ 9 10 11]]\n\n#获取所有行，部分列 {所有行，第二列}\nprint(a[:,1])\n#[ 1  4  7 10]\n\n#获取所有行，部分列 {所有行，第一、二列}\nprint(a[:,0:2])\n#[[ 0  1] [ 3  4] [ 6  7] [ 9 10]]\n\n#获取部分行，部分列 {行的奇数行，列的第一、第二列}\nprint(a[::2,0:2])\n#[[0 1] [6 7]]\n\n#使用坐标获取[(1,2),(2,0)]，(1,2)均为行号，(2,0)均为列号，且1和2会自动结合，2和0会自动结合,3和结合\nprint(a[(1,2,3),(2,0,1)])\n#结果：[5 6 10]\n```\n\n###### 2.5浅拷贝和深拷贝\n\n浅拷贝是指拷贝过来的是—引用。\n\n```python\nimport numpy as np\narr1 = np.array([1,2,3,'A','B','C'])\narr2 = np.arange(1,10,2)\n\narr1 = arr2 #此处arr1对arr2进行了浅拷贝，二者引用相同存储空间\narr1[1] = 0\nprint(arr1,arr2)\n#[1 0 5 7 9] [1 0 5 7 9]\n#对arr1的修改也会影响arr2 的值\n```\n\n深拷贝是指重新申请一个存储空间存放，使用的是 `copy()`方法。\n\n```python\nimport numpy as np\narr1 = np.array([1,2,3,'A','B','C'])\narr2 = np.arange(1,10,2)\n\narr1 = arr2.copy() #此处arr1对arr2进行了深拷贝，arr1重新获得一个新的存储空间存放相同的arr2元素\narr1[1] = 0\nprint(arr1,arr2)\n#[1 0 5 7 9] [1 3 5 7 9]\n#arr2并未发生变化\n```\n\n###### 2.6形状和重构\n\n查看形状，用 属性`shape`\n\n```python\nimport numpy as np\narr1 = np.array([1,2,3,'A','B','C'])\narr2 = np.random.randint(0,10,(2,3))\n\nprint(arr1.shape)\nprint(arr2.shape)\n#(6,)\n#(2,3)\n```\n\n`reshape()`, 返回一个符合形状的多维数组，不改变原数组\n\n```python\nimport numpy as np\narr = np.arange(0,20)\narr2 = arr.reshape(4,5)\nprint(arr2)\n#[[ 0  1  2  3  4]\n# [ 5  6  7  8  9]\n# [10 11 12 13 14]\n# [15 16 17 18 19]]\n```\n\n**注意**：重构的数组必须是n × m = 原数组总元素个数，否则会报错\n\n![重构的数组必须是n × m = 原数组总元素个数](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E9%87%8D%E6%9E%84%E7%9A%84%E6%95%B0%E7%BB%84%E5%BF%85%E9%A1%BB%E6%98%AFn%20%C3%97%20m%20=%20%E5%8E%9F%E6%95%B0%E7%BB%84%E6%80%BB%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0.png)\n\n`resize()` 改变原数组\n\n```python\nimport numpy as np\narr = np.arange(0,20)\narr.resize(4,5)\nprint(arr)\n#[[ 0  1  2  3  4]\n# [ 5  6  7  8  9]\n# [10 11 12 13 14]\n# [15 16 17 18 19]]\n```\n\n`flatten()` 将多维数组变为一维数组，返回值为一维数组，不改变原数组\n\n`swapaxes()` 进行轴调换，实现转置矩阵。不改变数组本身\n\n```python\nimport numpy as np\narr = np.arange(0,20)\narr.resize(4,5)\narr_swap = arr.swapaxes(0,1)\nprint(arr,arr_swap)\n#[[ 0  1  2  3  4]\n# [ 5  6  7  8  9]\n# [10 11 12 13 14]\n# [15 16 17 18 19]]\n#[[ 0  5 10 15]\n# [ 1  6 11 16]\n# [ 2  7 12 17]\n# [ 3  8 13 18]\n# [ 4  9 14 19]]\n```\n\n###### 2.7 属性计算\n\n计算数组的秩，用 `ndim` 属性\n\n```python\nimport numpy as np\narr = np.arange(0,20)\narr.resize(4,5)\nprint(arr.ndim)\n# 2\n```\n\n计算元素个数，用 `size` 属性\n\n```python\nimport numpy as np\narr = np.arange(0,20)\nprint(arr.size)\n# 20\n```\n\n数组的乘法，不改变原数组\n\n```python\nimport numpy as np\narr = np.arange(0,20)\narr1 = arr*10\nprint(arr1)\n#[  0  10  20  30  40  50  60  70  80  90 100 110 120 130 #140 150 160 170\n# 180 190]\n```\n\n###### 2.8 插入和删除\n\n`np.delete(ArrayName,index)` 删除特定元素, 不改变数组`np.insert(ArrayName,index,value)` 插入特定元素, 不改变数组\n\n```python\nimport numpy as np\narr = np.arange(0,10,2)\n###########delete#####\narr1 =np.delete(arr,2)\nprint(arr,arr1)\n#[0 2 4 6 8] [0 2 6 8]\n###########insert#######\narr2 = np.insert(arr,1,999)\nprint(arr,arr2)\n#[0 2 4 6 8] [  0 999   2   4   6   8]\n```\n\n###### 2.9 缺失值和广播规则\n\n###### 其它\n\n*   数组内排序：\n    \n    使用 `np.sort(ArrayNameaxis )` ,返回排序结果不改变数组本身。\n    \n    其中参数axis则表示按行排序还是按列排序。","source":"_posts/python学习笔记二.md","raw":"---\ntitle: Python学习笔记二()\ntags:\n  - Numpy\n  - Python\nid: '766'\ncategories:\n  - - 学习笔记\n  - - 文章\ndate: 2022-03-19 18:02:09\n---\n\n### 1.、随机数\n\n*   随机数\n    \n    ```python\n    >>>import random\n    >>>random.seed()#设置随机数种子\n    >>>random.randint(1,100)#生成1-100随机整数\n    >>>random.uniform(-100,100)#生成-100到100的随机浮点数\n    >>>round(random.uniform(-100,100),2)#保留两位小数\n    ```\n    \n*   随机数组\n    \n    ```python\n    >>>import numpy as np\n    >>>rand = np.random\n    >>>rand.randint(1,100,(3,6))#生成3个数组，每个数组由6个1-100的随机整数组成\n    >>>rand.rand(4)*100#生成1个数组，由4个0-100的随机浮点数组成。rand()返回值为[0,1]\n    ```\n    \n\n### 2、Numpy扩展包\n<!-- more -->\nndarray(代表一种特殊的数据结构—n维数组)是numpy的灵魂，Python中的列表和元组内存大、计算时间长。使用数组能优化这些缺点。\n\n###### 2.1 ndarray创建\n\n```python\n#导入numpy包\nimport numpy as np\n#第一种方法,和内置函数range类似,速度更快，返回的是ndarray类型\nmyarray1 = np.arange(1,10,2)#[1 3 5 7 9]\n#第二种方法\nmyarray2 = np.array([1,3,5,7,9])#[1 3 5 7 9]\n#第三种方法,返回几行几列填满相同一个元素的数组\nmyarray3 = np.full((2,3),6)#[[6 6 6] [6 6 6]]\n#第四种，生成随机数组，可用np.random.RandomState()指定随机种子数\nmyarray4 = np.random.randint(0,10,(2,3))#[[1 3 8] [8 4 2]]\n```\n\n###### 2.2 主要特征\n\n*   shape(形状)\n    \n    指定数组是一维数组或多维数组，shape=(2,15)代表2行15列的数组，且`shape=`可以省略。\n    \n*   dtype(元素类型)\n    \n    指定数组元素类型，dtype=np.int代表元素为numpy中的int型。ndarray的类型比Python自带的多\n    \n\n###### 2.3 切片/读取\n\n*   规则切片操作\n    \n    ndarray数组支持像list那样的规则切片操作\n    \n*   不规则切片操作\n    \n    也可以使用Fancy Indexing方法进行不规则切片操作, 格式为 `[[index1,index2,index3...]]`, 即方括号内嵌套方括号。比如我想取数组的索引为第1个、第2个、第4个、第5个。\n    \n    ```python\n    fancy_index = np.arange(0,100)\n    fancy_index[[1,2,4,5]]\n    #[1 2 4 5]\n    ```\n    \n\n###### 2.4 多维数组的切片\n\n以二维数组为例\n\n```python\n#切片的使用，[行进行切片,列进行切片] 即[start:stop:step,start:stop:step]\n#获取所有行\nprint(a[:,:])\n#结果：\n#[[ 0  1  2]\n# [ 3  4  5]\n# [ 6  7  8]\n# [ 9 10 11]]\n\n#获取所有行，部分列 {所有行，第二列}\nprint(a[:,1])\n#[ 1  4  7 10]\n\n#获取所有行，部分列 {所有行，第一、二列}\nprint(a[:,0:2])\n#[[ 0  1] [ 3  4] [ 6  7] [ 9 10]]\n\n#获取部分行，部分列 {行的奇数行，列的第一、第二列}\nprint(a[::2,0:2])\n#[[0 1] [6 7]]\n\n#使用坐标获取[(1,2),(2,0)]，(1,2)均为行号，(2,0)均为列号，且1和2会自动结合，2和0会自动结合,3和结合\nprint(a[(1,2,3),(2,0,1)])\n#结果：[5 6 10]\n```\n\n###### 2.5浅拷贝和深拷贝\n\n浅拷贝是指拷贝过来的是—引用。\n\n```python\nimport numpy as np\narr1 = np.array([1,2,3,'A','B','C'])\narr2 = np.arange(1,10,2)\n\narr1 = arr2 #此处arr1对arr2进行了浅拷贝，二者引用相同存储空间\narr1[1] = 0\nprint(arr1,arr2)\n#[1 0 5 7 9] [1 0 5 7 9]\n#对arr1的修改也会影响arr2 的值\n```\n\n深拷贝是指重新申请一个存储空间存放，使用的是 `copy()`方法。\n\n```python\nimport numpy as np\narr1 = np.array([1,2,3,'A','B','C'])\narr2 = np.arange(1,10,2)\n\narr1 = arr2.copy() #此处arr1对arr2进行了深拷贝，arr1重新获得一个新的存储空间存放相同的arr2元素\narr1[1] = 0\nprint(arr1,arr2)\n#[1 0 5 7 9] [1 3 5 7 9]\n#arr2并未发生变化\n```\n\n###### 2.6形状和重构\n\n查看形状，用 属性`shape`\n\n```python\nimport numpy as np\narr1 = np.array([1,2,3,'A','B','C'])\narr2 = np.random.randint(0,10,(2,3))\n\nprint(arr1.shape)\nprint(arr2.shape)\n#(6,)\n#(2,3)\n```\n\n`reshape()`, 返回一个符合形状的多维数组，不改变原数组\n\n```python\nimport numpy as np\narr = np.arange(0,20)\narr2 = arr.reshape(4,5)\nprint(arr2)\n#[[ 0  1  2  3  4]\n# [ 5  6  7  8  9]\n# [10 11 12 13 14]\n# [15 16 17 18 19]]\n```\n\n**注意**：重构的数组必须是n × m = 原数组总元素个数，否则会报错\n\n![重构的数组必须是n × m = 原数组总元素个数](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E9%87%8D%E6%9E%84%E7%9A%84%E6%95%B0%E7%BB%84%E5%BF%85%E9%A1%BB%E6%98%AFn%20%C3%97%20m%20=%20%E5%8E%9F%E6%95%B0%E7%BB%84%E6%80%BB%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0.png)\n\n`resize()` 改变原数组\n\n```python\nimport numpy as np\narr = np.arange(0,20)\narr.resize(4,5)\nprint(arr)\n#[[ 0  1  2  3  4]\n# [ 5  6  7  8  9]\n# [10 11 12 13 14]\n# [15 16 17 18 19]]\n```\n\n`flatten()` 将多维数组变为一维数组，返回值为一维数组，不改变原数组\n\n`swapaxes()` 进行轴调换，实现转置矩阵。不改变数组本身\n\n```python\nimport numpy as np\narr = np.arange(0,20)\narr.resize(4,5)\narr_swap = arr.swapaxes(0,1)\nprint(arr,arr_swap)\n#[[ 0  1  2  3  4]\n# [ 5  6  7  8  9]\n# [10 11 12 13 14]\n# [15 16 17 18 19]]\n#[[ 0  5 10 15]\n# [ 1  6 11 16]\n# [ 2  7 12 17]\n# [ 3  8 13 18]\n# [ 4  9 14 19]]\n```\n\n###### 2.7 属性计算\n\n计算数组的秩，用 `ndim` 属性\n\n```python\nimport numpy as np\narr = np.arange(0,20)\narr.resize(4,5)\nprint(arr.ndim)\n# 2\n```\n\n计算元素个数，用 `size` 属性\n\n```python\nimport numpy as np\narr = np.arange(0,20)\nprint(arr.size)\n# 20\n```\n\n数组的乘法，不改变原数组\n\n```python\nimport numpy as np\narr = np.arange(0,20)\narr1 = arr*10\nprint(arr1)\n#[  0  10  20  30  40  50  60  70  80  90 100 110 120 130 #140 150 160 170\n# 180 190]\n```\n\n###### 2.8 插入和删除\n\n`np.delete(ArrayName,index)` 删除特定元素, 不改变数组`np.insert(ArrayName,index,value)` 插入特定元素, 不改变数组\n\n```python\nimport numpy as np\narr = np.arange(0,10,2)\n###########delete#####\narr1 =np.delete(arr,2)\nprint(arr,arr1)\n#[0 2 4 6 8] [0 2 6 8]\n###########insert#######\narr2 = np.insert(arr,1,999)\nprint(arr,arr2)\n#[0 2 4 6 8] [  0 999   2   4   6   8]\n```\n\n###### 2.9 缺失值和广播规则\n\n###### 其它\n\n*   数组内排序：\n    \n    使用 `np.sort(ArrayNameaxis )` ,返回排序结果不改变数组本身。\n    \n    其中参数axis则表示按行排序还是按列排序。","slug":"python学习笔记二","published":1,"updated":"2024-03-12T10:44:24.820Z","_id":"cltnrar4c000yjry10trw8l01","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"1-、随机数\"><a href=\"#1-、随机数\" class=\"headerlink\" title=\"1.、随机数\"></a>1.、随机数</h3><ul>\n<li>随机数  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">import</span> random</span><br><span class=\"line\">&gt;&gt;&gt;random.seed()<span class=\"comment\">#设置随机数种子</span></span><br><span class=\"line\">&gt;&gt;&gt;random.randint(<span class=\"number\">1</span>,<span class=\"number\">100</span>)<span class=\"comment\">#生成1-100随机整数</span></span><br><span class=\"line\">&gt;&gt;&gt;random.uniform(-<span class=\"number\">100</span>,<span class=\"number\">100</span>)<span class=\"comment\">#生成-100到100的随机浮点数</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">round</span>(random.uniform(-<span class=\"number\">100</span>,<span class=\"number\">100</span>),<span class=\"number\">2</span>)<span class=\"comment\">#保留两位小数</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>随机数组  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">&gt;&gt;&gt;rand = np.random</span><br><span class=\"line\">&gt;&gt;&gt;rand.randint(<span class=\"number\">1</span>,<span class=\"number\">100</span>,(<span class=\"number\">3</span>,<span class=\"number\">6</span>))<span class=\"comment\">#生成3个数组，每个数组由6个1-100的随机整数组成</span></span><br><span class=\"line\">&gt;&gt;&gt;rand.rand(<span class=\"number\">4</span>)*<span class=\"number\">100</span><span class=\"comment\">#生成1个数组，由4个0-100的随机浮点数组成。rand()返回值为[0,1]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2、Numpy扩展包\"><a href=\"#2、Numpy扩展包\" class=\"headerlink\" title=\"2、Numpy扩展包\"></a>2、Numpy扩展包</h3><span id=\"more\"></span>\n<p>ndarray(代表一种特殊的数据结构—n维数组)是numpy的灵魂，Python中的列表和元组内存大、计算时间长。使用数组能优化这些缺点。</p>\n<h6 id=\"2-1-ndarray创建\"><a href=\"#2-1-ndarray创建\" class=\"headerlink\" title=\"2.1 ndarray创建\"></a>2.1 ndarray创建</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#导入numpy包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"comment\">#第一种方法,和内置函数range类似,速度更快，返回的是ndarray类型</span></span><br><span class=\"line\">myarray1 = np.arange(<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>)<span class=\"comment\">#[1 3 5 7 9]</span></span><br><span class=\"line\"><span class=\"comment\">#第二种方法</span></span><br><span class=\"line\">myarray2 = np.array([<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>])<span class=\"comment\">#[1 3 5 7 9]</span></span><br><span class=\"line\"><span class=\"comment\">#第三种方法,返回几行几列填满相同一个元素的数组</span></span><br><span class=\"line\">myarray3 = np.full((<span class=\"number\">2</span>,<span class=\"number\">3</span>),<span class=\"number\">6</span>)<span class=\"comment\">#[[6 6 6] [6 6 6]]</span></span><br><span class=\"line\"><span class=\"comment\">#第四种，生成随机数组，可用np.random.RandomState()指定随机种子数</span></span><br><span class=\"line\">myarray4 = np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">10</span>,(<span class=\"number\">2</span>,<span class=\"number\">3</span>))<span class=\"comment\">#[[1 3 8] [8 4 2]]</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-2-主要特征\"><a href=\"#2-2-主要特征\" class=\"headerlink\" title=\"2.2 主要特征\"></a>2.2 主要特征</h6><ul>\n<li>shape(形状)  指定数组是一维数组或多维数组，shape=(2,15)代表2行15列的数组，且<code>shape=</code>可以省略。</li>\n<li>dtype(元素类型)  指定数组元素类型，dtype=np.int代表元素为numpy中的int型。ndarray的类型比Python自带的多</li>\n</ul>\n<h6 id=\"2-3-切片-读取\"><a href=\"#2-3-切片-读取\" class=\"headerlink\" title=\"2.3 切片/读取\"></a>2.3 切片/读取</h6><ul>\n<li>规则切片操作  ndarray数组支持像list那样的规则切片操作</li>\n<li>不规则切片操作  也可以使用Fancy Indexing方法进行不规则切片操作, 格式为 <code>[[index1,index2,index3...]]</code>, 即方括号内嵌套方括号。比如我想取数组的索引为第1个、第2个、第4个、第5个。  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fancy_index = np.arange(<span class=\"number\">0</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\">fancy_index[[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]]</span><br><span class=\"line\"><span class=\"comment\">#[1 2 4 5]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"2-4-多维数组的切片\"><a href=\"#2-4-多维数组的切片\" class=\"headerlink\" title=\"2.4 多维数组的切片\"></a>2.4 多维数组的切片</h6><p>以二维数组为例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#切片的使用，[行进行切片,列进行切片] 即[start:stop:step,start:stop:step]</span></span><br><span class=\"line\"><span class=\"comment\">#获取所有行</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[:,:])</span><br><span class=\"line\"><span class=\"comment\">#结果：</span></span><br><span class=\"line\"><span class=\"comment\">#[[ 0  1  2]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 3  4  5]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 6  7  8]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 9 10 11]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取所有行，部分列 &#123;所有行，第二列&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[:,<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"comment\">#[ 1  4  7 10]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取所有行，部分列 &#123;所有行，第一、二列&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[:,<span class=\"number\">0</span>:<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"comment\">#[[ 0  1] [ 3  4] [ 6  7] [ 9 10]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取部分行，部分列 &#123;行的奇数行，列的第一、第二列&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[::<span class=\"number\">2</span>,<span class=\"number\">0</span>:<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"comment\">#[[0 1] [6 7]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用坐标获取[(1,2),(2,0)]，(1,2)均为行号，(2,0)均为列号，且1和2会自动结合，2和0会自动结合,3和结合</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>),(<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>)])</span><br><span class=\"line\"><span class=\"comment\">#结果：[5 6 10]</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-5浅拷贝和深拷贝\"><a href=\"#2-5浅拷贝和深拷贝\" class=\"headerlink\" title=\"2.5浅拷贝和深拷贝\"></a>2.5浅拷贝和深拷贝</h6><p>浅拷贝是指拷贝过来的是—引用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr1 = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>])</span><br><span class=\"line\">arr2 = np.arange(<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">arr1 = arr2 <span class=\"comment\">#此处arr1对arr2进行了浅拷贝，二者引用相同存储空间</span></span><br><span class=\"line\">arr1[<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr1,arr2)</span><br><span class=\"line\"><span class=\"comment\">#[1 0 5 7 9] [1 0 5 7 9]</span></span><br><span class=\"line\"><span class=\"comment\">#对arr1的修改也会影响arr2 的值</span></span><br></pre></td></tr></table></figure>\n\n<p>深拷贝是指重新申请一个存储空间存放，使用的是 <code>copy()</code>方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr1 = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>])</span><br><span class=\"line\">arr2 = np.arange(<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">arr1 = arr2.copy() <span class=\"comment\">#此处arr1对arr2进行了深拷贝，arr1重新获得一个新的存储空间存放相同的arr2元素</span></span><br><span class=\"line\">arr1[<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr1,arr2)</span><br><span class=\"line\"><span class=\"comment\">#[1 0 5 7 9] [1 3 5 7 9]</span></span><br><span class=\"line\"><span class=\"comment\">#arr2并未发生变化</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-6形状和重构\"><a href=\"#2-6形状和重构\" class=\"headerlink\" title=\"2.6形状和重构\"></a>2.6形状和重构</h6><p>查看形状，用 属性<code>shape</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr1 = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>])</span><br><span class=\"line\">arr2 = np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">10</span>,(<span class=\"number\">2</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr1.shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr2.shape)</span><br><span class=\"line\"><span class=\"comment\">#(6,)</span></span><br><span class=\"line\"><span class=\"comment\">#(2,3)</span></span><br></pre></td></tr></table></figure>\n\n<p><code>reshape()</code>, 返回一个符合形状的多维数组，不改变原数组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">0</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">arr2 = arr.reshape(<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr2)</span><br><span class=\"line\"><span class=\"comment\">#[[ 0  1  2  3  4]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 5  6  7  8  9]</span></span><br><span class=\"line\"><span class=\"comment\"># [10 11 12 13 14]</span></span><br><span class=\"line\"><span class=\"comment\"># [15 16 17 18 19]]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：重构的数组必须是n × m = 原数组总元素个数，否则会报错</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E9%87%8D%E6%9E%84%E7%9A%84%E6%95%B0%E7%BB%84%E5%BF%85%E9%A1%BB%E6%98%AFn%20%C3%97%20m%20=%20%E5%8E%9F%E6%95%B0%E7%BB%84%E6%80%BB%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0.png\" alt=\"重构的数组必须是n × m = 原数组总元素个数\"></p>\n<p><code>resize()</code> 改变原数组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">0</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">arr.resize(<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr)</span><br><span class=\"line\"><span class=\"comment\">#[[ 0  1  2  3  4]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 5  6  7  8  9]</span></span><br><span class=\"line\"><span class=\"comment\"># [10 11 12 13 14]</span></span><br><span class=\"line\"><span class=\"comment\"># [15 16 17 18 19]]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>flatten()</code> 将多维数组变为一维数组，返回值为一维数组，不改变原数组</p>\n<p><code>swapaxes()</code> 进行轴调换，实现转置矩阵。不改变数组本身</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">0</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">arr.resize(<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">arr_swap = arr.swapaxes(<span class=\"number\">0</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr,arr_swap)</span><br><span class=\"line\"><span class=\"comment\">#[[ 0  1  2  3  4]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 5  6  7  8  9]</span></span><br><span class=\"line\"><span class=\"comment\"># [10 11 12 13 14]</span></span><br><span class=\"line\"><span class=\"comment\"># [15 16 17 18 19]]</span></span><br><span class=\"line\"><span class=\"comment\">#[[ 0  5 10 15]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 1  6 11 16]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 2  7 12 17]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 3  8 13 18]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 4  9 14 19]]</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-7-属性计算\"><a href=\"#2-7-属性计算\" class=\"headerlink\" title=\"2.7 属性计算\"></a>2.7 属性计算</h6><p>计算数组的秩，用 <code>ndim</code> 属性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">0</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">arr.resize(<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.ndim)</span><br><span class=\"line\"><span class=\"comment\"># 2</span></span><br></pre></td></tr></table></figure>\n\n<p>计算元素个数，用 <code>size</code> 属性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">0</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.size)</span><br><span class=\"line\"><span class=\"comment\"># 20</span></span><br></pre></td></tr></table></figure>\n\n<p>数组的乘法，不改变原数组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">0</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">arr1 = arr*<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr1)</span><br><span class=\"line\"><span class=\"comment\">#[  0  10  20  30  40  50  60  70  80  90 100 110 120 130 #140 150 160 170</span></span><br><span class=\"line\"><span class=\"comment\"># 180 190]</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-8-插入和删除\"><a href=\"#2-8-插入和删除\" class=\"headerlink\" title=\"2.8 插入和删除\"></a>2.8 插入和删除</h6><p><code>np.delete(ArrayName,index)</code> 删除特定元素, 不改变数组<code>np.insert(ArrayName,index,value)</code> 插入特定元素, 不改变数组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">0</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">###########delete#####</span></span><br><span class=\"line\">arr1 =np.delete(arr,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr,arr1)</span><br><span class=\"line\"><span class=\"comment\">#[0 2 4 6 8] [0 2 6 8]</span></span><br><span class=\"line\"><span class=\"comment\">###########insert#######</span></span><br><span class=\"line\">arr2 = np.insert(arr,<span class=\"number\">1</span>,<span class=\"number\">999</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr,arr2)</span><br><span class=\"line\"><span class=\"comment\">#[0 2 4 6 8] [  0 999   2   4   6   8]</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-9-缺失值和广播规则\"><a href=\"#2-9-缺失值和广播规则\" class=\"headerlink\" title=\"2.9 缺失值和广播规则\"></a>2.9 缺失值和广播规则</h6><h6 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h6><ul>\n<li>数组内排序：  使用 <code>np.sort(ArrayNameaxis )</code> ,返回排序结果不改变数组本身。  其中参数axis则表示按行排序还是按列排序。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-、随机数\"><a href=\"#1-、随机数\" class=\"headerlink\" title=\"1.、随机数\"></a>1.、随机数</h3><ul>\n<li>随机数  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">import</span> random</span><br><span class=\"line\">&gt;&gt;&gt;random.seed()<span class=\"comment\">#设置随机数种子</span></span><br><span class=\"line\">&gt;&gt;&gt;random.randint(<span class=\"number\">1</span>,<span class=\"number\">100</span>)<span class=\"comment\">#生成1-100随机整数</span></span><br><span class=\"line\">&gt;&gt;&gt;random.uniform(-<span class=\"number\">100</span>,<span class=\"number\">100</span>)<span class=\"comment\">#生成-100到100的随机浮点数</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">round</span>(random.uniform(-<span class=\"number\">100</span>,<span class=\"number\">100</span>),<span class=\"number\">2</span>)<span class=\"comment\">#保留两位小数</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>随机数组  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">&gt;&gt;&gt;rand = np.random</span><br><span class=\"line\">&gt;&gt;&gt;rand.randint(<span class=\"number\">1</span>,<span class=\"number\">100</span>,(<span class=\"number\">3</span>,<span class=\"number\">6</span>))<span class=\"comment\">#生成3个数组，每个数组由6个1-100的随机整数组成</span></span><br><span class=\"line\">&gt;&gt;&gt;rand.rand(<span class=\"number\">4</span>)*<span class=\"number\">100</span><span class=\"comment\">#生成1个数组，由4个0-100的随机浮点数组成。rand()返回值为[0,1]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2、Numpy扩展包\"><a href=\"#2、Numpy扩展包\" class=\"headerlink\" title=\"2、Numpy扩展包\"></a>2、Numpy扩展包</h3>","more":"<p>ndarray(代表一种特殊的数据结构—n维数组)是numpy的灵魂，Python中的列表和元组内存大、计算时间长。使用数组能优化这些缺点。</p>\n<h6 id=\"2-1-ndarray创建\"><a href=\"#2-1-ndarray创建\" class=\"headerlink\" title=\"2.1 ndarray创建\"></a>2.1 ndarray创建</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#导入numpy包</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"comment\">#第一种方法,和内置函数range类似,速度更快，返回的是ndarray类型</span></span><br><span class=\"line\">myarray1 = np.arange(<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>)<span class=\"comment\">#[1 3 5 7 9]</span></span><br><span class=\"line\"><span class=\"comment\">#第二种方法</span></span><br><span class=\"line\">myarray2 = np.array([<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>,<span class=\"number\">9</span>])<span class=\"comment\">#[1 3 5 7 9]</span></span><br><span class=\"line\"><span class=\"comment\">#第三种方法,返回几行几列填满相同一个元素的数组</span></span><br><span class=\"line\">myarray3 = np.full((<span class=\"number\">2</span>,<span class=\"number\">3</span>),<span class=\"number\">6</span>)<span class=\"comment\">#[[6 6 6] [6 6 6]]</span></span><br><span class=\"line\"><span class=\"comment\">#第四种，生成随机数组，可用np.random.RandomState()指定随机种子数</span></span><br><span class=\"line\">myarray4 = np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">10</span>,(<span class=\"number\">2</span>,<span class=\"number\">3</span>))<span class=\"comment\">#[[1 3 8] [8 4 2]]</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-2-主要特征\"><a href=\"#2-2-主要特征\" class=\"headerlink\" title=\"2.2 主要特征\"></a>2.2 主要特征</h6><ul>\n<li>shape(形状)  指定数组是一维数组或多维数组，shape=(2,15)代表2行15列的数组，且<code>shape=</code>可以省略。</li>\n<li>dtype(元素类型)  指定数组元素类型，dtype=np.int代表元素为numpy中的int型。ndarray的类型比Python自带的多</li>\n</ul>\n<h6 id=\"2-3-切片-读取\"><a href=\"#2-3-切片-读取\" class=\"headerlink\" title=\"2.3 切片/读取\"></a>2.3 切片/读取</h6><ul>\n<li>规则切片操作  ndarray数组支持像list那样的规则切片操作</li>\n<li>不规则切片操作  也可以使用Fancy Indexing方法进行不规则切片操作, 格式为 <code>[[index1,index2,index3...]]</code>, 即方括号内嵌套方括号。比如我想取数组的索引为第1个、第2个、第4个、第5个。  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fancy_index = np.arange(<span class=\"number\">0</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\">fancy_index[[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]]</span><br><span class=\"line\"><span class=\"comment\">#[1 2 4 5]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"2-4-多维数组的切片\"><a href=\"#2-4-多维数组的切片\" class=\"headerlink\" title=\"2.4 多维数组的切片\"></a>2.4 多维数组的切片</h6><p>以二维数组为例</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#切片的使用，[行进行切片,列进行切片] 即[start:stop:step,start:stop:step]</span></span><br><span class=\"line\"><span class=\"comment\">#获取所有行</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[:,:])</span><br><span class=\"line\"><span class=\"comment\">#结果：</span></span><br><span class=\"line\"><span class=\"comment\">#[[ 0  1  2]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 3  4  5]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 6  7  8]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 9 10 11]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取所有行，部分列 &#123;所有行，第二列&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[:,<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"comment\">#[ 1  4  7 10]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取所有行，部分列 &#123;所有行，第一、二列&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[:,<span class=\"number\">0</span>:<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"comment\">#[[ 0  1] [ 3  4] [ 6  7] [ 9 10]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取部分行，部分列 &#123;行的奇数行，列的第一、第二列&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[::<span class=\"number\">2</span>,<span class=\"number\">0</span>:<span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"comment\">#[[0 1] [6 7]]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用坐标获取[(1,2),(2,0)]，(1,2)均为行号，(2,0)均为列号，且1和2会自动结合，2和0会自动结合,3和结合</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a[(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>),(<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>)])</span><br><span class=\"line\"><span class=\"comment\">#结果：[5 6 10]</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-5浅拷贝和深拷贝\"><a href=\"#2-5浅拷贝和深拷贝\" class=\"headerlink\" title=\"2.5浅拷贝和深拷贝\"></a>2.5浅拷贝和深拷贝</h6><p>浅拷贝是指拷贝过来的是—引用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr1 = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>])</span><br><span class=\"line\">arr2 = np.arange(<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">arr1 = arr2 <span class=\"comment\">#此处arr1对arr2进行了浅拷贝，二者引用相同存储空间</span></span><br><span class=\"line\">arr1[<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr1,arr2)</span><br><span class=\"line\"><span class=\"comment\">#[1 0 5 7 9] [1 0 5 7 9]</span></span><br><span class=\"line\"><span class=\"comment\">#对arr1的修改也会影响arr2 的值</span></span><br></pre></td></tr></table></figure>\n\n<p>深拷贝是指重新申请一个存储空间存放，使用的是 <code>copy()</code>方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr1 = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>])</span><br><span class=\"line\">arr2 = np.arange(<span class=\"number\">1</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">arr1 = arr2.copy() <span class=\"comment\">#此处arr1对arr2进行了深拷贝，arr1重新获得一个新的存储空间存放相同的arr2元素</span></span><br><span class=\"line\">arr1[<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr1,arr2)</span><br><span class=\"line\"><span class=\"comment\">#[1 0 5 7 9] [1 3 5 7 9]</span></span><br><span class=\"line\"><span class=\"comment\">#arr2并未发生变化</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-6形状和重构\"><a href=\"#2-6形状和重构\" class=\"headerlink\" title=\"2.6形状和重构\"></a>2.6形状和重构</h6><p>查看形状，用 属性<code>shape</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr1 = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>])</span><br><span class=\"line\">arr2 = np.random.randint(<span class=\"number\">0</span>,<span class=\"number\">10</span>,(<span class=\"number\">2</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr1.shape)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr2.shape)</span><br><span class=\"line\"><span class=\"comment\">#(6,)</span></span><br><span class=\"line\"><span class=\"comment\">#(2,3)</span></span><br></pre></td></tr></table></figure>\n\n<p><code>reshape()</code>, 返回一个符合形状的多维数组，不改变原数组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">0</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">arr2 = arr.reshape(<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr2)</span><br><span class=\"line\"><span class=\"comment\">#[[ 0  1  2  3  4]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 5  6  7  8  9]</span></span><br><span class=\"line\"><span class=\"comment\"># [10 11 12 13 14]</span></span><br><span class=\"line\"><span class=\"comment\"># [15 16 17 18 19]]</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：重构的数组必须是n × m = 原数组总元素个数，否则会报错</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E9%87%8D%E6%9E%84%E7%9A%84%E6%95%B0%E7%BB%84%E5%BF%85%E9%A1%BB%E6%98%AFn%20%C3%97%20m%20=%20%E5%8E%9F%E6%95%B0%E7%BB%84%E6%80%BB%E5%85%83%E7%B4%A0%E4%B8%AA%E6%95%B0.png\" alt=\"重构的数组必须是n × m = 原数组总元素个数\"></p>\n<p><code>resize()</code> 改变原数组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">0</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">arr.resize(<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr)</span><br><span class=\"line\"><span class=\"comment\">#[[ 0  1  2  3  4]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 5  6  7  8  9]</span></span><br><span class=\"line\"><span class=\"comment\"># [10 11 12 13 14]</span></span><br><span class=\"line\"><span class=\"comment\"># [15 16 17 18 19]]</span></span><br></pre></td></tr></table></figure>\n\n<p><code>flatten()</code> 将多维数组变为一维数组，返回值为一维数组，不改变原数组</p>\n<p><code>swapaxes()</code> 进行轴调换，实现转置矩阵。不改变数组本身</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">0</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">arr.resize(<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">arr_swap = arr.swapaxes(<span class=\"number\">0</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr,arr_swap)</span><br><span class=\"line\"><span class=\"comment\">#[[ 0  1  2  3  4]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 5  6  7  8  9]</span></span><br><span class=\"line\"><span class=\"comment\"># [10 11 12 13 14]</span></span><br><span class=\"line\"><span class=\"comment\"># [15 16 17 18 19]]</span></span><br><span class=\"line\"><span class=\"comment\">#[[ 0  5 10 15]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 1  6 11 16]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 2  7 12 17]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 3  8 13 18]</span></span><br><span class=\"line\"><span class=\"comment\"># [ 4  9 14 19]]</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-7-属性计算\"><a href=\"#2-7-属性计算\" class=\"headerlink\" title=\"2.7 属性计算\"></a>2.7 属性计算</h6><p>计算数组的秩，用 <code>ndim</code> 属性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">0</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">arr.resize(<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.ndim)</span><br><span class=\"line\"><span class=\"comment\"># 2</span></span><br></pre></td></tr></table></figure>\n\n<p>计算元素个数，用 <code>size</code> 属性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">0</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr.size)</span><br><span class=\"line\"><span class=\"comment\"># 20</span></span><br></pre></td></tr></table></figure>\n\n<p>数组的乘法，不改变原数组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">0</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\">arr1 = arr*<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr1)</span><br><span class=\"line\"><span class=\"comment\">#[  0  10  20  30  40  50  60  70  80  90 100 110 120 130 #140 150 160 170</span></span><br><span class=\"line\"><span class=\"comment\"># 180 190]</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-8-插入和删除\"><a href=\"#2-8-插入和删除\" class=\"headerlink\" title=\"2.8 插入和删除\"></a>2.8 插入和删除</h6><p><code>np.delete(ArrayName,index)</code> 删除特定元素, 不改变数组<code>np.insert(ArrayName,index,value)</code> 插入特定元素, 不改变数组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">arr = np.arange(<span class=\"number\">0</span>,<span class=\"number\">10</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">###########delete#####</span></span><br><span class=\"line\">arr1 =np.delete(arr,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr,arr1)</span><br><span class=\"line\"><span class=\"comment\">#[0 2 4 6 8] [0 2 6 8]</span></span><br><span class=\"line\"><span class=\"comment\">###########insert#######</span></span><br><span class=\"line\">arr2 = np.insert(arr,<span class=\"number\">1</span>,<span class=\"number\">999</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(arr,arr2)</span><br><span class=\"line\"><span class=\"comment\">#[0 2 4 6 8] [  0 999   2   4   6   8]</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2-9-缺失值和广播规则\"><a href=\"#2-9-缺失值和广播规则\" class=\"headerlink\" title=\"2.9 缺失值和广播规则\"></a>2.9 缺失值和广播规则</h6><h6 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h6><ul>\n<li>数组内排序：  使用 <code>np.sort(ArrayNameaxis )</code> ,返回排序结果不改变数组本身。  其中参数axis则表示按行排序还是按列排序。</li>\n</ul>"},{"title":"Python脚本自动更新PIP源","id":"980","date":"2022-04-18T08:47:02.000Z","_content":"\n默认的pip源都在国外服务器上，下载速度慢，为了提高下载包的速度，每次都需要加上国内镜像源镜像，或者自己加上个pip配置文件，Linux为`pip.conf`，Windows为`pip.ini`。因此可以使用一个python脚本自动帮我们配置好。 其中配置文件的格式都为：\n\n```\n[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple/\n[install]\ntrusted-host=pypi.tuna.tsinghua.edu.cn\n```\n\n源码 pipupdate.py:\n<!-- more -->\n```python\n#!/usr/bin/python\n# coding: utf-8\n\nimport platform\nimport os\n\nos_type = platform.system()\nif \"Linux\" == os_type:\n    fileDirPath = \"%s/.pip\" % os.path.expanduser('~')\n    filePath = \"%s/pip.conf\" % fileDirPath\n    if not os.path.isdir(fileDirPath):\n        os.mkdir(fileDirPath)\n    fo = open(filePath, \"w\")\n    fo.write(\n        \"[global]\\nindex-url=https://pypi.tuna.tsinghua.edu.cn/simple/\\n[install]\\ntrusted-host=pypi.tuna.tsinghua.edu.cn\\n\")\n    fo.close()\n    print(\"Configuration is complete\")\nelif \"Windows\" == os_type:\n    fileDirPath = \"%s\\\\pip\" % os.path.expanduser('~')\n    filePath = \"%s\\\\pip.ini\" % fileDirPath\n    if not os.path.isdir(fileDirPath):\n        os.mkdir(fileDirPath)\n    fo = open(filePath, \"w\")\n    fo.write(\n        \"[global]\\nindex-url=https://pypi.tuna.tsinghua.edu.cn/simple/\\n[install]\\ntrusted-host=pypi.tuna.tsinghua.edu.cn\\n\")\n    fo.close()\n    print(\"Configuration is complete\")\nelse:\n    exit(\"Your platform is unknow!\")\n```\n\n上述例子以清华大学镜像源为例，其中还可以将`index-url`和`trusted-host`换成别的镜像源 国内几个镜像源：\n\n> 阿里云 [http://mirrors.aliyun.com/pypi/simple/](http://mirrors.aliyun.com/pypi/simple/) 中国科技大学 [https://pypi.mirrors.ustc.edu.cn/simple/](https://pypi.mirrors.ustc.edu.cn/simple/) 豆瓣(douban) [http://pypi.douban.com/simple/](http://pypi.douban.com/simple/) 清华大学 [https://pypi.tuna.tsinghua.edu.cn/simple/](https://pypi.tuna.tsinghua.edu.cn/simple/) 中国科学技术大学 [http://pypi.mirrors.ustc.edu.cn/simple/](http://pypi.mirrors.ustc.edu.cn/simple/)\n\n直接运行源代码即可完成配置 ![image-20220418164541419](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220418164541419.png)\n\n此外，如果pip版本>=10.0.0，可以使用如下命令进行设置：\n\n```\npip config set global.trusted-host  mirrors.aliyun.com\npip config set global.index-url http://mirrors.aliyun.com/pypi/simple/\n```\n\n###### References\n\n[https://www.cnblogs.com/sunnydou/p/5801760.html](https://www.cnblogs.com/sunnydou/p/5801760.html)","source":"_posts/python脚本自动更新pip源.md","raw":"---\ntitle: Python脚本自动更新PIP源\ntags:\n  - Python\nid: '980'\ncategories:\n  - - 学习笔记\ndate: 2022-04-18 16:47:02\n---\n\n默认的pip源都在国外服务器上，下载速度慢，为了提高下载包的速度，每次都需要加上国内镜像源镜像，或者自己加上个pip配置文件，Linux为`pip.conf`，Windows为`pip.ini`。因此可以使用一个python脚本自动帮我们配置好。 其中配置文件的格式都为：\n\n```\n[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple/\n[install]\ntrusted-host=pypi.tuna.tsinghua.edu.cn\n```\n\n源码 pipupdate.py:\n<!-- more -->\n```python\n#!/usr/bin/python\n# coding: utf-8\n\nimport platform\nimport os\n\nos_type = platform.system()\nif \"Linux\" == os_type:\n    fileDirPath = \"%s/.pip\" % os.path.expanduser('~')\n    filePath = \"%s/pip.conf\" % fileDirPath\n    if not os.path.isdir(fileDirPath):\n        os.mkdir(fileDirPath)\n    fo = open(filePath, \"w\")\n    fo.write(\n        \"[global]\\nindex-url=https://pypi.tuna.tsinghua.edu.cn/simple/\\n[install]\\ntrusted-host=pypi.tuna.tsinghua.edu.cn\\n\")\n    fo.close()\n    print(\"Configuration is complete\")\nelif \"Windows\" == os_type:\n    fileDirPath = \"%s\\\\pip\" % os.path.expanduser('~')\n    filePath = \"%s\\\\pip.ini\" % fileDirPath\n    if not os.path.isdir(fileDirPath):\n        os.mkdir(fileDirPath)\n    fo = open(filePath, \"w\")\n    fo.write(\n        \"[global]\\nindex-url=https://pypi.tuna.tsinghua.edu.cn/simple/\\n[install]\\ntrusted-host=pypi.tuna.tsinghua.edu.cn\\n\")\n    fo.close()\n    print(\"Configuration is complete\")\nelse:\n    exit(\"Your platform is unknow!\")\n```\n\n上述例子以清华大学镜像源为例，其中还可以将`index-url`和`trusted-host`换成别的镜像源 国内几个镜像源：\n\n> 阿里云 [http://mirrors.aliyun.com/pypi/simple/](http://mirrors.aliyun.com/pypi/simple/) 中国科技大学 [https://pypi.mirrors.ustc.edu.cn/simple/](https://pypi.mirrors.ustc.edu.cn/simple/) 豆瓣(douban) [http://pypi.douban.com/simple/](http://pypi.douban.com/simple/) 清华大学 [https://pypi.tuna.tsinghua.edu.cn/simple/](https://pypi.tuna.tsinghua.edu.cn/simple/) 中国科学技术大学 [http://pypi.mirrors.ustc.edu.cn/simple/](http://pypi.mirrors.ustc.edu.cn/simple/)\n\n直接运行源代码即可完成配置 ![image-20220418164541419](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220418164541419.png)\n\n此外，如果pip版本>=10.0.0，可以使用如下命令进行设置：\n\n```\npip config set global.trusted-host  mirrors.aliyun.com\npip config set global.index-url http://mirrors.aliyun.com/pypi/simple/\n```\n\n###### References\n\n[https://www.cnblogs.com/sunnydou/p/5801760.html](https://www.cnblogs.com/sunnydou/p/5801760.html)","slug":"python脚本自动更新pip源","published":1,"updated":"2024-03-12T10:44:21.088Z","_id":"cltnrar4d0010jry191p7c2pz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>默认的pip源都在国外服务器上，下载速度慢，为了提高下载包的速度，每次都需要加上国内镜像源镜像，或者自己加上个pip配置文件，Linux为<code>pip.conf</code>，Windows为<code>pip.ini</code>。因此可以使用一个python脚本自动帮我们配置好。 其中配置文件的格式都为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url = https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host=pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>\n\n<p>源码 pipupdate.py:</p>\n<span id=\"more\"></span>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> platform</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">os_type = platform.system()</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">&quot;Linux&quot;</span> == os_type:</span><br><span class=\"line\">    fileDirPath = <span class=\"string\">&quot;%s/.pip&quot;</span> % os.path.expanduser(<span class=\"string\">&#x27;~&#x27;</span>)</span><br><span class=\"line\">    filePath = <span class=\"string\">&quot;%s/pip.conf&quot;</span> % fileDirPath</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(fileDirPath):</span><br><span class=\"line\">        os.mkdir(fileDirPath)</span><br><span class=\"line\">    fo = <span class=\"built_in\">open</span>(filePath, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    fo.write(</span><br><span class=\"line\">        <span class=\"string\">&quot;[global]\\nindex-url=https://pypi.tuna.tsinghua.edu.cn/simple/\\n[install]\\ntrusted-host=pypi.tuna.tsinghua.edu.cn\\n&quot;</span>)</span><br><span class=\"line\">    fo.close()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Configuration is complete&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> <span class=\"string\">&quot;Windows&quot;</span> == os_type:</span><br><span class=\"line\">    fileDirPath = <span class=\"string\">&quot;%s\\\\pip&quot;</span> % os.path.expanduser(<span class=\"string\">&#x27;~&#x27;</span>)</span><br><span class=\"line\">    filePath = <span class=\"string\">&quot;%s\\\\pip.ini&quot;</span> % fileDirPath</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(fileDirPath):</span><br><span class=\"line\">        os.mkdir(fileDirPath)</span><br><span class=\"line\">    fo = <span class=\"built_in\">open</span>(filePath, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    fo.write(</span><br><span class=\"line\">        <span class=\"string\">&quot;[global]\\nindex-url=https://pypi.tuna.tsinghua.edu.cn/simple/\\n[install]\\ntrusted-host=pypi.tuna.tsinghua.edu.cn\\n&quot;</span>)</span><br><span class=\"line\">    fo.close()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Configuration is complete&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    exit(<span class=\"string\">&quot;Your platform is unknow!&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>上述例子以清华大学镜像源为例，其中还可以将<code>index-url</code>和<code>trusted-host</code>换成别的镜像源 国内几个镜像源：</p>\n<blockquote>\n<p>阿里云 <a href=\"http://mirrors.aliyun.com/pypi/simple/\">http://mirrors.aliyun.com/pypi/simple/</a> 中国科技大学 <a href=\"https://pypi.mirrors.ustc.edu.cn/simple/\">https://pypi.mirrors.ustc.edu.cn/simple/</a> 豆瓣(douban) <a href=\"http://pypi.douban.com/simple/\">http://pypi.douban.com/simple/</a> 清华大学 <a href=\"https://pypi.tuna.tsinghua.edu.cn/simple/\">https://pypi.tuna.tsinghua.edu.cn/simple/</a> 中国科学技术大学 <a href=\"http://pypi.mirrors.ustc.edu.cn/simple/\">http://pypi.mirrors.ustc.edu.cn/simple/</a></p>\n</blockquote>\n<p>直接运行源代码即可完成配置 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220418164541419.png\" alt=\"image-20220418164541419\"></p>\n<p>此外，如果pip版本&gt;=10.0.0，可以使用如下命令进行设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip config set global.trusted-host  mirrors.aliyun.com</span><br><span class=\"line\">pip config set global.index-url http://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h6><p><a href=\"https://www.cnblogs.com/sunnydou/p/5801760.html\">https://www.cnblogs.com/sunnydou/p/5801760.html</a></p>\n","site":{"data":{}},"excerpt":"<p>默认的pip源都在国外服务器上，下载速度慢，为了提高下载包的速度，每次都需要加上国内镜像源镜像，或者自己加上个pip配置文件，Linux为<code>pip.conf</code>，Windows为<code>pip.ini</code>。因此可以使用一个python脚本自动帮我们配置好。 其中配置文件的格式都为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url = https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host=pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></table></figure>\n\n<p>源码 pipupdate.py:</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># coding: utf-8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> platform</span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\">os_type = platform.system()</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">&quot;Linux&quot;</span> == os_type:</span><br><span class=\"line\">    fileDirPath = <span class=\"string\">&quot;%s/.pip&quot;</span> % os.path.expanduser(<span class=\"string\">&#x27;~&#x27;</span>)</span><br><span class=\"line\">    filePath = <span class=\"string\">&quot;%s/pip.conf&quot;</span> % fileDirPath</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(fileDirPath):</span><br><span class=\"line\">        os.mkdir(fileDirPath)</span><br><span class=\"line\">    fo = <span class=\"built_in\">open</span>(filePath, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    fo.write(</span><br><span class=\"line\">        <span class=\"string\">&quot;[global]\\nindex-url=https://pypi.tuna.tsinghua.edu.cn/simple/\\n[install]\\ntrusted-host=pypi.tuna.tsinghua.edu.cn\\n&quot;</span>)</span><br><span class=\"line\">    fo.close()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Configuration is complete&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> <span class=\"string\">&quot;Windows&quot;</span> == os_type:</span><br><span class=\"line\">    fileDirPath = <span class=\"string\">&quot;%s\\\\pip&quot;</span> % os.path.expanduser(<span class=\"string\">&#x27;~&#x27;</span>)</span><br><span class=\"line\">    filePath = <span class=\"string\">&quot;%s\\\\pip.ini&quot;</span> % fileDirPath</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> os.path.isdir(fileDirPath):</span><br><span class=\"line\">        os.mkdir(fileDirPath)</span><br><span class=\"line\">    fo = <span class=\"built_in\">open</span>(filePath, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    fo.write(</span><br><span class=\"line\">        <span class=\"string\">&quot;[global]\\nindex-url=https://pypi.tuna.tsinghua.edu.cn/simple/\\n[install]\\ntrusted-host=pypi.tuna.tsinghua.edu.cn\\n&quot;</span>)</span><br><span class=\"line\">    fo.close()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Configuration is complete&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    exit(<span class=\"string\">&quot;Your platform is unknow!&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>上述例子以清华大学镜像源为例，其中还可以将<code>index-url</code>和<code>trusted-host</code>换成别的镜像源 国内几个镜像源：</p>\n<blockquote>\n<p>阿里云 <a href=\"http://mirrors.aliyun.com/pypi/simple/\">http://mirrors.aliyun.com/pypi/simple/</a> 中国科技大学 <a href=\"https://pypi.mirrors.ustc.edu.cn/simple/\">https://pypi.mirrors.ustc.edu.cn/simple/</a> 豆瓣(douban) <a href=\"http://pypi.douban.com/simple/\">http://pypi.douban.com/simple/</a> 清华大学 <a href=\"https://pypi.tuna.tsinghua.edu.cn/simple/\">https://pypi.tuna.tsinghua.edu.cn/simple/</a> 中国科学技术大学 <a href=\"http://pypi.mirrors.ustc.edu.cn/simple/\">http://pypi.mirrors.ustc.edu.cn/simple/</a></p>\n</blockquote>\n<p>直接运行源代码即可完成配置 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220418164541419.png\" alt=\"image-20220418164541419\"></p>\n<p>此外，如果pip版本&gt;=10.0.0，可以使用如下命令进行设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip config set global.trusted-host  mirrors.aliyun.com</span><br><span class=\"line\">pip config set global.index-url http://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h6><p><a href=\"https://www.cnblogs.com/sunnydou/p/5801760.html\">https://www.cnblogs.com/sunnydou/p/5801760.html</a></p>"},{"title":"TypeScript+Vue3.0笔记","id":"1057","date":"2022-05-07T08:46:40.000Z","_content":"\n## 一、什么是Typescript\n\n[TypeScript英文文档](https://www.typescriptlang.org/docs/)\n\n[TypeScript中文网，中文文档](https://www.tslang.cn/docs/home.html)\n\n> *   JavaScript的超集，遵循最新的 ES6、Es5 规范。TypeScript 扩展了 JavaScript的语法，可以编译为JavaScript，添加了类型系统的JavaScript，可以适用与任何规模的项目。\n>     \n> *   TypeScript 是由微软开发的一款开源的编程语言。TypeScript 更像后端 java、C#这样的面向对象语言可以让 JS开发大型企业项目。\n>     \n> *   谷歌也在大力支持 Typescript 的推广，谷歌的 angular2.x+就是基于 Typescript 语法。\n>     \n> *   最新的 Vue 、React 也可以集成 TypeScript。\n>     \n\n![image-20220507164550922](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220507164550922.png)\n\n### TypeScript特性\n\n#### 类型系统\n<!-- more -->\n从TypeScript的名字就可以看出来， **\\[类型\\]** 是其最核心的特性。\n\n我们知道，JavaScript是一门非常灵活的编程语言：\n\n> *   它没有约束类型，一个变量可能初始化时是字符串类型，过一会又被赋值为数字类型\n> *   由于隐式类型转化的存在，有的变量很难在运行前就确定\n> *   基于原型的的面向对象编程，使得原型上的属性或方法可以在运行时被修改。\n> *   函数是JavaScript中的一等公民，可以赋值给变量，也可以当做参数或返回值\n\n这种灵活性就像一把双刃剑，一方面使得JavaScript蓬勃发展，无所不能，从2013年开始就一直蝉联最普遍使用的编程语言排行榜冠军；另一方面也使得的代码质量参差不齐，维护成本高，运行错误多。\n\n而TypeScript的 **类型** 系统，很大程度弥补JavaScript的缺点。\n\n#### TypeScript是静态类型\n\n类型系统按照 \\[类型检查的时机\\] 来分类，可以分为动态类型和静态类型。\n\n动态类型是指在运行时才会进行类型检查，这种语言的类型错误往往会导致运行时错误。JavaScript是一门解释型语言，没有编译阶段，所以他是动态类型，以下这段代码在运行时才会报错：\n\n```js\nlet foo = 1；\nfoo.split(' ');\n//Uncaught TypeError: foo.split is not a function\n//运行时报错：foo.split不是一个函数，造成线上bug\n```\n\n静态类型是指编译阶段就能确定每个变量的类型，这种语言的类型错误往往会导致语法错误。TypeScript在运行前需要先编译为JavaScript，而在编译阶段就会进行类型检查，所以 **TypeScript是静态类型** ，这段TypeScript代码在编译阶段就会报错：\n\n```typescript\nlet foo = 1；\nfoo.split(' ');\n//Property 'split' does not exist on type 'number'\n//编译时报错：数字没有split方法，无法通过编译\n```\n\n你可能会奇怪，这段TypeScript代码看上去和JavaScript没有什么区别呀。\n\n没错！大部分JavaScript代码都只需要经过少量的修改（或者完全不用修改）就变成了TypeScript的代码，这得益于TypeScript强大的 **类型推论**，即使不去手动声明变量 foo 的类型，也能在变量初始化的时候自动推论出他是一个 `number` 类型。\n\n完整的TypeScript代码是这样的：\n\n```typescript\nlet foo: number = 1;\nfoo.split(' ');\n//Property 'split' does not exist on type 'number'\n//编译时报错：数字没有split方法，无法通过编译\n```\n\n#### TypeScript是弱类型\n\n类型系统按照 \\[是否允许隐式类型转换\\] 来分类，可分为强类型和弱类型。\n\n以下这段代码不管是在JavaScript还是TypeScript中都是正常运行的，运行时数字1会被隐式类型转化为字符串 '1' ，加号 ‘+’ 被识别为字符串拼接，打印结果为 '11':\n\n```js\nconsole.log(1 + '1');\n//打印字符串 '11'\n```\n\nTypeScript是完全兼容JavaScript的，他不会修改JavaScript运行时的特性，他们都是 **弱类型语言**。\n\n## 二、安装并编译TypeScript\n\n安装TypeScript需要NodeJS环境，如果电脑没有npm命令，可以去官网下载并安装NodeJS\n\n官网地址：[Node.js (nodejs.org)](https://nodejs.org/en/)\n\n![image-20220507113822749](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220507113822749.png)\n\nTypeScript安装命令\n\n```shell\nnpm install -g typescript\n# 通过tsc --version可以查看版本号以确保是否安装成功\n```\n\n![image-20220507121610924](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220507121610924.png)\n\n安装以后编译ts文件很简单，我们在电脑上新建一个目录`code`，新建一个文件`index.ts`,然后在当前目录下输入：\n\n```shell\ntsc index.ts\n```\n\n编译完之后会在当前目录下输出一个`index.js`文件，则编译成功。如果想指定输出目录：\n\n```\ntsc --outFile ./js/index.js index.ts\n```\n\n## 三、基本的数据类型\n\n#### 布尔值\n\n布尔值是最基础的数据类型，在TypeScript中，使用`boolean`定义布尔值类型：\n\n```typescript\nlet isDone:boolean = false;\n```\n\n#### 数值\n\n使用`number`定义数值类型：\n\n```typescript\nlet mynum:number = 1;\n```\n\n#### 字符串\n\n使用`string`定义字符串类型：\n\n```typescript\nlet mystring:string = 'TypeScript字符串'\n//模板字符串,要用反引号括起来\nlet sentence:string = `Hello,This is ${mystring}.`;\n//也可以使用js的加号 + 语法\nlet sentence2:string = 'Hello,This is'+mystring;\n```\n\n#### 空值\n\nJavaScript没有空值(void)的概念，在TypeScript中，用`void`表示没有任何返回值的函数：\n\n```typescript\nfunction alertName():void{\n    alert('my name is tom');\n}\n```\n\n声明一个`void`类型的变量没有什么用，因为你只能将它赋值为`undefined`和`null`\n\n```typescript\nlet unsable:void = undefined;\n```\n\n#### Null和Undefined\n\n在TypeScript中，默认情况下`null`和`undefined`是所有类型的子类型。 就是说你可以把 `null`和`undefined`赋值给`number`类型的变量。可以使用`null`和`undefined`来定义这两个原始数据类型：\n\n```typescript\nlet n:null = null;\nlet u:undefined = undefined\n```\n\n#### 数组\n\nTypeScript像JavaScript一样可以操作数组元素。有两种方式定义数组。\n\n第一种是元素类型后加 `[]`\n\n```typescript\nlet list:number[] = [1,2,3];\n```\n\n第二种是使用数组泛型，`Array<元素类型>`\n\n```typescript\nlet list:Array<number> = [1,2,3];\n```\n\n#### 元组\n\n元组（Tuple）类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。但**定义变量时类型的顺序要一致**。\n\n```typescript\nlet x : [string,number];\nx = ['hello',10];\n//正常运行\nx = [20,'HELLO'];\n//报错：不能将类型“number”分配给类型“string”。ts(2322)；不能将类型“string”分配给类型“number”。ts(2322)\n```\n\n当访问一个已知索引的元素，会得到正确的类型：\n\n```typescript\nconsole.log(x[0].substr(1)); // 正常运行\nconsole.log(x[1].substr(1)); // 报错： 'number' does not have 'substr'\n```\n\n当访问越界元素时：\n\n```typescript\nx[3] = 'World';\n//报错：不能将类型“\"World\"”分配给类型“undefined”。ts(2322)长度为 \"2\" 的元组类型 \"[string, number]\" 在索引 \"2\" 处没有元素。ts(2493)\n```\n\n#### Object\n\n`object`表示非原始类型，也就是除`number`，`string`，`boolean`，`symbol`，`null`或`undefined`之外的类型。\n\n使用`object`类型，就可以更好的表示像`Object.create`这样的API。例如：\n\n```typescript\ndeclare function create(o:objectnull):void;\ncreate({pro:0});\ncreate(null);\ncreate(undefined);\ncreate();//报错：应有 1 个参数，但获得 0 个。ts(2554)\ncreate(42);//报错：类型“number”的参数不能赋给类型“object”的参数。ts(2345)\ncreate(\"string\"); //报错： 类型“string”的参数不能赋给类型“object”的参数。ts(2345)\ncreate(false); //报错：类型“boolean”的参数不能赋给类型“object”的参数。ts(2345)\n```\n\n## 四、任意值(Any)\n\n任意值(Any)用来表示允许赋值为任意类型。\n\n如果是一个普通类型，在赋值过程中改变类型是不被允许的：\n\n```typescript\nlet myFavoriteNum:string = 'seven';\nmyFavoriteNum = 7;\n//报错：不能将类型“number”分配给类型“string”。ts(2322)\n```\n\n但如果是`any`类型，则允许被赋值为任意类型。\n\n```typescript\nlet myFavoriteNum:any = 'seven';\nmyFavoriteNum = 7;\n```\n\n在任意值上访问任何属性都是允许的：\n\n```typescript\nlet anything: any = 'hello';\nconsole.log(anything.Myname);\nconsole.log(anything.myname.length);\n```\n\n也允许调用任何方法:\n\n```typescript\nlet anything:any = 'heloo'\nanything.setName('Tom');\nanything.setName('Allen').sayHello();\nanything.Myname.setFirstName('Cat');\n```\n\n所以，**声明一个任意值(any)变量后，对它的任何操作，返回的内容的类型都是任意值**。\n\n## 五、类型推论\n\n如果没有明确的指定类型，那么TypeScript会依照类型推论（Type Inference）的规则推断出一个类型。\n\n以下代码虽然没有指定类型，但在编译时会出错：\n\n```typescript\nlet myFavoriteNum = 'seven';\nmyFavoriteNum = 7;\n//报错：不能将类型“number”分配给类型“string”。ts(2322)\n```\n\n事实上，它等价于：\n\n```typescript\nlet myFavoriteNum:string = 'seven';\nmyFavoriteNum = 7;\n//报错：不能将类型“number”分配给类型“string”。ts(2322)\n```\n\nTypeScript在没有明确指定变量类型时，会对变量的类型进行推测，这就是类型推论。\n\n**如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 `any`类型而完全不被类型检查：**\n\n```typescript\nlet myFavoriteNum;\nmyFavoriteNum = 'seven';\nmyFavoriteNum = 7;\n```\n\n## 六、联合类型\n\n联合类型(Union Types)表示取值可以为多种类型中的一种。\n\n举个例子\n\n```typescript\nlet myFavoriteNum:stringnumber;\nmyFavoriteNum = 'seven';\nmyFavoriteNum = 7;\n```\n\n从代码可以看出来联合类型使用 来分隔每一个类型。\n\n这里的 `let myFavoriteNum:stringnumber;`的含义是允许`myFavoriteNum`为`string`和`number`类型，而不能是其他类型。\n\n比如下面这个就会报错：\n\n```typescript\nlet myFavoriteNum:stringnumber;\nmyFavoriteNum = true;\n//报错：不能将类型“boolean”分配给类型“string  number”。ts(2322)\n```\n\n#### 联合类型的属性或方法\n\n当TypeScript不确定一个联合类型的变量到底是哪个类型的时候，我们 **只能访问此联合类型的 共有属性或共有方法**。\n\n```typescript\nfunction getLength(something:numberstring):number{\n    return something.length;\n}\n//报错:类型“string  number”上不存在属性“length”。类型“number”上不存在属性“length”。ts(2339)\n```\n\n上例中，因为`number`类型不存在`length`属性，所以会报错，正确的使用可以这样：\n\n```typescript\nfunction getLength(something:numberstring):string{\n    return something.toString();\n}\n//`toString()`方法是number和string类型的共有方法。\n```\n\n联合类型变量在被赋值的时候，会根据类型推论的推断变量的类型：\n\n```typescript\nlet myFavoriteNum:numberstring;\nmyFavoriteNum = 'seven';\nconsole.log(myFavoriteNum.length);\n//正常运行\nmyFavoriteNum = 7;\nconsole.log(myFavoriteNum.length);\n//报错：类型“number”上不存在属性“length”。ts(2339)\n```\n\n上例中，第二行的myFavoriteNum被推断成了 `string`型，访问 `length`属性就不会报错\n\n而第四行的myFavoriteNum被推断为`number`型，访问`length`属性就会报错\n\n## 七、接口\n\n在TypeScript中，我们使用 `interface` 来定义一个接口类型的对象。\n\n#### 什么是接口\n\n在面向对象语言中，接口是一个重要的概念，它是对行为的抽象，而具体的行为则需要类去实现。\n\ntypesc的核心原则之一是对之所具有的结构进行类型检查。有时候被称作“鸭式辨型法”或者“结构性子类型化”。在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。\n\n举个例子\n\n```typescript\ninterface Person{\n    name:string;\n    age:number;\n    sex:string;\n};\n\nlet Allen:Person = {\n    name:'Allen',\n    age:28,\n    sex:'male'\n};\n//正常运行\n```\n\n上面例子中，我们定义一个接口Person，接着定义一个变量 Allen，他的类型是Person。这样，我们就约束了Allen的形状必须是和接口Person一致，如果少了XX属性就会报错，同理，多了未定义的XX属性也会报错：\n\n```typescript\ninterface Person{\n    name:string;\n    age:number;\n    sex:string;\n};\n\nlet Tom:Person = {\n    name:'Tom',\n    age:18,\n};\n//Tom报错：类型 \"{ name: string; age: number; }\" 中缺少属性 \"sex\"，但类型 \"Person\" 中需要该属性。ts(2741) index.ts(23, 2): 在此处声明了 \"sex\"。\n//原因是Tom少了sex属性\n\nlet Ketty:Person = {\n    name:'Ketty',\n    age:20,\n    sex:'female',\n    grade:12\n}\n//报错：不能将类型“{ name: string; age: number; sex: string; grade: number; }”分配给类型“Person”。对象文字可以只指定已知属性，并且“grade”不在类型“Person”中。ts(2322)\n//原因是Ketty多了grade属性\n```\n\n定义Tom变量却少了sex属性就会报错，同理，多了未定义的grade属性也会报错。\n\n可见，**赋值的时候，变量的结构必须和接口的结构保持一致**。\n\n#### 可选属性\n\n有时候我们希望不要完全匹配一个接口的所有结构，那么我们可以用可选属性(在定义接口时，属性后加上 `?`关键字)：\n\n```typescript\ninterface Person{\n    name:string;\n    age:number;\n    sex?:string; //可选属性 sex\n};\nlet Allen:Person = {\n    name:'Allen',\n    age:28,\n    sex:'male'\n};\n//正常运行\nlet Tom:Person = {\n    name:'Tom',\n    age:18,\n};\n//正常运行\n```\n\n#### 任意属性\n\n有时候我们希望一个接口允许有任意的属性，可以用 `[属性名:类型名]`定义任意属性\n\n```typescript\ninterface Person{\n    name:string;\n    age?:number;\n    [propName:string]:any;\n};\n\nlet Allen: Person = {\n    name:'Allen',\n    gender:'female' //添加gender属性是允许的\n};\n\nlet Tom:Person = {\n    name:'Tom',\n    gender:'male',\n    gender2:'male',\n    ID:123,\n    123:'asdasd',\n    isDone:false\n}\n//添加任意多个属性且类型不一致也是允许的，有点违背接口的初衷\n```\n\n使用 `[propName:string]:any;`定义了任意属性取`string`类型的值。\n\n任意属性有点违背接口的初衷，既然已经定义了接口的结构，就不能任意去增加修改他的结构了\n\n#### 只读属性\n\n有时候我们希望对象中一些字段只能在创建时被赋值，后续只能可读不可写，那么可以用 `readonly`关键字定义只读属性：\n\n```typescript\ninterface Person{\n    readonly id:number;\n    name:string;\n    age:number;\n};\nlet Tom:Person = {\n    id:12345,\n    name:'Tom',\n    age:19    \n}\nTom.age =  29 //不报错\nTom.id = 12345//报错：无法分配到 \"id\" ，因为它是只读属性。ts(2540)\n```\n\n上述例子中`id`属性被设置为只读属性，当再次赋值时就会报错。\n\n## 八、数组\n\n数组是存放多个元素的集合\n\n最简单的方法是使用 \\[ 类型 + 方括号\\] 来表示数组：\n\n```typescript\nlet fibonacci:number[] = [1,1,2,3,5,8,13];\n```\n\n数组中的项不允许出现其他的类型：\n\n```typescript\nlet fibonacci:number[] = [1,'1',2,3,5,8,13];\n//报错：不能将类型“string”分配给类型“number”。ts(2322)\n```\n\n数组的一些方法的参数也会根据数组在定义时约定的类型进行限制：\n\n```typescript\nlet fibonacci:number[] = [1,1,2,3,5,8,13];\nfibonacci.push(21);\n//正常运行\nfibonacci.push('34');\n//报错：类型“string”的参数不能赋给类型“number”的参数。ts(2345)\n//原因是push()方法只允许传入number类型的参数，而'34'是字符串字面量类型，后续章节会介绍\n```\n\n也可以指定一个 any 类型数组：\n\n```typescript\nlet list:any[] = ['Tom',18,'male',true,{website:'https://wangwangyz.site'}];\n```\n\n## 九、函数01\n\n#### 函数声明\n\n在JavaScript中，有两种常见的定义函数的方式——函数声明(Function Declaration)和函数表达式(Function Expression)：\n\n```javascript\n//函数声明(Function Declaration)\nfunction sum(x,y){\n    return x+y;\n}\n\n//函数表达式(Function Expression)\nlet mySum = function (x,y){\n    return x+y;\n};\n```\n\n一个函数有输入和输出，要在TypeScript中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义比较简单：\n\n```typescript\nfunction sum(x:numebr,y:number):number{\n    return x+y;\n}\n```\n\n注意，**输入多余(或少于)、类型不匹配的参数，是不被允许的**：\n\n```typescript\nfunction sum(x:numebr,y:number):number{\n    return x+y;\n}\nsum(1,2,3)//报错：应有 2 个参数，但获得 3 个。ts(2554)\nsum(1)//报错：应有 2 个参数，但获得 1 个。ts(2554)\nsum('srt',1)//报错：类型“string”的参数不能赋给类型“number”的参数。ts(2345)\n```\n\n#### 函数表达式\n\n如果我们现在写一个对函数表达式(Function Expression)的定义，可能会写成这样：\n\n```typescript\nlet mysum = function(x:number,y:number):number{\n    return x + y;\n};\n```\n\n这是可以通过编译的，不过事实上，上面的代码只对 **等号右侧的匿名函数**进行了类型定义，而等号左边的**mysum**，是通过赋值操作进行类型推论而推断出来的。如果需要我们手动给**mysum**添加类型，则是这样：\n\n```typescript\n//这里用的是类型推断\n//let mysum = function(x:number,y:number):number{\n//  return x + y;\n//};\n\n//如果是手动指定类型，应该是这样\nlet mysum:(x:number, y:number) => number = function (x:number,y:number):number{\n    return x + y;\n};\n```\n\n注意不要混淆了TS中的 `=>` 和ES6中的 `=>`.\n\n在TypeScript的类型定义中，`=>`用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。\n\n在ES6中，`=>`叫做箭头函数，应用十分广泛，可以参考ES6的箭头函数：[参考链接：阮一峰ES6箭头函数教程](https://www.bookstack.cn/read/es6-3rd/spilt.5.docs-function.md)\n\n#### 用接口定义函数的形状\n\n我们也可以使用接口的方式来定义一个符合某个形状的函数：\n\n```typescript\ninterface SearchFunc{\n    (source:string,subString:string):boolean;\n}\n\nlet mySearchFunc:SearchFunc;\nmySearchFunc = function(source:string,subString:string){\n    return source.search(subString) !== -1;\n}\n\nlet mySearchFunc1:SearchFunc;\nmySearchFunc1 = function(source:number,subString:string){\n    return 1==1;\n}//报错：不能将类型“(args1: number, args2: string) => boolean”分配给类型“SearchFunc”。参数“args1”和“source” 的类型不兼容。不能将类型“string”分配给类型“number”。ts(2322)\n\nlet mySearchFunc2:SearchFunc;\nmySearchFunc2 = function(source:string,subString:string){\n    return 1;\n}//报错：不能将类型“(args1: string, args2: string) => number”分配给类型“SearchFunc”。不能将类型“number”分配给类型“boolean”。ts(2322)\n```\n\n采用函数表达式接口定义函数的方式是，对等号左侧进行类型限制，可保证以后对函数名赋值时保证 **参数个数、参数类型、返回值类型** 不变。\n\n## 十、函数02\n\n#### 可选参数\n\n前面提到，多余的(或者少于要求的)参数，是不允许的。那么如何定义可选的参数呢？\n\n与接口中的可选属性类似，我们用关键字 `?`表示可选的参数：\n\n```typescript\nfunction buildName(firstName:string, lastName?:string){\n    if(lastName){\n        return firstName + \" \" + lastName;\n    }else {\n        return firstName;\n    }\n}\n\nlet tomcat = buildName(\"Tom\", \"cat\");\nlet tom = buildName(undefined, \"Tom\");\n```\n\n需要注意的是，**可选参数必须接在必须参数的后面**，换句话说，**可选参数后面不允许再出现必须参数了**。(这一点和Python很像)\n\n```typescript\nfunction buildName(firstName?:string, lastName:string){//报错：必选参数不能位于可选参数后。ts(1016)\n    if(lastName){\n        return firstName + \" \" + lastName;\n    }else {\n        return firstName;\n    }\n}\nlet tomcat = buildName(\"Tom\", \"cat\");\nlet tom = buildName(undefined, \"Tom\");\n```\n\n#### 参数默认值\n\n在ES6中，我们允许给函数的参数添加默认值，**TypeScript会将添加了默认值的参数识别为可选参数**：\n\n```typescript\nfunction buildName(firstName:string, lastName:string = 'Cat'){\n    return firstName + \" \" + lastName;\n}\nlet tomcat = buildName(\"Tom\", \"ccccat\");\nlet tom = buildName(\"Tom\");\n```\n\n此时就不受 \\[可选参数必须接在必需参数后面\\] 的限制了：\n\n```typescript\nfunction buildName(firstName:string = 'Tom', lastName:string){\n    return firstName + \" \" + lastName;\n}\nlet tomcat = buildName(\"Tom\", \"cat\");\nlet tom = buildName(undefined, \"Tom\");\n```\n\n## 十一、函数03\n\nES6中，可以使用 `...rest` 的方式获取函数中的剩余参数(rest参数):\n\n```typescript\nfunction push(array, ...items){//参数 \"array\" 隐式具有 \"any\" 类型\n    items.forEach(function(item){\n           array.push(item);\n    });\n}\nlet a :any[] = [];\npush(a,1,2,3,4);\n```\n\n事实上，`items` 是一个数组，所以我们可以用数组的类型来定义它：\n\n```typescript\nfunction push(array:any[], ...items:any[]){\n        items.forEach(function(item){\n              array.push(item);\n    });\n}\nlet a = [];\npush(a,1,2,3,4);\n```\n\n注意，rest参数只能是最后一个参数，关于rest参数，可以参考：[阮一峰ES6 rest参数详解](https://www.bookstack.cn/read/es6-3rd/spilt.2.docs-function.md)\n\n#### 重载\n\n重载允许一个函数接收不同数量或类型的参数，并做不同处理。\n\n比如，我们需要实现一个函数`reverse`，输入数字123的时候，输出反转的数字321，输入字符串hello的时候，输出反转的字符串olleh。\n\n利用联合类型，我们可以这么做：\n\n```typescript\nfunction reverse(x: numberstring):number  string  void{\n    if(typeof x === 'number'){\n        return Number(x.toString().split('').reverse().join(''));\n    }else if (typeof x === 'string'){\n            return x.split('').reverse().join('');\n}\n```\n\n然而这样有个缺点，就是不能够精确地表达，输入为数字的时候，输出应该也为数字，输入为字符串的时候，输出也应该为字符串。\n\n这时，我们可以使用 **重载** 定义多个 `reverse`的函数类型：\n\n```typescript\nfunction reverse(x:number):number;\nfunction reverse(x:string):string;\nfunction reverse(x:numberstring):numberstringvoid{\n    if(typeof x === 'number'){\n        return Number(x.toString().split('').reverse().join(''));\n    }else if (typeof x === 'string'){\n        return x.split('').reverse().join('');\n} \n}\nreverse(123) // function reverse(x: number): number (+1 overload)\nreverse('12345') // function reverse(x: number): number (+1 overload)\n```\n\n上例中，我们重复定义了多次函数`reverse`，前两次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确看到前两个提示。\n\n注意，TypeScript中会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。\n\n## 十二、类型断言01\n\n基本语法、将一个联合类型断言为其中一个类型。\n\n类型断言(Type Assertion)可以用来手动指定一个值的类型\n\n> 通过_类型断言_这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript会假设你，程序员，已经进行了必须的检查。\n> \n> ——————引自[基础类型 · TypeScript中文网 · TypeScript——JavaScript的超集 (tslang.cn)](https://www.tslang.cn/docs/handbook/basic-types.html)\n\n#### 基本语法\n\n有两种表达：\n\n> *   值 as 类型\n>     \n> *   <类型>值\n>     \n\n在tsx语法中（React的jsx语法的ts版）中必须使用 `值 as 类型`表示类型断言。\n\n故建议大家在使用类型断言时，统一使用 `值 as 类型`这样的语法。\n\n#### 将一个联合类型断言为其中一个类型\n\n之前提过，当TypeScript中不确定一个联合类型的变量到底是哪个类型的时候，我们 **只能访问联合类型所有类型的共有属性或方法**：\n\n```typescript\ninterface Cat{\n    name:string;\n    run():void;\n}\ninterface Fish{\n    name:string;\n    swim():void;\n}\nfunction getName(animal:CatFish):string{\n    return animal.name;\n//正常运行\n}\n\nfunction getName(animal:CatFish):string{\n    return animal.run();\n//报错：类型“Cat  Fish”上不存在属性“run”。类型“Fish”上不存在属性“run”。ts(2339)\n}\n```\n\n而有时候，我们确实需要在还不确定类型的时候就访问其中一个类型的属性或者方法，比如：\n\n```typescript\ninterface Cat{\n    name:string;\n    run():void;\n}\ninterface Fish{\n    name:string;\n    swim():void;\n}\nfunction isFish(animal:CatFish):boolean{\n    if(typeof animal.swim === 'function'){\n        return true;\n    }\n    return false;\n}\n//报错：类型“Cat  Fish”上不存在属性“swim”。类型“Cat”上不存在属性“swim”。ts(2339)\n```\n\n上述例子中，获取 `animal.swim`时会报错，\n\n此时可以使用类型断言，将animal断言为Fish：\n\n```typescript\nfunction isFish(animal:CatFish):boolean{\n    //将animal断言为Fish\n    if(typeof (animal as Fish).swim === 'function'){\n        return true;\n    }\n    return false;\n}\n```\n\n这样就可以解决访问animal.swim时的报错问题了。\n\n不过需要注意的是，类型断言只能够 ’欺骗‘TypeScript编译器，无法避免运行时的错误，滥用类型断言反而会导致运行时错误：\n\n```typescript\nfunction swim(animal:CatFish):void{\n    (animal as Fish).swim();\n}\nconst tom:Cat = {\n    name:'Tom',\n    run(){ console.log(\"I'm running...\");}\n};\nswim(tom)\n//编译时不报错，运行时报错：TypeError：animal.swim is not a function\n```\n\n上面例子中，编译时不会报错，但是运行时会报错，当我们执行 tsc命令编译时会看到输出的文件无内容。\n\n原因是因为 `(animal as Fish).swim()` 这段代码隐藏了 animal可能为 Cat 的情况，将 animal 直接断言为 Fish了，而TypeScript编译器信任了我们的断言，故在调用 `swim()`时编译没有错误。\n\n总之，**使用断言一定要格外小心**，尽量避免断言后调用方法或引用深层属性。以减少不必要的 **运行时错误**。\n\n## 十三、类型断言02\n\n将一个父类断言为具体的子类\n\n当类之间有继承关系时，类型断言也是很常见的：\n\n```typescript\nclass ApiError extends Error{\n    code:number = 0;\n}\nclass HttpError extends Error{\n    statusCode:number = 200;\n}\n\nfunction isApiError(myError:Error){\n    if(typeof (myError as ApiError).code === 'number'){\n        return true;\n    }\n    return false;\n}\n```\n\n上述例子中，我们声明了函数isApiError，它用来判断传入的参数是不是ApiError类型，为了实现这样一个函数，它的参数类型肯定得是比较抽象的父类Error，这样的话这个函数就能接受Error或他的子类作为参数了。\n\n但是由于父类Error中没有code属性，故直接获取myError.会报错：类型“Error”上不存在属性“code”。这时候需要使用类型断言获取(myError as ApiError).code。\n\n大家可能会注意到，在这个例子中会有一个更合适的方式来判断是不是ApiError，那就是使用instaceof：\n\n```typescript\nclass ApiError extends Error{\n    code:number = 0;\n}\nclass HttpError extends Error{\n    statusCode:number = 200;\n}\nfunction isApiError(myError:Error){\n    if(myError instanceof ApiError){\n        return true;\n    }\n    return false;\n}\n```\n\n上面的例子中，用instanceof确实是一个很好的方式，因为ApiError是一个JavaScript的类，能够通过instanceof判断是否是它的实例。\n\n但是有的情况下ApiError和HttpError不是一个真正的类，而只是一个TypeScript接口，接口是一个类型，不是一个真正的值，它在编译结果中会被删除，当然就无法用instanceof来判断：\n\n```typescript\ninterface ApiError extends Error{\n    code:number;\n}\ninterface HttpError extends Error{\n    statusCode:number;\n}\nfunction isApiError(myError:Error){\n    if(myError instanceof ApiError){\n        return true;\n    }\n    return false;\n}\n//报错：“ApiError”仅表示类型，但在此处却作为值使用\n```\n\n此时就只能用类型断言，通过判断是否存在 code 属性来判断传入的参数是否为 ApiError了：\n\n```typescript\ninterface ApiError extends Error{\n    code:number;\n}\ninterface HttpError extends Error{\n    statusCode:number;\n}\nfunction isApiError(myError:Error){\n    if(typeof (myError as ApiError).code === 'number'){\n        return true;\n    }\n    return false;\n}\n```\n\n## 十四、类型断言03\n\n将任何一个类型断言为 `any`\n\n理想情况下，TypeScript的类型系统运转良好，每个值的类型都具体而精确。\n\n当我们引用一个在此类型上不存在的属性或方法时，会报错：\n\n```typescript\nconst foo: number = 1;\nconsole.log(foo.length);\n//报错：类型“number”上不存在属性“length”。ts(2339)\n```\n\n上面例子中，数字类型的变量foo上是没有length属性的，故TypeScript编译时给出了错误提示。\n\n这种错误提示显然是很有用的。\n\n但有的时候，我们非常确定这段代码不会出错，比如：\n\n```typescript\nwindow.foo = 1;\n//报错：类型“Window & typeof globalThis”上不存在属性“foo”。ts(2339)\n```\n\n上面的例子中，我们需要将window上添加一个foo属性，但是TS会给我们报错，提示window不存在属性foo。\n\n此时我们可以使用`as any`临时将window断言为`any`类型：\n\n```typescript\n(window as any).foo = 1;\n```\n\n在 `any` 类型中，**访问任何属性都是可以的**。\n\n需要注意的是，将一个变量断言为any可以说是解决TypeScript中类型问题的最后一个手段。\n\n但是它极有可能真正掩盖了类型错误，如果不是十分确定，就不要使用 `as any`。\n\n总之，一方面不要滥用 any类型，另一方面也不要忽略他带来的作用。我们需要在类型的严格性和开发的方便性之间平衡利弊，才能发挥TypeScript最大的价值。\n\n## 十五、类型断言04\n\n将`any`类型断言为一个具体的类型\n\n在日常的开发中，我们不可避免的需要处理any类型的变量，它们可能是由于第三方库未能定义好自己的类型，也可能是历史遗留的或其它人编写的烂代码，还可能是受到TypeScript类型系统的限制而无法精确定义类型的场景。\n\n遇到`any`类型的变量时，我们可以选择无视他，任由他滋生更多的`any`类型。\n\n我们可以选择改进它，通过类型断言及时地吧`any`断言为精确的类型，亡羊补牢，使我们的代码向着可维护性高的目标发展。\n\n举例来说，历史遗留的代码中有个getCacheData函数，它的返回值是any:\n\n```typescript\nfunction getCacheData(key:string):any{\n    return (window as any).cache[key];\n}\n```\n\n那么我们在使用这个getCacheData函数的时候，最好能够将调用了getCacheData之后的返回值断言为一个精确的类型，这样就方便了后续的操作：\n\n```typescript\nfunction getCacheData(key:string):any{\n    return (window as any).cache[key];\n}\n\ninterface Cat{\n    name:string;\n    run():void;\n}\n\nconst tom = getCacheData('tom') as Cat;\ntom.run();\n```\n\n上面例子中，我们调用完getCacheData之后，立即将她断言为Cat类型，这样的话明确了tom的类型，后续对tom的访问时就有了代码补全，提高了代码的可维护性。\n\n> ##### 题外话\n> \n> 个人认为在遇到较多any类型变量时，尽量在接下来少用或者不用`any`类型，根据IDE给出的提示将类型规范化，能减少项目80%的潜在bug。\n> \n> #### 解决any出现次数过次的问题\n> \n> 复杂类型的类型定义\n> \n> 1.  细拆出重复定义的公共项，使用extents 关键字或者 & 交叉运算符来进行整合，提高利用率； 例1：\n>     \n>     ```typescript\n>     1. // bad\n>       interface Person {\n>           firstName: string;\n>         lastName: string;\n>        }\n>     \n>     interface PersonWithBirthDate {\n>       firstName: string;\n>      lastName: string;\n>      birth: Date;\n>     }\n>     // good\n>     interface Person {\n>       firstName: string;\n>      lastName: string;\n>     }\n>     interface PersonWithBirthDate extends Person {\n>       birth: Date;\n>     }\n>     ```\n>     \n>     例2：\n>     \n>     ```typescript\n>     export type List = {\n>         creatTime: number  string;\n>         creator: string;\n>         desc: string;\n>         id: string;\n>         modifier: string;\n>         token: string;\n>         updateTime: number  string;\n>       };\n>     \n>     export type ProjectList = {\n>      id: string;\n>      projectName: string;\n>     } & List;\n>     \n>     export type TaskList = {\n>      name: string;\n>     } & List;\n>     ```\n>     \n>     新的问题：如果很多字段要打问号怎么办？下面会讲到\n>     \n> 2.  使用typeof定义一个类型匹配初始值（常见的使用场景之一：固定的Schema配置适用）\n>     \n>     ```typescript\n>     const INIT_OPTIONS= {\n>       width: 640,\n>      height: 480,\n>      color: \"#00FF00\",\n>      label: \"VGA\",\n>     };\n>     \n>     interface Options {\n>       width: number;\n>      height: number;\n>      color: string;\n>      label: string;\n>     }\n>     \n>     // 快速获取配置对象的形状\n>     type Options = typeof INIT_OPTIONS;\n>     ```\n>     \n> 3.  使用Ts 内置类型来解决？号太多的问题\n>     \n>     *   Utility Types\n>     *   充分利用lib.es5.d.ts中的Partial, Pick , Extract, Omit等方法，扩展第三方、或已存在的类型，不要重复定义完全一样的字段。\n> \n> 参考链接：[TypeScript：为什么不要用any声明类型 - 掘金 (juejin.cn)](https://juejin.cn/post/7074832632541872136)\n> \n> [规范TS项目Any类型的使用\\_Jasmine\\_jiamei的博客-CSDN博客\\_ts 对象属性any](https://blog.csdn.net/weixin_43827779/article/details/120343486)\n\n## 十六、类型断言05\n\n类型断言的限制\n\n从上面的例子可以总结出：\n\n> *   联合类型可以被断言为其中一个类型\n>     \n> *   父类可以被断言为子类\n>     \n> *   任何类型都可以被断言为 `any`\n>     \n> *   `any`可以被断言为任意类型\n>     \n\n那么类型断言有没有什么限制呢？是不是任何一个类型都可以被断言为任何另一个类型呢？\n\n答案是否定的——并不是任何一个类型都可以被断言为任何另一个类型。\n\n具体来说，若A、B两者具有共同的属性或者方法，那么A能够被断言为B，B也能够断言为A。\n\n下面我们通过一个简化的例子，来理解类型断言的限制：\n\n```typescript\n//两者是有共同的属性或者方法，比如Animal和Cat都有name\ninterface Animal{\n    name:string;\n}\ninterface Cat{\n    name:string;\n    run():void;\n}\nfunction testAnimal(animal: Animal){\n    return (animal as Cat);\n}\nfunction testCat(cat : Cat){\n    return (cat as Animal);\n}\n```\n\n上述例子中是可以断言的，我们再看看下面的例子：\n\n```typescript\n//两者没有有共同的属性或者方法，\ninterface Animal{\n    name:string;\n}\ninterface Cat{\n//  name:string;\n    run():void;\n}\nfunction testAnimal(animal: Animal){\n    return (animal as Cat); //报错：类型 \"Animal\" 中缺少属性 \"run\"，但类型 \"Cat\" 中需要该属性。ts(2352)\n}\nfunction testCat(cat : Cat){\n    return (cat as Animal);//报错：类型 \"Cat\" 中缺少属性 \"name\"，但类型 \"Animal\" 中需要该属性。ts(2352)\n}\n```\n\n这时候会报错，两者不能充分重叠，这意味着要想断言成功，需要具备一个条件：\n\n*   要使得A和B能够被 **互相断言**，就要A兼容B或者B兼容A\n\n## 十七、类型断言06\n\n双重断言\n\n既然：\n\n*   任何类型都可以被断言为any\n*   an可以被断言为任何类型\n\n那么我们是不是可以使用双重断言 `as any as foo` 来将任何一个类型断言为另一个类型呢？\n\n```typescript\ninterface Cat{\n    run():void;\n}\ninterface Fish{\n    swim():void;\n}\n\nfunction testCat(cat : Cat){\n    return (cat as any as Fish);\n}\n```\n\n上述例子中，若直接使用 `cat as Fish` 会报错：类型 \"Cat\" 中缺少属性 \"swim\"，但类型 \"Fish\" 中需要该属性。因为Cat和Fish都互不兼容。\n\n但是若使用双重断言，则可以打破 \\[要使得A能都断言B ,就要A兼容B或者B兼容A\\] 的限制，将任何一个类型断言为任何另一个类型。\n\n若你使用了这种双重断言，那么十有八九都是非常错误。他很可能会导致运行时错误。\n\n**除非迫不得已，否则千万别用双重断言**。（咋迫不得已？基本不用吧？）\n\n## 十八、类型断言07\n\n类型断言VS类型转换\n\n类型断言只会影响TypeScript编译时的类型，类型断言语句会在编译结果中被删除：\n\n```typescript\nfunction toBoolean(something:any):boolean{\n    return something as boolean;\n}\ntoBoolean(1);\n//返回值为1\n```\n\n在上面的例子中，将`something`断言为`boolean`可以通过编译，但是并没有什么用，代码在编译后会变成：\n\n```javascript\nfunction toBoolean(something) {\n    return something;\n}\ntoBoolean(1);\n//返回值为1\n```\n\n所以类型断言不是类型转换，他不会真的影响到变量的类型。\n\n若要进行类型转化，需要直接调用类型转换的方法：\n\n```typescript\nfunction toBoolean(something:any):boolean{\n    return Boolean(something);\n}\ntoBoolean(1);\n//返回值为true\n```\n\n## 十九、类型断言08\n\n类型断言VS类型声明\n\n在这个例子中：\n\n```typescript\nfunction getCacheData(key:string):any{\n    return (window as any).cache[key];\n}\n\ninterface Cat{\n    name:string;\n    run():void;\n}\n\nconst tom = getCacheData('tom') as Cat;\ntom.run();\n```\n\n我们使用 `as Cat`将`any`类型断言为了`Cat`类型。\n\n但实际上还有其他方式可以解决这个问题：\n\n```typescript\nfunction getCacheData(key:string):any{\n    return (window as any).cache[key];\n}\n\ninterface Cat{\n    name:string;\n    run():void;\n}\nconst tom:Cat = getCacheData('tom');\ntom.run();\n```\n\n上面的例子中，我们通过类型声明的方式，将`tom`声明为`Cat`，然后再将`any`类型的getCacheData('tom')赋值给`Cat`类型的`tom`。\n\n这和类型断言是非常相似的，而且产生的结果也几乎是一样的——`tom`在接下来的代码中都变成了`Cat`类型。\n\n他们的区别，可以通过这个例子来理解：\n\n```typescript\ninterface Animal{\n    name:string;\n}\ninterface Cat{\n    name:string;\n    run():void;\n}\nconst animal: Animal = {\n    name:'tom'\n}\nlet tom = animal as Cat;\n```\n\n上述例子中，由于`Animal`兼容 `Cat`，故可以将 `animal` 断言为 `Cat`赋值给`tom`。\n\n但是若直接声明tom为`Cat`类型：\n\n```typescript\ninterface Animal{\n    name:string;\n}\ninterface Cat{\n    name:string;\n    run():void;\n}\nconst animal: Animal = {\n    name:'tom'\n}\nlet tom: Cat = animal;\n//报错：类型 \"Animal\" 中缺少属性 \"run\"，但类型 \"Cat\" 中需要该属性。ts(2741)\n```\n\n则会报错，不允许将Cat类型的tom赋值为animal。\n\n我们可以得出结论：\n\n*   A断言为B时，A和B有一个及以上相同的属性或方法即可\n*   A声明为B时，A必须具备B的所有属性和方法\n\n知道了他们的核心区别，就知道了类型声明是比类型断言更加严格的。\n\n所以为了增加代码的质量我们最好优先使用类型声明，这也比类型断言的 `as`语法更有优势。\n\n## 二十、类型断言09\n\n类型断言VS泛型\n\n这是一个例子：\n\n```typescript\nfunction getCacheData(key:string):any{\n    return (window as any).cache[key];\n}\ninterface Cat{\n    name:string;\n    run():void;\n}\nconst tom = getCacheData('tom') as Cat;\ntom.run();\n```\n\n我们还有第三种方式可以解决这个问题，那就是泛型：\n\n```typescript\nfunction getCacheData<T>(key:string):T{\n    return (window as any).cache[key];\n}\ninterface Cat{\n    name:string;\n    run():void;\n}\nconst tom = getCacheData<Cat>('tom');\ntom.run();\n```\n\n通过给`getCacheData`函数添加一个泛型 ,我们可以更加规范的实现对`getCacheData`返回值的约束，这也同时去除掉了代码中的`any`，是最优的一个解决方式。\n\n> 关于**泛型**\n> \n> 是一种把明确类型的工作推迟到创建对象或者调用方法的时候才去明确的特殊的类型。\n> \n> **泛型的定义**\n> \n> 主要有以下两种：\n> \n> 1.  在程序编码中一些包含**类型参数**的类型，也就是说泛型的参数只可以代表类，不能代表个别对象。（这是当今较常见的定义）\n> 2.  在程序编码中一些包含参数的[类](https://baike.baidu.com/item/类)。其参数可以代表类或对象等等。（现在人们大多把这称作[模板](https://baike.baidu.com/item/模板)）\n> \n> 不论使用哪个定义，泛型的参数在真正使用泛型时都必须作出指明。\n> \n> 参考：[泛型\\_百度百科 (baidu.com)](https://baike.baidu.com/item/泛型/4475207#2)\n\n## 二一、type关键字\n\n使用type关键字定义类型别名和字符串字面量类型\n\n我们来看一个方法：\n\n```typescript\nfunction getName(n:string(() => string)):string{\n    if(typeof n === 'string'){\n        return n;\n    }else{\n        return n();\n    }\n}\n```\n\n`type`关键字作为类型别名用来给一个类型起个新名字\n\n```typescript\ntype Name = string;\ntype NameResolver = ()=> string;\ntype NameOrResolver = Name  NameResolver;\nfunction getName(n:NameResolver):Name{\n    if (typeof n === 'string'){\n        return n;\n    }else{\n        return n();\n    }\n}\n```\n\n上述例子中，我们使用`type`关键字创建类型别名。\n\n**类型别名常用语联合类型**。\n\n字符串字面量类型用来约束取值只能是某几个字符串中的一个\n\n```typescript\ntype EventsName = 'click'  'scroll'  'mousemove';\nfunction handleEvent(ele:Element  null,event:EventsName){\n    //do something\n}\nhandleEvent(document.getElementById('hello'),'click');\n//正常运行\nhandleEvent(document.getElemnetById('world'),'dbclick');\n//报错：类型“\"dbclick\"”的参数不能赋给类型“EventsName”的参数。ts(2345)\n```\n\n## 二二、元组\n\n数组合并了相同类型的对象，而元组(Tuple)合并了不同类型的对象。\n\n元组起源与函数编程语言(如F#，Python也有元组的概念)，这些语言中会频繁使用元组。\n\n**举个例子**，定义一对值分别为 `string`和 `number`的元组：\n\n```typescript\nlet tom:[string,number] = ['Tom',15];\n```\n\n当赋值或访问一个已知索引的元素时，会得到正确的类型：\n\n```typescript\nlet tom:[string,number];\ntom[0] = 'Tom';\ntom[1] = 15;\n```\n\n也可以赋值其中一项：\n\n```typescript\nlet tom:[string,number];\ntom[0] = 'Tom';\n```\n\n但是当直接对元组进行初始化赋值操作时，需要提供所有元组类型指定的项\n\n```typescript\nlet tom:[string,number];\ntom = ['Tom',18];\n```\n\n下面这样就不行了：\n\n```typescript\nlet tom:[string,number];\ntom = ['Tom'];\n//报错：不能将类型“[string]”分配给类型“[string, number]”。源具有 1 个元素，但目标需要 2 个。ts(2322)\n```\n\n**越界元素**\n\n当添加越界元素时，他的类型会被限制为元组中每个类型的联合类型：\n\n```typescript\nlet tom:[string,number];\ntom = ['Tom',18];\ntom.push('male');//可以添加stirng，此时tom为['Tom',18,'male']\ntom.push(true);//不可以添加boolean\n//报错：类型“boolean”的参数不能赋给类型“string  number”的参数。ts(2345)\n```\n\n## 二三、枚举\n\n枚举(Enum)类型用于取值被限定在一定范围的场景，比如一周只能有七天，颜色限定为红绿蓝等。\n\n枚举使用`enum`关键字来定义：\n\n```typescript\nenum Days{Sun, Mon, Tue, Wed, Thu, Fri, Sat};\n```\n\n枚举成员会被赋值为从 0 开始递增的数字，同时也会对枚举值到枚举名进行反向映射：\n\n```typescript\nenum Days{Sun, Mon, Tue, Wed, Thu, Fri, Sat};\n\nconsole.log(Days['Sun'] === 0);//true\nconsole.log(Days['Mon'] === 1);//true\nconsole.log(Days['Wed'] === 3);//true\nconsole.log(Days['Thu'] === 4);\n//console.log(Days['Sun'] === 4);//false,且不能通过编译，IDE提示：此条件将始终返回 \"false\"，因为类型 \"Days.Sun\" 和 \"4\" 没有重叠。\n\nconsole.log(Days[0] === 'Sun');//true\nconsole.log(Days[1] === 'Mon');//true\nconsole.log(Days[3] === 'Wed');//true\nconsole.log(Days[4] === 'Sun');//false，IDE不进行提示\n```\n\n上面的例子会被编译为JS代码：\n\n```javascript\nvar Days;\n(function (Days) {\n    Days[Days[\"Sun\"] = 0] = \"Sun\";\n    Days[Days[\"Mon\"] = 1] = \"Mon\";\n    Days[Days[\"Tue\"] = 2] = \"Tue\";\n    Days[Days[\"Wed\"] = 3] = \"Wed\";\n    Days[Days[\"Thu\"] = 4] = \"Thu\";\n    Days[Days[\"Fri\"] = 5] = \"Fri\";\n    Days[Days[\"Sat\"] = 6] = \"Sat\";\n})(Days  (Days = {}));\n;\nconsole.log(Days['Sun'] === 0); //true\nconsole.log(Days['Mon'] === 1); //true\nconsole.log(Days['Wed'] === 3); //true\nconsole.log(Days['Thu'] === 4);\n// console.log(Days['Sun'] === 4);//false,IDE提示：此条件将始终返回 \"false\"，因为类型 \"Days.Sun\" 和 \"4\" 没有重叠。\nconsole.log(Days[0] === 'Sun'); //true\nconsole.log(Days[1] === 'Mon'); //true\nconsole.log(Days[3] === 'Wed'); //true\nconsole.log(Days[4] === 'Sun'); //false，IDE不进行提示\n```\n\n## 二四、类01\n\n#### 类的概念\n\n虽然JavaScript中有类的概念，但是可能大多数JavaScript程序员并不是非常熟悉类，这里对类相关的概念做一个简单的介绍。\n\n*   类(Class):定义一件事物的抽象特点，包含它的属性和方法\n    \n*   对象(Object):类的实例，通过 `new`生成\n    \n*   面向对象编程(Object Oriented Programming，简称 OOP)三大特性：**继承、封装、多态**\n    \n*   继承(Inheritance):子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特征。\n    \n*   封装(Encapsulation):将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据。\n    \n*   多态(Polymorphism):由继承而产生相关的不同的类，对同一个方法可以有不同的响应。比如Cat和Fish都继承自Animal，但是分别实现了自己的eat方法。此时针对某一个实例，我们无须了解他是Cat还是Dog，就可以直接调用eat方法，程序会自动判断出来应该如何执行eat方法。\n    \n*   存取器(Getter & Setter)：用于改变属性的读取和赋值行为\n    \n*   修饰器(Modifiers):修饰符是一些关键字，用于限定成员或类型的性质。比如public 表示共有的属性或方法。\n    \n*   抽象类(Abstract Class):抽象类是提供给其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中被实现。\n    \n*   接口(Interface):不同类之间共有的属性或方法，可以抽象成一个接口，接口可以被类实现(implements)。一个类只能继承自另一个类，但是可以实现多个接口。\n    \n*   构造函数(Constructor):构造函数 ，是一种特殊的方法。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中\n    \n\n使用`class`关键字定义类，使用 `constructor`关键字定义构造函数。\n\n通过`new`生成新的实例的时候，会自动调用构造函数：\n\n```typescript\nclass Animal{\n    public _name;\n    constructor(name:string){\n        this._name = name;\n    }\n    sayHello(){\n        return `My name is ${this._name}`;\n    }\n}\n\nlet tom = new Animal('Tom');\nconsole.log(tom.sayHello); //My name is tom\n```\n\n## 二五、类02\n\n类的存取器 ：`get` 、`set`\n\n使用getter 和 setter 可以获取和改变类的属性：\n\n```typescript\nclass Animal{\n    // private name:string;\n    constructor(name:string){\n        this.name = name;\n    }\n    get name(){\n        return 'Jack';\n    }\n    set name(value){\n        console.log('This name:'+value);\n    }\n}\n\nlet a = new Animal('Kitty');//setter Kitty\na.name = 'Tom';//setter Tom\nconsole.log(a.name);//getter Jack\n```\n\n## 二六、类03\n\n类的静态方法\n\n使用`static`修饰符修饰的方法成为静态方法，他们不需要实例化，而直接通过类来调用：\n\n```typescript\nclass Animal{\n    public _name;\n    constructor(name:string){\n        this._name = name;\n    }\n    sayHi(){//这是实例方法\n        return `My name is ${ this._name }`;\n    }\n    static sayHello(){//这是类方法\n        return \"I'm Animal class\";\n    }\n}\n\nlet a = new Animal('Jack');\nconsole.log(a.sayHi());//My name is Jack\nconsole.log(Animal.sayHello());//I'm Animal class\n```\n\n## 二七、类04\n\n类的三种访问修饰符：public、private、protected\n\n访问权限大小由大到小：\n\n*   public\n    \n    全局的、公共的，当前所涉及到的地方都可以使用\n    \n    ```typescript\n    class Animal{\n    public _name;\n      public constructor(name:string){\n          this._name = name;\n      }\n    }\n    \n    let a  = new Animal('Jack');\n    console.log(a._name);// Jack\n    a._name = 'Tom';\n    console.log(a._name);// Tom\n    ```\n    \n*   protected\n    \n    受保护的，允许子类访问，不允许公共访问：\n    \n    ```typescript\n    class Animal{\n    protected name;\n      public constructor(name:string){\n          this.name = name;\n      }\n    }\n    \n    class Cat extends Animal{\n      public constructor(name:string){\n          super(name);\n          console.log(this.name);\n      }\n    } \n    ```\n    \n*   private\n    \n    私有的，只能在类的内部使用，子类也无法访问，无法在实例后通过类的实例属性访问：\n    \n    ```typescript\n    class Animal{\n    private _name;\n      public constructor(name:string){\n          this._name = name;\n      }\n    }\n    \n    let a  = new Animal('Jack');\n    console.log(a._name);// 报错:属性“_name”为私有属性，只能在类“Animal”中访问。ts(2341)\n    a._name = 'Tom'; //报错:属性“_name”为私有属性，只能在类“Animal”中访问。ts(2341)\n    console.log(a._name);// 报错:属性“_name”为私有属性，只能在类“Animal”中访问。ts(2341)\n    ```\n    \n\n默认是**public**，但是 TSLint 可能会要求必须用限定符来表明这个属性或方法是什么类型。\n\n## 二八、类05\n\n参数属性和只读属性关键字\n\n修饰符和`readonly`还可以使用在构造函数参数中，等同于类中定义该属性同时给该属性赋值，使代码更加简洁：\n\n```typescript\nclass Animal{\n    public name:string;\n    public constructor(public myname:string){\n        this.name = myname;\n    }\n}\n```\n\n只读属性\n\n```typescript\nclass Animal{\n    readonly name:string;\n    public constructor(myname:string){\n        this.name = myname;\n    }\n}\n\nlet a  = new Animal('Tom');\nconsole.log(a.name);//Tom\na.name = 'Jack';//报错：无法分配到 \"name\" ，因为它是只读属性。ts(2540)\n```\n\n## 二九、类06\n\n抽象类\n\n`abstract`关键字用来定义抽象类和其中的抽象方法。\n\n什么是抽象类？\n\n首先，抽象类是不允许被实例化的：\n\n```typescript\nabstract class Animal{\n    //public name:string;//这报错：属性“name”没有初始化表达式，且未在构造函数中明确赋值。\n    public name:any;\n    public constrcutor(name:string){\n        this.name = name;\n    }\n    public abstract sayHi():void;\n}\n\nlet a = new Animal('Tom');\n//报错：无法创建抽象类的实例。ts(2511)\n```\n\n上面例子中，我们定义了一个抽象类类`Animal`，并且定义了一个抽象方法 `sayHi`，在实例化抽象类是报错了。\n\n其次，抽象类中的抽象方法必须被子类实现：\n\n```typescript\nclass Cat extends Animal{\n    /**\n     * eat\n     */\n    public eat() {\n        console.log('Im eating');\n    }\n}\n//报错：非抽象类“Cat”不会实现继承自“Animal”类的抽象成员“sayHi”。ts(2515)\n```\n\n正确的抽象类例子：\n\n```typescript\nabstract class Animal{\n    public name: any;\n    public constrcutor(name:string): void{\n        this.name = name;\n    }\n    public abstract sayHi():void;\n}\n\nclass Cat extends Animal{\n    public sayHi(): void {\n        console.log(`This is Cat ${ this.name}`);\n    }\n}\nlet a = new Cat('Tom');\n```\n\n> 上面例子为原视频的例子，却报错：应有 0 个参数，但获得 1 个。ts(2554)\n> \n> 找了一些资料还没找到原因，后续再来更\n\n## 三十、类与接口\n\n#### 类继承接口\n\n实现(implements)是面向对象的一个重要概念。一般来说，一个类只能继承自另一个类，有时候不用类之间可以有一些共有的特性，这时候就可以把特性提取成接口(interfaces)，用`implements`关键字来实现，这个特性大大提高了面向对象的灵活性。\n\n举例来说，门是一个类，防盗门是门的子类。如果防盗门有一个报警器的功能，我们可以简单的给防盗门添加一个报警方法，这时候如果有另一个类：车，也有报警器的功能，就可以考虑把报警器提取出来，作为一个接口，防盗门，和车都去实现它：\n\n```typescript\ninterface Alert{\n    alert():void;\n}\nclass Door{\n}\n\nclass SecurityDoor extends Door implements Alert{\n    alert(){\n        console.log('SecurityDoor alert');\n    }\n}\nclass car implements Alert{\n    alert(){\n        console.log('Car alert');\n    }\n}    \n```\n\n一个类可以实现多个接口：\n\n```typescript\ninterface Alert{\n    alert():void;\n}\ninterface Light{\n    lightOn():void;\n    lightOff():void;\n}\n\nclass Car implements Alert, Light{\n    alert(){\n        console.log('Car alert');\n    }\n    lightOff(){\n         console.log('Light Off');\n    }\n    lightOn(){\n         console.log('Light On');\n    }\n}\n```\n\n上述例子中，`Car` 实现了 `Alert` 和 `Light`接口，既能报警，也能开关灯。\n\n#### 接口继承接口\n\n接口和接口之间可以是继承关系：\n\n```typescript\ninterface Alert{\n    alert():void;\n}\ninterface LightableAlert extends Alert{\n    lightOn():void;\n    lightOff():void;\n}\n```\n\n这很好理解，`LightableAlert` 继承了 `Alert` ，除了拥有`alert`方法之外，还可以拥有自己定义的两个新方法 `lighton`和`lightoff`。\n\n#### 接口继承类\n\n常见的面向对象语言中，**接口是不能继承类的，但是在TypeScript中是可以的**：\n\n```typescript\nclass Point{\n    x:number;\n    y:number;\n    constructor(x:number,y:number){\n        this.x = x;\n        this.y = y;\n    }\n}\n\ninterface Point3d extends Point{\n    z:number;\n}\n\nlet point3d:Point3d = {x:1,y:2,z:3};\n```\n\n**但在这里不推荐这样使用，我们在定义接口的时候只做定义，具体实现交给实现接口的类去完成**。\n\n## 三一、泛型01\n\n泛型(Generics)是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候在指定类型的一种特性。\n\n首先，我们来实现一个函数 `createArray`，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值。：\n\n```typescript\nfunction creatArray(length:number,value:any): Array<any>{\n    let result = [];\n    for(let i = 0; i < length; i++){\n        result[i] = value;\n    }\n    return result;\n}\n\ncreatArray(3,'x');//['x','x','x']\n```\n\n上例中，我们使用了之前提到过的数组泛型来定义返回值的类型。\n\n这段代码编译不会报错，但是一个显而易见的缺陷是，他并没有准确的定义返回值的类型；\n\n`Array<any>`允许数组的每一项都为任意类型。但是我们预期的是，数组中每一项都应该是输入的`value`的类型。\n\n这时候，泛型就派上用场：\n\n```typescript\nfunction createArray<T>(length: number, value: T):Array<T>{\n    let result: T[] = [];\n    for(let i = 0; i<length; i++){\n        result[i] = value;\n    }\n    return result\n}\ncreatArray<string>(3,'x');//['x','x','x']\n```\n\n上例中，我们在函数名后添加了`<T>`，其中`T` 用来指代任意输入的类型，在后面的输入`value:T` 和输出 `Array<T>` 中即可使用了。接着在调用的时候，可以指定他的具体的类型为`string` 型。当然，也可以不手动指定，而让类型推论自动推算出来：\n\n```typescript\nfunction createArray<T>(length: number, value: T):Array<T>{\n    let result: T[] = [];\n    for(let i = 0; i<length; i++){\n        result[i] = value;\n    }\n    return result\n}\n//不指定类型，通过类型推断来自动推断出类型 \ncreatArray(3,'x');//['x','x','x']\n```\n\n## 三二、泛型02\n\n多个类型参数\n\n定义泛型的时候，可以一次定义多个类型参数：\n\n```typescript\nfunction swap<T, U>(tuple:[T, U]): [U, T]{\n    return [tuple[1],tuple[0]];\n}\nswap([7,'seven']);//['seven', 7]\n```\n\n上例中，我们定义了一个 `swap` 函数，用来交换输入的元组\n\n## 三三、泛型03\n\n泛型约束\n\n在函数内部使用泛型变量的时候，由于事先不知道他是哪种类型，所以不能随意的操作它的属性或方法：\n\n```typescript\nfunction loggingIdentity<T>(arg: T): T{\n    console.log(arg.length);\n    return arg;\n}\n//报错：类型“T”上不存在属性“length”。ts(2339)\n```\n\n上例中，泛型 `T` 不一定包含属性 `length` ，所以编译的时候报错了。\n\n这时，我们可以对泛型进行约束，致允熙这个函数传入那些包含 `length` 属性的变量，这就是泛型约束：\n\n```typescript\ninterface LengthWise{\n    length: number;\n}\nfunction loggingIdentity<T extends LengthWise>(arg: T): T{\n    console.log(arg.length);\n    return arg;\n}\n```\n\n上例中，我们使用了 `extends` 约束了泛型 `T` 必须符合接口 `LengthWise` 的形状，也就是必须包含 `length` 属性。\n\n此时如果调用 `loggingIdentity` 的时候，传入的 `arg` 不包含 `length` ，则会在编译时报错：\n\n```typescript\ninterface LengthWise{\n    length: number;\n}\nfunction loggingIdentity<T extends LengthWise>(arg: T): T{\n    console.log(arg.length);\n    return arg;\n}\nloggingIdentity('1111');\n// 4\nloggingIdentity(8);\n//报错：类型“number”的参数不能赋给类型“LengthWise”的参数。ts(2345)\n```\n\n## 三四、泛型04\n\n泛型接口\n\n之前学习过，可以使用接口的方式来定义一个函数需要符合的形状：\n\n```typescript\ninterface SearchFunc{\n    (source: string, subString: string): boolean;   \n}\n\nlet mySearch: SearchFunc;\nmySearch = function(source: string, subString: string){\n    return source.search(subString) != -1;\n}\n```\n\n当然也可以使用含有泛型的接口来定义函数的形状：\n\n```typescript\ninterface CreateArrayFunc{\n    <T>(length: number, value: T): Array<T>;\n}\nlet createArray: CreateArrayFunc;\ncreateArray = function<T>(length: number, value: T): Array<T>{\n    let result:T[] = [];\n    for(let i = 0; i < length; i++){\n        result[i] = value;\n    }\n    return result;\n}\n\ncreateArray(3,'x');\n//['x','x','x']\n```\n\n进一步，我们可以把泛型参数提前到接口名上：\n\n```typescript\ninterface CreateArrayFunc<T>{\n    (length: number, value: T): Array<T>;\n}\n\nlet createArray: CreateArrayFunc<any>;\ncreateArray = function<T>(length: number, value: T): Array<T>{\n    let result:T[] = [];\n    for(let i = 0; i < length; i++){\n        result[i] = value;\n    }\n    return result;\n}\n\ncreateArray(3,'x');\n//['x','x','x']\ncreateArray(3,true);\n//[true,true,true]\ncreateArray(3,{isExist:true});\n//[{isExist:true},{isExist:true},{isExist:true}]\n```\n\n## 三五、泛型05\n\n泛型类\n\n与泛型接口类似，泛型也可以用于类的类型定义中：\n\n```typescript\nclass GenericNumber<T>{\n    zeroValue!: T; //!为非空断言, 否则报错：属性“XXX”没有初始化表达式，且未在构造函数中明确赋值。\n    add!: (x: T, y: T) => T;\n}\nlet myGenericNumber = new GenericNumber<number>();\nmyGenericNumber.zeroValue = 0;\nmyGenericNumber.add = function(x,y){ return x+y; };\n```\n\n泛型参数的默认类型\n\n在TypeScript2.3以后，我们可以为泛型中的类型参数指定默认类型。当使用泛型时没有在代码中直接指定类型参数，从实际值参数中也无法推测出时，这个默认类型就会起作用。\n\n```typescript\nfunction createArray<T = string>(length: number, value: T):Array<T>{\n    let result:T[] = [];\n    for(let i = 0; i < length; i++){\n        result[i] = value;\n    }\n    return result;\n}\n```\n\n## 三六、声明合并\n\n同名函数、接口、类的合并\n\n如果定义了两个相同的名字的函数、接口或类，那么他们会合并成一个类型：\n\n#### 函数的合并\n\n之前我们学习过，我们可以使用重载定义多个函数类型：\n\n```typescript\nfunction reverse(x: number): number;\nfunction reverse(x: string): string;\nfunction reverse(x: number  string): number  string{\n    if (typeof x === 'number'){\n        return Number(x.toString().split('').reverse.join(''));\n    } else if( typeof x === 'string'){\n        return x.split('').reverse.join('');\n    }\n}\n```\n\n#### 接口的合并\n\n接口中的属性在合并时会简单地合并到一个接口中：\n\n```typescript\ninterface Alarm{\n    price: number;\n}\ninterface Alarm{\n    weight: number;\n}\n```\n\n相当于：\n\n```typescript\ninterface Alarm{\n    price: number;\n    weight: number;\n}\n```\n\n注意，**合并的属性的类型必须是唯一的**：\n\n```typescript\ninterface Alarm{\n    price: number;\n}\ninterface Alarm{\n    price: number;\n    //虽然重复了，但是类型还是number，所以不会报错\n    weight: number;\n}\n```\n\n```typescript\ninterface Alarm{\n    price: number;\n}\ninterface Alarm{\n    price: string;\n    //报错：后续属性声明必须属于同一类型。属性“price”的类型必须为“number”，但此处却为类型“string”。ts(2717)\n    weight: number;\n}\n```\n\n接口中的方法合并，和函数的合并一样：\n\n```typescript\ninterface Alarm{\n    price: number;\n    alert(s: string): string;\n}\ninterface Alarm{\n    weight: number;\n    alert(s: string, n: number): string;\n}\n```\n\n相当于：\n\n```typescript\ninterface Alarm{\n    price: number;\n    weight: number;\n    alert(s: string): string;\n    alert(s: string, n: number): string;\n}\n```\n\n#### 类的合并\n\n类的合并与借口的合并一样\n\nPS: 但是一般情况下，不建议创建多个同名接口或类，虽然可以自动合并，但是可能会发生意想不到的问题。代码不要写在两个地方，不然不好维护。\n\n## 三七、写在结尾\n\nTypeScript 应用非常广泛，最新的 Vue 和 React 均集成了 TypeScript ，这里推荐大家使用 Vue3 ，Vue3 天然支持 TypeScript。\n\n另一方面，TS 中有很多支持 ES 的语法，关系图：\n\n![image-20220507164550922](https://img-blog.csdnimg.cn/img_convert/bb541a521a9a8d8574a7711ec1caf1a2.png)\n\n最后，多看文档\n\n[TypeScript英文文档](https://www.typescriptlang.org/docs/)\n\n[TypeScript中文文档](https://www.tslang.cn/docs/home.html)","source":"_posts/typescriptvue3-0笔记.md","raw":"---\ntitle: TypeScript+Vue3.0笔记\ntags:\n  - Javascript\n  - TypeScript\n  - Vue\nid: '1057'\ncategories:\n  - - 学习笔记\ndate: 2022-05-07 16:46:40\n---\n\n## 一、什么是Typescript\n\n[TypeScript英文文档](https://www.typescriptlang.org/docs/)\n\n[TypeScript中文网，中文文档](https://www.tslang.cn/docs/home.html)\n\n> *   JavaScript的超集，遵循最新的 ES6、Es5 规范。TypeScript 扩展了 JavaScript的语法，可以编译为JavaScript，添加了类型系统的JavaScript，可以适用与任何规模的项目。\n>     \n> *   TypeScript 是由微软开发的一款开源的编程语言。TypeScript 更像后端 java、C#这样的面向对象语言可以让 JS开发大型企业项目。\n>     \n> *   谷歌也在大力支持 Typescript 的推广，谷歌的 angular2.x+就是基于 Typescript 语法。\n>     \n> *   最新的 Vue 、React 也可以集成 TypeScript。\n>     \n\n![image-20220507164550922](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220507164550922.png)\n\n### TypeScript特性\n\n#### 类型系统\n<!-- more -->\n从TypeScript的名字就可以看出来， **\\[类型\\]** 是其最核心的特性。\n\n我们知道，JavaScript是一门非常灵活的编程语言：\n\n> *   它没有约束类型，一个变量可能初始化时是字符串类型，过一会又被赋值为数字类型\n> *   由于隐式类型转化的存在，有的变量很难在运行前就确定\n> *   基于原型的的面向对象编程，使得原型上的属性或方法可以在运行时被修改。\n> *   函数是JavaScript中的一等公民，可以赋值给变量，也可以当做参数或返回值\n\n这种灵活性就像一把双刃剑，一方面使得JavaScript蓬勃发展，无所不能，从2013年开始就一直蝉联最普遍使用的编程语言排行榜冠军；另一方面也使得的代码质量参差不齐，维护成本高，运行错误多。\n\n而TypeScript的 **类型** 系统，很大程度弥补JavaScript的缺点。\n\n#### TypeScript是静态类型\n\n类型系统按照 \\[类型检查的时机\\] 来分类，可以分为动态类型和静态类型。\n\n动态类型是指在运行时才会进行类型检查，这种语言的类型错误往往会导致运行时错误。JavaScript是一门解释型语言，没有编译阶段，所以他是动态类型，以下这段代码在运行时才会报错：\n\n```js\nlet foo = 1；\nfoo.split(' ');\n//Uncaught TypeError: foo.split is not a function\n//运行时报错：foo.split不是一个函数，造成线上bug\n```\n\n静态类型是指编译阶段就能确定每个变量的类型，这种语言的类型错误往往会导致语法错误。TypeScript在运行前需要先编译为JavaScript，而在编译阶段就会进行类型检查，所以 **TypeScript是静态类型** ，这段TypeScript代码在编译阶段就会报错：\n\n```typescript\nlet foo = 1；\nfoo.split(' ');\n//Property 'split' does not exist on type 'number'\n//编译时报错：数字没有split方法，无法通过编译\n```\n\n你可能会奇怪，这段TypeScript代码看上去和JavaScript没有什么区别呀。\n\n没错！大部分JavaScript代码都只需要经过少量的修改（或者完全不用修改）就变成了TypeScript的代码，这得益于TypeScript强大的 **类型推论**，即使不去手动声明变量 foo 的类型，也能在变量初始化的时候自动推论出他是一个 `number` 类型。\n\n完整的TypeScript代码是这样的：\n\n```typescript\nlet foo: number = 1;\nfoo.split(' ');\n//Property 'split' does not exist on type 'number'\n//编译时报错：数字没有split方法，无法通过编译\n```\n\n#### TypeScript是弱类型\n\n类型系统按照 \\[是否允许隐式类型转换\\] 来分类，可分为强类型和弱类型。\n\n以下这段代码不管是在JavaScript还是TypeScript中都是正常运行的，运行时数字1会被隐式类型转化为字符串 '1' ，加号 ‘+’ 被识别为字符串拼接，打印结果为 '11':\n\n```js\nconsole.log(1 + '1');\n//打印字符串 '11'\n```\n\nTypeScript是完全兼容JavaScript的，他不会修改JavaScript运行时的特性，他们都是 **弱类型语言**。\n\n## 二、安装并编译TypeScript\n\n安装TypeScript需要NodeJS环境，如果电脑没有npm命令，可以去官网下载并安装NodeJS\n\n官网地址：[Node.js (nodejs.org)](https://nodejs.org/en/)\n\n![image-20220507113822749](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220507113822749.png)\n\nTypeScript安装命令\n\n```shell\nnpm install -g typescript\n# 通过tsc --version可以查看版本号以确保是否安装成功\n```\n\n![image-20220507121610924](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220507121610924.png)\n\n安装以后编译ts文件很简单，我们在电脑上新建一个目录`code`，新建一个文件`index.ts`,然后在当前目录下输入：\n\n```shell\ntsc index.ts\n```\n\n编译完之后会在当前目录下输出一个`index.js`文件，则编译成功。如果想指定输出目录：\n\n```\ntsc --outFile ./js/index.js index.ts\n```\n\n## 三、基本的数据类型\n\n#### 布尔值\n\n布尔值是最基础的数据类型，在TypeScript中，使用`boolean`定义布尔值类型：\n\n```typescript\nlet isDone:boolean = false;\n```\n\n#### 数值\n\n使用`number`定义数值类型：\n\n```typescript\nlet mynum:number = 1;\n```\n\n#### 字符串\n\n使用`string`定义字符串类型：\n\n```typescript\nlet mystring:string = 'TypeScript字符串'\n//模板字符串,要用反引号括起来\nlet sentence:string = `Hello,This is ${mystring}.`;\n//也可以使用js的加号 + 语法\nlet sentence2:string = 'Hello,This is'+mystring;\n```\n\n#### 空值\n\nJavaScript没有空值(void)的概念，在TypeScript中，用`void`表示没有任何返回值的函数：\n\n```typescript\nfunction alertName():void{\n    alert('my name is tom');\n}\n```\n\n声明一个`void`类型的变量没有什么用，因为你只能将它赋值为`undefined`和`null`\n\n```typescript\nlet unsable:void = undefined;\n```\n\n#### Null和Undefined\n\n在TypeScript中，默认情况下`null`和`undefined`是所有类型的子类型。 就是说你可以把 `null`和`undefined`赋值给`number`类型的变量。可以使用`null`和`undefined`来定义这两个原始数据类型：\n\n```typescript\nlet n:null = null;\nlet u:undefined = undefined\n```\n\n#### 数组\n\nTypeScript像JavaScript一样可以操作数组元素。有两种方式定义数组。\n\n第一种是元素类型后加 `[]`\n\n```typescript\nlet list:number[] = [1,2,3];\n```\n\n第二种是使用数组泛型，`Array<元素类型>`\n\n```typescript\nlet list:Array<number> = [1,2,3];\n```\n\n#### 元组\n\n元组（Tuple）类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。但**定义变量时类型的顺序要一致**。\n\n```typescript\nlet x : [string,number];\nx = ['hello',10];\n//正常运行\nx = [20,'HELLO'];\n//报错：不能将类型“number”分配给类型“string”。ts(2322)；不能将类型“string”分配给类型“number”。ts(2322)\n```\n\n当访问一个已知索引的元素，会得到正确的类型：\n\n```typescript\nconsole.log(x[0].substr(1)); // 正常运行\nconsole.log(x[1].substr(1)); // 报错： 'number' does not have 'substr'\n```\n\n当访问越界元素时：\n\n```typescript\nx[3] = 'World';\n//报错：不能将类型“\"World\"”分配给类型“undefined”。ts(2322)长度为 \"2\" 的元组类型 \"[string, number]\" 在索引 \"2\" 处没有元素。ts(2493)\n```\n\n#### Object\n\n`object`表示非原始类型，也就是除`number`，`string`，`boolean`，`symbol`，`null`或`undefined`之外的类型。\n\n使用`object`类型，就可以更好的表示像`Object.create`这样的API。例如：\n\n```typescript\ndeclare function create(o:objectnull):void;\ncreate({pro:0});\ncreate(null);\ncreate(undefined);\ncreate();//报错：应有 1 个参数，但获得 0 个。ts(2554)\ncreate(42);//报错：类型“number”的参数不能赋给类型“object”的参数。ts(2345)\ncreate(\"string\"); //报错： 类型“string”的参数不能赋给类型“object”的参数。ts(2345)\ncreate(false); //报错：类型“boolean”的参数不能赋给类型“object”的参数。ts(2345)\n```\n\n## 四、任意值(Any)\n\n任意值(Any)用来表示允许赋值为任意类型。\n\n如果是一个普通类型，在赋值过程中改变类型是不被允许的：\n\n```typescript\nlet myFavoriteNum:string = 'seven';\nmyFavoriteNum = 7;\n//报错：不能将类型“number”分配给类型“string”。ts(2322)\n```\n\n但如果是`any`类型，则允许被赋值为任意类型。\n\n```typescript\nlet myFavoriteNum:any = 'seven';\nmyFavoriteNum = 7;\n```\n\n在任意值上访问任何属性都是允许的：\n\n```typescript\nlet anything: any = 'hello';\nconsole.log(anything.Myname);\nconsole.log(anything.myname.length);\n```\n\n也允许调用任何方法:\n\n```typescript\nlet anything:any = 'heloo'\nanything.setName('Tom');\nanything.setName('Allen').sayHello();\nanything.Myname.setFirstName('Cat');\n```\n\n所以，**声明一个任意值(any)变量后，对它的任何操作，返回的内容的类型都是任意值**。\n\n## 五、类型推论\n\n如果没有明确的指定类型，那么TypeScript会依照类型推论（Type Inference）的规则推断出一个类型。\n\n以下代码虽然没有指定类型，但在编译时会出错：\n\n```typescript\nlet myFavoriteNum = 'seven';\nmyFavoriteNum = 7;\n//报错：不能将类型“number”分配给类型“string”。ts(2322)\n```\n\n事实上，它等价于：\n\n```typescript\nlet myFavoriteNum:string = 'seven';\nmyFavoriteNum = 7;\n//报错：不能将类型“number”分配给类型“string”。ts(2322)\n```\n\nTypeScript在没有明确指定变量类型时，会对变量的类型进行推测，这就是类型推论。\n\n**如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 `any`类型而完全不被类型检查：**\n\n```typescript\nlet myFavoriteNum;\nmyFavoriteNum = 'seven';\nmyFavoriteNum = 7;\n```\n\n## 六、联合类型\n\n联合类型(Union Types)表示取值可以为多种类型中的一种。\n\n举个例子\n\n```typescript\nlet myFavoriteNum:stringnumber;\nmyFavoriteNum = 'seven';\nmyFavoriteNum = 7;\n```\n\n从代码可以看出来联合类型使用 来分隔每一个类型。\n\n这里的 `let myFavoriteNum:stringnumber;`的含义是允许`myFavoriteNum`为`string`和`number`类型，而不能是其他类型。\n\n比如下面这个就会报错：\n\n```typescript\nlet myFavoriteNum:stringnumber;\nmyFavoriteNum = true;\n//报错：不能将类型“boolean”分配给类型“string  number”。ts(2322)\n```\n\n#### 联合类型的属性或方法\n\n当TypeScript不确定一个联合类型的变量到底是哪个类型的时候，我们 **只能访问此联合类型的 共有属性或共有方法**。\n\n```typescript\nfunction getLength(something:numberstring):number{\n    return something.length;\n}\n//报错:类型“string  number”上不存在属性“length”。类型“number”上不存在属性“length”。ts(2339)\n```\n\n上例中，因为`number`类型不存在`length`属性，所以会报错，正确的使用可以这样：\n\n```typescript\nfunction getLength(something:numberstring):string{\n    return something.toString();\n}\n//`toString()`方法是number和string类型的共有方法。\n```\n\n联合类型变量在被赋值的时候，会根据类型推论的推断变量的类型：\n\n```typescript\nlet myFavoriteNum:numberstring;\nmyFavoriteNum = 'seven';\nconsole.log(myFavoriteNum.length);\n//正常运行\nmyFavoriteNum = 7;\nconsole.log(myFavoriteNum.length);\n//报错：类型“number”上不存在属性“length”。ts(2339)\n```\n\n上例中，第二行的myFavoriteNum被推断成了 `string`型，访问 `length`属性就不会报错\n\n而第四行的myFavoriteNum被推断为`number`型，访问`length`属性就会报错\n\n## 七、接口\n\n在TypeScript中，我们使用 `interface` 来定义一个接口类型的对象。\n\n#### 什么是接口\n\n在面向对象语言中，接口是一个重要的概念，它是对行为的抽象，而具体的行为则需要类去实现。\n\ntypesc的核心原则之一是对之所具有的结构进行类型检查。有时候被称作“鸭式辨型法”或者“结构性子类型化”。在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。\n\n举个例子\n\n```typescript\ninterface Person{\n    name:string;\n    age:number;\n    sex:string;\n};\n\nlet Allen:Person = {\n    name:'Allen',\n    age:28,\n    sex:'male'\n};\n//正常运行\n```\n\n上面例子中，我们定义一个接口Person，接着定义一个变量 Allen，他的类型是Person。这样，我们就约束了Allen的形状必须是和接口Person一致，如果少了XX属性就会报错，同理，多了未定义的XX属性也会报错：\n\n```typescript\ninterface Person{\n    name:string;\n    age:number;\n    sex:string;\n};\n\nlet Tom:Person = {\n    name:'Tom',\n    age:18,\n};\n//Tom报错：类型 \"{ name: string; age: number; }\" 中缺少属性 \"sex\"，但类型 \"Person\" 中需要该属性。ts(2741) index.ts(23, 2): 在此处声明了 \"sex\"。\n//原因是Tom少了sex属性\n\nlet Ketty:Person = {\n    name:'Ketty',\n    age:20,\n    sex:'female',\n    grade:12\n}\n//报错：不能将类型“{ name: string; age: number; sex: string; grade: number; }”分配给类型“Person”。对象文字可以只指定已知属性，并且“grade”不在类型“Person”中。ts(2322)\n//原因是Ketty多了grade属性\n```\n\n定义Tom变量却少了sex属性就会报错，同理，多了未定义的grade属性也会报错。\n\n可见，**赋值的时候，变量的结构必须和接口的结构保持一致**。\n\n#### 可选属性\n\n有时候我们希望不要完全匹配一个接口的所有结构，那么我们可以用可选属性(在定义接口时，属性后加上 `?`关键字)：\n\n```typescript\ninterface Person{\n    name:string;\n    age:number;\n    sex?:string; //可选属性 sex\n};\nlet Allen:Person = {\n    name:'Allen',\n    age:28,\n    sex:'male'\n};\n//正常运行\nlet Tom:Person = {\n    name:'Tom',\n    age:18,\n};\n//正常运行\n```\n\n#### 任意属性\n\n有时候我们希望一个接口允许有任意的属性，可以用 `[属性名:类型名]`定义任意属性\n\n```typescript\ninterface Person{\n    name:string;\n    age?:number;\n    [propName:string]:any;\n};\n\nlet Allen: Person = {\n    name:'Allen',\n    gender:'female' //添加gender属性是允许的\n};\n\nlet Tom:Person = {\n    name:'Tom',\n    gender:'male',\n    gender2:'male',\n    ID:123,\n    123:'asdasd',\n    isDone:false\n}\n//添加任意多个属性且类型不一致也是允许的，有点违背接口的初衷\n```\n\n使用 `[propName:string]:any;`定义了任意属性取`string`类型的值。\n\n任意属性有点违背接口的初衷，既然已经定义了接口的结构，就不能任意去增加修改他的结构了\n\n#### 只读属性\n\n有时候我们希望对象中一些字段只能在创建时被赋值，后续只能可读不可写，那么可以用 `readonly`关键字定义只读属性：\n\n```typescript\ninterface Person{\n    readonly id:number;\n    name:string;\n    age:number;\n};\nlet Tom:Person = {\n    id:12345,\n    name:'Tom',\n    age:19    \n}\nTom.age =  29 //不报错\nTom.id = 12345//报错：无法分配到 \"id\" ，因为它是只读属性。ts(2540)\n```\n\n上述例子中`id`属性被设置为只读属性，当再次赋值时就会报错。\n\n## 八、数组\n\n数组是存放多个元素的集合\n\n最简单的方法是使用 \\[ 类型 + 方括号\\] 来表示数组：\n\n```typescript\nlet fibonacci:number[] = [1,1,2,3,5,8,13];\n```\n\n数组中的项不允许出现其他的类型：\n\n```typescript\nlet fibonacci:number[] = [1,'1',2,3,5,8,13];\n//报错：不能将类型“string”分配给类型“number”。ts(2322)\n```\n\n数组的一些方法的参数也会根据数组在定义时约定的类型进行限制：\n\n```typescript\nlet fibonacci:number[] = [1,1,2,3,5,8,13];\nfibonacci.push(21);\n//正常运行\nfibonacci.push('34');\n//报错：类型“string”的参数不能赋给类型“number”的参数。ts(2345)\n//原因是push()方法只允许传入number类型的参数，而'34'是字符串字面量类型，后续章节会介绍\n```\n\n也可以指定一个 any 类型数组：\n\n```typescript\nlet list:any[] = ['Tom',18,'male',true,{website:'https://wangwangyz.site'}];\n```\n\n## 九、函数01\n\n#### 函数声明\n\n在JavaScript中，有两种常见的定义函数的方式——函数声明(Function Declaration)和函数表达式(Function Expression)：\n\n```javascript\n//函数声明(Function Declaration)\nfunction sum(x,y){\n    return x+y;\n}\n\n//函数表达式(Function Expression)\nlet mySum = function (x,y){\n    return x+y;\n};\n```\n\n一个函数有输入和输出，要在TypeScript中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义比较简单：\n\n```typescript\nfunction sum(x:numebr,y:number):number{\n    return x+y;\n}\n```\n\n注意，**输入多余(或少于)、类型不匹配的参数，是不被允许的**：\n\n```typescript\nfunction sum(x:numebr,y:number):number{\n    return x+y;\n}\nsum(1,2,3)//报错：应有 2 个参数，但获得 3 个。ts(2554)\nsum(1)//报错：应有 2 个参数，但获得 1 个。ts(2554)\nsum('srt',1)//报错：类型“string”的参数不能赋给类型“number”的参数。ts(2345)\n```\n\n#### 函数表达式\n\n如果我们现在写一个对函数表达式(Function Expression)的定义，可能会写成这样：\n\n```typescript\nlet mysum = function(x:number,y:number):number{\n    return x + y;\n};\n```\n\n这是可以通过编译的，不过事实上，上面的代码只对 **等号右侧的匿名函数**进行了类型定义，而等号左边的**mysum**，是通过赋值操作进行类型推论而推断出来的。如果需要我们手动给**mysum**添加类型，则是这样：\n\n```typescript\n//这里用的是类型推断\n//let mysum = function(x:number,y:number):number{\n//  return x + y;\n//};\n\n//如果是手动指定类型，应该是这样\nlet mysum:(x:number, y:number) => number = function (x:number,y:number):number{\n    return x + y;\n};\n```\n\n注意不要混淆了TS中的 `=>` 和ES6中的 `=>`.\n\n在TypeScript的类型定义中，`=>`用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。\n\n在ES6中，`=>`叫做箭头函数，应用十分广泛，可以参考ES6的箭头函数：[参考链接：阮一峰ES6箭头函数教程](https://www.bookstack.cn/read/es6-3rd/spilt.5.docs-function.md)\n\n#### 用接口定义函数的形状\n\n我们也可以使用接口的方式来定义一个符合某个形状的函数：\n\n```typescript\ninterface SearchFunc{\n    (source:string,subString:string):boolean;\n}\n\nlet mySearchFunc:SearchFunc;\nmySearchFunc = function(source:string,subString:string){\n    return source.search(subString) !== -1;\n}\n\nlet mySearchFunc1:SearchFunc;\nmySearchFunc1 = function(source:number,subString:string){\n    return 1==1;\n}//报错：不能将类型“(args1: number, args2: string) => boolean”分配给类型“SearchFunc”。参数“args1”和“source” 的类型不兼容。不能将类型“string”分配给类型“number”。ts(2322)\n\nlet mySearchFunc2:SearchFunc;\nmySearchFunc2 = function(source:string,subString:string){\n    return 1;\n}//报错：不能将类型“(args1: string, args2: string) => number”分配给类型“SearchFunc”。不能将类型“number”分配给类型“boolean”。ts(2322)\n```\n\n采用函数表达式接口定义函数的方式是，对等号左侧进行类型限制，可保证以后对函数名赋值时保证 **参数个数、参数类型、返回值类型** 不变。\n\n## 十、函数02\n\n#### 可选参数\n\n前面提到，多余的(或者少于要求的)参数，是不允许的。那么如何定义可选的参数呢？\n\n与接口中的可选属性类似，我们用关键字 `?`表示可选的参数：\n\n```typescript\nfunction buildName(firstName:string, lastName?:string){\n    if(lastName){\n        return firstName + \" \" + lastName;\n    }else {\n        return firstName;\n    }\n}\n\nlet tomcat = buildName(\"Tom\", \"cat\");\nlet tom = buildName(undefined, \"Tom\");\n```\n\n需要注意的是，**可选参数必须接在必须参数的后面**，换句话说，**可选参数后面不允许再出现必须参数了**。(这一点和Python很像)\n\n```typescript\nfunction buildName(firstName?:string, lastName:string){//报错：必选参数不能位于可选参数后。ts(1016)\n    if(lastName){\n        return firstName + \" \" + lastName;\n    }else {\n        return firstName;\n    }\n}\nlet tomcat = buildName(\"Tom\", \"cat\");\nlet tom = buildName(undefined, \"Tom\");\n```\n\n#### 参数默认值\n\n在ES6中，我们允许给函数的参数添加默认值，**TypeScript会将添加了默认值的参数识别为可选参数**：\n\n```typescript\nfunction buildName(firstName:string, lastName:string = 'Cat'){\n    return firstName + \" \" + lastName;\n}\nlet tomcat = buildName(\"Tom\", \"ccccat\");\nlet tom = buildName(\"Tom\");\n```\n\n此时就不受 \\[可选参数必须接在必需参数后面\\] 的限制了：\n\n```typescript\nfunction buildName(firstName:string = 'Tom', lastName:string){\n    return firstName + \" \" + lastName;\n}\nlet tomcat = buildName(\"Tom\", \"cat\");\nlet tom = buildName(undefined, \"Tom\");\n```\n\n## 十一、函数03\n\nES6中，可以使用 `...rest` 的方式获取函数中的剩余参数(rest参数):\n\n```typescript\nfunction push(array, ...items){//参数 \"array\" 隐式具有 \"any\" 类型\n    items.forEach(function(item){\n           array.push(item);\n    });\n}\nlet a :any[] = [];\npush(a,1,2,3,4);\n```\n\n事实上，`items` 是一个数组，所以我们可以用数组的类型来定义它：\n\n```typescript\nfunction push(array:any[], ...items:any[]){\n        items.forEach(function(item){\n              array.push(item);\n    });\n}\nlet a = [];\npush(a,1,2,3,4);\n```\n\n注意，rest参数只能是最后一个参数，关于rest参数，可以参考：[阮一峰ES6 rest参数详解](https://www.bookstack.cn/read/es6-3rd/spilt.2.docs-function.md)\n\n#### 重载\n\n重载允许一个函数接收不同数量或类型的参数，并做不同处理。\n\n比如，我们需要实现一个函数`reverse`，输入数字123的时候，输出反转的数字321，输入字符串hello的时候，输出反转的字符串olleh。\n\n利用联合类型，我们可以这么做：\n\n```typescript\nfunction reverse(x: numberstring):number  string  void{\n    if(typeof x === 'number'){\n        return Number(x.toString().split('').reverse().join(''));\n    }else if (typeof x === 'string'){\n            return x.split('').reverse().join('');\n}\n```\n\n然而这样有个缺点，就是不能够精确地表达，输入为数字的时候，输出应该也为数字，输入为字符串的时候，输出也应该为字符串。\n\n这时，我们可以使用 **重载** 定义多个 `reverse`的函数类型：\n\n```typescript\nfunction reverse(x:number):number;\nfunction reverse(x:string):string;\nfunction reverse(x:numberstring):numberstringvoid{\n    if(typeof x === 'number'){\n        return Number(x.toString().split('').reverse().join(''));\n    }else if (typeof x === 'string'){\n        return x.split('').reverse().join('');\n} \n}\nreverse(123) // function reverse(x: number): number (+1 overload)\nreverse('12345') // function reverse(x: number): number (+1 overload)\n```\n\n上例中，我们重复定义了多次函数`reverse`，前两次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确看到前两个提示。\n\n注意，TypeScript中会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。\n\n## 十二、类型断言01\n\n基本语法、将一个联合类型断言为其中一个类型。\n\n类型断言(Type Assertion)可以用来手动指定一个值的类型\n\n> 通过_类型断言_这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript会假设你，程序员，已经进行了必须的检查。\n> \n> ——————引自[基础类型 · TypeScript中文网 · TypeScript——JavaScript的超集 (tslang.cn)](https://www.tslang.cn/docs/handbook/basic-types.html)\n\n#### 基本语法\n\n有两种表达：\n\n> *   值 as 类型\n>     \n> *   <类型>值\n>     \n\n在tsx语法中（React的jsx语法的ts版）中必须使用 `值 as 类型`表示类型断言。\n\n故建议大家在使用类型断言时，统一使用 `值 as 类型`这样的语法。\n\n#### 将一个联合类型断言为其中一个类型\n\n之前提过，当TypeScript中不确定一个联合类型的变量到底是哪个类型的时候，我们 **只能访问联合类型所有类型的共有属性或方法**：\n\n```typescript\ninterface Cat{\n    name:string;\n    run():void;\n}\ninterface Fish{\n    name:string;\n    swim():void;\n}\nfunction getName(animal:CatFish):string{\n    return animal.name;\n//正常运行\n}\n\nfunction getName(animal:CatFish):string{\n    return animal.run();\n//报错：类型“Cat  Fish”上不存在属性“run”。类型“Fish”上不存在属性“run”。ts(2339)\n}\n```\n\n而有时候，我们确实需要在还不确定类型的时候就访问其中一个类型的属性或者方法，比如：\n\n```typescript\ninterface Cat{\n    name:string;\n    run():void;\n}\ninterface Fish{\n    name:string;\n    swim():void;\n}\nfunction isFish(animal:CatFish):boolean{\n    if(typeof animal.swim === 'function'){\n        return true;\n    }\n    return false;\n}\n//报错：类型“Cat  Fish”上不存在属性“swim”。类型“Cat”上不存在属性“swim”。ts(2339)\n```\n\n上述例子中，获取 `animal.swim`时会报错，\n\n此时可以使用类型断言，将animal断言为Fish：\n\n```typescript\nfunction isFish(animal:CatFish):boolean{\n    //将animal断言为Fish\n    if(typeof (animal as Fish).swim === 'function'){\n        return true;\n    }\n    return false;\n}\n```\n\n这样就可以解决访问animal.swim时的报错问题了。\n\n不过需要注意的是，类型断言只能够 ’欺骗‘TypeScript编译器，无法避免运行时的错误，滥用类型断言反而会导致运行时错误：\n\n```typescript\nfunction swim(animal:CatFish):void{\n    (animal as Fish).swim();\n}\nconst tom:Cat = {\n    name:'Tom',\n    run(){ console.log(\"I'm running...\");}\n};\nswim(tom)\n//编译时不报错，运行时报错：TypeError：animal.swim is not a function\n```\n\n上面例子中，编译时不会报错，但是运行时会报错，当我们执行 tsc命令编译时会看到输出的文件无内容。\n\n原因是因为 `(animal as Fish).swim()` 这段代码隐藏了 animal可能为 Cat 的情况，将 animal 直接断言为 Fish了，而TypeScript编译器信任了我们的断言，故在调用 `swim()`时编译没有错误。\n\n总之，**使用断言一定要格外小心**，尽量避免断言后调用方法或引用深层属性。以减少不必要的 **运行时错误**。\n\n## 十三、类型断言02\n\n将一个父类断言为具体的子类\n\n当类之间有继承关系时，类型断言也是很常见的：\n\n```typescript\nclass ApiError extends Error{\n    code:number = 0;\n}\nclass HttpError extends Error{\n    statusCode:number = 200;\n}\n\nfunction isApiError(myError:Error){\n    if(typeof (myError as ApiError).code === 'number'){\n        return true;\n    }\n    return false;\n}\n```\n\n上述例子中，我们声明了函数isApiError，它用来判断传入的参数是不是ApiError类型，为了实现这样一个函数，它的参数类型肯定得是比较抽象的父类Error，这样的话这个函数就能接受Error或他的子类作为参数了。\n\n但是由于父类Error中没有code属性，故直接获取myError.会报错：类型“Error”上不存在属性“code”。这时候需要使用类型断言获取(myError as ApiError).code。\n\n大家可能会注意到，在这个例子中会有一个更合适的方式来判断是不是ApiError，那就是使用instaceof：\n\n```typescript\nclass ApiError extends Error{\n    code:number = 0;\n}\nclass HttpError extends Error{\n    statusCode:number = 200;\n}\nfunction isApiError(myError:Error){\n    if(myError instanceof ApiError){\n        return true;\n    }\n    return false;\n}\n```\n\n上面的例子中，用instanceof确实是一个很好的方式，因为ApiError是一个JavaScript的类，能够通过instanceof判断是否是它的实例。\n\n但是有的情况下ApiError和HttpError不是一个真正的类，而只是一个TypeScript接口，接口是一个类型，不是一个真正的值，它在编译结果中会被删除，当然就无法用instanceof来判断：\n\n```typescript\ninterface ApiError extends Error{\n    code:number;\n}\ninterface HttpError extends Error{\n    statusCode:number;\n}\nfunction isApiError(myError:Error){\n    if(myError instanceof ApiError){\n        return true;\n    }\n    return false;\n}\n//报错：“ApiError”仅表示类型，但在此处却作为值使用\n```\n\n此时就只能用类型断言，通过判断是否存在 code 属性来判断传入的参数是否为 ApiError了：\n\n```typescript\ninterface ApiError extends Error{\n    code:number;\n}\ninterface HttpError extends Error{\n    statusCode:number;\n}\nfunction isApiError(myError:Error){\n    if(typeof (myError as ApiError).code === 'number'){\n        return true;\n    }\n    return false;\n}\n```\n\n## 十四、类型断言03\n\n将任何一个类型断言为 `any`\n\n理想情况下，TypeScript的类型系统运转良好，每个值的类型都具体而精确。\n\n当我们引用一个在此类型上不存在的属性或方法时，会报错：\n\n```typescript\nconst foo: number = 1;\nconsole.log(foo.length);\n//报错：类型“number”上不存在属性“length”。ts(2339)\n```\n\n上面例子中，数字类型的变量foo上是没有length属性的，故TypeScript编译时给出了错误提示。\n\n这种错误提示显然是很有用的。\n\n但有的时候，我们非常确定这段代码不会出错，比如：\n\n```typescript\nwindow.foo = 1;\n//报错：类型“Window & typeof globalThis”上不存在属性“foo”。ts(2339)\n```\n\n上面的例子中，我们需要将window上添加一个foo属性，但是TS会给我们报错，提示window不存在属性foo。\n\n此时我们可以使用`as any`临时将window断言为`any`类型：\n\n```typescript\n(window as any).foo = 1;\n```\n\n在 `any` 类型中，**访问任何属性都是可以的**。\n\n需要注意的是，将一个变量断言为any可以说是解决TypeScript中类型问题的最后一个手段。\n\n但是它极有可能真正掩盖了类型错误，如果不是十分确定，就不要使用 `as any`。\n\n总之，一方面不要滥用 any类型，另一方面也不要忽略他带来的作用。我们需要在类型的严格性和开发的方便性之间平衡利弊，才能发挥TypeScript最大的价值。\n\n## 十五、类型断言04\n\n将`any`类型断言为一个具体的类型\n\n在日常的开发中，我们不可避免的需要处理any类型的变量，它们可能是由于第三方库未能定义好自己的类型，也可能是历史遗留的或其它人编写的烂代码，还可能是受到TypeScript类型系统的限制而无法精确定义类型的场景。\n\n遇到`any`类型的变量时，我们可以选择无视他，任由他滋生更多的`any`类型。\n\n我们可以选择改进它，通过类型断言及时地吧`any`断言为精确的类型，亡羊补牢，使我们的代码向着可维护性高的目标发展。\n\n举例来说，历史遗留的代码中有个getCacheData函数，它的返回值是any:\n\n```typescript\nfunction getCacheData(key:string):any{\n    return (window as any).cache[key];\n}\n```\n\n那么我们在使用这个getCacheData函数的时候，最好能够将调用了getCacheData之后的返回值断言为一个精确的类型，这样就方便了后续的操作：\n\n```typescript\nfunction getCacheData(key:string):any{\n    return (window as any).cache[key];\n}\n\ninterface Cat{\n    name:string;\n    run():void;\n}\n\nconst tom = getCacheData('tom') as Cat;\ntom.run();\n```\n\n上面例子中，我们调用完getCacheData之后，立即将她断言为Cat类型，这样的话明确了tom的类型，后续对tom的访问时就有了代码补全，提高了代码的可维护性。\n\n> ##### 题外话\n> \n> 个人认为在遇到较多any类型变量时，尽量在接下来少用或者不用`any`类型，根据IDE给出的提示将类型规范化，能减少项目80%的潜在bug。\n> \n> #### 解决any出现次数过次的问题\n> \n> 复杂类型的类型定义\n> \n> 1.  细拆出重复定义的公共项，使用extents 关键字或者 & 交叉运算符来进行整合，提高利用率； 例1：\n>     \n>     ```typescript\n>     1. // bad\n>       interface Person {\n>           firstName: string;\n>         lastName: string;\n>        }\n>     \n>     interface PersonWithBirthDate {\n>       firstName: string;\n>      lastName: string;\n>      birth: Date;\n>     }\n>     // good\n>     interface Person {\n>       firstName: string;\n>      lastName: string;\n>     }\n>     interface PersonWithBirthDate extends Person {\n>       birth: Date;\n>     }\n>     ```\n>     \n>     例2：\n>     \n>     ```typescript\n>     export type List = {\n>         creatTime: number  string;\n>         creator: string;\n>         desc: string;\n>         id: string;\n>         modifier: string;\n>         token: string;\n>         updateTime: number  string;\n>       };\n>     \n>     export type ProjectList = {\n>      id: string;\n>      projectName: string;\n>     } & List;\n>     \n>     export type TaskList = {\n>      name: string;\n>     } & List;\n>     ```\n>     \n>     新的问题：如果很多字段要打问号怎么办？下面会讲到\n>     \n> 2.  使用typeof定义一个类型匹配初始值（常见的使用场景之一：固定的Schema配置适用）\n>     \n>     ```typescript\n>     const INIT_OPTIONS= {\n>       width: 640,\n>      height: 480,\n>      color: \"#00FF00\",\n>      label: \"VGA\",\n>     };\n>     \n>     interface Options {\n>       width: number;\n>      height: number;\n>      color: string;\n>      label: string;\n>     }\n>     \n>     // 快速获取配置对象的形状\n>     type Options = typeof INIT_OPTIONS;\n>     ```\n>     \n> 3.  使用Ts 内置类型来解决？号太多的问题\n>     \n>     *   Utility Types\n>     *   充分利用lib.es5.d.ts中的Partial, Pick , Extract, Omit等方法，扩展第三方、或已存在的类型，不要重复定义完全一样的字段。\n> \n> 参考链接：[TypeScript：为什么不要用any声明类型 - 掘金 (juejin.cn)](https://juejin.cn/post/7074832632541872136)\n> \n> [规范TS项目Any类型的使用\\_Jasmine\\_jiamei的博客-CSDN博客\\_ts 对象属性any](https://blog.csdn.net/weixin_43827779/article/details/120343486)\n\n## 十六、类型断言05\n\n类型断言的限制\n\n从上面的例子可以总结出：\n\n> *   联合类型可以被断言为其中一个类型\n>     \n> *   父类可以被断言为子类\n>     \n> *   任何类型都可以被断言为 `any`\n>     \n> *   `any`可以被断言为任意类型\n>     \n\n那么类型断言有没有什么限制呢？是不是任何一个类型都可以被断言为任何另一个类型呢？\n\n答案是否定的——并不是任何一个类型都可以被断言为任何另一个类型。\n\n具体来说，若A、B两者具有共同的属性或者方法，那么A能够被断言为B，B也能够断言为A。\n\n下面我们通过一个简化的例子，来理解类型断言的限制：\n\n```typescript\n//两者是有共同的属性或者方法，比如Animal和Cat都有name\ninterface Animal{\n    name:string;\n}\ninterface Cat{\n    name:string;\n    run():void;\n}\nfunction testAnimal(animal: Animal){\n    return (animal as Cat);\n}\nfunction testCat(cat : Cat){\n    return (cat as Animal);\n}\n```\n\n上述例子中是可以断言的，我们再看看下面的例子：\n\n```typescript\n//两者没有有共同的属性或者方法，\ninterface Animal{\n    name:string;\n}\ninterface Cat{\n//  name:string;\n    run():void;\n}\nfunction testAnimal(animal: Animal){\n    return (animal as Cat); //报错：类型 \"Animal\" 中缺少属性 \"run\"，但类型 \"Cat\" 中需要该属性。ts(2352)\n}\nfunction testCat(cat : Cat){\n    return (cat as Animal);//报错：类型 \"Cat\" 中缺少属性 \"name\"，但类型 \"Animal\" 中需要该属性。ts(2352)\n}\n```\n\n这时候会报错，两者不能充分重叠，这意味着要想断言成功，需要具备一个条件：\n\n*   要使得A和B能够被 **互相断言**，就要A兼容B或者B兼容A\n\n## 十七、类型断言06\n\n双重断言\n\n既然：\n\n*   任何类型都可以被断言为any\n*   an可以被断言为任何类型\n\n那么我们是不是可以使用双重断言 `as any as foo` 来将任何一个类型断言为另一个类型呢？\n\n```typescript\ninterface Cat{\n    run():void;\n}\ninterface Fish{\n    swim():void;\n}\n\nfunction testCat(cat : Cat){\n    return (cat as any as Fish);\n}\n```\n\n上述例子中，若直接使用 `cat as Fish` 会报错：类型 \"Cat\" 中缺少属性 \"swim\"，但类型 \"Fish\" 中需要该属性。因为Cat和Fish都互不兼容。\n\n但是若使用双重断言，则可以打破 \\[要使得A能都断言B ,就要A兼容B或者B兼容A\\] 的限制，将任何一个类型断言为任何另一个类型。\n\n若你使用了这种双重断言，那么十有八九都是非常错误。他很可能会导致运行时错误。\n\n**除非迫不得已，否则千万别用双重断言**。（咋迫不得已？基本不用吧？）\n\n## 十八、类型断言07\n\n类型断言VS类型转换\n\n类型断言只会影响TypeScript编译时的类型，类型断言语句会在编译结果中被删除：\n\n```typescript\nfunction toBoolean(something:any):boolean{\n    return something as boolean;\n}\ntoBoolean(1);\n//返回值为1\n```\n\n在上面的例子中，将`something`断言为`boolean`可以通过编译，但是并没有什么用，代码在编译后会变成：\n\n```javascript\nfunction toBoolean(something) {\n    return something;\n}\ntoBoolean(1);\n//返回值为1\n```\n\n所以类型断言不是类型转换，他不会真的影响到变量的类型。\n\n若要进行类型转化，需要直接调用类型转换的方法：\n\n```typescript\nfunction toBoolean(something:any):boolean{\n    return Boolean(something);\n}\ntoBoolean(1);\n//返回值为true\n```\n\n## 十九、类型断言08\n\n类型断言VS类型声明\n\n在这个例子中：\n\n```typescript\nfunction getCacheData(key:string):any{\n    return (window as any).cache[key];\n}\n\ninterface Cat{\n    name:string;\n    run():void;\n}\n\nconst tom = getCacheData('tom') as Cat;\ntom.run();\n```\n\n我们使用 `as Cat`将`any`类型断言为了`Cat`类型。\n\n但实际上还有其他方式可以解决这个问题：\n\n```typescript\nfunction getCacheData(key:string):any{\n    return (window as any).cache[key];\n}\n\ninterface Cat{\n    name:string;\n    run():void;\n}\nconst tom:Cat = getCacheData('tom');\ntom.run();\n```\n\n上面的例子中，我们通过类型声明的方式，将`tom`声明为`Cat`，然后再将`any`类型的getCacheData('tom')赋值给`Cat`类型的`tom`。\n\n这和类型断言是非常相似的，而且产生的结果也几乎是一样的——`tom`在接下来的代码中都变成了`Cat`类型。\n\n他们的区别，可以通过这个例子来理解：\n\n```typescript\ninterface Animal{\n    name:string;\n}\ninterface Cat{\n    name:string;\n    run():void;\n}\nconst animal: Animal = {\n    name:'tom'\n}\nlet tom = animal as Cat;\n```\n\n上述例子中，由于`Animal`兼容 `Cat`，故可以将 `animal` 断言为 `Cat`赋值给`tom`。\n\n但是若直接声明tom为`Cat`类型：\n\n```typescript\ninterface Animal{\n    name:string;\n}\ninterface Cat{\n    name:string;\n    run():void;\n}\nconst animal: Animal = {\n    name:'tom'\n}\nlet tom: Cat = animal;\n//报错：类型 \"Animal\" 中缺少属性 \"run\"，但类型 \"Cat\" 中需要该属性。ts(2741)\n```\n\n则会报错，不允许将Cat类型的tom赋值为animal。\n\n我们可以得出结论：\n\n*   A断言为B时，A和B有一个及以上相同的属性或方法即可\n*   A声明为B时，A必须具备B的所有属性和方法\n\n知道了他们的核心区别，就知道了类型声明是比类型断言更加严格的。\n\n所以为了增加代码的质量我们最好优先使用类型声明，这也比类型断言的 `as`语法更有优势。\n\n## 二十、类型断言09\n\n类型断言VS泛型\n\n这是一个例子：\n\n```typescript\nfunction getCacheData(key:string):any{\n    return (window as any).cache[key];\n}\ninterface Cat{\n    name:string;\n    run():void;\n}\nconst tom = getCacheData('tom') as Cat;\ntom.run();\n```\n\n我们还有第三种方式可以解决这个问题，那就是泛型：\n\n```typescript\nfunction getCacheData<T>(key:string):T{\n    return (window as any).cache[key];\n}\ninterface Cat{\n    name:string;\n    run():void;\n}\nconst tom = getCacheData<Cat>('tom');\ntom.run();\n```\n\n通过给`getCacheData`函数添加一个泛型 ,我们可以更加规范的实现对`getCacheData`返回值的约束，这也同时去除掉了代码中的`any`，是最优的一个解决方式。\n\n> 关于**泛型**\n> \n> 是一种把明确类型的工作推迟到创建对象或者调用方法的时候才去明确的特殊的类型。\n> \n> **泛型的定义**\n> \n> 主要有以下两种：\n> \n> 1.  在程序编码中一些包含**类型参数**的类型，也就是说泛型的参数只可以代表类，不能代表个别对象。（这是当今较常见的定义）\n> 2.  在程序编码中一些包含参数的[类](https://baike.baidu.com/item/类)。其参数可以代表类或对象等等。（现在人们大多把这称作[模板](https://baike.baidu.com/item/模板)）\n> \n> 不论使用哪个定义，泛型的参数在真正使用泛型时都必须作出指明。\n> \n> 参考：[泛型\\_百度百科 (baidu.com)](https://baike.baidu.com/item/泛型/4475207#2)\n\n## 二一、type关键字\n\n使用type关键字定义类型别名和字符串字面量类型\n\n我们来看一个方法：\n\n```typescript\nfunction getName(n:string(() => string)):string{\n    if(typeof n === 'string'){\n        return n;\n    }else{\n        return n();\n    }\n}\n```\n\n`type`关键字作为类型别名用来给一个类型起个新名字\n\n```typescript\ntype Name = string;\ntype NameResolver = ()=> string;\ntype NameOrResolver = Name  NameResolver;\nfunction getName(n:NameResolver):Name{\n    if (typeof n === 'string'){\n        return n;\n    }else{\n        return n();\n    }\n}\n```\n\n上述例子中，我们使用`type`关键字创建类型别名。\n\n**类型别名常用语联合类型**。\n\n字符串字面量类型用来约束取值只能是某几个字符串中的一个\n\n```typescript\ntype EventsName = 'click'  'scroll'  'mousemove';\nfunction handleEvent(ele:Element  null,event:EventsName){\n    //do something\n}\nhandleEvent(document.getElementById('hello'),'click');\n//正常运行\nhandleEvent(document.getElemnetById('world'),'dbclick');\n//报错：类型“\"dbclick\"”的参数不能赋给类型“EventsName”的参数。ts(2345)\n```\n\n## 二二、元组\n\n数组合并了相同类型的对象，而元组(Tuple)合并了不同类型的对象。\n\n元组起源与函数编程语言(如F#，Python也有元组的概念)，这些语言中会频繁使用元组。\n\n**举个例子**，定义一对值分别为 `string`和 `number`的元组：\n\n```typescript\nlet tom:[string,number] = ['Tom',15];\n```\n\n当赋值或访问一个已知索引的元素时，会得到正确的类型：\n\n```typescript\nlet tom:[string,number];\ntom[0] = 'Tom';\ntom[1] = 15;\n```\n\n也可以赋值其中一项：\n\n```typescript\nlet tom:[string,number];\ntom[0] = 'Tom';\n```\n\n但是当直接对元组进行初始化赋值操作时，需要提供所有元组类型指定的项\n\n```typescript\nlet tom:[string,number];\ntom = ['Tom',18];\n```\n\n下面这样就不行了：\n\n```typescript\nlet tom:[string,number];\ntom = ['Tom'];\n//报错：不能将类型“[string]”分配给类型“[string, number]”。源具有 1 个元素，但目标需要 2 个。ts(2322)\n```\n\n**越界元素**\n\n当添加越界元素时，他的类型会被限制为元组中每个类型的联合类型：\n\n```typescript\nlet tom:[string,number];\ntom = ['Tom',18];\ntom.push('male');//可以添加stirng，此时tom为['Tom',18,'male']\ntom.push(true);//不可以添加boolean\n//报错：类型“boolean”的参数不能赋给类型“string  number”的参数。ts(2345)\n```\n\n## 二三、枚举\n\n枚举(Enum)类型用于取值被限定在一定范围的场景，比如一周只能有七天，颜色限定为红绿蓝等。\n\n枚举使用`enum`关键字来定义：\n\n```typescript\nenum Days{Sun, Mon, Tue, Wed, Thu, Fri, Sat};\n```\n\n枚举成员会被赋值为从 0 开始递增的数字，同时也会对枚举值到枚举名进行反向映射：\n\n```typescript\nenum Days{Sun, Mon, Tue, Wed, Thu, Fri, Sat};\n\nconsole.log(Days['Sun'] === 0);//true\nconsole.log(Days['Mon'] === 1);//true\nconsole.log(Days['Wed'] === 3);//true\nconsole.log(Days['Thu'] === 4);\n//console.log(Days['Sun'] === 4);//false,且不能通过编译，IDE提示：此条件将始终返回 \"false\"，因为类型 \"Days.Sun\" 和 \"4\" 没有重叠。\n\nconsole.log(Days[0] === 'Sun');//true\nconsole.log(Days[1] === 'Mon');//true\nconsole.log(Days[3] === 'Wed');//true\nconsole.log(Days[4] === 'Sun');//false，IDE不进行提示\n```\n\n上面的例子会被编译为JS代码：\n\n```javascript\nvar Days;\n(function (Days) {\n    Days[Days[\"Sun\"] = 0] = \"Sun\";\n    Days[Days[\"Mon\"] = 1] = \"Mon\";\n    Days[Days[\"Tue\"] = 2] = \"Tue\";\n    Days[Days[\"Wed\"] = 3] = \"Wed\";\n    Days[Days[\"Thu\"] = 4] = \"Thu\";\n    Days[Days[\"Fri\"] = 5] = \"Fri\";\n    Days[Days[\"Sat\"] = 6] = \"Sat\";\n})(Days  (Days = {}));\n;\nconsole.log(Days['Sun'] === 0); //true\nconsole.log(Days['Mon'] === 1); //true\nconsole.log(Days['Wed'] === 3); //true\nconsole.log(Days['Thu'] === 4);\n// console.log(Days['Sun'] === 4);//false,IDE提示：此条件将始终返回 \"false\"，因为类型 \"Days.Sun\" 和 \"4\" 没有重叠。\nconsole.log(Days[0] === 'Sun'); //true\nconsole.log(Days[1] === 'Mon'); //true\nconsole.log(Days[3] === 'Wed'); //true\nconsole.log(Days[4] === 'Sun'); //false，IDE不进行提示\n```\n\n## 二四、类01\n\n#### 类的概念\n\n虽然JavaScript中有类的概念，但是可能大多数JavaScript程序员并不是非常熟悉类，这里对类相关的概念做一个简单的介绍。\n\n*   类(Class):定义一件事物的抽象特点，包含它的属性和方法\n    \n*   对象(Object):类的实例，通过 `new`生成\n    \n*   面向对象编程(Object Oriented Programming，简称 OOP)三大特性：**继承、封装、多态**\n    \n*   继承(Inheritance):子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特征。\n    \n*   封装(Encapsulation):将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据。\n    \n*   多态(Polymorphism):由继承而产生相关的不同的类，对同一个方法可以有不同的响应。比如Cat和Fish都继承自Animal，但是分别实现了自己的eat方法。此时针对某一个实例，我们无须了解他是Cat还是Dog，就可以直接调用eat方法，程序会自动判断出来应该如何执行eat方法。\n    \n*   存取器(Getter & Setter)：用于改变属性的读取和赋值行为\n    \n*   修饰器(Modifiers):修饰符是一些关键字，用于限定成员或类型的性质。比如public 表示共有的属性或方法。\n    \n*   抽象类(Abstract Class):抽象类是提供给其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中被实现。\n    \n*   接口(Interface):不同类之间共有的属性或方法，可以抽象成一个接口，接口可以被类实现(implements)。一个类只能继承自另一个类，但是可以实现多个接口。\n    \n*   构造函数(Constructor):构造函数 ，是一种特殊的方法。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中\n    \n\n使用`class`关键字定义类，使用 `constructor`关键字定义构造函数。\n\n通过`new`生成新的实例的时候，会自动调用构造函数：\n\n```typescript\nclass Animal{\n    public _name;\n    constructor(name:string){\n        this._name = name;\n    }\n    sayHello(){\n        return `My name is ${this._name}`;\n    }\n}\n\nlet tom = new Animal('Tom');\nconsole.log(tom.sayHello); //My name is tom\n```\n\n## 二五、类02\n\n类的存取器 ：`get` 、`set`\n\n使用getter 和 setter 可以获取和改变类的属性：\n\n```typescript\nclass Animal{\n    // private name:string;\n    constructor(name:string){\n        this.name = name;\n    }\n    get name(){\n        return 'Jack';\n    }\n    set name(value){\n        console.log('This name:'+value);\n    }\n}\n\nlet a = new Animal('Kitty');//setter Kitty\na.name = 'Tom';//setter Tom\nconsole.log(a.name);//getter Jack\n```\n\n## 二六、类03\n\n类的静态方法\n\n使用`static`修饰符修饰的方法成为静态方法，他们不需要实例化，而直接通过类来调用：\n\n```typescript\nclass Animal{\n    public _name;\n    constructor(name:string){\n        this._name = name;\n    }\n    sayHi(){//这是实例方法\n        return `My name is ${ this._name }`;\n    }\n    static sayHello(){//这是类方法\n        return \"I'm Animal class\";\n    }\n}\n\nlet a = new Animal('Jack');\nconsole.log(a.sayHi());//My name is Jack\nconsole.log(Animal.sayHello());//I'm Animal class\n```\n\n## 二七、类04\n\n类的三种访问修饰符：public、private、protected\n\n访问权限大小由大到小：\n\n*   public\n    \n    全局的、公共的，当前所涉及到的地方都可以使用\n    \n    ```typescript\n    class Animal{\n    public _name;\n      public constructor(name:string){\n          this._name = name;\n      }\n    }\n    \n    let a  = new Animal('Jack');\n    console.log(a._name);// Jack\n    a._name = 'Tom';\n    console.log(a._name);// Tom\n    ```\n    \n*   protected\n    \n    受保护的，允许子类访问，不允许公共访问：\n    \n    ```typescript\n    class Animal{\n    protected name;\n      public constructor(name:string){\n          this.name = name;\n      }\n    }\n    \n    class Cat extends Animal{\n      public constructor(name:string){\n          super(name);\n          console.log(this.name);\n      }\n    } \n    ```\n    \n*   private\n    \n    私有的，只能在类的内部使用，子类也无法访问，无法在实例后通过类的实例属性访问：\n    \n    ```typescript\n    class Animal{\n    private _name;\n      public constructor(name:string){\n          this._name = name;\n      }\n    }\n    \n    let a  = new Animal('Jack');\n    console.log(a._name);// 报错:属性“_name”为私有属性，只能在类“Animal”中访问。ts(2341)\n    a._name = 'Tom'; //报错:属性“_name”为私有属性，只能在类“Animal”中访问。ts(2341)\n    console.log(a._name);// 报错:属性“_name”为私有属性，只能在类“Animal”中访问。ts(2341)\n    ```\n    \n\n默认是**public**，但是 TSLint 可能会要求必须用限定符来表明这个属性或方法是什么类型。\n\n## 二八、类05\n\n参数属性和只读属性关键字\n\n修饰符和`readonly`还可以使用在构造函数参数中，等同于类中定义该属性同时给该属性赋值，使代码更加简洁：\n\n```typescript\nclass Animal{\n    public name:string;\n    public constructor(public myname:string){\n        this.name = myname;\n    }\n}\n```\n\n只读属性\n\n```typescript\nclass Animal{\n    readonly name:string;\n    public constructor(myname:string){\n        this.name = myname;\n    }\n}\n\nlet a  = new Animal('Tom');\nconsole.log(a.name);//Tom\na.name = 'Jack';//报错：无法分配到 \"name\" ，因为它是只读属性。ts(2540)\n```\n\n## 二九、类06\n\n抽象类\n\n`abstract`关键字用来定义抽象类和其中的抽象方法。\n\n什么是抽象类？\n\n首先，抽象类是不允许被实例化的：\n\n```typescript\nabstract class Animal{\n    //public name:string;//这报错：属性“name”没有初始化表达式，且未在构造函数中明确赋值。\n    public name:any;\n    public constrcutor(name:string){\n        this.name = name;\n    }\n    public abstract sayHi():void;\n}\n\nlet a = new Animal('Tom');\n//报错：无法创建抽象类的实例。ts(2511)\n```\n\n上面例子中，我们定义了一个抽象类类`Animal`，并且定义了一个抽象方法 `sayHi`，在实例化抽象类是报错了。\n\n其次，抽象类中的抽象方法必须被子类实现：\n\n```typescript\nclass Cat extends Animal{\n    /**\n     * eat\n     */\n    public eat() {\n        console.log('Im eating');\n    }\n}\n//报错：非抽象类“Cat”不会实现继承自“Animal”类的抽象成员“sayHi”。ts(2515)\n```\n\n正确的抽象类例子：\n\n```typescript\nabstract class Animal{\n    public name: any;\n    public constrcutor(name:string): void{\n        this.name = name;\n    }\n    public abstract sayHi():void;\n}\n\nclass Cat extends Animal{\n    public sayHi(): void {\n        console.log(`This is Cat ${ this.name}`);\n    }\n}\nlet a = new Cat('Tom');\n```\n\n> 上面例子为原视频的例子，却报错：应有 0 个参数，但获得 1 个。ts(2554)\n> \n> 找了一些资料还没找到原因，后续再来更\n\n## 三十、类与接口\n\n#### 类继承接口\n\n实现(implements)是面向对象的一个重要概念。一般来说，一个类只能继承自另一个类，有时候不用类之间可以有一些共有的特性，这时候就可以把特性提取成接口(interfaces)，用`implements`关键字来实现，这个特性大大提高了面向对象的灵活性。\n\n举例来说，门是一个类，防盗门是门的子类。如果防盗门有一个报警器的功能，我们可以简单的给防盗门添加一个报警方法，这时候如果有另一个类：车，也有报警器的功能，就可以考虑把报警器提取出来，作为一个接口，防盗门，和车都去实现它：\n\n```typescript\ninterface Alert{\n    alert():void;\n}\nclass Door{\n}\n\nclass SecurityDoor extends Door implements Alert{\n    alert(){\n        console.log('SecurityDoor alert');\n    }\n}\nclass car implements Alert{\n    alert(){\n        console.log('Car alert');\n    }\n}    \n```\n\n一个类可以实现多个接口：\n\n```typescript\ninterface Alert{\n    alert():void;\n}\ninterface Light{\n    lightOn():void;\n    lightOff():void;\n}\n\nclass Car implements Alert, Light{\n    alert(){\n        console.log('Car alert');\n    }\n    lightOff(){\n         console.log('Light Off');\n    }\n    lightOn(){\n         console.log('Light On');\n    }\n}\n```\n\n上述例子中，`Car` 实现了 `Alert` 和 `Light`接口，既能报警，也能开关灯。\n\n#### 接口继承接口\n\n接口和接口之间可以是继承关系：\n\n```typescript\ninterface Alert{\n    alert():void;\n}\ninterface LightableAlert extends Alert{\n    lightOn():void;\n    lightOff():void;\n}\n```\n\n这很好理解，`LightableAlert` 继承了 `Alert` ，除了拥有`alert`方法之外，还可以拥有自己定义的两个新方法 `lighton`和`lightoff`。\n\n#### 接口继承类\n\n常见的面向对象语言中，**接口是不能继承类的，但是在TypeScript中是可以的**：\n\n```typescript\nclass Point{\n    x:number;\n    y:number;\n    constructor(x:number,y:number){\n        this.x = x;\n        this.y = y;\n    }\n}\n\ninterface Point3d extends Point{\n    z:number;\n}\n\nlet point3d:Point3d = {x:1,y:2,z:3};\n```\n\n**但在这里不推荐这样使用，我们在定义接口的时候只做定义，具体实现交给实现接口的类去完成**。\n\n## 三一、泛型01\n\n泛型(Generics)是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候在指定类型的一种特性。\n\n首先，我们来实现一个函数 `createArray`，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值。：\n\n```typescript\nfunction creatArray(length:number,value:any): Array<any>{\n    let result = [];\n    for(let i = 0; i < length; i++){\n        result[i] = value;\n    }\n    return result;\n}\n\ncreatArray(3,'x');//['x','x','x']\n```\n\n上例中，我们使用了之前提到过的数组泛型来定义返回值的类型。\n\n这段代码编译不会报错，但是一个显而易见的缺陷是，他并没有准确的定义返回值的类型；\n\n`Array<any>`允许数组的每一项都为任意类型。但是我们预期的是，数组中每一项都应该是输入的`value`的类型。\n\n这时候，泛型就派上用场：\n\n```typescript\nfunction createArray<T>(length: number, value: T):Array<T>{\n    let result: T[] = [];\n    for(let i = 0; i<length; i++){\n        result[i] = value;\n    }\n    return result\n}\ncreatArray<string>(3,'x');//['x','x','x']\n```\n\n上例中，我们在函数名后添加了`<T>`，其中`T` 用来指代任意输入的类型，在后面的输入`value:T` 和输出 `Array<T>` 中即可使用了。接着在调用的时候，可以指定他的具体的类型为`string` 型。当然，也可以不手动指定，而让类型推论自动推算出来：\n\n```typescript\nfunction createArray<T>(length: number, value: T):Array<T>{\n    let result: T[] = [];\n    for(let i = 0; i<length; i++){\n        result[i] = value;\n    }\n    return result\n}\n//不指定类型，通过类型推断来自动推断出类型 \ncreatArray(3,'x');//['x','x','x']\n```\n\n## 三二、泛型02\n\n多个类型参数\n\n定义泛型的时候，可以一次定义多个类型参数：\n\n```typescript\nfunction swap<T, U>(tuple:[T, U]): [U, T]{\n    return [tuple[1],tuple[0]];\n}\nswap([7,'seven']);//['seven', 7]\n```\n\n上例中，我们定义了一个 `swap` 函数，用来交换输入的元组\n\n## 三三、泛型03\n\n泛型约束\n\n在函数内部使用泛型变量的时候，由于事先不知道他是哪种类型，所以不能随意的操作它的属性或方法：\n\n```typescript\nfunction loggingIdentity<T>(arg: T): T{\n    console.log(arg.length);\n    return arg;\n}\n//报错：类型“T”上不存在属性“length”。ts(2339)\n```\n\n上例中，泛型 `T` 不一定包含属性 `length` ，所以编译的时候报错了。\n\n这时，我们可以对泛型进行约束，致允熙这个函数传入那些包含 `length` 属性的变量，这就是泛型约束：\n\n```typescript\ninterface LengthWise{\n    length: number;\n}\nfunction loggingIdentity<T extends LengthWise>(arg: T): T{\n    console.log(arg.length);\n    return arg;\n}\n```\n\n上例中，我们使用了 `extends` 约束了泛型 `T` 必须符合接口 `LengthWise` 的形状，也就是必须包含 `length` 属性。\n\n此时如果调用 `loggingIdentity` 的时候，传入的 `arg` 不包含 `length` ，则会在编译时报错：\n\n```typescript\ninterface LengthWise{\n    length: number;\n}\nfunction loggingIdentity<T extends LengthWise>(arg: T): T{\n    console.log(arg.length);\n    return arg;\n}\nloggingIdentity('1111');\n// 4\nloggingIdentity(8);\n//报错：类型“number”的参数不能赋给类型“LengthWise”的参数。ts(2345)\n```\n\n## 三四、泛型04\n\n泛型接口\n\n之前学习过，可以使用接口的方式来定义一个函数需要符合的形状：\n\n```typescript\ninterface SearchFunc{\n    (source: string, subString: string): boolean;   \n}\n\nlet mySearch: SearchFunc;\nmySearch = function(source: string, subString: string){\n    return source.search(subString) != -1;\n}\n```\n\n当然也可以使用含有泛型的接口来定义函数的形状：\n\n```typescript\ninterface CreateArrayFunc{\n    <T>(length: number, value: T): Array<T>;\n}\nlet createArray: CreateArrayFunc;\ncreateArray = function<T>(length: number, value: T): Array<T>{\n    let result:T[] = [];\n    for(let i = 0; i < length; i++){\n        result[i] = value;\n    }\n    return result;\n}\n\ncreateArray(3,'x');\n//['x','x','x']\n```\n\n进一步，我们可以把泛型参数提前到接口名上：\n\n```typescript\ninterface CreateArrayFunc<T>{\n    (length: number, value: T): Array<T>;\n}\n\nlet createArray: CreateArrayFunc<any>;\ncreateArray = function<T>(length: number, value: T): Array<T>{\n    let result:T[] = [];\n    for(let i = 0; i < length; i++){\n        result[i] = value;\n    }\n    return result;\n}\n\ncreateArray(3,'x');\n//['x','x','x']\ncreateArray(3,true);\n//[true,true,true]\ncreateArray(3,{isExist:true});\n//[{isExist:true},{isExist:true},{isExist:true}]\n```\n\n## 三五、泛型05\n\n泛型类\n\n与泛型接口类似，泛型也可以用于类的类型定义中：\n\n```typescript\nclass GenericNumber<T>{\n    zeroValue!: T; //!为非空断言, 否则报错：属性“XXX”没有初始化表达式，且未在构造函数中明确赋值。\n    add!: (x: T, y: T) => T;\n}\nlet myGenericNumber = new GenericNumber<number>();\nmyGenericNumber.zeroValue = 0;\nmyGenericNumber.add = function(x,y){ return x+y; };\n```\n\n泛型参数的默认类型\n\n在TypeScript2.3以后，我们可以为泛型中的类型参数指定默认类型。当使用泛型时没有在代码中直接指定类型参数，从实际值参数中也无法推测出时，这个默认类型就会起作用。\n\n```typescript\nfunction createArray<T = string>(length: number, value: T):Array<T>{\n    let result:T[] = [];\n    for(let i = 0; i < length; i++){\n        result[i] = value;\n    }\n    return result;\n}\n```\n\n## 三六、声明合并\n\n同名函数、接口、类的合并\n\n如果定义了两个相同的名字的函数、接口或类，那么他们会合并成一个类型：\n\n#### 函数的合并\n\n之前我们学习过，我们可以使用重载定义多个函数类型：\n\n```typescript\nfunction reverse(x: number): number;\nfunction reverse(x: string): string;\nfunction reverse(x: number  string): number  string{\n    if (typeof x === 'number'){\n        return Number(x.toString().split('').reverse.join(''));\n    } else if( typeof x === 'string'){\n        return x.split('').reverse.join('');\n    }\n}\n```\n\n#### 接口的合并\n\n接口中的属性在合并时会简单地合并到一个接口中：\n\n```typescript\ninterface Alarm{\n    price: number;\n}\ninterface Alarm{\n    weight: number;\n}\n```\n\n相当于：\n\n```typescript\ninterface Alarm{\n    price: number;\n    weight: number;\n}\n```\n\n注意，**合并的属性的类型必须是唯一的**：\n\n```typescript\ninterface Alarm{\n    price: number;\n}\ninterface Alarm{\n    price: number;\n    //虽然重复了，但是类型还是number，所以不会报错\n    weight: number;\n}\n```\n\n```typescript\ninterface Alarm{\n    price: number;\n}\ninterface Alarm{\n    price: string;\n    //报错：后续属性声明必须属于同一类型。属性“price”的类型必须为“number”，但此处却为类型“string”。ts(2717)\n    weight: number;\n}\n```\n\n接口中的方法合并，和函数的合并一样：\n\n```typescript\ninterface Alarm{\n    price: number;\n    alert(s: string): string;\n}\ninterface Alarm{\n    weight: number;\n    alert(s: string, n: number): string;\n}\n```\n\n相当于：\n\n```typescript\ninterface Alarm{\n    price: number;\n    weight: number;\n    alert(s: string): string;\n    alert(s: string, n: number): string;\n}\n```\n\n#### 类的合并\n\n类的合并与借口的合并一样\n\nPS: 但是一般情况下，不建议创建多个同名接口或类，虽然可以自动合并，但是可能会发生意想不到的问题。代码不要写在两个地方，不然不好维护。\n\n## 三七、写在结尾\n\nTypeScript 应用非常广泛，最新的 Vue 和 React 均集成了 TypeScript ，这里推荐大家使用 Vue3 ，Vue3 天然支持 TypeScript。\n\n另一方面，TS 中有很多支持 ES 的语法，关系图：\n\n![image-20220507164550922](https://img-blog.csdnimg.cn/img_convert/bb541a521a9a8d8574a7711ec1caf1a2.png)\n\n最后，多看文档\n\n[TypeScript英文文档](https://www.typescriptlang.org/docs/)\n\n[TypeScript中文文档](https://www.tslang.cn/docs/home.html)","slug":"typescriptvue3-0笔记","published":1,"updated":"2024-03-12T10:44:27.120Z","_id":"cltnrar4f0014jry1bdz8hvha","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、什么是Typescript\"><a href=\"#一、什么是Typescript\" class=\"headerlink\" title=\"一、什么是Typescript\"></a>一、什么是Typescript</h2><p><a href=\"https://www.typescriptlang.org/docs/\">TypeScript英文文档</a></p>\n<p><a href=\"https://www.tslang.cn/docs/home.html\">TypeScript中文网，中文文档</a></p>\n<blockquote>\n<ul>\n<li>JavaScript的超集，遵循最新的 ES6、Es5 规范。TypeScript 扩展了 JavaScript的语法，可以编译为JavaScript，添加了类型系统的JavaScript，可以适用与任何规模的项目。</li>\n<li>TypeScript 是由微软开发的一款开源的编程语言。TypeScript 更像后端 java、C#这样的面向对象语言可以让 JS开发大型企业项目。</li>\n<li>谷歌也在大力支持 Typescript 的推广，谷歌的 angular2.x+就是基于 Typescript 语法。</li>\n<li>最新的 Vue 、React 也可以集成 TypeScript。</li>\n</ul>\n</blockquote>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220507164550922.png\" alt=\"image-20220507164550922\"></p>\n<h3 id=\"TypeScript特性\"><a href=\"#TypeScript特性\" class=\"headerlink\" title=\"TypeScript特性\"></a>TypeScript特性</h3><h4 id=\"类型系统\"><a href=\"#类型系统\" class=\"headerlink\" title=\"类型系统\"></a>类型系统</h4><span id=\"more\"></span>\n<p>从TypeScript的名字就可以看出来， <strong>[类型]</strong> 是其最核心的特性。</p>\n<p>我们知道，JavaScript是一门非常灵活的编程语言：</p>\n<blockquote>\n<ul>\n<li>  它没有约束类型，一个变量可能初始化时是字符串类型，过一会又被赋值为数字类型</li>\n<li>  由于隐式类型转化的存在，有的变量很难在运行前就确定</li>\n<li>  基于原型的的面向对象编程，使得原型上的属性或方法可以在运行时被修改。</li>\n<li>  函数是JavaScript中的一等公民，可以赋值给变量，也可以当做参数或返回值</li>\n</ul>\n</blockquote>\n<p>这种灵活性就像一把双刃剑，一方面使得JavaScript蓬勃发展，无所不能，从2013年开始就一直蝉联最普遍使用的编程语言排行榜冠军；另一方面也使得的代码质量参差不齐，维护成本高，运行错误多。</p>\n<p>而TypeScript的 <strong>类型</strong> 系统，很大程度弥补JavaScript的缺点。</p>\n<h4 id=\"TypeScript是静态类型\"><a href=\"#TypeScript是静态类型\" class=\"headerlink\" title=\"TypeScript是静态类型\"></a>TypeScript是静态类型</h4><p>类型系统按照 [类型检查的时机] 来分类，可以分为动态类型和静态类型。</p>\n<p>动态类型是指在运行时才会进行类型检查，这种语言的类型错误往往会导致运行时错误。JavaScript是一门解释型语言，没有编译阶段，所以他是动态类型，以下这段代码在运行时才会报错：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"number\">1</span>；</span><br><span class=\"line\">foo.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//Uncaught TypeError: foo.split is not a function</span></span><br><span class=\"line\"><span class=\"comment\">//运行时报错：foo.split不是一个函数，造成线上bug</span></span><br></pre></td></tr></table></figure>\n\n<p>静态类型是指编译阶段就能确定每个变量的类型，这种语言的类型错误往往会导致语法错误。TypeScript在运行前需要先编译为JavaScript，而在编译阶段就会进行类型检查，所以 <strong>TypeScript是静态类型</strong> ，这段TypeScript代码在编译阶段就会报错：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"number\">1</span>；</span><br><span class=\"line\">foo.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//Property &#x27;split&#x27; does not exist on type &#x27;number&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//编译时报错：数字没有split方法，无法通过编译</span></span><br></pre></td></tr></table></figure>\n\n<p>你可能会奇怪，这段TypeScript代码看上去和JavaScript没有什么区别呀。</p>\n<p>没错！大部分JavaScript代码都只需要经过少量的修改（或者完全不用修改）就变成了TypeScript的代码，这得益于TypeScript强大的 <strong>类型推论</strong>，即使不去手动声明变量 foo 的类型，也能在变量初始化的时候自动推论出他是一个 <code>number</code> 类型。</p>\n<p>完整的TypeScript代码是这样的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">foo</span>: <span class=\"built_in\">number</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">foo.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//Property &#x27;split&#x27; does not exist on type &#x27;number&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//编译时报错：数字没有split方法，无法通过编译</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"TypeScript是弱类型\"><a href=\"#TypeScript是弱类型\" class=\"headerlink\" title=\"TypeScript是弱类型\"></a>TypeScript是弱类型</h4><p>类型系统按照 [是否允许隐式类型转换] 来分类，可分为强类型和弱类型。</p>\n<p>以下这段代码不管是在JavaScript还是TypeScript中都是正常运行的，运行时数字1会被隐式类型转化为字符串 ‘1’ ，加号 ‘+’ 被识别为字符串拼接，打印结果为 ‘11’:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span> + <span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//打印字符串 &#x27;11&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>TypeScript是完全兼容JavaScript的，他不会修改JavaScript运行时的特性，他们都是 <strong>弱类型语言</strong>。</p>\n<h2 id=\"二、安装并编译TypeScript\"><a href=\"#二、安装并编译TypeScript\" class=\"headerlink\" title=\"二、安装并编译TypeScript\"></a>二、安装并编译TypeScript</h2><p>安装TypeScript需要NodeJS环境，如果电脑没有npm命令，可以去官网下载并安装NodeJS</p>\n<p>官网地址：<a href=\"https://nodejs.org/en/\">Node.js (nodejs.org)</a></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220507113822749.png\" alt=\"image-20220507113822749\"></p>\n<p>TypeScript安装命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g typescript</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过tsc --version可以查看版本号以确保是否安装成功</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220507121610924.png\" alt=\"image-20220507121610924\"></p>\n<p>安装以后编译ts文件很简单，我们在电脑上新建一个目录<code>code</code>，新建一个文件<code>index.ts</code>,然后在当前目录下输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc index.ts</span><br></pre></td></tr></table></figure>\n\n<p>编译完之后会在当前目录下输出一个<code>index.js</code>文件，则编译成功。如果想指定输出目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc --outFile ./js/index.js index.ts</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、基本的数据类型\"><a href=\"#三、基本的数据类型\" class=\"headerlink\" title=\"三、基本的数据类型\"></a>三、基本的数据类型</h2><h4 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h4><p>布尔值是最基础的数据类型，在TypeScript中，使用<code>boolean</code>定义布尔值类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">isDone</span>:<span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数值\"><a href=\"#数值\" class=\"headerlink\" title=\"数值\"></a>数值</h4><p>使用<code>number</code>定义数值类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mynum</span>:<span class=\"built_in\">number</span> = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><p>使用<code>string</code>定义字符串类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mystring</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;TypeScript字符串&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//模板字符串,要用反引号括起来</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">sentence</span>:<span class=\"built_in\">string</span> = <span class=\"string\">`Hello,This is <span class=\"subst\">$&#123;mystring&#125;</span>.`</span>;</span><br><span class=\"line\"><span class=\"comment\">//也可以使用js的加号 + 语法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">sentence2</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;Hello,This is&#x27;</span>+mystring;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"空值\"><a href=\"#空值\" class=\"headerlink\" title=\"空值\"></a>空值</h4><p>JavaScript没有空值(void)的概念，在TypeScript中，用<code>void</code>表示没有任何返回值的函数：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">alertName</span>(<span class=\"params\"></span>):<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;my name is tom&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>声明一个<code>void</code>类型的变量没有什么用，因为你只能将它赋值为<code>undefined</code>和<code>null</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">unsable</span>:<span class=\"built_in\">void</span> = <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Null和Undefined\"><a href=\"#Null和Undefined\" class=\"headerlink\" title=\"Null和Undefined\"></a>Null和Undefined</h4><p>在TypeScript中，默认情况下<code>null</code>和<code>undefined</code>是所有类型的子类型。 就是说你可以把 <code>null</code>和<code>undefined</code>赋值给<code>number</code>类型的变量。可以使用<code>null</code>和<code>undefined</code>来定义这两个原始数据类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n</span>:<span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">u</span>:<span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h4><p>TypeScript像JavaScript一样可以操作数组元素。有两种方式定义数组。</p>\n<p>第一种是元素类型后加 <code>[]</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">list</span>:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n<p>第二种是使用数组泛型，<code>Array&lt;元素类型&gt;</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">list</span>:<span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h4><p>元组（Tuple）类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。但<strong>定义变量时类型的顺序要一致</strong>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x : [<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>];</span><br><span class=\"line\">x = [<span class=\"string\">&#x27;hello&#x27;</span>,<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"comment\">//正常运行</span></span><br><span class=\"line\">x = [<span class=\"number\">20</span>,<span class=\"string\">&#x27;HELLO&#x27;</span>];</span><br><span class=\"line\"><span class=\"comment\">//报错：不能将类型“number”分配给类型“string”。ts(2322)；不能将类型“string”分配给类型“number”。ts(2322)</span></span><br></pre></td></tr></table></figure>\n\n<p>当访问一个已知索引的元素，会得到正确的类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x[<span class=\"number\">0</span>].<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>)); <span class=\"comment\">// 正常运行</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x[<span class=\"number\">1</span>].<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>)); <span class=\"comment\">// 报错： &#x27;number&#x27; does not have &#x27;substr&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>当访问越界元素时：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;World&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//报错：不能将类型“&quot;World&quot;”分配给类型“undefined”。ts(2322)长度为 &quot;2&quot; 的元组类型 &quot;[string, number]&quot; 在索引 &quot;2&quot; 处没有元素。ts(2493)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h4><p><code>object</code>表示非原始类型，也就是除<code>number</code>，<code>string</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code>或<code>undefined</code>之外的类型。</p>\n<p>使用<code>object</code>类型，就可以更好的表示像<code>Object.create</code>这样的API。例如：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">function</span> <span class=\"title function_\">create</span>(<span class=\"params\">o:objectnull</span>):<span class=\"built_in\">void</span>;</span><br><span class=\"line\"><span class=\"title function_\">create</span>(&#123;<span class=\"attr\">pro</span>:<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"literal\">undefined</span>);</span><br><span class=\"line\"><span class=\"title function_\">create</span>();<span class=\"comment\">//报错：应有 1 个参数，但获得 0 个。ts(2554)</span></span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"number\">42</span>);<span class=\"comment\">//报错：类型“number”的参数不能赋给类型“object”的参数。ts(2345)</span></span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"string\">&quot;string&quot;</span>); <span class=\"comment\">//报错： 类型“string”的参数不能赋给类型“object”的参数。ts(2345)</span></span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"literal\">false</span>); <span class=\"comment\">//报错：类型“boolean”的参数不能赋给类型“object”的参数。ts(2345)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、任意值-Any\"><a href=\"#四、任意值-Any\" class=\"headerlink\" title=\"四、任意值(Any)\"></a>四、任意值(Any)</h2><p>任意值(Any)用来表示允许赋值为任意类型。</p>\n<p>如果是一个普通类型，在赋值过程中改变类型是不被允许的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myFavoriteNum</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">myFavoriteNum = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"comment\">//报错：不能将类型“number”分配给类型“string”。ts(2322)</span></span><br></pre></td></tr></table></figure>\n\n<p>但如果是<code>any</code>类型，则允许被赋值为任意类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myFavoriteNum</span>:<span class=\"built_in\">any</span> = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">myFavoriteNum = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在任意值上访问任何属性都是允许的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">anything</span>: <span class=\"built_in\">any</span> = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(anything.<span class=\"property\">Myname</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(anything.<span class=\"property\">myname</span>.<span class=\"property\">length</span>);</span><br></pre></td></tr></table></figure>\n\n<p>也允许调用任何方法:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">anything</span>:<span class=\"built_in\">any</span> = <span class=\"string\">&#x27;heloo&#x27;</span></span><br><span class=\"line\">anything.<span class=\"title function_\">setName</span>(<span class=\"string\">&#x27;Tom&#x27;</span>);</span><br><span class=\"line\">anything.<span class=\"title function_\">setName</span>(<span class=\"string\">&#x27;Allen&#x27;</span>).<span class=\"title function_\">sayHello</span>();</span><br><span class=\"line\">anything.<span class=\"property\">Myname</span>.<span class=\"title function_\">setFirstName</span>(<span class=\"string\">&#x27;Cat&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>所以，<strong>声明一个任意值(any)变量后，对它的任何操作，返回的内容的类型都是任意值</strong>。</p>\n<h2 id=\"五、类型推论\"><a href=\"#五、类型推论\" class=\"headerlink\" title=\"五、类型推论\"></a>五、类型推论</h2><p>如果没有明确的指定类型，那么TypeScript会依照类型推论（Type Inference）的规则推断出一个类型。</p>\n<p>以下代码虽然没有指定类型，但在编译时会出错：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myFavoriteNum = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">myFavoriteNum = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"comment\">//报错：不能将类型“number”分配给类型“string”。ts(2322)</span></span><br></pre></td></tr></table></figure>\n\n<p>事实上，它等价于：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myFavoriteNum</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">myFavoriteNum = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"comment\">//报错：不能将类型“number”分配给类型“string”。ts(2322)</span></span><br></pre></td></tr></table></figure>\n\n<p>TypeScript在没有明确指定变量类型时，会对变量的类型进行推测，这就是类型推论。</p>\n<p><strong>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 <code>any</code>类型而完全不被类型检查：</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myFavoriteNum;</span><br><span class=\"line\">myFavoriteNum = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">myFavoriteNum = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"六、联合类型\"><a href=\"#六、联合类型\" class=\"headerlink\" title=\"六、联合类型\"></a>六、联合类型</h2><p>联合类型(Union Types)表示取值可以为多种类型中的一种。</p>\n<p>举个例子</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myFavoriteNum</span>:stringnumber;</span><br><span class=\"line\">myFavoriteNum = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">myFavoriteNum = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n\n<p>从代码可以看出来联合类型使用 来分隔每一个类型。</p>\n<p>这里的 <code>let myFavoriteNum:stringnumber;</code>的含义是允许<code>myFavoriteNum</code>为<code>string</code>和<code>number</code>类型，而不能是其他类型。</p>\n<p>比如下面这个就会报错：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myFavoriteNum</span>:stringnumber;</span><br><span class=\"line\">myFavoriteNum = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">//报错：不能将类型“boolean”分配给类型“string  number”。ts(2322)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"联合类型的属性或方法\"><a href=\"#联合类型的属性或方法\" class=\"headerlink\" title=\"联合类型的属性或方法\"></a>联合类型的属性或方法</h4><p>当TypeScript不确定一个联合类型的变量到底是哪个类型的时候，我们 <strong>只能访问此联合类型的 共有属性或共有方法</strong>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getLength</span>(<span class=\"params\">something:numberstring</span>):<span class=\"built_in\">number</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> something.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错:类型“string  number”上不存在属性“length”。类型“number”上不存在属性“length”。ts(2339)</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中，因为<code>number</code>类型不存在<code>length</code>属性，所以会报错，正确的使用可以这样：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getLength</span>(<span class=\"params\">something:numberstring</span>):<span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> something.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//`toString()`方法是number和string类型的共有方法。</span></span><br></pre></td></tr></table></figure>\n\n<p>联合类型变量在被赋值的时候，会根据类型推论的推断变量的类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myFavoriteNum</span>:numberstring;</span><br><span class=\"line\">myFavoriteNum = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myFavoriteNum.<span class=\"property\">length</span>);</span><br><span class=\"line\"><span class=\"comment\">//正常运行</span></span><br><span class=\"line\">myFavoriteNum = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myFavoriteNum.<span class=\"property\">length</span>);</span><br><span class=\"line\"><span class=\"comment\">//报错：类型“number”上不存在属性“length”。ts(2339)</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中，第二行的myFavoriteNum被推断成了 <code>string</code>型，访问 <code>length</code>属性就不会报错</p>\n<p>而第四行的myFavoriteNum被推断为<code>number</code>型，访问<code>length</code>属性就会报错</p>\n<h2 id=\"七、接口\"><a href=\"#七、接口\" class=\"headerlink\" title=\"七、接口\"></a>七、接口</h2><p>在TypeScript中，我们使用 <code>interface</code> 来定义一个接口类型的对象。</p>\n<h4 id=\"什么是接口\"><a href=\"#什么是接口\" class=\"headerlink\" title=\"什么是接口\"></a>什么是接口</h4><p>在面向对象语言中，接口是一个重要的概念，它是对行为的抽象，而具体的行为则需要类去实现。</p>\n<p>typesc的核心原则之一是对之所具有的结构进行类型检查。有时候被称作“鸭式辨型法”或者“结构性子类型化”。在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p>\n<p>举个例子</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">sex</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Allen</span>:<span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Allen&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">28</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>:<span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//正常运行</span></span><br></pre></td></tr></table></figure>\n\n<p>上面例子中，我们定义一个接口Person，接着定义一个变量 Allen，他的类型是Person。这样，我们就约束了Allen的形状必须是和接口Person一致，如果少了XX属性就会报错，同理，多了未定义的XX属性也会报错：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">sex</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Tom</span>:<span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//Tom报错：类型 &quot;&#123; name: string; age: number; &#125;&quot; 中缺少属性 &quot;sex&quot;，但类型 &quot;Person&quot; 中需要该属性。ts(2741) index.ts(23, 2): 在此处声明了 &quot;sex&quot;。</span></span><br><span class=\"line\"><span class=\"comment\">//原因是Tom少了sex属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Ketty</span>:<span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Ketty&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>:<span class=\"string\">&#x27;female&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">grade</span>:<span class=\"number\">12</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错：不能将类型“&#123; name: string; age: number; sex: string; grade: number; &#125;”分配给类型“Person”。对象文字可以只指定已知属性，并且“grade”不在类型“Person”中。ts(2322)</span></span><br><span class=\"line\"><span class=\"comment\">//原因是Ketty多了grade属性</span></span><br></pre></td></tr></table></figure>\n\n<p>定义Tom变量却少了sex属性就会报错，同理，多了未定义的grade属性也会报错。</p>\n<p>可见，<strong>赋值的时候，变量的结构必须和接口的结构保持一致</strong>。</p>\n<h4 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h4><p>有时候我们希望不要完全匹配一个接口的所有结构，那么我们可以用可选属性(在定义接口时，属性后加上 <code>?</code>关键字)：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">    sex?:<span class=\"built_in\">string</span>; <span class=\"comment\">//可选属性 sex</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Allen</span>:<span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Allen&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">28</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>:<span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//正常运行</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Tom</span>:<span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//正常运行</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"任意属性\"><a href=\"#任意属性\" class=\"headerlink\" title=\"任意属性\"></a>任意属性</h4><p>有时候我们希望一个接口允许有任意的属性，可以用 <code>[属性名:类型名]</code>定义任意属性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    age?:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">    [<span class=\"attr\">propName</span>:<span class=\"built_in\">string</span>]:<span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Allen</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Allen&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"string\">&#x27;female&#x27;</span> <span class=\"comment\">//添加gender属性是允许的</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Tom</span>:<span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender2</span>:<span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">ID</span>:<span class=\"number\">123</span>,</span><br><span class=\"line\">    <span class=\"number\">123</span>:<span class=\"string\">&#x27;asdasd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">isDone</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//添加任意多个属性且类型不一致也是允许的，有点违背接口的初衷</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>[propName:string]:any;</code>定义了任意属性取<code>string</code>类型的值。</p>\n<p>任意属性有点违背接口的初衷，既然已经定义了接口的结构，就不能任意去增加修改他的结构了</p>\n<h4 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性</h4><p>有时候我们希望对象中一些字段只能在创建时被赋值，后续只能可读不可写，那么可以用 <code>readonly</code>关键字定义只读属性：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">readonly</span> <span class=\"attr\">id</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Tom</span>:<span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>:<span class=\"number\">12345</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">19</span>    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Tom</span>.<span class=\"property\">age</span> =  <span class=\"number\">29</span> <span class=\"comment\">//不报错</span></span><br><span class=\"line\"><span class=\"title class_\">Tom</span>.<span class=\"property\">id</span> = <span class=\"number\">12345</span><span class=\"comment\">//报错：无法分配到 &quot;id&quot; ，因为它是只读属性。ts(2540)</span></span><br></pre></td></tr></table></figure>\n\n<p>上述例子中<code>id</code>属性被设置为只读属性，当再次赋值时就会报错。</p>\n<h2 id=\"八、数组\"><a href=\"#八、数组\" class=\"headerlink\" title=\"八、数组\"></a>八、数组</h2><p>数组是存放多个元素的集合</p>\n<p>最简单的方法是使用 [ 类型 + 方括号] 来表示数组：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">fibonacci</span>:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">13</span>];</span><br></pre></td></tr></table></figure>\n\n<p>数组中的项不允许出现其他的类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">fibonacci</span>:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">13</span>];</span><br><span class=\"line\"><span class=\"comment\">//报错：不能将类型“string”分配给类型“number”。ts(2322)</span></span><br></pre></td></tr></table></figure>\n\n<p>数组的一些方法的参数也会根据数组在定义时约定的类型进行限制：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">fibonacci</span>:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">13</span>];</span><br><span class=\"line\">fibonacci.<span class=\"title function_\">push</span>(<span class=\"number\">21</span>);</span><br><span class=\"line\"><span class=\"comment\">//正常运行</span></span><br><span class=\"line\">fibonacci.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;34&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//报错：类型“string”的参数不能赋给类型“number”的参数。ts(2345)</span></span><br><span class=\"line\"><span class=\"comment\">//原因是push()方法只允许传入number类型的参数，而&#x27;34&#x27;是字符串字面量类型，后续章节会介绍</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以指定一个 any 类型数组：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">list</span>:<span class=\"built_in\">any</span>[] = [<span class=\"string\">&#x27;Tom&#x27;</span>,<span class=\"number\">18</span>,<span class=\"string\">&#x27;male&#x27;</span>,<span class=\"literal\">true</span>,&#123;<span class=\"attr\">website</span>:<span class=\"string\">&#x27;https://wangwangyz.site&#x27;</span>&#125;];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"九、函数01\"><a href=\"#九、函数01\" class=\"headerlink\" title=\"九、函数01\"></a>九、函数01</h2><h4 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h4><p>在JavaScript中，有两种常见的定义函数的方式——函数声明(Function Declaration)和函数表达式(Function Expression)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数声明(Function Declaration)</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">x,y</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数表达式(Function Expression)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> mySum = <span class=\"keyword\">function</span> (<span class=\"params\">x,y</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>一个函数有输入和输出，要在TypeScript中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义比较简单：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">x:numebr,y:<span class=\"built_in\">number</span></span>):<span class=\"built_in\">number</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，<strong>输入多余(或少于)、类型不匹配的参数，是不被允许的</strong>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">x:numebr,y:<span class=\"built_in\">number</span></span>):<span class=\"built_in\">number</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)<span class=\"comment\">//报错：应有 2 个参数，但获得 3 个。ts(2554)</span></span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>)<span class=\"comment\">//报错：应有 2 个参数，但获得 1 个。ts(2554)</span></span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"string\">&#x27;srt&#x27;</span>,<span class=\"number\">1</span>)<span class=\"comment\">//报错：类型“string”的参数不能赋给类型“number”的参数。ts(2345)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h4><p>如果我们现在写一个对函数表达式(Function Expression)的定义，可能会写成这样：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> mysum = <span class=\"keyword\">function</span>(<span class=\"params\">x:<span class=\"built_in\">number</span>,y:<span class=\"built_in\">number</span></span>):<span class=\"built_in\">number</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这是可以通过编译的，不过事实上，上面的代码只对 <strong>等号右侧的匿名函数</strong>进行了类型定义，而等号左边的<strong>mysum</strong>，是通过赋值操作进行类型推论而推断出来的。如果需要我们手动给<strong>mysum</strong>添加类型，则是这样：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这里用的是类型推断</span></span><br><span class=\"line\"><span class=\"comment\">//let mysum = function(x:number,y:number):number&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//  return x + y;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果是手动指定类型，应该是这样</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mysum</span>:<span class=\"function\">(<span class=\"params\">x:<span class=\"built_in\">number</span>, y:<span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span> = <span class=\"keyword\">function</span> (<span class=\"params\">x:<span class=\"built_in\">number</span>,y:<span class=\"built_in\">number</span></span>):<span class=\"built_in\">number</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>注意不要混淆了TS中的 <code>=&gt;</code> 和ES6中的 <code>=&gt;</code>.</p>\n<p>在TypeScript的类型定义中，<code>=&gt;</code>用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。</p>\n<p>在ES6中，<code>=&gt;</code>叫做箭头函数，应用十分广泛，可以参考ES6的箭头函数：<a href=\"https://www.bookstack.cn/read/es6-3rd/spilt.5.docs-function.md\">参考链接：阮一峰ES6箭头函数教程</a></p>\n<h4 id=\"用接口定义函数的形状\"><a href=\"#用接口定义函数的形状\" class=\"headerlink\" title=\"用接口定义函数的形状\"></a>用接口定义函数的形状</h4><p>我们也可以使用接口的方式来定义一个符合某个形状的函数：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SearchFunc</span>&#123;</span><br><span class=\"line\">    (<span class=\"attr\">source</span>:<span class=\"built_in\">string</span>,<span class=\"attr\">subString</span>:<span class=\"built_in\">string</span>):<span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySearchFunc</span>:<span class=\"title class_\">SearchFunc</span>;</span><br><span class=\"line\">mySearchFunc = <span class=\"keyword\">function</span>(<span class=\"params\">source:<span class=\"built_in\">string</span>,subString:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> source.<span class=\"title function_\">search</span>(subString) !== -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySearchFunc1</span>:<span class=\"title class_\">SearchFunc</span>;</span><br><span class=\"line\">mySearchFunc1 = <span class=\"keyword\">function</span>(<span class=\"params\">source:<span class=\"built_in\">number</span>,subString:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>==<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">//报错：不能将类型“(args1: number, args2: string) =&gt; boolean”分配给类型“SearchFunc”。参数“args1”和“source” 的类型不兼容。不能将类型“string”分配给类型“number”。ts(2322)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySearchFunc2</span>:<span class=\"title class_\">SearchFunc</span>;</span><br><span class=\"line\">mySearchFunc2 = <span class=\"keyword\">function</span>(<span class=\"params\">source:<span class=\"built_in\">string</span>,subString:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">//报错：不能将类型“(args1: string, args2: string) =&gt; number”分配给类型“SearchFunc”。不能将类型“number”分配给类型“boolean”。ts(2322)</span></span><br></pre></td></tr></table></figure>\n\n<p>采用函数表达式接口定义函数的方式是，对等号左侧进行类型限制，可保证以后对函数名赋值时保证 <strong>参数个数、参数类型、返回值类型</strong> 不变。</p>\n<h2 id=\"十、函数02\"><a href=\"#十、函数02\" class=\"headerlink\" title=\"十、函数02\"></a>十、函数02</h2><h4 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h4><p>前面提到，多余的(或者少于要求的)参数，是不允许的。那么如何定义可选的参数呢？</p>\n<p>与接口中的可选属性类似，我们用关键字 <code>?</code>表示可选的参数：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">buildName</span>(<span class=\"params\">firstName:<span class=\"built_in\">string</span>, lastName?:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lastName)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName + <span class=\"string\">&quot; &quot;</span> + lastName;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tomcat = <span class=\"title function_\">buildName</span>(<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;cat&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> tom = <span class=\"title function_\">buildName</span>(<span class=\"literal\">undefined</span>, <span class=\"string\">&quot;Tom&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，<strong>可选参数必须接在必须参数的后面</strong>，换句话说，<strong>可选参数后面不允许再出现必须参数了</strong>。(这一点和Python很像)</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">buildName</span>(<span class=\"params\">firstName?:<span class=\"built_in\">string</span>, lastName:<span class=\"built_in\">string</span></span>)&#123;<span class=\"comment\">//报错：必选参数不能位于可选参数后。ts(1016)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lastName)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName + <span class=\"string\">&quot; &quot;</span> + lastName;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tomcat = <span class=\"title function_\">buildName</span>(<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;cat&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> tom = <span class=\"title function_\">buildName</span>(<span class=\"literal\">undefined</span>, <span class=\"string\">&quot;Tom&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数默认值\"><a href=\"#参数默认值\" class=\"headerlink\" title=\"参数默认值\"></a>参数默认值</h4><p>在ES6中，我们允许给函数的参数添加默认值，<strong>TypeScript会将添加了默认值的参数识别为可选参数</strong>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">buildName</span>(<span class=\"params\">firstName:<span class=\"built_in\">string</span>, lastName:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;Cat&#x27;</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstName + <span class=\"string\">&quot; &quot;</span> + lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tomcat = <span class=\"title function_\">buildName</span>(<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;ccccat&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> tom = <span class=\"title function_\">buildName</span>(<span class=\"string\">&quot;Tom&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>此时就不受 [可选参数必须接在必需参数后面] 的限制了：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">buildName</span>(<span class=\"params\">firstName:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;Tom&#x27;</span>, lastName:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstName + <span class=\"string\">&quot; &quot;</span> + lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tomcat = <span class=\"title function_\">buildName</span>(<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;cat&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> tom = <span class=\"title function_\">buildName</span>(<span class=\"literal\">undefined</span>, <span class=\"string\">&quot;Tom&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十一、函数03\"><a href=\"#十一、函数03\" class=\"headerlink\" title=\"十一、函数03\"></a>十一、函数03</h2><p>ES6中，可以使用 <code>...rest</code> 的方式获取函数中的剩余参数(rest参数):</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">push</span>(<span class=\"params\">array, ...items</span>)&#123;<span class=\"comment\">//参数 &quot;array&quot; 隐式具有 &quot;any&quot; 类型</span></span><br><span class=\"line\">    items.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>)&#123;</span><br><span class=\"line\">           array.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a :<span class=\"built_in\">any</span>[] = [];</span><br><span class=\"line\"><span class=\"title function_\">push</span>(a,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<p>事实上，<code>items</code> 是一个数组，所以我们可以用数组的类型来定义它：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">push</span>(<span class=\"params\">array:<span class=\"built_in\">any</span>[], ...items:<span class=\"built_in\">any</span>[]</span>)&#123;</span><br><span class=\"line\">        items.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>)&#123;</span><br><span class=\"line\">              array.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [];</span><br><span class=\"line\"><span class=\"title function_\">push</span>(a,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<p>注意，rest参数只能是最后一个参数，关于rest参数，可以参考：<a href=\"https://www.bookstack.cn/read/es6-3rd/spilt.2.docs-function.md\">阮一峰ES6 rest参数详解</a></p>\n<h4 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h4><p>重载允许一个函数接收不同数量或类型的参数，并做不同处理。</p>\n<p>比如，我们需要实现一个函数<code>reverse</code>，输入数字123的时候，输出反转的数字321，输入字符串hello的时候，输出反转的字符串olleh。</p>\n<p>利用联合类型，我们可以这么做：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x: numberstring</span>):<span class=\"built_in\">number</span>  <span class=\"built_in\">string</span>  <span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;number&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Number</span>(x.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;string&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然而这样有个缺点，就是不能够精确地表达，输入为数字的时候，输出应该也为数字，输入为字符串的时候，输出也应该为字符串。</p>\n<p>这时，我们可以使用 <strong>重载</strong> 定义多个 <code>reverse</code>的函数类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x:<span class=\"built_in\">number</span></span>):<span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x:<span class=\"built_in\">string</span></span>):<span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x:numberstring</span>):numberstringvoid&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;number&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Number</span>(x.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;string&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">reverse</span>(<span class=\"number\">123</span>) <span class=\"comment\">// function reverse(x: number): number (+1 overload)</span></span><br><span class=\"line\"><span class=\"title function_\">reverse</span>(<span class=\"string\">&#x27;12345&#x27;</span>) <span class=\"comment\">// function reverse(x: number): number (+1 overload)</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中，我们重复定义了多次函数<code>reverse</code>，前两次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确看到前两个提示。</p>\n<p>注意，TypeScript中会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</p>\n<h2 id=\"十二、类型断言01\"><a href=\"#十二、类型断言01\" class=\"headerlink\" title=\"十二、类型断言01\"></a>十二、类型断言01</h2><p>基本语法、将一个联合类型断言为其中一个类型。</p>\n<p>类型断言(Type Assertion)可以用来手动指定一个值的类型</p>\n<blockquote>\n<p>通过_类型断言_这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript会假设你，程序员，已经进行了必须的检查。</p>\n<p>——————引自<a href=\"https://www.tslang.cn/docs/handbook/basic-types.html\">基础类型 · TypeScript中文网 · TypeScript——JavaScript的超集 (tslang.cn)</a></p>\n</blockquote>\n<h4 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><p>有两种表达：</p>\n<blockquote>\n<ul>\n<li>值 as 类型</li>\n<li>&lt;类型&gt;值</li>\n</ul>\n</blockquote>\n<p>在tsx语法中（React的jsx语法的ts版）中必须使用 <code>值 as 类型</code>表示类型断言。</p>\n<p>故建议大家在使用类型断言时，统一使用 <code>值 as 类型</code>这样的语法。</p>\n<h4 id=\"将一个联合类型断言为其中一个类型\"><a href=\"#将一个联合类型断言为其中一个类型\" class=\"headerlink\" title=\"将一个联合类型断言为其中一个类型\"></a>将一个联合类型断言为其中一个类型</h4><p>之前提过，当TypeScript中不确定一个联合类型的变量到底是哪个类型的时候，我们 <strong>只能访问联合类型所有类型的共有属性或方法</strong>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Fish</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">swim</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName</span>(<span class=\"params\">animal:CatFish</span>):<span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> animal.<span class=\"property\">name</span>;</span><br><span class=\"line\"><span class=\"comment\">//正常运行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName</span>(<span class=\"params\">animal:CatFish</span>):<span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> animal.<span class=\"title function_\">run</span>();</span><br><span class=\"line\"><span class=\"comment\">//报错：类型“Cat  Fish”上不存在属性“run”。类型“Fish”上不存在属性“run”。ts(2339)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而有时候，我们确实需要在还不确定类型的时候就访问其中一个类型的属性或者方法，比如：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Fish</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">swim</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isFish</span>(<span class=\"params\">animal:CatFish</span>):<span class=\"built_in\">boolean</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> animal.<span class=\"property\">swim</span> === <span class=\"string\">&#x27;function&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错：类型“Cat  Fish”上不存在属性“swim”。类型“Cat”上不存在属性“swim”。ts(2339)</span></span><br></pre></td></tr></table></figure>\n\n<p>上述例子中，获取 <code>animal.swim</code>时会报错，</p>\n<p>此时可以使用类型断言，将animal断言为Fish：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isFish</span>(<span class=\"params\">animal:CatFish</span>):<span class=\"built_in\">boolean</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//将animal断言为Fish</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> (animal <span class=\"keyword\">as</span> <span class=\"title class_\">Fish</span>).<span class=\"property\">swim</span> === <span class=\"string\">&#x27;function&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以解决访问animal.swim时的报错问题了。</p>\n<p>不过需要注意的是，类型断言只能够 ’欺骗‘TypeScript编译器，无法避免运行时的错误，滥用类型断言反而会导致运行时错误：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">swim</span>(<span class=\"params\">animal:CatFish</span>):<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">    (animal <span class=\"keyword\">as</span> <span class=\"title class_\">Fish</span>).<span class=\"title function_\">swim</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">tom</span>:<span class=\"title class_\">Cat</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">run</span>(<span class=\"params\"></span>)&#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I&#x27;m running...&quot;</span>);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">swim</span>(tom)</span><br><span class=\"line\"><span class=\"comment\">//编译时不报错，运行时报错：TypeError：animal.swim is not a function</span></span><br></pre></td></tr></table></figure>\n\n<p>上面例子中，编译时不会报错，但是运行时会报错，当我们执行 tsc命令编译时会看到输出的文件无内容。</p>\n<p>原因是因为 <code>(animal as Fish).swim()</code> 这段代码隐藏了 animal可能为 Cat 的情况，将 animal 直接断言为 Fish了，而TypeScript编译器信任了我们的断言，故在调用 <code>swim()</code>时编译没有错误。</p>\n<p>总之，<strong>使用断言一定要格外小心</strong>，尽量避免断言后调用方法或引用深层属性。以减少不必要的 <strong>运行时错误</strong>。</p>\n<h2 id=\"十三、类型断言02\"><a href=\"#十三、类型断言02\" class=\"headerlink\" title=\"十三、类型断言02\"></a>十三、类型断言02</h2><p>将一个父类断言为具体的子类</p>\n<p>当类之间有继承关系时，类型断言也是很常见的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ApiError</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Error</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">code</span>:<span class=\"built_in\">number</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HttpError</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Error</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">statusCode</span>:<span class=\"built_in\">number</span> = <span class=\"number\">200</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isApiError</span>(<span class=\"params\">myError:<span class=\"built_in\">Error</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> (myError <span class=\"keyword\">as</span> <span class=\"title class_\">ApiError</span>).<span class=\"property\">code</span> === <span class=\"string\">&#x27;number&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述例子中，我们声明了函数isApiError，它用来判断传入的参数是不是ApiError类型，为了实现这样一个函数，它的参数类型肯定得是比较抽象的父类Error，这样的话这个函数就能接受Error或他的子类作为参数了。</p>\n<p>但是由于父类Error中没有code属性，故直接获取myError.会报错：类型“Error”上不存在属性“code”。这时候需要使用类型断言获取(myError as ApiError).code。</p>\n<p>大家可能会注意到，在这个例子中会有一个更合适的方式来判断是不是ApiError，那就是使用instaceof：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ApiError</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Error</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">code</span>:<span class=\"built_in\">number</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HttpError</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Error</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">statusCode</span>:<span class=\"built_in\">number</span> = <span class=\"number\">200</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isApiError</span>(<span class=\"params\">myError:<span class=\"built_in\">Error</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(myError <span class=\"keyword\">instanceof</span> <span class=\"title class_\">ApiError</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中，用instanceof确实是一个很好的方式，因为ApiError是一个JavaScript的类，能够通过instanceof判断是否是它的实例。</p>\n<p>但是有的情况下ApiError和HttpError不是一个真正的类，而只是一个TypeScript接口，接口是一个类型，不是一个真正的值，它在编译结果中会被删除，当然就无法用instanceof来判断：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ApiError</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Error</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">code</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">HttpError</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Error</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">statusCode</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isApiError</span>(<span class=\"params\">myError:<span class=\"built_in\">Error</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(myError <span class=\"keyword\">instanceof</span> <span class=\"title class_\">ApiError</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错：“ApiError”仅表示类型，但在此处却作为值使用</span></span><br></pre></td></tr></table></figure>\n\n<p>此时就只能用类型断言，通过判断是否存在 code 属性来判断传入的参数是否为 ApiError了：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ApiError</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Error</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">code</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">HttpError</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Error</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">statusCode</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isApiError</span>(<span class=\"params\">myError:<span class=\"built_in\">Error</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> (myError <span class=\"keyword\">as</span> <span class=\"title class_\">ApiError</span>).<span class=\"property\">code</span> === <span class=\"string\">&#x27;number&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十四、类型断言03\"><a href=\"#十四、类型断言03\" class=\"headerlink\" title=\"十四、类型断言03\"></a>十四、类型断言03</h2><p>将任何一个类型断言为 <code>any</code></p>\n<p>理想情况下，TypeScript的类型系统运转良好，每个值的类型都具体而精确。</p>\n<p>当我们引用一个在此类型上不存在的属性或方法时，会报错：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">foo</span>: <span class=\"built_in\">number</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo.<span class=\"property\">length</span>);</span><br><span class=\"line\"><span class=\"comment\">//报错：类型“number”上不存在属性“length”。ts(2339)</span></span><br></pre></td></tr></table></figure>\n\n<p>上面例子中，数字类型的变量foo上是没有length属性的，故TypeScript编译时给出了错误提示。</p>\n<p>这种错误提示显然是很有用的。</p>\n<p>但有的时候，我们非常确定这段代码不会出错，比如：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">foo</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//报错：类型“Window &amp; typeof globalThis”上不存在属性“foo”。ts(2339)</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中，我们需要将window上添加一个foo属性，但是TS会给我们报错，提示window不存在属性foo。</p>\n<p>此时我们可以使用<code>as any</code>临时将window断言为<code>any</code>类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"variable language_\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">foo</span> = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>any</code> 类型中，<strong>访问任何属性都是可以的</strong>。</p>\n<p>需要注意的是，将一个变量断言为any可以说是解决TypeScript中类型问题的最后一个手段。</p>\n<p>但是它极有可能真正掩盖了类型错误，如果不是十分确定，就不要使用 <code>as any</code>。</p>\n<p>总之，一方面不要滥用 any类型，另一方面也不要忽略他带来的作用。我们需要在类型的严格性和开发的方便性之间平衡利弊，才能发挥TypeScript最大的价值。</p>\n<h2 id=\"十五、类型断言04\"><a href=\"#十五、类型断言04\" class=\"headerlink\" title=\"十五、类型断言04\"></a>十五、类型断言04</h2><p>将<code>any</code>类型断言为一个具体的类型</p>\n<p>在日常的开发中，我们不可避免的需要处理any类型的变量，它们可能是由于第三方库未能定义好自己的类型，也可能是历史遗留的或其它人编写的烂代码，还可能是受到TypeScript类型系统的限制而无法精确定义类型的场景。</p>\n<p>遇到<code>any</code>类型的变量时，我们可以选择无视他，任由他滋生更多的<code>any</code>类型。</p>\n<p>我们可以选择改进它，通过类型断言及时地吧<code>any</code>断言为精确的类型，亡羊补牢，使我们的代码向着可维护性高的目标发展。</p>\n<p>举例来说，历史遗留的代码中有个getCacheData函数，它的返回值是any:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCacheData</span>(<span class=\"params\">key:<span class=\"built_in\">string</span></span>):<span class=\"built_in\">any</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">cache</span>[key];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么我们在使用这个getCacheData函数的时候，最好能够将调用了getCacheData之后的返回值断言为一个精确的类型，这样就方便了后续的操作：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCacheData</span>(<span class=\"params\">key:<span class=\"built_in\">string</span></span>):<span class=\"built_in\">any</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">cache</span>[key];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tom = <span class=\"title function_\">getCacheData</span>(<span class=\"string\">&#x27;tom&#x27;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">Cat</span>;</span><br><span class=\"line\">tom.<span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n\n<p>上面例子中，我们调用完getCacheData之后，立即将她断言为Cat类型，这样的话明确了tom的类型，后续对tom的访问时就有了代码补全，提高了代码的可维护性。</p>\n<blockquote>\n<h5 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h5><p>个人认为在遇到较多any类型变量时，尽量在接下来少用或者不用<code>any</code>类型，根据IDE给出的提示将类型规范化，能减少项目80%的潜在bug。</p>\n<h4 id=\"解决any出现次数过次的问题\"><a href=\"#解决any出现次数过次的问题\" class=\"headerlink\" title=\"解决any出现次数过次的问题\"></a>解决any出现次数过次的问题</h4><p>复杂类型的类型定义</p>\n<ol>\n<li>细拆出重复定义的公共项，使用extents 关键字或者 &amp; 交叉运算符来进行整合，提高利用率； 例1： <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> <span class=\"comment\">// bad</span></span><br><span class=\"line\">  <span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">firstName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">PersonWithBirthDate</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"> <span class=\"attr\">lastName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"> <span class=\"attr\">birth</span>: <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"> <span class=\"attr\">lastName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">PersonWithBirthDate</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">birth</span>: <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n 例2： <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">List</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">creatTime</span>: <span class=\"built_in\">number</span>  <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">creator</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">desc</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">modifier</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">token</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">updateTime</span>: <span class=\"built_in\">number</span>  <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">ProjectList</span> = &#123;</span><br><span class=\"line\"> <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"> <span class=\"attr\">projectName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125; &amp; <span class=\"title class_\">List</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">TaskList</span> = &#123;</span><br><span class=\"line\"> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125; &amp; <span class=\"title class_\">List</span>;</span><br></pre></td></tr></table></figure>\n 新的问题：如果很多字段要打问号怎么办？下面会讲到</li>\n<li>使用typeof定义一个类型匹配初始值（常见的使用场景之一：固定的Schema配置适用） <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">INIT_OPTIONS</span>= &#123;</span><br><span class=\"line\">  <span class=\"attr\">width</span>: <span class=\"number\">640</span>,</span><br><span class=\"line\"> <span class=\"attr\">height</span>: <span class=\"number\">480</span>,</span><br><span class=\"line\"> <span class=\"attr\">color</span>: <span class=\"string\">&quot;#00FF00&quot;</span>,</span><br><span class=\"line\"> <span class=\"attr\">label</span>: <span class=\"string\">&quot;VGA&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Options</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">width</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"> <span class=\"attr\">height</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"> <span class=\"attr\">color</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"> <span class=\"attr\">label</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 快速获取配置对象的形状</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Options</span> = <span class=\"keyword\">typeof</span> <span class=\"variable constant_\">INIT_OPTIONS</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>使用Ts 内置类型来解决？号太多的问题<ul>\n<li>  Utility Types</li>\n<li>  充分利用lib.es5.d.ts中的Partial, Pick , Extract, Omit等方法，扩展第三方、或已存在的类型，不要重复定义完全一样的字段。</li>\n</ul>\n</li>\n</ol>\n<p>参考链接：<a href=\"https://juejin.cn/post/7074832632541872136\">TypeScript：为什么不要用any声明类型 - 掘金 (juejin.cn)</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_43827779/article/details/120343486\">规范TS项目Any类型的使用_Jasmine_jiamei的博客-CSDN博客_ts 对象属性any</a></p>\n</blockquote>\n<h2 id=\"十六、类型断言05\"><a href=\"#十六、类型断言05\" class=\"headerlink\" title=\"十六、类型断言05\"></a>十六、类型断言05</h2><p>类型断言的限制</p>\n<p>从上面的例子可以总结出：</p>\n<blockquote>\n<ul>\n<li>联合类型可以被断言为其中一个类型</li>\n<li>父类可以被断言为子类</li>\n<li>任何类型都可以被断言为 <code>any</code></li>\n<li><code>any</code>可以被断言为任意类型</li>\n</ul>\n</blockquote>\n<p>那么类型断言有没有什么限制呢？是不是任何一个类型都可以被断言为任何另一个类型呢？</p>\n<p>答案是否定的——并不是任何一个类型都可以被断言为任何另一个类型。</p>\n<p>具体来说，若A、B两者具有共同的属性或者方法，那么A能够被断言为B，B也能够断言为A。</p>\n<p>下面我们通过一个简化的例子，来理解类型断言的限制：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//两者是有共同的属性或者方法，比如Animal和Cat都有name</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">testAnimal</span>(<span class=\"params\">animal: Animal</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (animal <span class=\"keyword\">as</span> <span class=\"title class_\">Cat</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">testCat</span>(<span class=\"params\">cat : Cat</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (cat <span class=\"keyword\">as</span> <span class=\"title class_\">Animal</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述例子中是可以断言的，我们再看看下面的例子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//两者没有有共同的属性或者方法，</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//  name:string;</span></span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">testAnimal</span>(<span class=\"params\">animal: Animal</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (animal <span class=\"keyword\">as</span> <span class=\"title class_\">Cat</span>); <span class=\"comment\">//报错：类型 &quot;Animal&quot; 中缺少属性 &quot;run&quot;，但类型 &quot;Cat&quot; 中需要该属性。ts(2352)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">testCat</span>(<span class=\"params\">cat : Cat</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (cat <span class=\"keyword\">as</span> <span class=\"title class_\">Animal</span>);<span class=\"comment\">//报错：类型 &quot;Cat&quot; 中缺少属性 &quot;name&quot;，但类型 &quot;Animal&quot; 中需要该属性。ts(2352)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候会报错，两者不能充分重叠，这意味着要想断言成功，需要具备一个条件：</p>\n<ul>\n<li>  要使得A和B能够被 <strong>互相断言</strong>，就要A兼容B或者B兼容A</li>\n</ul>\n<h2 id=\"十七、类型断言06\"><a href=\"#十七、类型断言06\" class=\"headerlink\" title=\"十七、类型断言06\"></a>十七、类型断言06</h2><p>双重断言</p>\n<p>既然：</p>\n<ul>\n<li>  任何类型都可以被断言为any</li>\n<li>  an可以被断言为任何类型</li>\n</ul>\n<p>那么我们是不是可以使用双重断言 <code>as any as foo</code> 来将任何一个类型断言为另一个类型呢？</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Fish</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">swim</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">testCat</span>(<span class=\"params\">cat : Cat</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (cat <span class=\"keyword\">as</span> <span class=\"built_in\">any</span> <span class=\"keyword\">as</span> <span class=\"title class_\">Fish</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述例子中，若直接使用 <code>cat as Fish</code> 会报错：类型 “Cat” 中缺少属性 “swim”，但类型 “Fish” 中需要该属性。因为Cat和Fish都互不兼容。</p>\n<p>但是若使用双重断言，则可以打破 [要使得A能都断言B ,就要A兼容B或者B兼容A] 的限制，将任何一个类型断言为任何另一个类型。</p>\n<p>若你使用了这种双重断言，那么十有八九都是非常错误。他很可能会导致运行时错误。</p>\n<p><strong>除非迫不得已，否则千万别用双重断言</strong>。（咋迫不得已？基本不用吧？）</p>\n<h2 id=\"十八、类型断言07\"><a href=\"#十八、类型断言07\" class=\"headerlink\" title=\"十八、类型断言07\"></a>十八、类型断言07</h2><p>类型断言VS类型转换</p>\n<p>类型断言只会影响TypeScript编译时的类型，类型断言语句会在编译结果中被删除：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">toBoolean</span>(<span class=\"params\">something:<span class=\"built_in\">any</span></span>):<span class=\"built_in\">boolean</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> something <span class=\"keyword\">as</span> <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">toBoolean</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//返回值为1</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面的例子中，将<code>something</code>断言为<code>boolean</code>可以通过编译，但是并没有什么用，代码在编译后会变成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">toBoolean</span>(<span class=\"params\">something</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> something;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">toBoolean</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//返回值为1</span></span><br></pre></td></tr></table></figure>\n\n<p>所以类型断言不是类型转换，他不会真的影响到变量的类型。</p>\n<p>若要进行类型转化，需要直接调用类型转换的方法：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">toBoolean</span>(<span class=\"params\">something:<span class=\"built_in\">any</span></span>):<span class=\"built_in\">boolean</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Boolean</span>(something);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">toBoolean</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//返回值为true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十九、类型断言08\"><a href=\"#十九、类型断言08\" class=\"headerlink\" title=\"十九、类型断言08\"></a>十九、类型断言08</h2><p>类型断言VS类型声明</p>\n<p>在这个例子中：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCacheData</span>(<span class=\"params\">key:<span class=\"built_in\">string</span></span>):<span class=\"built_in\">any</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">cache</span>[key];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tom = <span class=\"title function_\">getCacheData</span>(<span class=\"string\">&#x27;tom&#x27;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">Cat</span>;</span><br><span class=\"line\">tom.<span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n\n<p>我们使用 <code>as Cat</code>将<code>any</code>类型断言为了<code>Cat</code>类型。</p>\n<p>但实际上还有其他方式可以解决这个问题：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCacheData</span>(<span class=\"params\">key:<span class=\"built_in\">string</span></span>):<span class=\"built_in\">any</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">cache</span>[key];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">tom</span>:<span class=\"title class_\">Cat</span> = <span class=\"title function_\">getCacheData</span>(<span class=\"string\">&#x27;tom&#x27;</span>);</span><br><span class=\"line\">tom.<span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中，我们通过类型声明的方式，将<code>tom</code>声明为<code>Cat</code>，然后再将<code>any</code>类型的getCacheData(‘tom’)赋值给<code>Cat</code>类型的<code>tom</code>。</p>\n<p>这和类型断言是非常相似的，而且产生的结果也几乎是一样的——<code>tom</code>在接下来的代码中都变成了<code>Cat</code>类型。</p>\n<p>他们的区别，可以通过这个例子来理解：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">animal</span>: <span class=\"title class_\">Animal</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;tom&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tom = animal <span class=\"keyword\">as</span> <span class=\"title class_\">Cat</span>;</span><br></pre></td></tr></table></figure>\n\n<p>上述例子中，由于<code>Animal</code>兼容 <code>Cat</code>，故可以将 <code>animal</code> 断言为 <code>Cat</code>赋值给<code>tom</code>。</p>\n<p>但是若直接声明tom为<code>Cat</code>类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">animal</span>: <span class=\"title class_\">Animal</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;tom&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>: <span class=\"title class_\">Cat</span> = animal;</span><br><span class=\"line\"><span class=\"comment\">//报错：类型 &quot;Animal&quot; 中缺少属性 &quot;run&quot;，但类型 &quot;Cat&quot; 中需要该属性。ts(2741)</span></span><br></pre></td></tr></table></figure>\n\n<p>则会报错，不允许将Cat类型的tom赋值为animal。</p>\n<p>我们可以得出结论：</p>\n<ul>\n<li>  A断言为B时，A和B有一个及以上相同的属性或方法即可</li>\n<li>  A声明为B时，A必须具备B的所有属性和方法</li>\n</ul>\n<p>知道了他们的核心区别，就知道了类型声明是比类型断言更加严格的。</p>\n<p>所以为了增加代码的质量我们最好优先使用类型声明，这也比类型断言的 <code>as</code>语法更有优势。</p>\n<h2 id=\"二十、类型断言09\"><a href=\"#二十、类型断言09\" class=\"headerlink\" title=\"二十、类型断言09\"></a>二十、类型断言09</h2><p>类型断言VS泛型</p>\n<p>这是一个例子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCacheData</span>(<span class=\"params\">key:<span class=\"built_in\">string</span></span>):<span class=\"built_in\">any</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">cache</span>[key];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> tom = <span class=\"title function_\">getCacheData</span>(<span class=\"string\">&#x27;tom&#x27;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">Cat</span>;</span><br><span class=\"line\">tom.<span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n\n<p>我们还有第三种方式可以解决这个问题，那就是泛型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> getCacheData&lt;T&gt;(<span class=\"attr\">key</span>:<span class=\"built_in\">string</span>):T&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">cache</span>[key];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> tom = getCacheData&lt;<span class=\"title class_\">Cat</span>&gt;(<span class=\"string\">&#x27;tom&#x27;</span>);</span><br><span class=\"line\">tom.<span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n\n<p>通过给<code>getCacheData</code>函数添加一个泛型 ,我们可以更加规范的实现对<code>getCacheData</code>返回值的约束，这也同时去除掉了代码中的<code>any</code>，是最优的一个解决方式。</p>\n<blockquote>\n<p>关于<strong>泛型</strong></p>\n<p>是一种把明确类型的工作推迟到创建对象或者调用方法的时候才去明确的特殊的类型。</p>\n<p><strong>泛型的定义</strong></p>\n<p>主要有以下两种：</p>\n<ol>\n<li> 在程序编码中一些包含<strong>类型参数</strong>的类型，也就是说泛型的参数只可以代表类，不能代表个别对象。（这是当今较常见的定义）</li>\n<li> 在程序编码中一些包含参数的<a href=\"https://baike.baidu.com/item/%E7%B1%BB\">类</a>。其参数可以代表类或对象等等。（现在人们大多把这称作<a href=\"https://baike.baidu.com/item/%E6%A8%A1%E6%9D%BF\">模板</a>）</li>\n</ol>\n<p>不论使用哪个定义，泛型的参数在真正使用泛型时都必须作出指明。</p>\n<p>参考：<a href=\"https://baike.baidu.com/item/%E6%B3%9B%E5%9E%8B/4475207#2\">泛型_百度百科 (baidu.com)</a></p>\n</blockquote>\n<h2 id=\"二一、type关键字\"><a href=\"#二一、type关键字\" class=\"headerlink\" title=\"二一、type关键字\"></a>二一、type关键字</h2><p>使用type关键字定义类型别名和字符串字面量类型</p>\n<p>我们来看一个方法：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName</span>(<span class=\"params\">n:<span class=\"built_in\">string</span>(() =&gt; <span class=\"built_in\">string</span>)</span>):<span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> n === <span class=\"string\">&#x27;string&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">n</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>type</code>关键字作为类型别名用来给一个类型起个新名字</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NameResolver</span> = <span class=\"function\">()=&gt;</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NameOrResolver</span> = <span class=\"title class_\">Name</span>  <span class=\"title class_\">NameResolver</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName</span>(<span class=\"params\">n:NameResolver</span>):<span class=\"title class_\">Name</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> n === <span class=\"string\">&#x27;string&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">n</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述例子中，我们使用<code>type</code>关键字创建类型别名。</p>\n<p><strong>类型别名常用语联合类型</strong>。</p>\n<p>字符串字面量类型用来约束取值只能是某几个字符串中的一个</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">EventsName</span> = <span class=\"string\">&#x27;click&#x27;</span>  <span class=\"string\">&#x27;scroll&#x27;</span>  <span class=\"string\">&#x27;mousemove&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleEvent</span>(<span class=\"params\">ele:Element  <span class=\"literal\">null</span>,event:EventsName</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">handleEvent</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;hello&#x27;</span>),<span class=\"string\">&#x27;click&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//正常运行</span></span><br><span class=\"line\"><span class=\"title function_\">handleEvent</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElemnetById</span>(<span class=\"string\">&#x27;world&#x27;</span>),<span class=\"string\">&#x27;dbclick&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//报错：类型“&quot;dbclick&quot;”的参数不能赋给类型“EventsName”的参数。ts(2345)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二二、元组\"><a href=\"#二二、元组\" class=\"headerlink\" title=\"二二、元组\"></a>二二、元组</h2><p>数组合并了相同类型的对象，而元组(Tuple)合并了不同类型的对象。</p>\n<p>元组起源与函数编程语言(如F#，Python也有元组的概念)，这些语言中会频繁使用元组。</p>\n<p><strong>举个例子</strong>，定义一对值分别为 <code>string</code>和 <code>number</code>的元组：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>:[<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>] = [<span class=\"string\">&#x27;Tom&#x27;</span>,<span class=\"number\">15</span>];</span><br></pre></td></tr></table></figure>\n\n<p>当赋值或访问一个已知索引的元素时，会得到正确的类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>:[<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>];</span><br><span class=\"line\">tom[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;Tom&#x27;</span>;</span><br><span class=\"line\">tom[<span class=\"number\">1</span>] = <span class=\"number\">15</span>;</span><br></pre></td></tr></table></figure>\n\n<p>也可以赋值其中一项：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>:[<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>];</span><br><span class=\"line\">tom[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;Tom&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>但是当直接对元组进行初始化赋值操作时，需要提供所有元组类型指定的项</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>:[<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>];</span><br><span class=\"line\">tom = [<span class=\"string\">&#x27;Tom&#x27;</span>,<span class=\"number\">18</span>];</span><br></pre></td></tr></table></figure>\n\n<p>下面这样就不行了：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>:[<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>];</span><br><span class=\"line\">tom = [<span class=\"string\">&#x27;Tom&#x27;</span>];</span><br><span class=\"line\"><span class=\"comment\">//报错：不能将类型“[string]”分配给类型“[string, number]”。源具有 1 个元素，但目标需要 2 个。ts(2322)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>越界元素</strong></p>\n<p>当添加越界元素时，他的类型会被限制为元组中每个类型的联合类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>:[<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>];</span><br><span class=\"line\">tom = [<span class=\"string\">&#x27;Tom&#x27;</span>,<span class=\"number\">18</span>];</span><br><span class=\"line\">tom.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;male&#x27;</span>);<span class=\"comment\">//可以添加stirng，此时tom为[&#x27;Tom&#x27;,18,&#x27;male&#x27;]</span></span><br><span class=\"line\">tom.<span class=\"title function_\">push</span>(<span class=\"literal\">true</span>);<span class=\"comment\">//不可以添加boolean</span></span><br><span class=\"line\"><span class=\"comment\">//报错：类型“boolean”的参数不能赋给类型“string  number”的参数。ts(2345)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二三、枚举\"><a href=\"#二三、枚举\" class=\"headerlink\" title=\"二三、枚举\"></a>二三、枚举</h2><p>枚举(Enum)类型用于取值被限定在一定范围的场景，比如一周只能有七天，颜色限定为红绿蓝等。</p>\n<p>枚举使用<code>enum</code>关键字来定义：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Days</span>&#123;<span class=\"title class_\">Sun</span>, <span class=\"title class_\">Mon</span>, <span class=\"title class_\">Tue</span>, <span class=\"title class_\">Wed</span>, <span class=\"title class_\">Thu</span>, <span class=\"title class_\">Fri</span>, <span class=\"title class_\">Sat</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>枚举成员会被赋值为从 0 开始递增的数字，同时也会对枚举值到枚举名进行反向映射：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Days</span>&#123;<span class=\"title class_\">Sun</span>, <span class=\"title class_\">Mon</span>, <span class=\"title class_\">Tue</span>, <span class=\"title class_\">Wed</span>, <span class=\"title class_\">Thu</span>, <span class=\"title class_\">Fri</span>, <span class=\"title class_\">Sat</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"string\">&#x27;Sun&#x27;</span>] === <span class=\"number\">0</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"string\">&#x27;Mon&#x27;</span>] === <span class=\"number\">1</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"string\">&#x27;Wed&#x27;</span>] === <span class=\"number\">3</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"string\">&#x27;Thu&#x27;</span>] === <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">//console.log(Days[&#x27;Sun&#x27;] === 4);//false,且不能通过编译，IDE提示：此条件将始终返回 &quot;false&quot;，因为类型 &quot;Days.Sun&quot; 和 &quot;4&quot; 没有重叠。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"number\">0</span>] === <span class=\"string\">&#x27;Sun&#x27;</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"number\">1</span>] === <span class=\"string\">&#x27;Mon&#x27;</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"number\">3</span>] === <span class=\"string\">&#x27;Wed&#x27;</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"number\">4</span>] === <span class=\"string\">&#x27;Sun&#x27;</span>);<span class=\"comment\">//false，IDE不进行提示</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的例子会被编译为JS代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Days</span>;</span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">Days</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Days</span>[<span class=\"title class_\">Days</span>[<span class=\"string\">&quot;Sun&quot;</span>] = <span class=\"number\">0</span>] = <span class=\"string\">&quot;Sun&quot;</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Days</span>[<span class=\"title class_\">Days</span>[<span class=\"string\">&quot;Mon&quot;</span>] = <span class=\"number\">1</span>] = <span class=\"string\">&quot;Mon&quot;</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Days</span>[<span class=\"title class_\">Days</span>[<span class=\"string\">&quot;Tue&quot;</span>] = <span class=\"number\">2</span>] = <span class=\"string\">&quot;Tue&quot;</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Days</span>[<span class=\"title class_\">Days</span>[<span class=\"string\">&quot;Wed&quot;</span>] = <span class=\"number\">3</span>] = <span class=\"string\">&quot;Wed&quot;</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Days</span>[<span class=\"title class_\">Days</span>[<span class=\"string\">&quot;Thu&quot;</span>] = <span class=\"number\">4</span>] = <span class=\"string\">&quot;Thu&quot;</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Days</span>[<span class=\"title class_\">Days</span>[<span class=\"string\">&quot;Fri&quot;</span>] = <span class=\"number\">5</span>] = <span class=\"string\">&quot;Fri&quot;</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Days</span>[<span class=\"title class_\">Days</span>[<span class=\"string\">&quot;Sat&quot;</span>] = <span class=\"number\">6</span>] = <span class=\"string\">&quot;Sat&quot;</span>;</span><br><span class=\"line\">&#125;)(<span class=\"title class_\">Days</span>  (<span class=\"title class_\">Days</span> = &#123;&#125;));</span><br><span class=\"line\">;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"string\">&#x27;Sun&#x27;</span>] === <span class=\"number\">0</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"string\">&#x27;Mon&#x27;</span>] === <span class=\"number\">1</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"string\">&#x27;Wed&#x27;</span>] === <span class=\"number\">3</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"string\">&#x27;Thu&#x27;</span>] === <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// console.log(Days[&#x27;Sun&#x27;] === 4);//false,IDE提示：此条件将始终返回 &quot;false&quot;，因为类型 &quot;Days.Sun&quot; 和 &quot;4&quot; 没有重叠。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"number\">0</span>] === <span class=\"string\">&#x27;Sun&#x27;</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"number\">1</span>] === <span class=\"string\">&#x27;Mon&#x27;</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"number\">3</span>] === <span class=\"string\">&#x27;Wed&#x27;</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"number\">4</span>] === <span class=\"string\">&#x27;Sun&#x27;</span>); <span class=\"comment\">//false，IDE不进行提示</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二四、类01\"><a href=\"#二四、类01\" class=\"headerlink\" title=\"二四、类01\"></a>二四、类01</h2><h4 id=\"类的概念\"><a href=\"#类的概念\" class=\"headerlink\" title=\"类的概念\"></a>类的概念</h4><p>虽然JavaScript中有类的概念，但是可能大多数JavaScript程序员并不是非常熟悉类，这里对类相关的概念做一个简单的介绍。</p>\n<ul>\n<li>类(Class):定义一件事物的抽象特点，包含它的属性和方法</li>\n<li>对象(Object):类的实例，通过 <code>new</code>生成</li>\n<li>面向对象编程(Object Oriented Programming，简称 OOP)三大特性：<strong>继承、封装、多态</strong></li>\n<li>继承(Inheritance):子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特征。</li>\n<li>封装(Encapsulation):将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据。</li>\n<li>多态(Polymorphism):由继承而产生相关的不同的类，对同一个方法可以有不同的响应。比如Cat和Fish都继承自Animal，但是分别实现了自己的eat方法。此时针对某一个实例，我们无须了解他是Cat还是Dog，就可以直接调用eat方法，程序会自动判断出来应该如何执行eat方法。</li>\n<li>存取器(Getter &amp; Setter)：用于改变属性的读取和赋值行为</li>\n<li>修饰器(Modifiers):修饰符是一些关键字，用于限定成员或类型的性质。比如public 表示共有的属性或方法。</li>\n<li>抽象类(Abstract Class):抽象类是提供给其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中被实现。</li>\n<li>接口(Interface):不同类之间共有的属性或方法，可以抽象成一个接口，接口可以被类实现(implements)。一个类只能继承自另一个类，但是可以实现多个接口。</li>\n<li>构造函数(Constructor):构造函数 ，是一种特殊的方法。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中</li>\n</ul>\n<p>使用<code>class</code>关键字定义类，使用 <code>constructor</code>关键字定义构造函数。</p>\n<p>通过<code>new</code>生成新的实例的时候，会自动调用构造函数：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> _name;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`My name is <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>._name&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tom = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;Tom&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tom.<span class=\"property\">sayHello</span>); <span class=\"comment\">//My name is tom</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二五、类02\"><a href=\"#二五、类02\" class=\"headerlink\" title=\"二五、类02\"></a>二五、类02</h2><p>类的存取器 ：<code>get</code> 、<code>set</code></p>\n<p>使用getter 和 setter 可以获取和改变类的属性：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// private name:string;</span></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">name</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Jack&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">name</span>(<span class=\"params\">value</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;This name:&#x27;</span>+value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;Kitty&#x27;</span>);<span class=\"comment\">//setter Kitty</span></span><br><span class=\"line\">a.<span class=\"property\">name</span> = <span class=\"string\">&#x27;Tom&#x27;</span>;<span class=\"comment\">//setter Tom</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">name</span>);<span class=\"comment\">//getter Jack</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二六、类03\"><a href=\"#二六、类03\" class=\"headerlink\" title=\"二六、类03\"></a>二六、类03</h2><p>类的静态方法</p>\n<p>使用<code>static</code>修饰符修饰的方法成为静态方法，他们不需要实例化，而直接通过类来调用：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> _name;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>)&#123;<span class=\"comment\">//这是实例方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`My name is <span class=\"subst\">$&#123; <span class=\"variable language_\">this</span>._name &#125;</span>`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>)&#123;<span class=\"comment\">//这是类方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;I&#x27;m Animal class&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;Jack&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">sayHi</span>());<span class=\"comment\">//My name is Jack</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Animal</span>.<span class=\"title function_\">sayHello</span>());<span class=\"comment\">//I&#x27;m Animal class</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二七、类04\"><a href=\"#二七、类04\" class=\"headerlink\" title=\"二七、类04\"></a>二七、类04</h2><p>类的三种访问修饰符：public、private、protected</p>\n<p>访问权限大小由大到小：</p>\n<ul>\n<li>public  全局的、公共的，当前所涉及到的地方都可以使用  <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> _name;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a  = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;Jack&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">_name</span>);<span class=\"comment\">// Jack</span></span><br><span class=\"line\">a.<span class=\"property\">_name</span> = <span class=\"string\">&#x27;Tom&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">_name</span>);<span class=\"comment\">// Tom</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>protected  受保护的，允许子类访问，不允许公共访问：  <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> name;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">super</span>(name);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n</li>\n<li>private  私有的，只能在类的内部使用，子类也无法访问，无法在实例后通过类的实例属性访问：  <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> _name;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a  = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;Jack&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">_name</span>);<span class=\"comment\">// 报错:属性“_name”为私有属性，只能在类“Animal”中访问。ts(2341)</span></span><br><span class=\"line\">a.<span class=\"property\">_name</span> = <span class=\"string\">&#x27;Tom&#x27;</span>; <span class=\"comment\">//报错:属性“_name”为私有属性，只能在类“Animal”中访问。ts(2341)</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">_name</span>);<span class=\"comment\">// 报错:属性“_name”为私有属性，只能在类“Animal”中访问。ts(2341)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>默认是<strong>public</strong>，但是 TSLint 可能会要求必须用限定符来表明这个属性或方法是什么类型。</p>\n<h2 id=\"二八、类05\"><a href=\"#二八、类05\" class=\"headerlink\" title=\"二八、类05\"></a>二八、类05</h2><p>参数属性和只读属性关键字</p>\n<p>修饰符和<code>readonly</code>还可以使用在构造函数参数中，等同于类中定义该属性同时给该属性赋值，使代码更加简洁：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> myname:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = myname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只读属性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">readonly</span> <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">myname:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = myname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a  = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;Tom&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">name</span>);<span class=\"comment\">//Tom</span></span><br><span class=\"line\">a.<span class=\"property\">name</span> = <span class=\"string\">&#x27;Jack&#x27;</span>;<span class=\"comment\">//报错：无法分配到 &quot;name&quot; ，因为它是只读属性。ts(2540)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二九、类06\"><a href=\"#二九、类06\" class=\"headerlink\" title=\"二九、类06\"></a>二九、类06</h2><p>抽象类</p>\n<p><code>abstract</code>关键字用来定义抽象类和其中的抽象方法。</p>\n<p>什么是抽象类？</p>\n<p>首先，抽象类是不允许被实例化的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//public name:string;//这报错：属性“name”没有初始化表达式，且未在构造函数中明确赋值。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"attr\">name</span>:<span class=\"built_in\">any</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">constrcutor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"title function_\">sayHi</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;Tom&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//报错：无法创建抽象类的实例。ts(2511)</span></span><br></pre></td></tr></table></figure>\n\n<p>上面例子中，我们定义了一个抽象类类<code>Animal</code>，并且定义了一个抽象方法 <code>sayHi</code>，在实例化抽象类是报错了。</p>\n<p>其次，抽象类中的抽象方法必须被子类实现：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * eat</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">eat</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Im eating&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错：非抽象类“Cat”不会实现继承自“Animal”类的抽象成员“sayHi”。ts(2515)</span></span><br></pre></td></tr></table></figure>\n\n<p>正确的抽象类例子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"attr\">name</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">constrcutor</span>(<span class=\"attr\">name</span>:<span class=\"built_in\">string</span>): <span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"title function_\">sayHi</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">sayHi</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`This is Cat <span class=\"subst\">$&#123; <span class=\"variable language_\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>(<span class=\"string\">&#x27;Tom&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上面例子为原视频的例子，却报错：应有 0 个参数，但获得 1 个。ts(2554)</p>\n<p>找了一些资料还没找到原因，后续再来更</p>\n</blockquote>\n<h2 id=\"三十、类与接口\"><a href=\"#三十、类与接口\" class=\"headerlink\" title=\"三十、类与接口\"></a>三十、类与接口</h2><h4 id=\"类继承接口\"><a href=\"#类继承接口\" class=\"headerlink\" title=\"类继承接口\"></a>类继承接口</h4><p>实现(implements)是面向对象的一个重要概念。一般来说，一个类只能继承自另一个类，有时候不用类之间可以有一些共有的特性，这时候就可以把特性提取成接口(interfaces)，用<code>implements</code>关键字来实现，这个特性大大提高了面向对象的灵活性。</p>\n<p>举例来说，门是一个类，防盗门是门的子类。如果防盗门有一个报警器的功能，我们可以简单的给防盗门添加一个报警方法，这时候如果有另一个类：车，也有报警器的功能，就可以考虑把报警器提取出来，作为一个接口，防盗门，和车都去实现它：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alert</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Door</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SecurityDoor</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Door</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Alert</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;SecurityDoor alert&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">car</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Alert</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Car alert&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n\n<p>一个类可以实现多个接口：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alert</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Light</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">lightOn</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">    <span class=\"title function_\">lightOff</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Alert</span>, <span class=\"title class_\">Light</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Car alert&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">lightOff</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">         <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Light Off&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">lightOn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">         <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Light On&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述例子中，<code>Car</code> 实现了 <code>Alert</code> 和 <code>Light</code>接口，既能报警，也能开关灯。</p>\n<h4 id=\"接口继承接口\"><a href=\"#接口继承接口\" class=\"headerlink\" title=\"接口继承接口\"></a>接口继承接口</h4><p>接口和接口之间可以是继承关系：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alert</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">LightableAlert</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Alert</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">lightOn</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">    <span class=\"title function_\">lightOff</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这很好理解，<code>LightableAlert</code> 继承了 <code>Alert</code> ，除了拥有<code>alert</code>方法之外，还可以拥有自己定义的两个新方法 <code>lighton</code>和<code>lightoff</code>。</p>\n<h4 id=\"接口继承类\"><a href=\"#接口继承类\" class=\"headerlink\" title=\"接口继承类\"></a>接口继承类</h4><p>常见的面向对象语言中，<strong>接口是不能继承类的，但是在TypeScript中是可以的</strong>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">x</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">y</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">x:<span class=\"built_in\">number</span>,y:<span class=\"built_in\">number</span></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Point3</span>d <span class=\"keyword\">extends</span> <span class=\"title class_\">Point</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">z</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">point3d</span>:<span class=\"title class_\">Point3</span>d = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>,<span class=\"attr\">y</span>:<span class=\"number\">2</span>,<span class=\"attr\">z</span>:<span class=\"number\">3</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>但在这里不推荐这样使用，我们在定义接口的时候只做定义，具体实现交给实现接口的类去完成</strong>。</p>\n<h2 id=\"三一、泛型01\"><a href=\"#三一、泛型01\" class=\"headerlink\" title=\"三一、泛型01\"></a>三一、泛型01</h2><p>泛型(Generics)是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候在指定类型的一种特性。</p>\n<p>首先，我们来实现一个函数 <code>createArray</code>，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值。：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">creatArray</span>(<span class=\"params\">length:<span class=\"built_in\">number</span>,value:<span class=\"built_in\">any</span></span>): <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">any</span>&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++)&#123;</span><br><span class=\"line\">        result[i] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">creatArray</span>(<span class=\"number\">3</span>,<span class=\"string\">&#x27;x&#x27;</span>);<span class=\"comment\">//[&#x27;x&#x27;,&#x27;x&#x27;,&#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中，我们使用了之前提到过的数组泛型来定义返回值的类型。</p>\n<p>这段代码编译不会报错，但是一个显而易见的缺陷是，他并没有准确的定义返回值的类型；</p>\n<p><code>Array&lt;any&gt;</code>允许数组的每一项都为任意类型。但是我们预期的是，数组中每一项都应该是输入的<code>value</code>的类型。</p>\n<p>这时候，泛型就派上用场：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> createArray&lt;T&gt;(<span class=\"attr\">length</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">value</span>: T):<span class=\"title class_\">Array</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">result</span>: T[] = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt;length; i++)&#123;</span><br><span class=\"line\">        result[i] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">creatArray&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"number\">3</span>,<span class=\"string\">&#x27;x&#x27;</span>);<span class=\"comment\">//[&#x27;x&#x27;,&#x27;x&#x27;,&#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中，我们在函数名后添加了<code>&lt;T&gt;</code>，其中<code>T</code> 用来指代任意输入的类型，在后面的输入<code>value:T</code> 和输出 <code>Array&lt;T&gt;</code> 中即可使用了。接着在调用的时候，可以指定他的具体的类型为<code>string</code> 型。当然，也可以不手动指定，而让类型推论自动推算出来：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> createArray&lt;T&gt;(<span class=\"attr\">length</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">value</span>: T):<span class=\"title class_\">Array</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">result</span>: T[] = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt;length; i++)&#123;</span><br><span class=\"line\">        result[i] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//不指定类型，通过类型推断来自动推断出类型 </span></span><br><span class=\"line\"><span class=\"title function_\">creatArray</span>(<span class=\"number\">3</span>,<span class=\"string\">&#x27;x&#x27;</span>);<span class=\"comment\">//[&#x27;x&#x27;,&#x27;x&#x27;,&#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三二、泛型02\"><a href=\"#三二、泛型02\" class=\"headerlink\" title=\"三二、泛型02\"></a>三二、泛型02</h2><p>多个类型参数</p>\n<p>定义泛型的时候，可以一次定义多个类型参数：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> swap&lt;T, U&gt;(<span class=\"attr\">tuple</span>:[T, U]): [U, T]&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [tuple[<span class=\"number\">1</span>],tuple[<span class=\"number\">0</span>]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">swap</span>([<span class=\"number\">7</span>,<span class=\"string\">&#x27;seven&#x27;</span>]);<span class=\"comment\">//[&#x27;seven&#x27;, 7]</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中，我们定义了一个 <code>swap</code> 函数，用来交换输入的元组</p>\n<h2 id=\"三三、泛型03\"><a href=\"#三三、泛型03\" class=\"headerlink\" title=\"三三、泛型03\"></a>三三、泛型03</h2><p>泛型约束</p>\n<p>在函数内部使用泛型变量的时候，由于事先不知道他是哪种类型，所以不能随意的操作它的属性或方法：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> loggingIdentity&lt;T&gt;(<span class=\"attr\">arg</span>: T): T&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg.<span class=\"property\">length</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错：类型“T”上不存在属性“length”。ts(2339)</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中，泛型 <code>T</code> 不一定包含属性 <code>length</code> ，所以编译的时候报错了。</p>\n<p>这时，我们可以对泛型进行约束，致允熙这个函数传入那些包含 <code>length</code> 属性的变量，这就是泛型约束：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">LengthWise</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">length</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> loggingIdentity&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">LengthWise</span>&gt;(<span class=\"attr\">arg</span>: T): T&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg.<span class=\"property\">length</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上例中，我们使用了 <code>extends</code> 约束了泛型 <code>T</code> 必须符合接口 <code>LengthWise</code> 的形状，也就是必须包含 <code>length</code> 属性。</p>\n<p>此时如果调用 <code>loggingIdentity</code> 的时候，传入的 <code>arg</code> 不包含 <code>length</code> ，则会在编译时报错：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">LengthWise</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">length</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> loggingIdentity&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">LengthWise</span>&gt;(<span class=\"attr\">arg</span>: T): T&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg.<span class=\"property\">length</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">loggingIdentity</span>(<span class=\"string\">&#x27;1111&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"title function_\">loggingIdentity</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"comment\">//报错：类型“number”的参数不能赋给类型“LengthWise”的参数。ts(2345)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三四、泛型04\"><a href=\"#三四、泛型04\" class=\"headerlink\" title=\"三四、泛型04\"></a>三四、泛型04</h2><p>泛型接口</p>\n<p>之前学习过，可以使用接口的方式来定义一个函数需要符合的形状：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SearchFunc</span>&#123;</span><br><span class=\"line\">    (<span class=\"attr\">source</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">subString</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySearch</span>: <span class=\"title class_\">SearchFunc</span>;</span><br><span class=\"line\">mySearch = <span class=\"keyword\">function</span>(<span class=\"params\">source: <span class=\"built_in\">string</span>, subString: <span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> source.<span class=\"title function_\">search</span>(subString) != -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然也可以使用含有泛型的接口来定义函数的形状：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">CreateArrayFunc</span>&#123;</span><br><span class=\"line\">    &lt;T&gt;(<span class=\"attr\">length</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">value</span>: T): <span class=\"title class_\">Array</span>&lt;T&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">createArray</span>: <span class=\"title class_\">CreateArrayFunc</span>;</span><br><span class=\"line\">createArray = <span class=\"keyword\">function</span>&lt;T&gt;(<span class=\"attr\">length</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">value</span>: T): <span class=\"title class_\">Array</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">result</span>:T[] = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++)&#123;</span><br><span class=\"line\">        result[i] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">createArray</span>(<span class=\"number\">3</span>,<span class=\"string\">&#x27;x&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//[&#x27;x&#x27;,&#x27;x&#x27;,&#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<p>进一步，我们可以把泛型参数提前到接口名上：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">CreateArrayFunc</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    (<span class=\"attr\">length</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">value</span>: T): <span class=\"title class_\">Array</span>&lt;T&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">createArray</span>: <span class=\"title class_\">CreateArrayFunc</span>&lt;<span class=\"built_in\">any</span>&gt;;</span><br><span class=\"line\">createArray = <span class=\"keyword\">function</span>&lt;T&gt;(<span class=\"attr\">length</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">value</span>: T): <span class=\"title class_\">Array</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">result</span>:T[] = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++)&#123;</span><br><span class=\"line\">        result[i] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">createArray</span>(<span class=\"number\">3</span>,<span class=\"string\">&#x27;x&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//[&#x27;x&#x27;,&#x27;x&#x27;,&#x27;x&#x27;]</span></span><br><span class=\"line\"><span class=\"title function_\">createArray</span>(<span class=\"number\">3</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">//[true,true,true]</span></span><br><span class=\"line\"><span class=\"title function_\">createArray</span>(<span class=\"number\">3</span>,&#123;<span class=\"attr\">isExist</span>:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">//[&#123;isExist:true&#125;,&#123;isExist:true&#125;,&#123;isExist:true&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三五、泛型05\"><a href=\"#三五、泛型05\" class=\"headerlink\" title=\"三五、泛型05\"></a>三五、泛型05</h2><p>泛型类</p>\n<p>与泛型接口类似，泛型也可以用于类的类型定义中：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GenericNumber</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    zeroValue!: T; <span class=\"comment\">//!为非空断言, 否则报错：属性“XXX”没有初始化表达式，且未在构造函数中明确赋值。</span></span><br><span class=\"line\">    add!: <span class=\"function\">(<span class=\"params\">x: T, y: T</span>) =&gt;</span> T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myGenericNumber = <span class=\"keyword\">new</span> <span class=\"title class_\">GenericNumber</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\">myGenericNumber.<span class=\"property\">zeroValue</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">myGenericNumber.<span class=\"property\">add</span> = <span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)&#123; <span class=\"keyword\">return</span> x+y; &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>泛型参数的默认类型</p>\n<p>在TypeScript2.3以后，我们可以为泛型中的类型参数指定默认类型。当使用泛型时没有在代码中直接指定类型参数，从实际值参数中也无法推测出时，这个默认类型就会起作用。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> createArray&lt;T = <span class=\"built_in\">string</span>&gt;(<span class=\"attr\">length</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">value</span>: T):<span class=\"title class_\">Array</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">result</span>:T[] = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++)&#123;</span><br><span class=\"line\">        result[i] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三六、声明合并\"><a href=\"#三六、声明合并\" class=\"headerlink\" title=\"三六、声明合并\"></a>三六、声明合并</h2><p>同名函数、接口、类的合并</p>\n<p>如果定义了两个相同的名字的函数、接口或类，那么他们会合并成一个类型：</p>\n<h4 id=\"函数的合并\"><a href=\"#函数的合并\" class=\"headerlink\" title=\"函数的合并\"></a>函数的合并</h4><p>之前我们学习过，我们可以使用重载定义多个函数类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>  <span class=\"built_in\">string</span></span>): <span class=\"built_in\">number</span>  <span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;number&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Number</span>(x.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"property\">reverse</span>.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;string&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"property\">reverse</span>.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"接口的合并\"><a href=\"#接口的合并\" class=\"headerlink\" title=\"接口的合并\"></a>接口的合并</h4><p>接口中的属性在合并时会简单地合并到一个接口中：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">price</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>相当于：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">price</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，<strong>合并的属性的类型必须是唯一的</strong>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">price</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">price</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"comment\">//虽然重复了，但是类型还是number，所以不会报错</span></span><br><span class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">price</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">price</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"comment\">//报错：后续属性声明必须属于同一类型。属性“price”的类型必须为“number”，但此处却为类型“string”。ts(2717)</span></span><br><span class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口中的方法合并，和函数的合并一样：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">price</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"attr\">s</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"attr\">s</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">n</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>相当于：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">price</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"attr\">s</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"attr\">s</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">n</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类的合并\"><a href=\"#类的合并\" class=\"headerlink\" title=\"类的合并\"></a>类的合并</h4><p>类的合并与借口的合并一样</p>\n<p>PS: 但是一般情况下，不建议创建多个同名接口或类，虽然可以自动合并，但是可能会发生意想不到的问题。代码不要写在两个地方，不然不好维护。</p>\n<h2 id=\"三七、写在结尾\"><a href=\"#三七、写在结尾\" class=\"headerlink\" title=\"三七、写在结尾\"></a>三七、写在结尾</h2><p>TypeScript 应用非常广泛，最新的 Vue 和 React 均集成了 TypeScript ，这里推荐大家使用 Vue3 ，Vue3 天然支持 TypeScript。</p>\n<p>另一方面，TS 中有很多支持 ES 的语法，关系图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bb541a521a9a8d8574a7711ec1caf1a2.png\" alt=\"image-20220507164550922\"></p>\n<p>最后，多看文档</p>\n<p><a href=\"https://www.typescriptlang.org/docs/\">TypeScript英文文档</a></p>\n<p><a href=\"https://www.tslang.cn/docs/home.html\">TypeScript中文文档</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、什么是Typescript\"><a href=\"#一、什么是Typescript\" class=\"headerlink\" title=\"一、什么是Typescript\"></a>一、什么是Typescript</h2><p><a href=\"https://www.typescriptlang.org/docs/\">TypeScript英文文档</a></p>\n<p><a href=\"https://www.tslang.cn/docs/home.html\">TypeScript中文网，中文文档</a></p>\n<blockquote>\n<ul>\n<li>JavaScript的超集，遵循最新的 ES6、Es5 规范。TypeScript 扩展了 JavaScript的语法，可以编译为JavaScript，添加了类型系统的JavaScript，可以适用与任何规模的项目。</li>\n<li>TypeScript 是由微软开发的一款开源的编程语言。TypeScript 更像后端 java、C#这样的面向对象语言可以让 JS开发大型企业项目。</li>\n<li>谷歌也在大力支持 Typescript 的推广，谷歌的 angular2.x+就是基于 Typescript 语法。</li>\n<li>最新的 Vue 、React 也可以集成 TypeScript。</li>\n</ul>\n</blockquote>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220507164550922.png\" alt=\"image-20220507164550922\"></p>\n<h3 id=\"TypeScript特性\"><a href=\"#TypeScript特性\" class=\"headerlink\" title=\"TypeScript特性\"></a>TypeScript特性</h3><h4 id=\"类型系统\"><a href=\"#类型系统\" class=\"headerlink\" title=\"类型系统\"></a>类型系统</h4>","more":"<p>从TypeScript的名字就可以看出来， <strong>[类型]</strong> 是其最核心的特性。</p>\n<p>我们知道，JavaScript是一门非常灵活的编程语言：</p>\n<blockquote>\n<ul>\n<li>  它没有约束类型，一个变量可能初始化时是字符串类型，过一会又被赋值为数字类型</li>\n<li>  由于隐式类型转化的存在，有的变量很难在运行前就确定</li>\n<li>  基于原型的的面向对象编程，使得原型上的属性或方法可以在运行时被修改。</li>\n<li>  函数是JavaScript中的一等公民，可以赋值给变量，也可以当做参数或返回值</li>\n</ul>\n</blockquote>\n<p>这种灵活性就像一把双刃剑，一方面使得JavaScript蓬勃发展，无所不能，从2013年开始就一直蝉联最普遍使用的编程语言排行榜冠军；另一方面也使得的代码质量参差不齐，维护成本高，运行错误多。</p>\n<p>而TypeScript的 <strong>类型</strong> 系统，很大程度弥补JavaScript的缺点。</p>\n<h4 id=\"TypeScript是静态类型\"><a href=\"#TypeScript是静态类型\" class=\"headerlink\" title=\"TypeScript是静态类型\"></a>TypeScript是静态类型</h4><p>类型系统按照 [类型检查的时机] 来分类，可以分为动态类型和静态类型。</p>\n<p>动态类型是指在运行时才会进行类型检查，这种语言的类型错误往往会导致运行时错误。JavaScript是一门解释型语言，没有编译阶段，所以他是动态类型，以下这段代码在运行时才会报错：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"number\">1</span>；</span><br><span class=\"line\">foo.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//Uncaught TypeError: foo.split is not a function</span></span><br><span class=\"line\"><span class=\"comment\">//运行时报错：foo.split不是一个函数，造成线上bug</span></span><br></pre></td></tr></table></figure>\n\n<p>静态类型是指编译阶段就能确定每个变量的类型，这种语言的类型错误往往会导致语法错误。TypeScript在运行前需要先编译为JavaScript，而在编译阶段就会进行类型检查，所以 <strong>TypeScript是静态类型</strong> ，这段TypeScript代码在编译阶段就会报错：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"number\">1</span>；</span><br><span class=\"line\">foo.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//Property &#x27;split&#x27; does not exist on type &#x27;number&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//编译时报错：数字没有split方法，无法通过编译</span></span><br></pre></td></tr></table></figure>\n\n<p>你可能会奇怪，这段TypeScript代码看上去和JavaScript没有什么区别呀。</p>\n<p>没错！大部分JavaScript代码都只需要经过少量的修改（或者完全不用修改）就变成了TypeScript的代码，这得益于TypeScript强大的 <strong>类型推论</strong>，即使不去手动声明变量 foo 的类型，也能在变量初始化的时候自动推论出他是一个 <code>number</code> 类型。</p>\n<p>完整的TypeScript代码是这样的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">foo</span>: <span class=\"built_in\">number</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">foo.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//Property &#x27;split&#x27; does not exist on type &#x27;number&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//编译时报错：数字没有split方法，无法通过编译</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"TypeScript是弱类型\"><a href=\"#TypeScript是弱类型\" class=\"headerlink\" title=\"TypeScript是弱类型\"></a>TypeScript是弱类型</h4><p>类型系统按照 [是否允许隐式类型转换] 来分类，可分为强类型和弱类型。</p>\n<p>以下这段代码不管是在JavaScript还是TypeScript中都是正常运行的，运行时数字1会被隐式类型转化为字符串 ‘1’ ，加号 ‘+’ 被识别为字符串拼接，打印结果为 ‘11’:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span> + <span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//打印字符串 &#x27;11&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>TypeScript是完全兼容JavaScript的，他不会修改JavaScript运行时的特性，他们都是 <strong>弱类型语言</strong>。</p>\n<h2 id=\"二、安装并编译TypeScript\"><a href=\"#二、安装并编译TypeScript\" class=\"headerlink\" title=\"二、安装并编译TypeScript\"></a>二、安装并编译TypeScript</h2><p>安装TypeScript需要NodeJS环境，如果电脑没有npm命令，可以去官网下载并安装NodeJS</p>\n<p>官网地址：<a href=\"https://nodejs.org/en/\">Node.js (nodejs.org)</a></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220507113822749.png\" alt=\"image-20220507113822749\"></p>\n<p>TypeScript安装命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g typescript</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">通过tsc --version可以查看版本号以确保是否安装成功</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220507121610924.png\" alt=\"image-20220507121610924\"></p>\n<p>安装以后编译ts文件很简单，我们在电脑上新建一个目录<code>code</code>，新建一个文件<code>index.ts</code>,然后在当前目录下输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc index.ts</span><br></pre></td></tr></table></figure>\n\n<p>编译完之后会在当前目录下输出一个<code>index.js</code>文件，则编译成功。如果想指定输出目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc --outFile ./js/index.js index.ts</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、基本的数据类型\"><a href=\"#三、基本的数据类型\" class=\"headerlink\" title=\"三、基本的数据类型\"></a>三、基本的数据类型</h2><h4 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h4><p>布尔值是最基础的数据类型，在TypeScript中，使用<code>boolean</code>定义布尔值类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">isDone</span>:<span class=\"built_in\">boolean</span> = <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数值\"><a href=\"#数值\" class=\"headerlink\" title=\"数值\"></a>数值</h4><p>使用<code>number</code>定义数值类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mynum</span>:<span class=\"built_in\">number</span> = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><p>使用<code>string</code>定义字符串类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mystring</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;TypeScript字符串&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//模板字符串,要用反引号括起来</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">sentence</span>:<span class=\"built_in\">string</span> = <span class=\"string\">`Hello,This is <span class=\"subst\">$&#123;mystring&#125;</span>.`</span>;</span><br><span class=\"line\"><span class=\"comment\">//也可以使用js的加号 + 语法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">sentence2</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;Hello,This is&#x27;</span>+mystring;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"空值\"><a href=\"#空值\" class=\"headerlink\" title=\"空值\"></a>空值</h4><p>JavaScript没有空值(void)的概念，在TypeScript中，用<code>void</code>表示没有任何返回值的函数：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">alertName</span>(<span class=\"params\"></span>):<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"string\">&#x27;my name is tom&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>声明一个<code>void</code>类型的变量没有什么用，因为你只能将它赋值为<code>undefined</code>和<code>null</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">unsable</span>:<span class=\"built_in\">void</span> = <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Null和Undefined\"><a href=\"#Null和Undefined\" class=\"headerlink\" title=\"Null和Undefined\"></a>Null和Undefined</h4><p>在TypeScript中，默认情况下<code>null</code>和<code>undefined</code>是所有类型的子类型。 就是说你可以把 <code>null</code>和<code>undefined</code>赋值给<code>number</code>类型的变量。可以使用<code>null</code>和<code>undefined</code>来定义这两个原始数据类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n</span>:<span class=\"literal\">null</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">u</span>:<span class=\"literal\">undefined</span> = <span class=\"literal\">undefined</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h4><p>TypeScript像JavaScript一样可以操作数组元素。有两种方式定义数组。</p>\n<p>第一种是元素类型后加 <code>[]</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">list</span>:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n<p>第二种是使用数组泛型，<code>Array&lt;元素类型&gt;</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">list</span>:<span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h4><p>元组（Tuple）类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。但<strong>定义变量时类型的顺序要一致</strong>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x : [<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>];</span><br><span class=\"line\">x = [<span class=\"string\">&#x27;hello&#x27;</span>,<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"comment\">//正常运行</span></span><br><span class=\"line\">x = [<span class=\"number\">20</span>,<span class=\"string\">&#x27;HELLO&#x27;</span>];</span><br><span class=\"line\"><span class=\"comment\">//报错：不能将类型“number”分配给类型“string”。ts(2322)；不能将类型“string”分配给类型“number”。ts(2322)</span></span><br></pre></td></tr></table></figure>\n\n<p>当访问一个已知索引的元素，会得到正确的类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x[<span class=\"number\">0</span>].<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>)); <span class=\"comment\">// 正常运行</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x[<span class=\"number\">1</span>].<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>)); <span class=\"comment\">// 报错： &#x27;number&#x27; does not have &#x27;substr&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>当访问越界元素时：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x[<span class=\"number\">3</span>] = <span class=\"string\">&#x27;World&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//报错：不能将类型“&quot;World&quot;”分配给类型“undefined”。ts(2322)长度为 &quot;2&quot; 的元组类型 &quot;[string, number]&quot; 在索引 &quot;2&quot; 处没有元素。ts(2493)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h4><p><code>object</code>表示非原始类型，也就是除<code>number</code>，<code>string</code>，<code>boolean</code>，<code>symbol</code>，<code>null</code>或<code>undefined</code>之外的类型。</p>\n<p>使用<code>object</code>类型，就可以更好的表示像<code>Object.create</code>这样的API。例如：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">function</span> <span class=\"title function_\">create</span>(<span class=\"params\">o:objectnull</span>):<span class=\"built_in\">void</span>;</span><br><span class=\"line\"><span class=\"title function_\">create</span>(&#123;<span class=\"attr\">pro</span>:<span class=\"number\">0</span>&#125;);</span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"literal\">undefined</span>);</span><br><span class=\"line\"><span class=\"title function_\">create</span>();<span class=\"comment\">//报错：应有 1 个参数，但获得 0 个。ts(2554)</span></span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"number\">42</span>);<span class=\"comment\">//报错：类型“number”的参数不能赋给类型“object”的参数。ts(2345)</span></span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"string\">&quot;string&quot;</span>); <span class=\"comment\">//报错： 类型“string”的参数不能赋给类型“object”的参数。ts(2345)</span></span><br><span class=\"line\"><span class=\"title function_\">create</span>(<span class=\"literal\">false</span>); <span class=\"comment\">//报错：类型“boolean”的参数不能赋给类型“object”的参数。ts(2345)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、任意值-Any\"><a href=\"#四、任意值-Any\" class=\"headerlink\" title=\"四、任意值(Any)\"></a>四、任意值(Any)</h2><p>任意值(Any)用来表示允许赋值为任意类型。</p>\n<p>如果是一个普通类型，在赋值过程中改变类型是不被允许的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myFavoriteNum</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">myFavoriteNum = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"comment\">//报错：不能将类型“number”分配给类型“string”。ts(2322)</span></span><br></pre></td></tr></table></figure>\n\n<p>但如果是<code>any</code>类型，则允许被赋值为任意类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myFavoriteNum</span>:<span class=\"built_in\">any</span> = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">myFavoriteNum = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在任意值上访问任何属性都是允许的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">anything</span>: <span class=\"built_in\">any</span> = <span class=\"string\">&#x27;hello&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(anything.<span class=\"property\">Myname</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(anything.<span class=\"property\">myname</span>.<span class=\"property\">length</span>);</span><br></pre></td></tr></table></figure>\n\n<p>也允许调用任何方法:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">anything</span>:<span class=\"built_in\">any</span> = <span class=\"string\">&#x27;heloo&#x27;</span></span><br><span class=\"line\">anything.<span class=\"title function_\">setName</span>(<span class=\"string\">&#x27;Tom&#x27;</span>);</span><br><span class=\"line\">anything.<span class=\"title function_\">setName</span>(<span class=\"string\">&#x27;Allen&#x27;</span>).<span class=\"title function_\">sayHello</span>();</span><br><span class=\"line\">anything.<span class=\"property\">Myname</span>.<span class=\"title function_\">setFirstName</span>(<span class=\"string\">&#x27;Cat&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>所以，<strong>声明一个任意值(any)变量后，对它的任何操作，返回的内容的类型都是任意值</strong>。</p>\n<h2 id=\"五、类型推论\"><a href=\"#五、类型推论\" class=\"headerlink\" title=\"五、类型推论\"></a>五、类型推论</h2><p>如果没有明确的指定类型，那么TypeScript会依照类型推论（Type Inference）的规则推断出一个类型。</p>\n<p>以下代码虽然没有指定类型，但在编译时会出错：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myFavoriteNum = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">myFavoriteNum = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"comment\">//报错：不能将类型“number”分配给类型“string”。ts(2322)</span></span><br></pre></td></tr></table></figure>\n\n<p>事实上，它等价于：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myFavoriteNum</span>:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">myFavoriteNum = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"comment\">//报错：不能将类型“number”分配给类型“string”。ts(2322)</span></span><br></pre></td></tr></table></figure>\n\n<p>TypeScript在没有明确指定变量类型时，会对变量的类型进行推测，这就是类型推论。</p>\n<p><strong>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 <code>any</code>类型而完全不被类型检查：</strong></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myFavoriteNum;</span><br><span class=\"line\">myFavoriteNum = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">myFavoriteNum = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"六、联合类型\"><a href=\"#六、联合类型\" class=\"headerlink\" title=\"六、联合类型\"></a>六、联合类型</h2><p>联合类型(Union Types)表示取值可以为多种类型中的一种。</p>\n<p>举个例子</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myFavoriteNum</span>:stringnumber;</span><br><span class=\"line\">myFavoriteNum = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\">myFavoriteNum = <span class=\"number\">7</span>;</span><br></pre></td></tr></table></figure>\n\n<p>从代码可以看出来联合类型使用 来分隔每一个类型。</p>\n<p>这里的 <code>let myFavoriteNum:stringnumber;</code>的含义是允许<code>myFavoriteNum</code>为<code>string</code>和<code>number</code>类型，而不能是其他类型。</p>\n<p>比如下面这个就会报错：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myFavoriteNum</span>:stringnumber;</span><br><span class=\"line\">myFavoriteNum = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">//报错：不能将类型“boolean”分配给类型“string  number”。ts(2322)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"联合类型的属性或方法\"><a href=\"#联合类型的属性或方法\" class=\"headerlink\" title=\"联合类型的属性或方法\"></a>联合类型的属性或方法</h4><p>当TypeScript不确定一个联合类型的变量到底是哪个类型的时候，我们 <strong>只能访问此联合类型的 共有属性或共有方法</strong>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getLength</span>(<span class=\"params\">something:numberstring</span>):<span class=\"built_in\">number</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> something.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错:类型“string  number”上不存在属性“length”。类型“number”上不存在属性“length”。ts(2339)</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中，因为<code>number</code>类型不存在<code>length</code>属性，所以会报错，正确的使用可以这样：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getLength</span>(<span class=\"params\">something:numberstring</span>):<span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> something.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//`toString()`方法是number和string类型的共有方法。</span></span><br></pre></td></tr></table></figure>\n\n<p>联合类型变量在被赋值的时候，会根据类型推论的推断变量的类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">myFavoriteNum</span>:numberstring;</span><br><span class=\"line\">myFavoriteNum = <span class=\"string\">&#x27;seven&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myFavoriteNum.<span class=\"property\">length</span>);</span><br><span class=\"line\"><span class=\"comment\">//正常运行</span></span><br><span class=\"line\">myFavoriteNum = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myFavoriteNum.<span class=\"property\">length</span>);</span><br><span class=\"line\"><span class=\"comment\">//报错：类型“number”上不存在属性“length”。ts(2339)</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中，第二行的myFavoriteNum被推断成了 <code>string</code>型，访问 <code>length</code>属性就不会报错</p>\n<p>而第四行的myFavoriteNum被推断为<code>number</code>型，访问<code>length</code>属性就会报错</p>\n<h2 id=\"七、接口\"><a href=\"#七、接口\" class=\"headerlink\" title=\"七、接口\"></a>七、接口</h2><p>在TypeScript中，我们使用 <code>interface</code> 来定义一个接口类型的对象。</p>\n<h4 id=\"什么是接口\"><a href=\"#什么是接口\" class=\"headerlink\" title=\"什么是接口\"></a>什么是接口</h4><p>在面向对象语言中，接口是一个重要的概念，它是对行为的抽象，而具体的行为则需要类去实现。</p>\n<p>typesc的核心原则之一是对之所具有的结构进行类型检查。有时候被称作“鸭式辨型法”或者“结构性子类型化”。在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p>\n<p>举个例子</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">sex</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Allen</span>:<span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Allen&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">28</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>:<span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//正常运行</span></span><br></pre></td></tr></table></figure>\n\n<p>上面例子中，我们定义一个接口Person，接着定义一个变量 Allen，他的类型是Person。这样，我们就约束了Allen的形状必须是和接口Person一致，如果少了XX属性就会报错，同理，多了未定义的XX属性也会报错：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">sex</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Tom</span>:<span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//Tom报错：类型 &quot;&#123; name: string; age: number; &#125;&quot; 中缺少属性 &quot;sex&quot;，但类型 &quot;Person&quot; 中需要该属性。ts(2741) index.ts(23, 2): 在此处声明了 &quot;sex&quot;。</span></span><br><span class=\"line\"><span class=\"comment\">//原因是Tom少了sex属性</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Ketty</span>:<span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Ketty&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>:<span class=\"string\">&#x27;female&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">grade</span>:<span class=\"number\">12</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错：不能将类型“&#123; name: string; age: number; sex: string; grade: number; &#125;”分配给类型“Person”。对象文字可以只指定已知属性，并且“grade”不在类型“Person”中。ts(2322)</span></span><br><span class=\"line\"><span class=\"comment\">//原因是Ketty多了grade属性</span></span><br></pre></td></tr></table></figure>\n\n<p>定义Tom变量却少了sex属性就会报错，同理，多了未定义的grade属性也会报错。</p>\n<p>可见，<strong>赋值的时候，变量的结构必须和接口的结构保持一致</strong>。</p>\n<h4 id=\"可选属性\"><a href=\"#可选属性\" class=\"headerlink\" title=\"可选属性\"></a>可选属性</h4><p>有时候我们希望不要完全匹配一个接口的所有结构，那么我们可以用可选属性(在定义接口时，属性后加上 <code>?</code>关键字)：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">    sex?:<span class=\"built_in\">string</span>; <span class=\"comment\">//可选属性 sex</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Allen</span>:<span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Allen&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">28</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>:<span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//正常运行</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Tom</span>:<span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">18</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//正常运行</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"任意属性\"><a href=\"#任意属性\" class=\"headerlink\" title=\"任意属性\"></a>任意属性</h4><p>有时候我们希望一个接口允许有任意的属性，可以用 <code>[属性名:类型名]</code>定义任意属性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    age?:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">    [<span class=\"attr\">propName</span>:<span class=\"built_in\">string</span>]:<span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Allen</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Allen&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"string\">&#x27;female&#x27;</span> <span class=\"comment\">//添加gender属性是允许的</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Tom</span>:<span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender</span>:<span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">gender2</span>:<span class=\"string\">&#x27;male&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">ID</span>:<span class=\"number\">123</span>,</span><br><span class=\"line\">    <span class=\"number\">123</span>:<span class=\"string\">&#x27;asdasd&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">isDone</span>:<span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//添加任意多个属性且类型不一致也是允许的，有点违背接口的初衷</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>[propName:string]:any;</code>定义了任意属性取<code>string</code>类型的值。</p>\n<p>任意属性有点违背接口的初衷，既然已经定义了接口的结构，就不能任意去增加修改他的结构了</p>\n<h4 id=\"只读属性\"><a href=\"#只读属性\" class=\"headerlink\" title=\"只读属性\"></a>只读属性</h4><p>有时候我们希望对象中一些字段只能在创建时被赋值，后续只能可读不可写，那么可以用 <code>readonly</code>关键字定义只读属性：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">readonly</span> <span class=\"attr\">id</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Tom</span>:<span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>:<span class=\"number\">12345</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"number\">19</span>    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Tom</span>.<span class=\"property\">age</span> =  <span class=\"number\">29</span> <span class=\"comment\">//不报错</span></span><br><span class=\"line\"><span class=\"title class_\">Tom</span>.<span class=\"property\">id</span> = <span class=\"number\">12345</span><span class=\"comment\">//报错：无法分配到 &quot;id&quot; ，因为它是只读属性。ts(2540)</span></span><br></pre></td></tr></table></figure>\n\n<p>上述例子中<code>id</code>属性被设置为只读属性，当再次赋值时就会报错。</p>\n<h2 id=\"八、数组\"><a href=\"#八、数组\" class=\"headerlink\" title=\"八、数组\"></a>八、数组</h2><p>数组是存放多个元素的集合</p>\n<p>最简单的方法是使用 [ 类型 + 方括号] 来表示数组：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">fibonacci</span>:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">13</span>];</span><br></pre></td></tr></table></figure>\n\n<p>数组中的项不允许出现其他的类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">fibonacci</span>:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">13</span>];</span><br><span class=\"line\"><span class=\"comment\">//报错：不能将类型“string”分配给类型“number”。ts(2322)</span></span><br></pre></td></tr></table></figure>\n\n<p>数组的一些方法的参数也会根据数组在定义时约定的类型进行限制：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">fibonacci</span>:<span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">13</span>];</span><br><span class=\"line\">fibonacci.<span class=\"title function_\">push</span>(<span class=\"number\">21</span>);</span><br><span class=\"line\"><span class=\"comment\">//正常运行</span></span><br><span class=\"line\">fibonacci.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;34&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//报错：类型“string”的参数不能赋给类型“number”的参数。ts(2345)</span></span><br><span class=\"line\"><span class=\"comment\">//原因是push()方法只允许传入number类型的参数，而&#x27;34&#x27;是字符串字面量类型，后续章节会介绍</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以指定一个 any 类型数组：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">list</span>:<span class=\"built_in\">any</span>[] = [<span class=\"string\">&#x27;Tom&#x27;</span>,<span class=\"number\">18</span>,<span class=\"string\">&#x27;male&#x27;</span>,<span class=\"literal\">true</span>,&#123;<span class=\"attr\">website</span>:<span class=\"string\">&#x27;https://wangwangyz.site&#x27;</span>&#125;];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"九、函数01\"><a href=\"#九、函数01\" class=\"headerlink\" title=\"九、函数01\"></a>九、函数01</h2><h4 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h4><p>在JavaScript中，有两种常见的定义函数的方式——函数声明(Function Declaration)和函数表达式(Function Expression)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数声明(Function Declaration)</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">x,y</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数表达式(Function Expression)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> mySum = <span class=\"keyword\">function</span> (<span class=\"params\">x,y</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>一个函数有输入和输出，要在TypeScript中对其进行约束，需要把输入和输出都考虑到，其中函数声明的类型定义比较简单：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">x:numebr,y:<span class=\"built_in\">number</span></span>):<span class=\"built_in\">number</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，<strong>输入多余(或少于)、类型不匹配的参数，是不被允许的</strong>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">x:numebr,y:<span class=\"built_in\">number</span></span>):<span class=\"built_in\">number</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)<span class=\"comment\">//报错：应有 2 个参数，但获得 3 个。ts(2554)</span></span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"number\">1</span>)<span class=\"comment\">//报错：应有 2 个参数，但获得 1 个。ts(2554)</span></span><br><span class=\"line\"><span class=\"title function_\">sum</span>(<span class=\"string\">&#x27;srt&#x27;</span>,<span class=\"number\">1</span>)<span class=\"comment\">//报错：类型“string”的参数不能赋给类型“number”的参数。ts(2345)</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h4><p>如果我们现在写一个对函数表达式(Function Expression)的定义，可能会写成这样：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> mysum = <span class=\"keyword\">function</span>(<span class=\"params\">x:<span class=\"built_in\">number</span>,y:<span class=\"built_in\">number</span></span>):<span class=\"built_in\">number</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这是可以通过编译的，不过事实上，上面的代码只对 <strong>等号右侧的匿名函数</strong>进行了类型定义，而等号左边的<strong>mysum</strong>，是通过赋值操作进行类型推论而推断出来的。如果需要我们手动给<strong>mysum</strong>添加类型，则是这样：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这里用的是类型推断</span></span><br><span class=\"line\"><span class=\"comment\">//let mysum = function(x:number,y:number):number&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//  return x + y;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果是手动指定类型，应该是这样</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mysum</span>:<span class=\"function\">(<span class=\"params\">x:<span class=\"built_in\">number</span>, y:<span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span> = <span class=\"keyword\">function</span> (<span class=\"params\">x:<span class=\"built_in\">number</span>,y:<span class=\"built_in\">number</span></span>):<span class=\"built_in\">number</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>注意不要混淆了TS中的 <code>=&gt;</code> 和ES6中的 <code>=&gt;</code>.</p>\n<p>在TypeScript的类型定义中，<code>=&gt;</code>用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。</p>\n<p>在ES6中，<code>=&gt;</code>叫做箭头函数，应用十分广泛，可以参考ES6的箭头函数：<a href=\"https://www.bookstack.cn/read/es6-3rd/spilt.5.docs-function.md\">参考链接：阮一峰ES6箭头函数教程</a></p>\n<h4 id=\"用接口定义函数的形状\"><a href=\"#用接口定义函数的形状\" class=\"headerlink\" title=\"用接口定义函数的形状\"></a>用接口定义函数的形状</h4><p>我们也可以使用接口的方式来定义一个符合某个形状的函数：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SearchFunc</span>&#123;</span><br><span class=\"line\">    (<span class=\"attr\">source</span>:<span class=\"built_in\">string</span>,<span class=\"attr\">subString</span>:<span class=\"built_in\">string</span>):<span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySearchFunc</span>:<span class=\"title class_\">SearchFunc</span>;</span><br><span class=\"line\">mySearchFunc = <span class=\"keyword\">function</span>(<span class=\"params\">source:<span class=\"built_in\">string</span>,subString:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> source.<span class=\"title function_\">search</span>(subString) !== -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySearchFunc1</span>:<span class=\"title class_\">SearchFunc</span>;</span><br><span class=\"line\">mySearchFunc1 = <span class=\"keyword\">function</span>(<span class=\"params\">source:<span class=\"built_in\">number</span>,subString:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>==<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">//报错：不能将类型“(args1: number, args2: string) =&gt; boolean”分配给类型“SearchFunc”。参数“args1”和“source” 的类型不兼容。不能将类型“string”分配给类型“number”。ts(2322)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySearchFunc2</span>:<span class=\"title class_\">SearchFunc</span>;</span><br><span class=\"line\">mySearchFunc2 = <span class=\"keyword\">function</span>(<span class=\"params\">source:<span class=\"built_in\">string</span>,subString:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">//报错：不能将类型“(args1: string, args2: string) =&gt; number”分配给类型“SearchFunc”。不能将类型“number”分配给类型“boolean”。ts(2322)</span></span><br></pre></td></tr></table></figure>\n\n<p>采用函数表达式接口定义函数的方式是，对等号左侧进行类型限制，可保证以后对函数名赋值时保证 <strong>参数个数、参数类型、返回值类型</strong> 不变。</p>\n<h2 id=\"十、函数02\"><a href=\"#十、函数02\" class=\"headerlink\" title=\"十、函数02\"></a>十、函数02</h2><h4 id=\"可选参数\"><a href=\"#可选参数\" class=\"headerlink\" title=\"可选参数\"></a>可选参数</h4><p>前面提到，多余的(或者少于要求的)参数，是不允许的。那么如何定义可选的参数呢？</p>\n<p>与接口中的可选属性类似，我们用关键字 <code>?</code>表示可选的参数：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">buildName</span>(<span class=\"params\">firstName:<span class=\"built_in\">string</span>, lastName?:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lastName)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName + <span class=\"string\">&quot; &quot;</span> + lastName;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tomcat = <span class=\"title function_\">buildName</span>(<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;cat&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> tom = <span class=\"title function_\">buildName</span>(<span class=\"literal\">undefined</span>, <span class=\"string\">&quot;Tom&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是，<strong>可选参数必须接在必须参数的后面</strong>，换句话说，<strong>可选参数后面不允许再出现必须参数了</strong>。(这一点和Python很像)</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">buildName</span>(<span class=\"params\">firstName?:<span class=\"built_in\">string</span>, lastName:<span class=\"built_in\">string</span></span>)&#123;<span class=\"comment\">//报错：必选参数不能位于可选参数后。ts(1016)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(lastName)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName + <span class=\"string\">&quot; &quot;</span> + lastName;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> firstName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tomcat = <span class=\"title function_\">buildName</span>(<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;cat&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> tom = <span class=\"title function_\">buildName</span>(<span class=\"literal\">undefined</span>, <span class=\"string\">&quot;Tom&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数默认值\"><a href=\"#参数默认值\" class=\"headerlink\" title=\"参数默认值\"></a>参数默认值</h4><p>在ES6中，我们允许给函数的参数添加默认值，<strong>TypeScript会将添加了默认值的参数识别为可选参数</strong>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">buildName</span>(<span class=\"params\">firstName:<span class=\"built_in\">string</span>, lastName:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;Cat&#x27;</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstName + <span class=\"string\">&quot; &quot;</span> + lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tomcat = <span class=\"title function_\">buildName</span>(<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;ccccat&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> tom = <span class=\"title function_\">buildName</span>(<span class=\"string\">&quot;Tom&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>此时就不受 [可选参数必须接在必需参数后面] 的限制了：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">buildName</span>(<span class=\"params\">firstName:<span class=\"built_in\">string</span> = <span class=\"string\">&#x27;Tom&#x27;</span>, lastName:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstName + <span class=\"string\">&quot; &quot;</span> + lastName;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tomcat = <span class=\"title function_\">buildName</span>(<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;cat&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> tom = <span class=\"title function_\">buildName</span>(<span class=\"literal\">undefined</span>, <span class=\"string\">&quot;Tom&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十一、函数03\"><a href=\"#十一、函数03\" class=\"headerlink\" title=\"十一、函数03\"></a>十一、函数03</h2><p>ES6中，可以使用 <code>...rest</code> 的方式获取函数中的剩余参数(rest参数):</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">push</span>(<span class=\"params\">array, ...items</span>)&#123;<span class=\"comment\">//参数 &quot;array&quot; 隐式具有 &quot;any&quot; 类型</span></span><br><span class=\"line\">    items.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>)&#123;</span><br><span class=\"line\">           array.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a :<span class=\"built_in\">any</span>[] = [];</span><br><span class=\"line\"><span class=\"title function_\">push</span>(a,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<p>事实上，<code>items</code> 是一个数组，所以我们可以用数组的类型来定义它：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">push</span>(<span class=\"params\">array:<span class=\"built_in\">any</span>[], ...items:<span class=\"built_in\">any</span>[]</span>)&#123;</span><br><span class=\"line\">        items.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">item</span>)&#123;</span><br><span class=\"line\">              array.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [];</span><br><span class=\"line\"><span class=\"title function_\">push</span>(a,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<p>注意，rest参数只能是最后一个参数，关于rest参数，可以参考：<a href=\"https://www.bookstack.cn/read/es6-3rd/spilt.2.docs-function.md\">阮一峰ES6 rest参数详解</a></p>\n<h4 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h4><p>重载允许一个函数接收不同数量或类型的参数，并做不同处理。</p>\n<p>比如，我们需要实现一个函数<code>reverse</code>，输入数字123的时候，输出反转的数字321，输入字符串hello的时候，输出反转的字符串olleh。</p>\n<p>利用联合类型，我们可以这么做：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x: numberstring</span>):<span class=\"built_in\">number</span>  <span class=\"built_in\">string</span>  <span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;number&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Number</span>(x.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;string&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> x.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然而这样有个缺点，就是不能够精确地表达，输入为数字的时候，输出应该也为数字，输入为字符串的时候，输出也应该为字符串。</p>\n<p>这时，我们可以使用 <strong>重载</strong> 定义多个 <code>reverse</code>的函数类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x:<span class=\"built_in\">number</span></span>):<span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x:<span class=\"built_in\">string</span></span>):<span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x:numberstring</span>):numberstringvoid&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;number&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Number</span>(x.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;string&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">reverse</span>(<span class=\"number\">123</span>) <span class=\"comment\">// function reverse(x: number): number (+1 overload)</span></span><br><span class=\"line\"><span class=\"title function_\">reverse</span>(<span class=\"string\">&#x27;12345&#x27;</span>) <span class=\"comment\">// function reverse(x: number): number (+1 overload)</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中，我们重复定义了多次函数<code>reverse</code>，前两次都是函数定义，最后一次是函数实现。在编辑器的代码提示中，可以正确看到前两个提示。</p>\n<p>注意，TypeScript中会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</p>\n<h2 id=\"十二、类型断言01\"><a href=\"#十二、类型断言01\" class=\"headerlink\" title=\"十二、类型断言01\"></a>十二、类型断言01</h2><p>基本语法、将一个联合类型断言为其中一个类型。</p>\n<p>类型断言(Type Assertion)可以用来手动指定一个值的类型</p>\n<blockquote>\n<p>通过_类型断言_这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript会假设你，程序员，已经进行了必须的检查。</p>\n<p>——————引自<a href=\"https://www.tslang.cn/docs/handbook/basic-types.html\">基础类型 · TypeScript中文网 · TypeScript——JavaScript的超集 (tslang.cn)</a></p>\n</blockquote>\n<h4 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><p>有两种表达：</p>\n<blockquote>\n<ul>\n<li>值 as 类型</li>\n<li>&lt;类型&gt;值</li>\n</ul>\n</blockquote>\n<p>在tsx语法中（React的jsx语法的ts版）中必须使用 <code>值 as 类型</code>表示类型断言。</p>\n<p>故建议大家在使用类型断言时，统一使用 <code>值 as 类型</code>这样的语法。</p>\n<h4 id=\"将一个联合类型断言为其中一个类型\"><a href=\"#将一个联合类型断言为其中一个类型\" class=\"headerlink\" title=\"将一个联合类型断言为其中一个类型\"></a>将一个联合类型断言为其中一个类型</h4><p>之前提过，当TypeScript中不确定一个联合类型的变量到底是哪个类型的时候，我们 <strong>只能访问联合类型所有类型的共有属性或方法</strong>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Fish</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">swim</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName</span>(<span class=\"params\">animal:CatFish</span>):<span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> animal.<span class=\"property\">name</span>;</span><br><span class=\"line\"><span class=\"comment\">//正常运行</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName</span>(<span class=\"params\">animal:CatFish</span>):<span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> animal.<span class=\"title function_\">run</span>();</span><br><span class=\"line\"><span class=\"comment\">//报错：类型“Cat  Fish”上不存在属性“run”。类型“Fish”上不存在属性“run”。ts(2339)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而有时候，我们确实需要在还不确定类型的时候就访问其中一个类型的属性或者方法，比如：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Fish</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">swim</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isFish</span>(<span class=\"params\">animal:CatFish</span>):<span class=\"built_in\">boolean</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> animal.<span class=\"property\">swim</span> === <span class=\"string\">&#x27;function&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错：类型“Cat  Fish”上不存在属性“swim”。类型“Cat”上不存在属性“swim”。ts(2339)</span></span><br></pre></td></tr></table></figure>\n\n<p>上述例子中，获取 <code>animal.swim</code>时会报错，</p>\n<p>此时可以使用类型断言，将animal断言为Fish：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isFish</span>(<span class=\"params\">animal:CatFish</span>):<span class=\"built_in\">boolean</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//将animal断言为Fish</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> (animal <span class=\"keyword\">as</span> <span class=\"title class_\">Fish</span>).<span class=\"property\">swim</span> === <span class=\"string\">&#x27;function&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就可以解决访问animal.swim时的报错问题了。</p>\n<p>不过需要注意的是，类型断言只能够 ’欺骗‘TypeScript编译器，无法避免运行时的错误，滥用类型断言反而会导致运行时错误：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">swim</span>(<span class=\"params\">animal:CatFish</span>):<span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">    (animal <span class=\"keyword\">as</span> <span class=\"title class_\">Fish</span>).<span class=\"title function_\">swim</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">tom</span>:<span class=\"title class_\">Cat</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;Tom&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">run</span>(<span class=\"params\"></span>)&#123; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I&#x27;m running...&quot;</span>);&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"title function_\">swim</span>(tom)</span><br><span class=\"line\"><span class=\"comment\">//编译时不报错，运行时报错：TypeError：animal.swim is not a function</span></span><br></pre></td></tr></table></figure>\n\n<p>上面例子中，编译时不会报错，但是运行时会报错，当我们执行 tsc命令编译时会看到输出的文件无内容。</p>\n<p>原因是因为 <code>(animal as Fish).swim()</code> 这段代码隐藏了 animal可能为 Cat 的情况，将 animal 直接断言为 Fish了，而TypeScript编译器信任了我们的断言，故在调用 <code>swim()</code>时编译没有错误。</p>\n<p>总之，<strong>使用断言一定要格外小心</strong>，尽量避免断言后调用方法或引用深层属性。以减少不必要的 <strong>运行时错误</strong>。</p>\n<h2 id=\"十三、类型断言02\"><a href=\"#十三、类型断言02\" class=\"headerlink\" title=\"十三、类型断言02\"></a>十三、类型断言02</h2><p>将一个父类断言为具体的子类</p>\n<p>当类之间有继承关系时，类型断言也是很常见的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ApiError</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Error</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">code</span>:<span class=\"built_in\">number</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HttpError</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Error</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">statusCode</span>:<span class=\"built_in\">number</span> = <span class=\"number\">200</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isApiError</span>(<span class=\"params\">myError:<span class=\"built_in\">Error</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> (myError <span class=\"keyword\">as</span> <span class=\"title class_\">ApiError</span>).<span class=\"property\">code</span> === <span class=\"string\">&#x27;number&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述例子中，我们声明了函数isApiError，它用来判断传入的参数是不是ApiError类型，为了实现这样一个函数，它的参数类型肯定得是比较抽象的父类Error，这样的话这个函数就能接受Error或他的子类作为参数了。</p>\n<p>但是由于父类Error中没有code属性，故直接获取myError.会报错：类型“Error”上不存在属性“code”。这时候需要使用类型断言获取(myError as ApiError).code。</p>\n<p>大家可能会注意到，在这个例子中会有一个更合适的方式来判断是不是ApiError，那就是使用instaceof：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ApiError</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Error</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">code</span>:<span class=\"built_in\">number</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HttpError</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Error</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">statusCode</span>:<span class=\"built_in\">number</span> = <span class=\"number\">200</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isApiError</span>(<span class=\"params\">myError:<span class=\"built_in\">Error</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(myError <span class=\"keyword\">instanceof</span> <span class=\"title class_\">ApiError</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中，用instanceof确实是一个很好的方式，因为ApiError是一个JavaScript的类，能够通过instanceof判断是否是它的实例。</p>\n<p>但是有的情况下ApiError和HttpError不是一个真正的类，而只是一个TypeScript接口，接口是一个类型，不是一个真正的值，它在编译结果中会被删除，当然就无法用instanceof来判断：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ApiError</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Error</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">code</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">HttpError</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Error</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">statusCode</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isApiError</span>(<span class=\"params\">myError:<span class=\"built_in\">Error</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(myError <span class=\"keyword\">instanceof</span> <span class=\"title class_\">ApiError</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错：“ApiError”仅表示类型，但在此处却作为值使用</span></span><br></pre></td></tr></table></figure>\n\n<p>此时就只能用类型断言，通过判断是否存在 code 属性来判断传入的参数是否为 ApiError了：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ApiError</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Error</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">code</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">HttpError</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Error</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">statusCode</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isApiError</span>(<span class=\"params\">myError:<span class=\"built_in\">Error</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> (myError <span class=\"keyword\">as</span> <span class=\"title class_\">ApiError</span>).<span class=\"property\">code</span> === <span class=\"string\">&#x27;number&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十四、类型断言03\"><a href=\"#十四、类型断言03\" class=\"headerlink\" title=\"十四、类型断言03\"></a>十四、类型断言03</h2><p>将任何一个类型断言为 <code>any</code></p>\n<p>理想情况下，TypeScript的类型系统运转良好，每个值的类型都具体而精确。</p>\n<p>当我们引用一个在此类型上不存在的属性或方法时，会报错：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">foo</span>: <span class=\"built_in\">number</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(foo.<span class=\"property\">length</span>);</span><br><span class=\"line\"><span class=\"comment\">//报错：类型“number”上不存在属性“length”。ts(2339)</span></span><br></pre></td></tr></table></figure>\n\n<p>上面例子中，数字类型的变量foo上是没有length属性的，故TypeScript编译时给出了错误提示。</p>\n<p>这种错误提示显然是很有用的。</p>\n<p>但有的时候，我们非常确定这段代码不会出错，比如：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">foo</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//报错：类型“Window &amp; typeof globalThis”上不存在属性“foo”。ts(2339)</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中，我们需要将window上添加一个foo属性，但是TS会给我们报错，提示window不存在属性foo。</p>\n<p>此时我们可以使用<code>as any</code>临时将window断言为<code>any</code>类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"variable language_\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">foo</span> = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>any</code> 类型中，<strong>访问任何属性都是可以的</strong>。</p>\n<p>需要注意的是，将一个变量断言为any可以说是解决TypeScript中类型问题的最后一个手段。</p>\n<p>但是它极有可能真正掩盖了类型错误，如果不是十分确定，就不要使用 <code>as any</code>。</p>\n<p>总之，一方面不要滥用 any类型，另一方面也不要忽略他带来的作用。我们需要在类型的严格性和开发的方便性之间平衡利弊，才能发挥TypeScript最大的价值。</p>\n<h2 id=\"十五、类型断言04\"><a href=\"#十五、类型断言04\" class=\"headerlink\" title=\"十五、类型断言04\"></a>十五、类型断言04</h2><p>将<code>any</code>类型断言为一个具体的类型</p>\n<p>在日常的开发中，我们不可避免的需要处理any类型的变量，它们可能是由于第三方库未能定义好自己的类型，也可能是历史遗留的或其它人编写的烂代码，还可能是受到TypeScript类型系统的限制而无法精确定义类型的场景。</p>\n<p>遇到<code>any</code>类型的变量时，我们可以选择无视他，任由他滋生更多的<code>any</code>类型。</p>\n<p>我们可以选择改进它，通过类型断言及时地吧<code>any</code>断言为精确的类型，亡羊补牢，使我们的代码向着可维护性高的目标发展。</p>\n<p>举例来说，历史遗留的代码中有个getCacheData函数，它的返回值是any:</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCacheData</span>(<span class=\"params\">key:<span class=\"built_in\">string</span></span>):<span class=\"built_in\">any</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">cache</span>[key];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么我们在使用这个getCacheData函数的时候，最好能够将调用了getCacheData之后的返回值断言为一个精确的类型，这样就方便了后续的操作：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCacheData</span>(<span class=\"params\">key:<span class=\"built_in\">string</span></span>):<span class=\"built_in\">any</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">cache</span>[key];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tom = <span class=\"title function_\">getCacheData</span>(<span class=\"string\">&#x27;tom&#x27;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">Cat</span>;</span><br><span class=\"line\">tom.<span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n\n<p>上面例子中，我们调用完getCacheData之后，立即将她断言为Cat类型，这样的话明确了tom的类型，后续对tom的访问时就有了代码补全，提高了代码的可维护性。</p>\n<blockquote>\n<h5 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h5><p>个人认为在遇到较多any类型变量时，尽量在接下来少用或者不用<code>any</code>类型，根据IDE给出的提示将类型规范化，能减少项目80%的潜在bug。</p>\n<h4 id=\"解决any出现次数过次的问题\"><a href=\"#解决any出现次数过次的问题\" class=\"headerlink\" title=\"解决any出现次数过次的问题\"></a>解决any出现次数过次的问题</h4><p>复杂类型的类型定义</p>\n<ol>\n<li>细拆出重复定义的公共项，使用extents 关键字或者 &amp; 交叉运算符来进行整合，提高利用率； 例1： <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> <span class=\"comment\">// bad</span></span><br><span class=\"line\">  <span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">firstName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">lastName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">PersonWithBirthDate</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"> <span class=\"attr\">lastName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"> <span class=\"attr\">birth</span>: <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// good</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">firstName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"> <span class=\"attr\">lastName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">PersonWithBirthDate</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">birth</span>: <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n 例2： <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">List</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">creatTime</span>: <span class=\"built_in\">number</span>  <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">creator</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">desc</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">modifier</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">token</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">updateTime</span>: <span class=\"built_in\">number</span>  <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">ProjectList</span> = &#123;</span><br><span class=\"line\"> <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"> <span class=\"attr\">projectName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125; &amp; <span class=\"title class_\">List</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">TaskList</span> = &#123;</span><br><span class=\"line\"> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125; &amp; <span class=\"title class_\">List</span>;</span><br></pre></td></tr></table></figure>\n 新的问题：如果很多字段要打问号怎么办？下面会讲到</li>\n<li>使用typeof定义一个类型匹配初始值（常见的使用场景之一：固定的Schema配置适用） <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">INIT_OPTIONS</span>= &#123;</span><br><span class=\"line\">  <span class=\"attr\">width</span>: <span class=\"number\">640</span>,</span><br><span class=\"line\"> <span class=\"attr\">height</span>: <span class=\"number\">480</span>,</span><br><span class=\"line\"> <span class=\"attr\">color</span>: <span class=\"string\">&quot;#00FF00&quot;</span>,</span><br><span class=\"line\"> <span class=\"attr\">label</span>: <span class=\"string\">&quot;VGA&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Options</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">width</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"> <span class=\"attr\">height</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"> <span class=\"attr\">color</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"> <span class=\"attr\">label</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 快速获取配置对象的形状</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Options</span> = <span class=\"keyword\">typeof</span> <span class=\"variable constant_\">INIT_OPTIONS</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li>使用Ts 内置类型来解决？号太多的问题<ul>\n<li>  Utility Types</li>\n<li>  充分利用lib.es5.d.ts中的Partial, Pick , Extract, Omit等方法，扩展第三方、或已存在的类型，不要重复定义完全一样的字段。</li>\n</ul>\n</li>\n</ol>\n<p>参考链接：<a href=\"https://juejin.cn/post/7074832632541872136\">TypeScript：为什么不要用any声明类型 - 掘金 (juejin.cn)</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_43827779/article/details/120343486\">规范TS项目Any类型的使用_Jasmine_jiamei的博客-CSDN博客_ts 对象属性any</a></p>\n</blockquote>\n<h2 id=\"十六、类型断言05\"><a href=\"#十六、类型断言05\" class=\"headerlink\" title=\"十六、类型断言05\"></a>十六、类型断言05</h2><p>类型断言的限制</p>\n<p>从上面的例子可以总结出：</p>\n<blockquote>\n<ul>\n<li>联合类型可以被断言为其中一个类型</li>\n<li>父类可以被断言为子类</li>\n<li>任何类型都可以被断言为 <code>any</code></li>\n<li><code>any</code>可以被断言为任意类型</li>\n</ul>\n</blockquote>\n<p>那么类型断言有没有什么限制呢？是不是任何一个类型都可以被断言为任何另一个类型呢？</p>\n<p>答案是否定的——并不是任何一个类型都可以被断言为任何另一个类型。</p>\n<p>具体来说，若A、B两者具有共同的属性或者方法，那么A能够被断言为B，B也能够断言为A。</p>\n<p>下面我们通过一个简化的例子，来理解类型断言的限制：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//两者是有共同的属性或者方法，比如Animal和Cat都有name</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">testAnimal</span>(<span class=\"params\">animal: Animal</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (animal <span class=\"keyword\">as</span> <span class=\"title class_\">Cat</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">testCat</span>(<span class=\"params\">cat : Cat</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (cat <span class=\"keyword\">as</span> <span class=\"title class_\">Animal</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述例子中是可以断言的，我们再看看下面的例子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//两者没有有共同的属性或者方法，</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//  name:string;</span></span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">testAnimal</span>(<span class=\"params\">animal: Animal</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (animal <span class=\"keyword\">as</span> <span class=\"title class_\">Cat</span>); <span class=\"comment\">//报错：类型 &quot;Animal&quot; 中缺少属性 &quot;run&quot;，但类型 &quot;Cat&quot; 中需要该属性。ts(2352)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">testCat</span>(<span class=\"params\">cat : Cat</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (cat <span class=\"keyword\">as</span> <span class=\"title class_\">Animal</span>);<span class=\"comment\">//报错：类型 &quot;Cat&quot; 中缺少属性 &quot;name&quot;，但类型 &quot;Animal&quot; 中需要该属性。ts(2352)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候会报错，两者不能充分重叠，这意味着要想断言成功，需要具备一个条件：</p>\n<ul>\n<li>  要使得A和B能够被 <strong>互相断言</strong>，就要A兼容B或者B兼容A</li>\n</ul>\n<h2 id=\"十七、类型断言06\"><a href=\"#十七、类型断言06\" class=\"headerlink\" title=\"十七、类型断言06\"></a>十七、类型断言06</h2><p>双重断言</p>\n<p>既然：</p>\n<ul>\n<li>  任何类型都可以被断言为any</li>\n<li>  an可以被断言为任何类型</li>\n</ul>\n<p>那么我们是不是可以使用双重断言 <code>as any as foo</code> 来将任何一个类型断言为另一个类型呢？</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Fish</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">swim</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">testCat</span>(<span class=\"params\">cat : Cat</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (cat <span class=\"keyword\">as</span> <span class=\"built_in\">any</span> <span class=\"keyword\">as</span> <span class=\"title class_\">Fish</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述例子中，若直接使用 <code>cat as Fish</code> 会报错：类型 “Cat” 中缺少属性 “swim”，但类型 “Fish” 中需要该属性。因为Cat和Fish都互不兼容。</p>\n<p>但是若使用双重断言，则可以打破 [要使得A能都断言B ,就要A兼容B或者B兼容A] 的限制，将任何一个类型断言为任何另一个类型。</p>\n<p>若你使用了这种双重断言，那么十有八九都是非常错误。他很可能会导致运行时错误。</p>\n<p><strong>除非迫不得已，否则千万别用双重断言</strong>。（咋迫不得已？基本不用吧？）</p>\n<h2 id=\"十八、类型断言07\"><a href=\"#十八、类型断言07\" class=\"headerlink\" title=\"十八、类型断言07\"></a>十八、类型断言07</h2><p>类型断言VS类型转换</p>\n<p>类型断言只会影响TypeScript编译时的类型，类型断言语句会在编译结果中被删除：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">toBoolean</span>(<span class=\"params\">something:<span class=\"built_in\">any</span></span>):<span class=\"built_in\">boolean</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> something <span class=\"keyword\">as</span> <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">toBoolean</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//返回值为1</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面的例子中，将<code>something</code>断言为<code>boolean</code>可以通过编译，但是并没有什么用，代码在编译后会变成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">toBoolean</span>(<span class=\"params\">something</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> something;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">toBoolean</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//返回值为1</span></span><br></pre></td></tr></table></figure>\n\n<p>所以类型断言不是类型转换，他不会真的影响到变量的类型。</p>\n<p>若要进行类型转化，需要直接调用类型转换的方法：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">toBoolean</span>(<span class=\"params\">something:<span class=\"built_in\">any</span></span>):<span class=\"built_in\">boolean</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Boolean</span>(something);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">toBoolean</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">//返回值为true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"十九、类型断言08\"><a href=\"#十九、类型断言08\" class=\"headerlink\" title=\"十九、类型断言08\"></a>十九、类型断言08</h2><p>类型断言VS类型声明</p>\n<p>在这个例子中：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCacheData</span>(<span class=\"params\">key:<span class=\"built_in\">string</span></span>):<span class=\"built_in\">any</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">cache</span>[key];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> tom = <span class=\"title function_\">getCacheData</span>(<span class=\"string\">&#x27;tom&#x27;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">Cat</span>;</span><br><span class=\"line\">tom.<span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n\n<p>我们使用 <code>as Cat</code>将<code>any</code>类型断言为了<code>Cat</code>类型。</p>\n<p>但实际上还有其他方式可以解决这个问题：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCacheData</span>(<span class=\"params\">key:<span class=\"built_in\">string</span></span>):<span class=\"built_in\">any</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">cache</span>[key];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">tom</span>:<span class=\"title class_\">Cat</span> = <span class=\"title function_\">getCacheData</span>(<span class=\"string\">&#x27;tom&#x27;</span>);</span><br><span class=\"line\">tom.<span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n\n<p>上面的例子中，我们通过类型声明的方式，将<code>tom</code>声明为<code>Cat</code>，然后再将<code>any</code>类型的getCacheData(‘tom’)赋值给<code>Cat</code>类型的<code>tom</code>。</p>\n<p>这和类型断言是非常相似的，而且产生的结果也几乎是一样的——<code>tom</code>在接下来的代码中都变成了<code>Cat</code>类型。</p>\n<p>他们的区别，可以通过这个例子来理解：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">animal</span>: <span class=\"title class_\">Animal</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;tom&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tom = animal <span class=\"keyword\">as</span> <span class=\"title class_\">Cat</span>;</span><br></pre></td></tr></table></figure>\n\n<p>上述例子中，由于<code>Animal</code>兼容 <code>Cat</code>，故可以将 <code>animal</code> 断言为 <code>Cat</code>赋值给<code>tom</code>。</p>\n<p>但是若直接声明tom为<code>Cat</code>类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">animal</span>: <span class=\"title class_\">Animal</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;tom&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>: <span class=\"title class_\">Cat</span> = animal;</span><br><span class=\"line\"><span class=\"comment\">//报错：类型 &quot;Animal&quot; 中缺少属性 &quot;run&quot;，但类型 &quot;Cat&quot; 中需要该属性。ts(2741)</span></span><br></pre></td></tr></table></figure>\n\n<p>则会报错，不允许将Cat类型的tom赋值为animal。</p>\n<p>我们可以得出结论：</p>\n<ul>\n<li>  A断言为B时，A和B有一个及以上相同的属性或方法即可</li>\n<li>  A声明为B时，A必须具备B的所有属性和方法</li>\n</ul>\n<p>知道了他们的核心区别，就知道了类型声明是比类型断言更加严格的。</p>\n<p>所以为了增加代码的质量我们最好优先使用类型声明，这也比类型断言的 <code>as</code>语法更有优势。</p>\n<h2 id=\"二十、类型断言09\"><a href=\"#二十、类型断言09\" class=\"headerlink\" title=\"二十、类型断言09\"></a>二十、类型断言09</h2><p>类型断言VS泛型</p>\n<p>这是一个例子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getCacheData</span>(<span class=\"params\">key:<span class=\"built_in\">string</span></span>):<span class=\"built_in\">any</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">cache</span>[key];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> tom = <span class=\"title function_\">getCacheData</span>(<span class=\"string\">&#x27;tom&#x27;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">Cat</span>;</span><br><span class=\"line\">tom.<span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n\n<p>我们还有第三种方式可以解决这个问题，那就是泛型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> getCacheData&lt;T&gt;(<span class=\"attr\">key</span>:<span class=\"built_in\">string</span>):T&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"variable language_\">window</span> <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>).<span class=\"property\">cache</span>[key];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">run</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> tom = getCacheData&lt;<span class=\"title class_\">Cat</span>&gt;(<span class=\"string\">&#x27;tom&#x27;</span>);</span><br><span class=\"line\">tom.<span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n\n<p>通过给<code>getCacheData</code>函数添加一个泛型 ,我们可以更加规范的实现对<code>getCacheData</code>返回值的约束，这也同时去除掉了代码中的<code>any</code>，是最优的一个解决方式。</p>\n<blockquote>\n<p>关于<strong>泛型</strong></p>\n<p>是一种把明确类型的工作推迟到创建对象或者调用方法的时候才去明确的特殊的类型。</p>\n<p><strong>泛型的定义</strong></p>\n<p>主要有以下两种：</p>\n<ol>\n<li> 在程序编码中一些包含<strong>类型参数</strong>的类型，也就是说泛型的参数只可以代表类，不能代表个别对象。（这是当今较常见的定义）</li>\n<li> 在程序编码中一些包含参数的<a href=\"https://baike.baidu.com/item/%E7%B1%BB\">类</a>。其参数可以代表类或对象等等。（现在人们大多把这称作<a href=\"https://baike.baidu.com/item/%E6%A8%A1%E6%9D%BF\">模板</a>）</li>\n</ol>\n<p>不论使用哪个定义，泛型的参数在真正使用泛型时都必须作出指明。</p>\n<p>参考：<a href=\"https://baike.baidu.com/item/%E6%B3%9B%E5%9E%8B/4475207#2\">泛型_百度百科 (baidu.com)</a></p>\n</blockquote>\n<h2 id=\"二一、type关键字\"><a href=\"#二一、type关键字\" class=\"headerlink\" title=\"二一、type关键字\"></a>二一、type关键字</h2><p>使用type关键字定义类型别名和字符串字面量类型</p>\n<p>我们来看一个方法：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName</span>(<span class=\"params\">n:<span class=\"built_in\">string</span>(() =&gt; <span class=\"built_in\">string</span>)</span>):<span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> n === <span class=\"string\">&#x27;string&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">n</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>type</code>关键字作为类型别名用来给一个类型起个新名字</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NameResolver</span> = <span class=\"function\">()=&gt;</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NameOrResolver</span> = <span class=\"title class_\">Name</span>  <span class=\"title class_\">NameResolver</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName</span>(<span class=\"params\">n:NameResolver</span>):<span class=\"title class_\">Name</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> n === <span class=\"string\">&#x27;string&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">n</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述例子中，我们使用<code>type</code>关键字创建类型别名。</p>\n<p><strong>类型别名常用语联合类型</strong>。</p>\n<p>字符串字面量类型用来约束取值只能是某几个字符串中的一个</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">EventsName</span> = <span class=\"string\">&#x27;click&#x27;</span>  <span class=\"string\">&#x27;scroll&#x27;</span>  <span class=\"string\">&#x27;mousemove&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleEvent</span>(<span class=\"params\">ele:Element  <span class=\"literal\">null</span>,event:EventsName</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//do something</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">handleEvent</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;hello&#x27;</span>),<span class=\"string\">&#x27;click&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//正常运行</span></span><br><span class=\"line\"><span class=\"title function_\">handleEvent</span>(<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElemnetById</span>(<span class=\"string\">&#x27;world&#x27;</span>),<span class=\"string\">&#x27;dbclick&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//报错：类型“&quot;dbclick&quot;”的参数不能赋给类型“EventsName”的参数。ts(2345)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二二、元组\"><a href=\"#二二、元组\" class=\"headerlink\" title=\"二二、元组\"></a>二二、元组</h2><p>数组合并了相同类型的对象，而元组(Tuple)合并了不同类型的对象。</p>\n<p>元组起源与函数编程语言(如F#，Python也有元组的概念)，这些语言中会频繁使用元组。</p>\n<p><strong>举个例子</strong>，定义一对值分别为 <code>string</code>和 <code>number</code>的元组：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>:[<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>] = [<span class=\"string\">&#x27;Tom&#x27;</span>,<span class=\"number\">15</span>];</span><br></pre></td></tr></table></figure>\n\n<p>当赋值或访问一个已知索引的元素时，会得到正确的类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>:[<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>];</span><br><span class=\"line\">tom[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;Tom&#x27;</span>;</span><br><span class=\"line\">tom[<span class=\"number\">1</span>] = <span class=\"number\">15</span>;</span><br></pre></td></tr></table></figure>\n\n<p>也可以赋值其中一项：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>:[<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>];</span><br><span class=\"line\">tom[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;Tom&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>但是当直接对元组进行初始化赋值操作时，需要提供所有元组类型指定的项</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>:[<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>];</span><br><span class=\"line\">tom = [<span class=\"string\">&#x27;Tom&#x27;</span>,<span class=\"number\">18</span>];</span><br></pre></td></tr></table></figure>\n\n<p>下面这样就不行了：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>:[<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>];</span><br><span class=\"line\">tom = [<span class=\"string\">&#x27;Tom&#x27;</span>];</span><br><span class=\"line\"><span class=\"comment\">//报错：不能将类型“[string]”分配给类型“[string, number]”。源具有 1 个元素，但目标需要 2 个。ts(2322)</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>越界元素</strong></p>\n<p>当添加越界元素时，他的类型会被限制为元组中每个类型的联合类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">tom</span>:[<span class=\"built_in\">string</span>,<span class=\"built_in\">number</span>];</span><br><span class=\"line\">tom = [<span class=\"string\">&#x27;Tom&#x27;</span>,<span class=\"number\">18</span>];</span><br><span class=\"line\">tom.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;male&#x27;</span>);<span class=\"comment\">//可以添加stirng，此时tom为[&#x27;Tom&#x27;,18,&#x27;male&#x27;]</span></span><br><span class=\"line\">tom.<span class=\"title function_\">push</span>(<span class=\"literal\">true</span>);<span class=\"comment\">//不可以添加boolean</span></span><br><span class=\"line\"><span class=\"comment\">//报错：类型“boolean”的参数不能赋给类型“string  number”的参数。ts(2345)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二三、枚举\"><a href=\"#二三、枚举\" class=\"headerlink\" title=\"二三、枚举\"></a>二三、枚举</h2><p>枚举(Enum)类型用于取值被限定在一定范围的场景，比如一周只能有七天，颜色限定为红绿蓝等。</p>\n<p>枚举使用<code>enum</code>关键字来定义：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Days</span>&#123;<span class=\"title class_\">Sun</span>, <span class=\"title class_\">Mon</span>, <span class=\"title class_\">Tue</span>, <span class=\"title class_\">Wed</span>, <span class=\"title class_\">Thu</span>, <span class=\"title class_\">Fri</span>, <span class=\"title class_\">Sat</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>枚举成员会被赋值为从 0 开始递增的数字，同时也会对枚举值到枚举名进行反向映射：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Days</span>&#123;<span class=\"title class_\">Sun</span>, <span class=\"title class_\">Mon</span>, <span class=\"title class_\">Tue</span>, <span class=\"title class_\">Wed</span>, <span class=\"title class_\">Thu</span>, <span class=\"title class_\">Fri</span>, <span class=\"title class_\">Sat</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"string\">&#x27;Sun&#x27;</span>] === <span class=\"number\">0</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"string\">&#x27;Mon&#x27;</span>] === <span class=\"number\">1</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"string\">&#x27;Wed&#x27;</span>] === <span class=\"number\">3</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"string\">&#x27;Thu&#x27;</span>] === <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">//console.log(Days[&#x27;Sun&#x27;] === 4);//false,且不能通过编译，IDE提示：此条件将始终返回 &quot;false&quot;，因为类型 &quot;Days.Sun&quot; 和 &quot;4&quot; 没有重叠。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"number\">0</span>] === <span class=\"string\">&#x27;Sun&#x27;</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"number\">1</span>] === <span class=\"string\">&#x27;Mon&#x27;</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"number\">3</span>] === <span class=\"string\">&#x27;Wed&#x27;</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"number\">4</span>] === <span class=\"string\">&#x27;Sun&#x27;</span>);<span class=\"comment\">//false，IDE不进行提示</span></span><br></pre></td></tr></table></figure>\n\n<p>上面的例子会被编译为JS代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Days</span>;</span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">Days</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Days</span>[<span class=\"title class_\">Days</span>[<span class=\"string\">&quot;Sun&quot;</span>] = <span class=\"number\">0</span>] = <span class=\"string\">&quot;Sun&quot;</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Days</span>[<span class=\"title class_\">Days</span>[<span class=\"string\">&quot;Mon&quot;</span>] = <span class=\"number\">1</span>] = <span class=\"string\">&quot;Mon&quot;</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Days</span>[<span class=\"title class_\">Days</span>[<span class=\"string\">&quot;Tue&quot;</span>] = <span class=\"number\">2</span>] = <span class=\"string\">&quot;Tue&quot;</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Days</span>[<span class=\"title class_\">Days</span>[<span class=\"string\">&quot;Wed&quot;</span>] = <span class=\"number\">3</span>] = <span class=\"string\">&quot;Wed&quot;</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Days</span>[<span class=\"title class_\">Days</span>[<span class=\"string\">&quot;Thu&quot;</span>] = <span class=\"number\">4</span>] = <span class=\"string\">&quot;Thu&quot;</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Days</span>[<span class=\"title class_\">Days</span>[<span class=\"string\">&quot;Fri&quot;</span>] = <span class=\"number\">5</span>] = <span class=\"string\">&quot;Fri&quot;</span>;</span><br><span class=\"line\">    <span class=\"title class_\">Days</span>[<span class=\"title class_\">Days</span>[<span class=\"string\">&quot;Sat&quot;</span>] = <span class=\"number\">6</span>] = <span class=\"string\">&quot;Sat&quot;</span>;</span><br><span class=\"line\">&#125;)(<span class=\"title class_\">Days</span>  (<span class=\"title class_\">Days</span> = &#123;&#125;));</span><br><span class=\"line\">;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"string\">&#x27;Sun&#x27;</span>] === <span class=\"number\">0</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"string\">&#x27;Mon&#x27;</span>] === <span class=\"number\">1</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"string\">&#x27;Wed&#x27;</span>] === <span class=\"number\">3</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"string\">&#x27;Thu&#x27;</span>] === <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"comment\">// console.log(Days[&#x27;Sun&#x27;] === 4);//false,IDE提示：此条件将始终返回 &quot;false&quot;，因为类型 &quot;Days.Sun&quot; 和 &quot;4&quot; 没有重叠。</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"number\">0</span>] === <span class=\"string\">&#x27;Sun&#x27;</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"number\">1</span>] === <span class=\"string\">&#x27;Mon&#x27;</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"number\">3</span>] === <span class=\"string\">&#x27;Wed&#x27;</span>); <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Days</span>[<span class=\"number\">4</span>] === <span class=\"string\">&#x27;Sun&#x27;</span>); <span class=\"comment\">//false，IDE不进行提示</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二四、类01\"><a href=\"#二四、类01\" class=\"headerlink\" title=\"二四、类01\"></a>二四、类01</h2><h4 id=\"类的概念\"><a href=\"#类的概念\" class=\"headerlink\" title=\"类的概念\"></a>类的概念</h4><p>虽然JavaScript中有类的概念，但是可能大多数JavaScript程序员并不是非常熟悉类，这里对类相关的概念做一个简单的介绍。</p>\n<ul>\n<li>类(Class):定义一件事物的抽象特点，包含它的属性和方法</li>\n<li>对象(Object):类的实例，通过 <code>new</code>生成</li>\n<li>面向对象编程(Object Oriented Programming，简称 OOP)三大特性：<strong>继承、封装、多态</strong></li>\n<li>继承(Inheritance):子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特征。</li>\n<li>封装(Encapsulation):将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据。</li>\n<li>多态(Polymorphism):由继承而产生相关的不同的类，对同一个方法可以有不同的响应。比如Cat和Fish都继承自Animal，但是分别实现了自己的eat方法。此时针对某一个实例，我们无须了解他是Cat还是Dog，就可以直接调用eat方法，程序会自动判断出来应该如何执行eat方法。</li>\n<li>存取器(Getter &amp; Setter)：用于改变属性的读取和赋值行为</li>\n<li>修饰器(Modifiers):修饰符是一些关键字，用于限定成员或类型的性质。比如public 表示共有的属性或方法。</li>\n<li>抽象类(Abstract Class):抽象类是提供给其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中被实现。</li>\n<li>接口(Interface):不同类之间共有的属性或方法，可以抽象成一个接口，接口可以被类实现(implements)。一个类只能继承自另一个类，但是可以实现多个接口。</li>\n<li>构造函数(Constructor):构造函数 ，是一种特殊的方法。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中</li>\n</ul>\n<p>使用<code>class</code>关键字定义类，使用 <code>constructor</code>关键字定义构造函数。</p>\n<p>通过<code>new</code>生成新的实例的时候，会自动调用构造函数：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> _name;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`My name is <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>._name&#125;</span>`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tom = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;Tom&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tom.<span class=\"property\">sayHello</span>); <span class=\"comment\">//My name is tom</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二五、类02\"><a href=\"#二五、类02\" class=\"headerlink\" title=\"二五、类02\"></a>二五、类02</h2><p>类的存取器 ：<code>get</code> 、<code>set</code></p>\n<p>使用getter 和 setter 可以获取和改变类的属性：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// private name:string;</span></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title function_\">name</span>()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Jack&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title function_\">name</span>(<span class=\"params\">value</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;This name:&#x27;</span>+value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;Kitty&#x27;</span>);<span class=\"comment\">//setter Kitty</span></span><br><span class=\"line\">a.<span class=\"property\">name</span> = <span class=\"string\">&#x27;Tom&#x27;</span>;<span class=\"comment\">//setter Tom</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">name</span>);<span class=\"comment\">//getter Jack</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二六、类03\"><a href=\"#二六、类03\" class=\"headerlink\" title=\"二六、类03\"></a>二六、类03</h2><p>类的静态方法</p>\n<p>使用<code>static</code>修饰符修饰的方法成为静态方法，他们不需要实例化，而直接通过类来调用：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> _name;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>)&#123;<span class=\"comment\">//这是实例方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`My name is <span class=\"subst\">$&#123; <span class=\"variable language_\">this</span>._name &#125;</span>`</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>)&#123;<span class=\"comment\">//这是类方法</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;I&#x27;m Animal class&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;Jack&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"title function_\">sayHi</span>());<span class=\"comment\">//My name is Jack</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Animal</span>.<span class=\"title function_\">sayHello</span>());<span class=\"comment\">//I&#x27;m Animal class</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二七、类04\"><a href=\"#二七、类04\" class=\"headerlink\" title=\"二七、类04\"></a>二七、类04</h2><p>类的三种访问修饰符：public、private、protected</p>\n<p>访问权限大小由大到小：</p>\n<ul>\n<li>public  全局的、公共的，当前所涉及到的地方都可以使用  <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span> _name;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a  = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;Jack&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">_name</span>);<span class=\"comment\">// Jack</span></span><br><span class=\"line\">a.<span class=\"property\">_name</span> = <span class=\"string\">&#x27;Tom&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">_name</span>);<span class=\"comment\">// Tom</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>protected  受保护的，允许子类访问，不允许公共访问：  <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> name;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">super</span>(name);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n</li>\n<li>private  私有的，只能在类的内部使用，子类也无法访问，无法在实例后通过类的实例属性访问：  <figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> _name;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a  = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;Jack&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">_name</span>);<span class=\"comment\">// 报错:属性“_name”为私有属性，只能在类“Animal”中访问。ts(2341)</span></span><br><span class=\"line\">a.<span class=\"property\">_name</span> = <span class=\"string\">&#x27;Tom&#x27;</span>; <span class=\"comment\">//报错:属性“_name”为私有属性，只能在类“Animal”中访问。ts(2341)</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">_name</span>);<span class=\"comment\">// 报错:属性“_name”为私有属性，只能在类“Animal”中访问。ts(2341)</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>默认是<strong>public</strong>，但是 TSLint 可能会要求必须用限定符来表明这个属性或方法是什么类型。</p>\n<h2 id=\"二八、类05\"><a href=\"#二八、类05\" class=\"headerlink\" title=\"二八、类05\"></a>二八、类05</h2><p>参数属性和只读属性关键字</p>\n<p>修饰符和<code>readonly</code>还可以使用在构造函数参数中，等同于类中定义该属性同时给该属性赋值，使代码更加简洁：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">constructor</span>(<span class=\"params\"><span class=\"keyword\">public</span> myname:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = myname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只读属性</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">readonly</span> <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">myname:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = myname;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a  = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;Tom&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">name</span>);<span class=\"comment\">//Tom</span></span><br><span class=\"line\">a.<span class=\"property\">name</span> = <span class=\"string\">&#x27;Jack&#x27;</span>;<span class=\"comment\">//报错：无法分配到 &quot;name&quot; ，因为它是只读属性。ts(2540)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二九、类06\"><a href=\"#二九、类06\" class=\"headerlink\" title=\"二九、类06\"></a>二九、类06</h2><p>抽象类</p>\n<p><code>abstract</code>关键字用来定义抽象类和其中的抽象方法。</p>\n<p>什么是抽象类？</p>\n<p>首先，抽象类是不允许被实例化的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//public name:string;//这报错：属性“name”没有初始化表达式，且未在构造函数中明确赋值。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"attr\">name</span>:<span class=\"built_in\">any</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">constrcutor</span>(<span class=\"params\">name:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"title function_\">sayHi</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Animal</span>(<span class=\"string\">&#x27;Tom&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//报错：无法创建抽象类的实例。ts(2511)</span></span><br></pre></td></tr></table></figure>\n\n<p>上面例子中，我们定义了一个抽象类类<code>Animal</code>，并且定义了一个抽象方法 <code>sayHi</code>，在实例化抽象类是报错了。</p>\n<p>其次，抽象类中的抽象方法必须被子类实现：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * eat</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">eat</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Im eating&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错：非抽象类“Cat”不会实现继承自“Animal”类的抽象成员“sayHi”。ts(2515)</span></span><br></pre></td></tr></table></figure>\n\n<p>正确的抽象类例子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"attr\">name</span>: <span class=\"built_in\">any</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">constrcutor</span>(<span class=\"attr\">name</span>:<span class=\"built_in\">string</span>): <span class=\"built_in\">void</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"title function_\">sayHi</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">sayHi</span>(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`This is Cat <span class=\"subst\">$&#123; <span class=\"variable language_\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>(<span class=\"string\">&#x27;Tom&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>上面例子为原视频的例子，却报错：应有 0 个参数，但获得 1 个。ts(2554)</p>\n<p>找了一些资料还没找到原因，后续再来更</p>\n</blockquote>\n<h2 id=\"三十、类与接口\"><a href=\"#三十、类与接口\" class=\"headerlink\" title=\"三十、类与接口\"></a>三十、类与接口</h2><h4 id=\"类继承接口\"><a href=\"#类继承接口\" class=\"headerlink\" title=\"类继承接口\"></a>类继承接口</h4><p>实现(implements)是面向对象的一个重要概念。一般来说，一个类只能继承自另一个类，有时候不用类之间可以有一些共有的特性，这时候就可以把特性提取成接口(interfaces)，用<code>implements</code>关键字来实现，这个特性大大提高了面向对象的灵活性。</p>\n<p>举例来说，门是一个类，防盗门是门的子类。如果防盗门有一个报警器的功能，我们可以简单的给防盗门添加一个报警方法，这时候如果有另一个类：车，也有报警器的功能，就可以考虑把报警器提取出来，作为一个接口，防盗门，和车都去实现它：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alert</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Door</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SecurityDoor</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Door</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Alert</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;SecurityDoor alert&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">car</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Alert</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Car alert&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;    </span><br></pre></td></tr></table></figure>\n\n<p>一个类可以实现多个接口：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alert</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Light</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">lightOn</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">    <span class=\"title function_\">lightOff</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Alert</span>, <span class=\"title class_\">Light</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Car alert&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">lightOff</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">         <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Light Off&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">lightOn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">         <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Light On&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述例子中，<code>Car</code> 实现了 <code>Alert</code> 和 <code>Light</code>接口，既能报警，也能开关灯。</p>\n<h4 id=\"接口继承接口\"><a href=\"#接口继承接口\" class=\"headerlink\" title=\"接口继承接口\"></a>接口继承接口</h4><p>接口和接口之间可以是继承关系：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alert</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">LightableAlert</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Alert</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">lightOn</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">    <span class=\"title function_\">lightOff</span>():<span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这很好理解，<code>LightableAlert</code> 继承了 <code>Alert</code> ，除了拥有<code>alert</code>方法之外，还可以拥有自己定义的两个新方法 <code>lighton</code>和<code>lightoff</code>。</p>\n<h4 id=\"接口继承类\"><a href=\"#接口继承类\" class=\"headerlink\" title=\"接口继承类\"></a>接口继承类</h4><p>常见的面向对象语言中，<strong>接口是不能继承类的，但是在TypeScript中是可以的</strong>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">x</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">y</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">x:<span class=\"built_in\">number</span>,y:<span class=\"built_in\">number</span></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Point3</span>d <span class=\"keyword\">extends</span> <span class=\"title class_\">Point</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">z</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">point3d</span>:<span class=\"title class_\">Point3</span>d = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>,<span class=\"attr\">y</span>:<span class=\"number\">2</span>,<span class=\"attr\">z</span>:<span class=\"number\">3</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>但在这里不推荐这样使用，我们在定义接口的时候只做定义，具体实现交给实现接口的类去完成</strong>。</p>\n<h2 id=\"三一、泛型01\"><a href=\"#三一、泛型01\" class=\"headerlink\" title=\"三一、泛型01\"></a>三一、泛型01</h2><p>泛型(Generics)是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候在指定类型的一种特性。</p>\n<p>首先，我们来实现一个函数 <code>createArray</code>，它可以创建一个指定长度的数组，同时将每一项都填充一个默认值。：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">creatArray</span>(<span class=\"params\">length:<span class=\"built_in\">number</span>,value:<span class=\"built_in\">any</span></span>): <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">any</span>&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++)&#123;</span><br><span class=\"line\">        result[i] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">creatArray</span>(<span class=\"number\">3</span>,<span class=\"string\">&#x27;x&#x27;</span>);<span class=\"comment\">//[&#x27;x&#x27;,&#x27;x&#x27;,&#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中，我们使用了之前提到过的数组泛型来定义返回值的类型。</p>\n<p>这段代码编译不会报错，但是一个显而易见的缺陷是，他并没有准确的定义返回值的类型；</p>\n<p><code>Array&lt;any&gt;</code>允许数组的每一项都为任意类型。但是我们预期的是，数组中每一项都应该是输入的<code>value</code>的类型。</p>\n<p>这时候，泛型就派上用场：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> createArray&lt;T&gt;(<span class=\"attr\">length</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">value</span>: T):<span class=\"title class_\">Array</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">result</span>: T[] = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt;length; i++)&#123;</span><br><span class=\"line\">        result[i] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">creatArray&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"number\">3</span>,<span class=\"string\">&#x27;x&#x27;</span>);<span class=\"comment\">//[&#x27;x&#x27;,&#x27;x&#x27;,&#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中，我们在函数名后添加了<code>&lt;T&gt;</code>，其中<code>T</code> 用来指代任意输入的类型，在后面的输入<code>value:T</code> 和输出 <code>Array&lt;T&gt;</code> 中即可使用了。接着在调用的时候，可以指定他的具体的类型为<code>string</code> 型。当然，也可以不手动指定，而让类型推论自动推算出来：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> createArray&lt;T&gt;(<span class=\"attr\">length</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">value</span>: T):<span class=\"title class_\">Array</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">result</span>: T[] = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt;length; i++)&#123;</span><br><span class=\"line\">        result[i] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//不指定类型，通过类型推断来自动推断出类型 </span></span><br><span class=\"line\"><span class=\"title function_\">creatArray</span>(<span class=\"number\">3</span>,<span class=\"string\">&#x27;x&#x27;</span>);<span class=\"comment\">//[&#x27;x&#x27;,&#x27;x&#x27;,&#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三二、泛型02\"><a href=\"#三二、泛型02\" class=\"headerlink\" title=\"三二、泛型02\"></a>三二、泛型02</h2><p>多个类型参数</p>\n<p>定义泛型的时候，可以一次定义多个类型参数：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> swap&lt;T, U&gt;(<span class=\"attr\">tuple</span>:[T, U]): [U, T]&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [tuple[<span class=\"number\">1</span>],tuple[<span class=\"number\">0</span>]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">swap</span>([<span class=\"number\">7</span>,<span class=\"string\">&#x27;seven&#x27;</span>]);<span class=\"comment\">//[&#x27;seven&#x27;, 7]</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中，我们定义了一个 <code>swap</code> 函数，用来交换输入的元组</p>\n<h2 id=\"三三、泛型03\"><a href=\"#三三、泛型03\" class=\"headerlink\" title=\"三三、泛型03\"></a>三三、泛型03</h2><p>泛型约束</p>\n<p>在函数内部使用泛型变量的时候，由于事先不知道他是哪种类型，所以不能随意的操作它的属性或方法：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> loggingIdentity&lt;T&gt;(<span class=\"attr\">arg</span>: T): T&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg.<span class=\"property\">length</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错：类型“T”上不存在属性“length”。ts(2339)</span></span><br></pre></td></tr></table></figure>\n\n<p>上例中，泛型 <code>T</code> 不一定包含属性 <code>length</code> ，所以编译的时候报错了。</p>\n<p>这时，我们可以对泛型进行约束，致允熙这个函数传入那些包含 <code>length</code> 属性的变量，这就是泛型约束：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">LengthWise</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">length</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> loggingIdentity&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">LengthWise</span>&gt;(<span class=\"attr\">arg</span>: T): T&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg.<span class=\"property\">length</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上例中，我们使用了 <code>extends</code> 约束了泛型 <code>T</code> 必须符合接口 <code>LengthWise</code> 的形状，也就是必须包含 <code>length</code> 属性。</p>\n<p>此时如果调用 <code>loggingIdentity</code> 的时候，传入的 <code>arg</code> 不包含 <code>length</code> ，则会在编译时报错：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">LengthWise</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">length</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> loggingIdentity&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">LengthWise</span>&gt;(<span class=\"attr\">arg</span>: T): T&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg.<span class=\"property\">length</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">loggingIdentity</span>(<span class=\"string\">&#x27;1111&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"title function_\">loggingIdentity</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"comment\">//报错：类型“number”的参数不能赋给类型“LengthWise”的参数。ts(2345)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三四、泛型04\"><a href=\"#三四、泛型04\" class=\"headerlink\" title=\"三四、泛型04\"></a>三四、泛型04</h2><p>泛型接口</p>\n<p>之前学习过，可以使用接口的方式来定义一个函数需要符合的形状：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SearchFunc</span>&#123;</span><br><span class=\"line\">    (<span class=\"attr\">source</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">subString</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySearch</span>: <span class=\"title class_\">SearchFunc</span>;</span><br><span class=\"line\">mySearch = <span class=\"keyword\">function</span>(<span class=\"params\">source: <span class=\"built_in\">string</span>, subString: <span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> source.<span class=\"title function_\">search</span>(subString) != -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然也可以使用含有泛型的接口来定义函数的形状：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">CreateArrayFunc</span>&#123;</span><br><span class=\"line\">    &lt;T&gt;(<span class=\"attr\">length</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">value</span>: T): <span class=\"title class_\">Array</span>&lt;T&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">createArray</span>: <span class=\"title class_\">CreateArrayFunc</span>;</span><br><span class=\"line\">createArray = <span class=\"keyword\">function</span>&lt;T&gt;(<span class=\"attr\">length</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">value</span>: T): <span class=\"title class_\">Array</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">result</span>:T[] = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++)&#123;</span><br><span class=\"line\">        result[i] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">createArray</span>(<span class=\"number\">3</span>,<span class=\"string\">&#x27;x&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//[&#x27;x&#x27;,&#x27;x&#x27;,&#x27;x&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<p>进一步，我们可以把泛型参数提前到接口名上：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">CreateArrayFunc</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    (<span class=\"attr\">length</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">value</span>: T): <span class=\"title class_\">Array</span>&lt;T&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">createArray</span>: <span class=\"title class_\">CreateArrayFunc</span>&lt;<span class=\"built_in\">any</span>&gt;;</span><br><span class=\"line\">createArray = <span class=\"keyword\">function</span>&lt;T&gt;(<span class=\"attr\">length</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">value</span>: T): <span class=\"title class_\">Array</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">result</span>:T[] = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++)&#123;</span><br><span class=\"line\">        result[i] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">createArray</span>(<span class=\"number\">3</span>,<span class=\"string\">&#x27;x&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//[&#x27;x&#x27;,&#x27;x&#x27;,&#x27;x&#x27;]</span></span><br><span class=\"line\"><span class=\"title function_\">createArray</span>(<span class=\"number\">3</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">//[true,true,true]</span></span><br><span class=\"line\"><span class=\"title function_\">createArray</span>(<span class=\"number\">3</span>,&#123;<span class=\"attr\">isExist</span>:<span class=\"literal\">true</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">//[&#123;isExist:true&#125;,&#123;isExist:true&#125;,&#123;isExist:true&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三五、泛型05\"><a href=\"#三五、泛型05\" class=\"headerlink\" title=\"三五、泛型05\"></a>三五、泛型05</h2><p>泛型类</p>\n<p>与泛型接口类似，泛型也可以用于类的类型定义中：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GenericNumber</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    zeroValue!: T; <span class=\"comment\">//!为非空断言, 否则报错：属性“XXX”没有初始化表达式，且未在构造函数中明确赋值。</span></span><br><span class=\"line\">    add!: <span class=\"function\">(<span class=\"params\">x: T, y: T</span>) =&gt;</span> T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myGenericNumber = <span class=\"keyword\">new</span> <span class=\"title class_\">GenericNumber</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\">myGenericNumber.<span class=\"property\">zeroValue</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">myGenericNumber.<span class=\"property\">add</span> = <span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)&#123; <span class=\"keyword\">return</span> x+y; &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>泛型参数的默认类型</p>\n<p>在TypeScript2.3以后，我们可以为泛型中的类型参数指定默认类型。当使用泛型时没有在代码中直接指定类型参数，从实际值参数中也无法推测出时，这个默认类型就会起作用。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> createArray&lt;T = <span class=\"built_in\">string</span>&gt;(<span class=\"attr\">length</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">value</span>: T):<span class=\"title class_\">Array</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">result</span>:T[] = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; length; i++)&#123;</span><br><span class=\"line\">        result[i] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三六、声明合并\"><a href=\"#三六、声明合并\" class=\"headerlink\" title=\"三六、声明合并\"></a>三六、声明合并</h2><p>同名函数、接口、类的合并</p>\n<p>如果定义了两个相同的名字的函数、接口或类，那么他们会合并成一个类型：</p>\n<h4 id=\"函数的合并\"><a href=\"#函数的合并\" class=\"headerlink\" title=\"函数的合并\"></a>函数的合并</h4><p>之前我们学习过，我们可以使用重载定义多个函数类型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reverse</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>  <span class=\"built_in\">string</span></span>): <span class=\"built_in\">number</span>  <span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;number&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Number</span>(x.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"property\">reverse</span>.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( <span class=\"keyword\">typeof</span> x === <span class=\"string\">&#x27;string&#x27;</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;&#x27;</span>).<span class=\"property\">reverse</span>.<span class=\"title function_\">join</span>(<span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"接口的合并\"><a href=\"#接口的合并\" class=\"headerlink\" title=\"接口的合并\"></a>接口的合并</h4><p>接口中的属性在合并时会简单地合并到一个接口中：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">price</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>相当于：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">price</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，<strong>合并的属性的类型必须是唯一的</strong>：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">price</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">price</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"comment\">//虽然重复了，但是类型还是number，所以不会报错</span></span><br><span class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">price</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">price</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"comment\">//报错：后续属性声明必须属于同一类型。属性“price”的类型必须为“number”，但此处却为类型“string”。ts(2717)</span></span><br><span class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接口中的方法合并，和函数的合并一样：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">price</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"attr\">s</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"attr\">s</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">n</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>相当于：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Alarm</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">price</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"attr\">weight</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"attr\">s</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"title function_\">alert</span>(<span class=\"attr\">s</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">n</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类的合并\"><a href=\"#类的合并\" class=\"headerlink\" title=\"类的合并\"></a>类的合并</h4><p>类的合并与借口的合并一样</p>\n<p>PS: 但是一般情况下，不建议创建多个同名接口或类，虽然可以自动合并，但是可能会发生意想不到的问题。代码不要写在两个地方，不然不好维护。</p>\n<h2 id=\"三七、写在结尾\"><a href=\"#三七、写在结尾\" class=\"headerlink\" title=\"三七、写在结尾\"></a>三七、写在结尾</h2><p>TypeScript 应用非常广泛，最新的 Vue 和 React 均集成了 TypeScript ，这里推荐大家使用 Vue3 ，Vue3 天然支持 TypeScript。</p>\n<p>另一方面，TS 中有很多支持 ES 的语法，关系图：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/bb541a521a9a8d8574a7711ec1caf1a2.png\" alt=\"image-20220507164550922\"></p>\n<p>最后，多看文档</p>\n<p><a href=\"https://www.typescriptlang.org/docs/\">TypeScript英文文档</a></p>\n<p><a href=\"https://www.tslang.cn/docs/home.html\">TypeScript中文文档</a></p>"},{"title":"制作网页ChatGPT聊天机器人","id":"1218","date":"2023-03-10T10:35:54.000Z","_content":"\n单页面实现ChatGPT聊天机器人，给你的网站加点活力！\n<!-- more -->\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n</head>\n\n<body>\n    <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n    <script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n\n    <div id=\"app\" style=\"display: flex;flex-flow: column;margin: 20 \">\n        <div style=\"display: flex;justify-content: center;align-items:\n                center;margin: 20\">\n            <textarea type=\"text\" v-model=\"info\" cols=\"40\" rows=\"3\" style=\"margin:15\"></textarea>\n            <button v-on:click=\"ask()\">发送</button>\n        </div>\n        <div style=\"display: flex;justify-content: center;align-items:\n                center;\">\n            <textarea name=\"res\" id=\"res\" cols=\"100\" rows=\"20\">{{res}}</textarea>\n        </div>\n    </div>\n    <script>\n        const {createApp} = Vue\n        createApp({\n            data() {\n                return {\n                    MAX_TOKEN: 4096,\n                    total: 0,\n                    info: '如果一个面包发臭了，应该怎么办？',\n                    messages: [],\n                    res: '',\n                    api: '你的OpenAI key'\n                }\n            },\n            methods: {\n                ask() {\n                    if (!this.info) {\n                        return;\n                    } else {\n                        this.messages.push({\"role\": \"user\", \"content\": this.info})\n                        this.total++;\n                    }\n                    // 限制max_token，大于5个问题时删除首元素\n                    while (this.total.length > 1) {\n                       this.total = this.tota - 1;\n                        this.messages.shift()\n                    }\n\n                    this.res = '请求中...'\n                    axios.post('https://api.openai.com/v1/chat/completions', {\n                        messages: this.messages,\n                        max_tokens: this.MAX_TOKEN / 2,\n                        model: \"gpt-3.5-turbo-0301\"  //选择最新的模型，能支持到6月1号\n                    }, {\n                        headers: {'content-type': 'application/json', 'Authorization': 'Bearer ' + this.api}\n                    }).then(response => {\n                        this.res = response.data['choices'][0]['message']['content'];\n                        this.messages.push(response.data['choices'][0]['message']);\n                        this.total ++;\n                    })\n                }\n            }\n        }).mount('#app')\n    </script>\n</body>\n\n</html>\n```\n\n缺点：\n\n1.  外网IP+国外手机号\n2.  命令限制，只能最高4096tokens\n\n所以，我自己开发了一个聊天室，支持移动端和PC端。单独聊天或群聊都可以和ChatGPT聊天 地址：[https://chat.wangwangyz.site/](https://chat.wangwangyz.site/) ![](https://redamancy9189.oss-cn-beijing.aliyuncs.com/个人图床/image-20230310223018574.png) ![image-20230310223018574](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230310223018574.png)","source":"_posts/vue制作chatgpt聊天机器人.md","raw":"---\ntitle: 制作网页ChatGPT聊天机器人\ntags:\n  - Vue\nid: '1218'\ncategories:\n  - - 学习笔记\ndate: 2023-03-10 18:35:54\n---\n\n单页面实现ChatGPT聊天机器人，给你的网站加点活力！\n<!-- more -->\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n</head>\n\n<body>\n    <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n    <script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n\n    <div id=\"app\" style=\"display: flex;flex-flow: column;margin: 20 \">\n        <div style=\"display: flex;justify-content: center;align-items:\n                center;margin: 20\">\n            <textarea type=\"text\" v-model=\"info\" cols=\"40\" rows=\"3\" style=\"margin:15\"></textarea>\n            <button v-on:click=\"ask()\">发送</button>\n        </div>\n        <div style=\"display: flex;justify-content: center;align-items:\n                center;\">\n            <textarea name=\"res\" id=\"res\" cols=\"100\" rows=\"20\">{{res}}</textarea>\n        </div>\n    </div>\n    <script>\n        const {createApp} = Vue\n        createApp({\n            data() {\n                return {\n                    MAX_TOKEN: 4096,\n                    total: 0,\n                    info: '如果一个面包发臭了，应该怎么办？',\n                    messages: [],\n                    res: '',\n                    api: '你的OpenAI key'\n                }\n            },\n            methods: {\n                ask() {\n                    if (!this.info) {\n                        return;\n                    } else {\n                        this.messages.push({\"role\": \"user\", \"content\": this.info})\n                        this.total++;\n                    }\n                    // 限制max_token，大于5个问题时删除首元素\n                    while (this.total.length > 1) {\n                       this.total = this.tota - 1;\n                        this.messages.shift()\n                    }\n\n                    this.res = '请求中...'\n                    axios.post('https://api.openai.com/v1/chat/completions', {\n                        messages: this.messages,\n                        max_tokens: this.MAX_TOKEN / 2,\n                        model: \"gpt-3.5-turbo-0301\"  //选择最新的模型，能支持到6月1号\n                    }, {\n                        headers: {'content-type': 'application/json', 'Authorization': 'Bearer ' + this.api}\n                    }).then(response => {\n                        this.res = response.data['choices'][0]['message']['content'];\n                        this.messages.push(response.data['choices'][0]['message']);\n                        this.total ++;\n                    })\n                }\n            }\n        }).mount('#app')\n    </script>\n</body>\n\n</html>\n```\n\n缺点：\n\n1.  外网IP+国外手机号\n2.  命令限制，只能最高4096tokens\n\n所以，我自己开发了一个聊天室，支持移动端和PC端。单独聊天或群聊都可以和ChatGPT聊天 地址：[https://chat.wangwangyz.site/](https://chat.wangwangyz.site/) ![](https://redamancy9189.oss-cn-beijing.aliyuncs.com/个人图床/image-20230310223018574.png) ![image-20230310223018574](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230310223018574.png)","slug":"vue制作chatgpt聊天机器人","published":1,"updated":"2024-03-12T10:44:29.876Z","_id":"cltnrar4g0017jry16jwt33h8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>单页面实现ChatGPT聊天机器人，给你的网站加点活力！</p>\n<span id=\"more\"></span>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: flex;flex-flow: column;margin: 20 &quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: flex;justify-content: center;align-items:</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                center;margin: 20&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;info&quot;</span> <span class=\"attr\">cols</span>=<span class=\"string\">&quot;40&quot;</span> <span class=\"attr\">rows</span>=<span class=\"string\">&quot;3&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin:15&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;ask()&quot;</span>&gt;</span>发送<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: flex;justify-content: center;align-items:</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                center;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;res&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;res&quot;</span> <span class=\"attr\">cols</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">rows</span>=<span class=\"string\">&quot;20&quot;</span>&gt;</span>&#123;&#123;res&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> &#123;createApp&#125; = <span class=\"title class_\">Vue</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">createApp</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">MAX_TOKEN</span>: <span class=\"number\">4096</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">total</span>: <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">info</span>: <span class=\"string\">&#x27;如果一个面包发臭了，应该怎么办？&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">messages</span>: [],</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">res</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">api</span>: <span class=\"string\">&#x27;你的OpenAI key&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">ask</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">info</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">messages</span>.<span class=\"title function_\">push</span>(&#123;<span class=\"string\">&quot;role&quot;</span>: <span class=\"string\">&quot;user&quot;</span>, <span class=\"string\">&quot;content&quot;</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">info</span>&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">total</span>++;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 限制max_token，大于5个问题时删除首元素</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">total</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                       <span class=\"variable language_\">this</span>.<span class=\"property\">total</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">tota</span> - <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">messages</span>.<span class=\"title function_\">shift</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">res</span> = <span class=\"string\">&#x27;请求中...&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    axios.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;https://api.openai.com/v1/chat/completions&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">messages</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">messages</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">max_tokens</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">MAX_TOKEN</span> / <span class=\"number\">2</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">model</span>: <span class=\"string\">&quot;gpt-3.5-turbo-0301&quot;</span>  <span class=\"comment\">//选择最新的模型，能支持到6月1号</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">headers</span>: &#123;<span class=\"string\">&#x27;content-type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span>, <span class=\"string\">&#x27;Authorization&#x27;</span>: <span class=\"string\">&#x27;Bearer &#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">api</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">res</span> = response.<span class=\"property\">data</span>[<span class=\"string\">&#x27;choices&#x27;</span>][<span class=\"number\">0</span>][<span class=\"string\">&#x27;message&#x27;</span>][<span class=\"string\">&#x27;content&#x27;</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">messages</span>.<span class=\"title function_\">push</span>(response.<span class=\"property\">data</span>[<span class=\"string\">&#x27;choices&#x27;</span>][<span class=\"number\">0</span>][<span class=\"string\">&#x27;message&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">total</span> ++;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>缺点：</p>\n<ol>\n<li> 外网IP+国外手机号</li>\n<li> 命令限制，只能最高4096tokens</li>\n</ol>\n<p>所以，我自己开发了一个聊天室，支持移动端和PC端。单独聊天或群聊都可以和ChatGPT聊天 地址：<a href=\"https://chat.wangwangyz.site/\">https://chat.wangwangyz.site/</a> <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230310223018574.png\"> <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230310223018574.png\" alt=\"image-20230310223018574\"></p>\n","site":{"data":{}},"excerpt":"<p>单页面实现ChatGPT聊天机器人，给你的网站加点活力！</p>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: flex;flex-flow: column;margin: 20 &quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: flex;justify-content: center;align-items:</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                center;margin: 20&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;info&quot;</span> <span class=\"attr\">cols</span>=<span class=\"string\">&quot;40&quot;</span> <span class=\"attr\">rows</span>=<span class=\"string\">&quot;3&quot;</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin:15&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;ask()&quot;</span>&gt;</span>发送<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;display: flex;justify-content: center;align-items:</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">                center;&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;res&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;res&quot;</span> <span class=\"attr\">cols</span>=<span class=\"string\">&quot;100&quot;</span> <span class=\"attr\">rows</span>=<span class=\"string\">&quot;20&quot;</span>&gt;</span>&#123;&#123;res&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> &#123;createApp&#125; = <span class=\"title class_\">Vue</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">createApp</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">MAX_TOKEN</span>: <span class=\"number\">4096</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">total</span>: <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">info</span>: <span class=\"string\">&#x27;如果一个面包发臭了，应该怎么办？&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">messages</span>: [],</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">res</span>: <span class=\"string\">&#x27;&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"attr\">api</span>: <span class=\"string\">&#x27;你的OpenAI key&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                <span class=\"title function_\">ask</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">info</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">messages</span>.<span class=\"title function_\">push</span>(&#123;<span class=\"string\">&quot;role&quot;</span>: <span class=\"string\">&quot;user&quot;</span>, <span class=\"string\">&quot;content&quot;</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">info</span>&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">total</span>++;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"comment\">// 限制max_token，大于5个问题时删除首元素</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"keyword\">while</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">total</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                       <span class=\"variable language_\">this</span>.<span class=\"property\">total</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">tota</span> - <span class=\"number\">1</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">messages</span>.<span class=\"title function_\">shift</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">res</span> = <span class=\"string\">&#x27;请求中...&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    axios.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;https://api.openai.com/v1/chat/completions&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">messages</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">messages</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">max_tokens</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">MAX_TOKEN</span> / <span class=\"number\">2</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">model</span>: <span class=\"string\">&quot;gpt-3.5-turbo-0301&quot;</span>  <span class=\"comment\">//选择最新的模型，能支持到6月1号</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"attr\">headers</span>: &#123;<span class=\"string\">&#x27;content-type&#x27;</span>: <span class=\"string\">&#x27;application/json&#x27;</span>, <span class=\"string\">&#x27;Authorization&#x27;</span>: <span class=\"string\">&#x27;Bearer &#x27;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">api</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">res</span> = response.<span class=\"property\">data</span>[<span class=\"string\">&#x27;choices&#x27;</span>][<span class=\"number\">0</span>][<span class=\"string\">&#x27;message&#x27;</span>][<span class=\"string\">&#x27;content&#x27;</span>];</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">messages</span>.<span class=\"title function_\">push</span>(response.<span class=\"property\">data</span>[<span class=\"string\">&#x27;choices&#x27;</span>][<span class=\"number\">0</span>][<span class=\"string\">&#x27;message&#x27;</span>]);</span></span><br><span class=\"line\"><span class=\"language-javascript\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">total</span> ++;</span></span><br><span class=\"line\"><span class=\"language-javascript\">                    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>缺点：</p>\n<ol>\n<li> 外网IP+国外手机号</li>\n<li> 命令限制，只能最高4096tokens</li>\n</ol>\n<p>所以，我自己开发了一个聊天室，支持移动端和PC端。单独聊天或群聊都可以和ChatGPT聊天 地址：<a href=\"https://chat.wangwangyz.site/\">https://chat.wangwangyz.site/</a> <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230310223018574.png\"> <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230310223018574.png\" alt=\"image-20230310223018574\"></p>"},{"title":"WordPress完整建站过程(一)","id":"304","date":"2022-03-02T10:13:41.000Z","_content":"\n我的👉[第一篇文章](https://wangwangyz.site/?p=213 \"第一篇文章\")👈里面就写了些建站的经过，现在我打算把过程记录下来，也算是一种复习吧（是因为孩怕哪天服务器过期了要重新搭建。。。）\n\n## 前期准备\n\n1.  一台有公网IP的主机（我的是👉[阿里云](https://www.aliyun.com/ \"阿里云\")轻量服务器）\n2.  域名以及DNS解析\n3.  wordpress安装包（👉[官网下载](https://cn.wordpress.org/latest-zh_CN.zip \"官网下载\")，👉[站长自存](http://oos.wangwangyz.site/wordpress%E4%B8%BB%E9%A2%98%E5%8C%85/wordpress-5.9-zh_CN.zip \"站长自存\")）\n<!-- more -->\n## 开始安装\n\n1.  云服务器最好先选择Ubuntu20.04环境（虽然云服务器上有wordpress环境和LAMP、LNMP环境，但还是想自己折腾）\n2.  域名解析(可选) 如何将域名解析到自己主机上的方法自行查找，先有了主机再买域名弄比较合适\n3.  在云服务器上安装LAMP或者LNMP LNMP是指Linux、Ngnix、MySql、PHP环境 LAMP是指Linux、Apache、MySql、PHP环境（我这里使用的是这个）\n    \n    *   先更新一下云服务器Linux（为了获得系统当前最新的软件包）\n        \n        ```cpp\n        sudo apt-get update\n        sudo apt-get upgrade\n        ```\n        \n    *   安装Apache2(用来做wordpress的服务器)\n        \n        ```cpp\n        sudo apt-get install apache2\n        ```\n        \n    *   安装MySQL(用来存放网站的所有数据)\n        \n        1.  安装mysql-server\n        \n        ```\n        sudo apt-get install mysql-server\n        ```\n        \n    \n    2.  初始化设置\n        \n        ```\n        sudo mysql_secure_installation\n        ```\n        \n    3.  检查mysql服务状态\n        \n        ```\n        systemctl status mysql.service\n        ```\n        \n    4.  配置远程连接\n        \n        ```\n        sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf \n        #找到 bind-address 修改值为 0.0.0.0(如果需要远程访问)\n        ```\n        \n    5.  重启mysql\n        \n        ```\n        sudo /etc/init.d/mysql restart \n        ```\n        \n    6.  修改密码\n        \n        ```sql\n        >>use mysql;\n        >>ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '你的密码'; \n        >>flush privileges;\n        >>quit;\n        ```\n        \n    7.  配置所有ip都可访问(否则后续访问PHPmyadmin会出现权限问题)\n        \n        ```sql\n        UPDATE user SET host = '%' WHERE user = 'root'; #允许远程访问\n        ```\n        \n    \n    *   安装PHP(网页的后端语言)\n        \n        ```c\n        sudo apt-get install php\n        ```\n        \n    *   安装PHP-MySQL（用于PHP和MySQL之间的支持） \\`\\`\\`c sudo apt-get install php-mysql <pre><code>-安装PHPmyadmin(用于在网页上管理mysql数据库) \\`\\`\\`c sudo apt-get install phpmyadmin\n4.  由于phpmyadmin的文件在usr/share/phpmyadmin中，而网页访问的根目录在www/html中，需要在根目录创建快捷方式：\n    \n    ```\n    sudo ln -s /usr/share/phpmyadmin /var/www\n    ```\n    \n    *   查看文件\n        \n        ```\n        sudo gedit /etc/apache2/apache2.conf\n        ```\n        \n    *   进入文本编译器之后，会看到很长的代码 在末尾加上这句话:\n        \n        ```\n        Include /etc/phpmyadmin/apache.conf\n        ```\n        \n    *   保存退出重启apache\n        \n        ```\n        /etc/init.d/apache2 restart\n        ```\n        \n    *   网页上访问localhost/phpmyadim,用mysql数据库root/密码登陆 ![](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220310115040831.png)\n        \n    *   出现这类错误先查看是不是phpmyadmin的用户名和密码输错了![image-20220310115531052](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220310115531052.png)\n        \n        如何查看phpmyadmin的登陆用户名和密码\n        \n    \n    ```\n    vim /etc/phpmyadmin/config-db.php\n    ```\n    \n    ![image-20220310120720517](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220310120720517.png) 再重新登录即可 登陆成功\n    \n    ![image-20220310121208518](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220310121208518.png) (为什么不用宝塔面板之前那篇👉[文章](https://wangwangyz.site/?p=213 \"文章\")有介绍)\n    \n    ### [WordPress完整建站过程(二)](https://wangwangyz.site/?p=562 \" WordPress完整建站过程(二)\")","source":"_posts/wordpress完整建站过程.md","raw":"---\ntitle: WordPress完整建站过程(一)\ntags:\n  - Apache\n  - MySQL\n  - PHP\n  - WordPress\nid: '304'\ncategories:\n  - - 学习笔记\ndate: 2022-03-02 18:13:41\n---\n\n我的👉[第一篇文章](https://wangwangyz.site/?p=213 \"第一篇文章\")👈里面就写了些建站的经过，现在我打算把过程记录下来，也算是一种复习吧（是因为孩怕哪天服务器过期了要重新搭建。。。）\n\n## 前期准备\n\n1.  一台有公网IP的主机（我的是👉[阿里云](https://www.aliyun.com/ \"阿里云\")轻量服务器）\n2.  域名以及DNS解析\n3.  wordpress安装包（👉[官网下载](https://cn.wordpress.org/latest-zh_CN.zip \"官网下载\")，👉[站长自存](http://oos.wangwangyz.site/wordpress%E4%B8%BB%E9%A2%98%E5%8C%85/wordpress-5.9-zh_CN.zip \"站长自存\")）\n<!-- more -->\n## 开始安装\n\n1.  云服务器最好先选择Ubuntu20.04环境（虽然云服务器上有wordpress环境和LAMP、LNMP环境，但还是想自己折腾）\n2.  域名解析(可选) 如何将域名解析到自己主机上的方法自行查找，先有了主机再买域名弄比较合适\n3.  在云服务器上安装LAMP或者LNMP LNMP是指Linux、Ngnix、MySql、PHP环境 LAMP是指Linux、Apache、MySql、PHP环境（我这里使用的是这个）\n    \n    *   先更新一下云服务器Linux（为了获得系统当前最新的软件包）\n        \n        ```cpp\n        sudo apt-get update\n        sudo apt-get upgrade\n        ```\n        \n    *   安装Apache2(用来做wordpress的服务器)\n        \n        ```cpp\n        sudo apt-get install apache2\n        ```\n        \n    *   安装MySQL(用来存放网站的所有数据)\n        \n        1.  安装mysql-server\n        \n        ```\n        sudo apt-get install mysql-server\n        ```\n        \n    \n    2.  初始化设置\n        \n        ```\n        sudo mysql_secure_installation\n        ```\n        \n    3.  检查mysql服务状态\n        \n        ```\n        systemctl status mysql.service\n        ```\n        \n    4.  配置远程连接\n        \n        ```\n        sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf \n        #找到 bind-address 修改值为 0.0.0.0(如果需要远程访问)\n        ```\n        \n    5.  重启mysql\n        \n        ```\n        sudo /etc/init.d/mysql restart \n        ```\n        \n    6.  修改密码\n        \n        ```sql\n        >>use mysql;\n        >>ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '你的密码'; \n        >>flush privileges;\n        >>quit;\n        ```\n        \n    7.  配置所有ip都可访问(否则后续访问PHPmyadmin会出现权限问题)\n        \n        ```sql\n        UPDATE user SET host = '%' WHERE user = 'root'; #允许远程访问\n        ```\n        \n    \n    *   安装PHP(网页的后端语言)\n        \n        ```c\n        sudo apt-get install php\n        ```\n        \n    *   安装PHP-MySQL（用于PHP和MySQL之间的支持） \\`\\`\\`c sudo apt-get install php-mysql <pre><code>-安装PHPmyadmin(用于在网页上管理mysql数据库) \\`\\`\\`c sudo apt-get install phpmyadmin\n4.  由于phpmyadmin的文件在usr/share/phpmyadmin中，而网页访问的根目录在www/html中，需要在根目录创建快捷方式：\n    \n    ```\n    sudo ln -s /usr/share/phpmyadmin /var/www\n    ```\n    \n    *   查看文件\n        \n        ```\n        sudo gedit /etc/apache2/apache2.conf\n        ```\n        \n    *   进入文本编译器之后，会看到很长的代码 在末尾加上这句话:\n        \n        ```\n        Include /etc/phpmyadmin/apache.conf\n        ```\n        \n    *   保存退出重启apache\n        \n        ```\n        /etc/init.d/apache2 restart\n        ```\n        \n    *   网页上访问localhost/phpmyadim,用mysql数据库root/密码登陆 ![](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220310115040831.png)\n        \n    *   出现这类错误先查看是不是phpmyadmin的用户名和密码输错了![image-20220310115531052](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220310115531052.png)\n        \n        如何查看phpmyadmin的登陆用户名和密码\n        \n    \n    ```\n    vim /etc/phpmyadmin/config-db.php\n    ```\n    \n    ![image-20220310120720517](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220310120720517.png) 再重新登录即可 登陆成功\n    \n    ![image-20220310121208518](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220310121208518.png) (为什么不用宝塔面板之前那篇👉[文章](https://wangwangyz.site/?p=213 \"文章\")有介绍)\n    \n    ### [WordPress完整建站过程(二)](https://wangwangyz.site/?p=562 \" WordPress完整建站过程(二)\")","slug":"wordpress完整建站过程","published":1,"updated":"2024-03-12T02:24:18.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltnrar4n001cjry1fyqh0hr7","content":"<p>我的👉<a href=\"https://wangwangyz.site/?p=213\" title=\"第一篇文章\">第一篇文章</a>👈里面就写了些建站的经过，现在我打算把过程记录下来，也算是一种复习吧（是因为孩怕哪天服务器过期了要重新搭建。。。）</p>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><ol>\n<li><p> 一台有公网IP的主机（我的是👉<a href=\"https://www.aliyun.com/\" title=\"阿里云\">阿里云</a>轻量服务器）</p>\n</li>\n<li><p> 域名以及DNS解析</p>\n</li>\n<li><p> wordpress安装包（👉<a href=\"https://cn.wordpress.org/latest-zh_CN.zip\" title=\"官网下载\">官网下载</a>，👉<a href=\"http://oos.wangwangyz.site/wordpress%E4%B8%BB%E9%A2%98%E5%8C%85/wordpress-5.9-zh_CN.zip\" title=\"站长自存\">站长自存</a>）</p>\n<span id=\"more\"></span>\n<h2 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h2></li>\n<li><p> 云服务器最好先选择Ubuntu20.04环境（虽然云服务器上有wordpress环境和LAMP、LNMP环境，但还是想自己折腾）</p>\n</li>\n<li><p> 域名解析(可选) 如何将域名解析到自己主机上的方法自行查找，先有了主机再买域名弄比较合适</p>\n</li>\n<li><p>在云服务器上安装LAMP或者LNMP LNMP是指Linux、Ngnix、MySql、PHP环境 LAMP是指Linux、Apache、MySql、PHP环境（我这里使用的是这个）</p>\n<ul>\n<li>先更新一下云服务器Linux（为了获得系统当前最新的软件包）  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>\n</li>\n<li>安装Apache2(用来做wordpress的服务器)  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install apache2</span><br></pre></td></tr></table></figure>\n</li>\n<li>安装MySQL(用来存放网站的所有数据)<ol>\n<li> 安装mysql-server</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"2\">\n<li>初始化设置 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>\n</li>\n<li>检查mysql服务状态 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status mysql.service</span><br></pre></td></tr></table></figure>\n</li>\n<li>配置远程连接 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf </span><br><span class=\"line\">#找到 bind-address 修改值为 0.0.0.0(如果需要远程访问)</span><br></pre></td></tr></table></figure>\n</li>\n<li>重启mysql <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/mysql restart </span><br></pre></td></tr></table></figure>\n</li>\n<li>修改密码 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;&gt;</span>use mysql;</span><br><span class=\"line\"><span class=\"operator\">&gt;&gt;</span><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">WITH</span> mysql_native_password <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;你的密码&#x27;</span>; </span><br><span class=\"line\"><span class=\"operator\">&gt;&gt;</span>flush privileges;</span><br><span class=\"line\"><span class=\"operator\">&gt;&gt;</span>quit;</span><br></pre></td></tr></table></figure>\n</li>\n<li>配置所有ip都可访问(否则后续访问PHPmyadmin会出现权限问题) <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">SET</span> host <span class=\"operator\">=</span> <span class=\"string\">&#x27;%&#x27;</span> <span class=\"keyword\">WHERE</span> <span class=\"keyword\">user</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;root&#x27;</span>; #允许远程访问</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>安装PHP(网页的后端语言)  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install php</span><br></pre></td></tr></table></figure>\n</li>\n<li>  安装PHP-MySQL（用于PHP和MySQL之间的支持） ```c sudo apt-get install php-mysql <pre><code>-安装PHPmyadmin(用于在网页上管理mysql数据库) ```c sudo apt-get install phpmyadmin</li>\n</ul>\n</li>\n<li><p>由于phpmyadmin的文件在usr/share/phpmyadmin中，而网页访问的根目录在www/html中，需要在根目录创建快捷方式：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/share/phpmyadmin /var/www</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看文件  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li>进入文本编译器之后，会看到很长的代码 在末尾加上这句话:  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Include /etc/phpmyadmin/apache.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li>保存退出重启apache  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure>\n</li>\n<li>网页上访问localhost/phpmyadim,用mysql数据库root/密码登陆 <img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220310115040831.png\"></li>\n<li>出现这类错误先查看是不是phpmyadmin的用户名和密码输错了<img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220310115531052.png\" alt=\"image-20220310115531052\">  如何查看phpmyadmin的登陆用户名和密码</li>\n</ul>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/phpmyadmin/config-db.php</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220310120720517.png\" alt=\"image-20220310120720517\"> 再重新登录即可 登陆成功</p>\n<p> <img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220310121208518.png\" alt=\"image-20220310121208518\"> (为什么不用宝塔面板之前那篇👉<a href=\"https://wangwangyz.site/?p=213\" title=\"文章\">文章</a>有介绍)</p>\n<h3 id=\"WordPress完整建站过程-二\"><a href=\"#WordPress完整建站过程-二\" class=\"headerlink\" title=\"WordPress完整建站过程(二)\"></a><a href=\"https://wangwangyz.site/?p=562\" title=\" WordPress完整建站过程(二)\">WordPress完整建站过程(二)</a></h3></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>我的👉<a href=\"https://wangwangyz.site/?p=213\" title=\"第一篇文章\">第一篇文章</a>👈里面就写了些建站的经过，现在我打算把过程记录下来，也算是一种复习吧（是因为孩怕哪天服务器过期了要重新搭建。。。）</p>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><ol>\n<li><p> 一台有公网IP的主机（我的是👉<a href=\"https://www.aliyun.com/\" title=\"阿里云\">阿里云</a>轻量服务器）</p>\n</li>\n<li><p> 域名以及DNS解析</p>\n</li>\n<li><p> wordpress安装包（👉<a href=\"https://cn.wordpress.org/latest-zh_CN.zip\" title=\"官网下载\">官网下载</a>，👉<a href=\"http://oos.wangwangyz.site/wordpress%E4%B8%BB%E9%A2%98%E5%8C%85/wordpress-5.9-zh_CN.zip\" title=\"站长自存\">站长自存</a>）</p>","more":"<h2 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h2></li>\n<li><p> 云服务器最好先选择Ubuntu20.04环境（虽然云服务器上有wordpress环境和LAMP、LNMP环境，但还是想自己折腾）</p>\n</li>\n<li><p> 域名解析(可选) 如何将域名解析到自己主机上的方法自行查找，先有了主机再买域名弄比较合适</p>\n</li>\n<li><p>在云服务器上安装LAMP或者LNMP LNMP是指Linux、Ngnix、MySql、PHP环境 LAMP是指Linux、Apache、MySql、PHP环境（我这里使用的是这个）</p>\n<ul>\n<li>先更新一下云服务器Linux（为了获得系统当前最新的软件包）  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgrade</span><br></pre></td></tr></table></figure>\n</li>\n<li>安装Apache2(用来做wordpress的服务器)  <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install apache2</span><br></pre></td></tr></table></figure>\n</li>\n<li>安装MySQL(用来存放网站的所有数据)<ol>\n<li> 安装mysql-server</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"2\">\n<li>初始化设置 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure>\n</li>\n<li>检查mysql服务状态 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status mysql.service</span><br></pre></td></tr></table></figure>\n</li>\n<li>配置远程连接 <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf </span><br><span class=\"line\">#找到 bind-address 修改值为 0.0.0.0(如果需要远程访问)</span><br></pre></td></tr></table></figure>\n</li>\n<li>重启mysql <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /etc/init.d/mysql restart </span><br></pre></td></tr></table></figure>\n</li>\n<li>修改密码 <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"operator\">&gt;&gt;</span>use mysql;</span><br><span class=\"line\"><span class=\"operator\">&gt;&gt;</span><span class=\"keyword\">ALTER</span> <span class=\"keyword\">USER</span> <span class=\"string\">&#x27;root&#x27;</span>@<span class=\"string\">&#x27;localhost&#x27;</span> IDENTIFIED <span class=\"keyword\">WITH</span> mysql_native_password <span class=\"keyword\">BY</span> <span class=\"string\">&#x27;你的密码&#x27;</span>; </span><br><span class=\"line\"><span class=\"operator\">&gt;&gt;</span>flush privileges;</span><br><span class=\"line\"><span class=\"operator\">&gt;&gt;</span>quit;</span><br></pre></td></tr></table></figure>\n</li>\n<li>配置所有ip都可访问(否则后续访问PHPmyadmin会出现权限问题) <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">UPDATE</span> <span class=\"keyword\">user</span> <span class=\"keyword\">SET</span> host <span class=\"operator\">=</span> <span class=\"string\">&#x27;%&#x27;</span> <span class=\"keyword\">WHERE</span> <span class=\"keyword\">user</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;root&#x27;</span>; #允许远程访问</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>安装PHP(网页的后端语言)  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install php</span><br></pre></td></tr></table></figure>\n</li>\n<li>  安装PHP-MySQL（用于PHP和MySQL之间的支持） ```c sudo apt-get install php-mysql <pre><code>-安装PHPmyadmin(用于在网页上管理mysql数据库) ```c sudo apt-get install phpmyadmin</li>\n</ul>\n</li>\n<li><p>由于phpmyadmin的文件在usr/share/phpmyadmin中，而网页访问的根目录在www/html中，需要在根目录创建快捷方式：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/share/phpmyadmin /var/www</span><br></pre></td></tr></table></figure>\n<ul>\n<li>查看文件  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li>进入文本编译器之后，会看到很长的代码 在末尾加上这句话:  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Include /etc/phpmyadmin/apache.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li>保存退出重启apache  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure>\n</li>\n<li>网页上访问localhost/phpmyadim,用mysql数据库root/密码登陆 <img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220310115040831.png\"></li>\n<li>出现这类错误先查看是不是phpmyadmin的用户名和密码输错了<img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220310115531052.png\" alt=\"image-20220310115531052\">  如何查看phpmyadmin的登陆用户名和密码</li>\n</ul>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/phpmyadmin/config-db.php</span><br></pre></td></tr></table></figure>\n<p> <img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220310120720517.png\" alt=\"image-20220310120720517\"> 再重新登录即可 登陆成功</p>\n<p> <img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220310121208518.png\" alt=\"image-20220310121208518\"> (为什么不用宝塔面板之前那篇👉<a href=\"https://wangwangyz.site/?p=213\" title=\"文章\">文章</a>有介绍)</p>\n<h3 id=\"WordPress完整建站过程-二\"><a href=\"#WordPress完整建站过程-二\" class=\"headerlink\" title=\"WordPress完整建站过程(二)\"></a><a href=\"https://wangwangyz.site/?p=562\" title=\" WordPress完整建站过程(二)\">WordPress完整建站过程(二)</a></h3></li>\n</ol>"},{"title":"wordpress完整建站过程(二)","id":"562","date":"2022-03-10T04:17:02.000Z","_content":"\n1.  通过FTP软件将下载的wordpress包传输到Linux的/var/www/html/目录下 ![通过FTP软件将下载的wordpress包传输到Linux](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E9%80%9A%E8%BF%87FTP%E8%BD%AF%E4%BB%B6%E5%B0%86%E4%B8%8B%E8%BD%BD%E7%9A%84wordpress%E5%8C%85%E4%BC%A0%E8%BE%93%E5%88%B0Linux.png) 或者通过wget获取我站点上的安装包（看情况万一我的OSS服务没了这个方法也就不行了） 在当前根目录获取安装包 `sudo wget https://redamancy9189.oss-cn-beijing.aliyuncs.com/wordpress%E4%B8%BB%E9%A2%98%E5%8C%85/wordpress-5.9-zh_CN.zip` 解压 `unzip wordpress-5.9-zh_CN.zip` 移动到根目录 `mv wordpress /var/www/` 删除原本的html并修改wordpress为html `cd /var/www` `rm -rf html` `mv wordpress html`\n2.  打开服务器站点（一般为locahost）,根据提示输入数据库密码并进行安装 ![image-20220310130420800](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220310160319591.png)\n3.  完成安装，进入后台页面 ![Wordpress界面](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/Wordpress%E7%95%8C%E9%9D%A2.png) 4.安装主题，开始编写自己的文章吧！\n<!-- more -->\n### 解决wordpress安装主题时的问题\n\n*   解决安装WordPress主题及插件需要输入FTP问题\n    \n    安装一个WordPress好像挺简单，但是默认主题不喜欢，想更换一个，无奈本地可以更换，但是服务器更换的时候需要设置FTP 。OK，设置呗，好像我的用户名密码之类的都是正确的，就是不让我通过，因此，找了一下解决方案\n    \n    进入WordPress根目录\n    \n    ```javascript\n    vim wp-config.php\n    ```\n    \n    添加以下三句代码\n    \n    ```javascript\n    define(\"FS_METHOD\", \"direct\");\n    define(\"FS_CHMOD_DIR\", 0777);\n    define(\"FS_CHMOD_FILE\", 0777);\n    ```\n    \n    接着重新访问你的网站，重新安装主题\n    \n*   无法建立目录wp-content/uploads/xxxx/xx。有没有上级目录的写权限？\n    \n    给wp-content目录添加权限 `sudo chmod -R 777 wordpress/wp-content`\n    \n*   Nginx出现 `413Request Entity Too Large` 打开nginx.conf配置文件 `sudo vim /etc/nginx/nginx.conf`\n    \n\n在http{}中加入`client_max_body_size 100M`; 重启ngnix；\n\n#### Wordpress5.9要安装Markdown编辑器的话用 `WP-githuber md`\n\n首先要先禁用新版编辑器 `古堡疼`，在主题文件编辑器那里找到 function.php，在最后添加上\n\n```php\n//禁用古腾堡编辑器\nadd_filter('use_block_editor_for_post', '__return_false');\n//屏蔽古腾堡的样式加载\nremove_action( 'wp_enqueue_scripts', 'wp_common_block_scripts_and_styles' );\n```\n\nWordpress插件推荐：`WPvivid Backup Plugin`、`WP Statistics`、`WP Githuber MD`\n\n![](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220302200717627.png)","source":"_posts/wordpress完整建站过程二.md","raw":"---\ntitle: wordpress完整建站过程(二)\ntags:\n  - Apache\n  - Linux\n  - MySQL\n  - PHP\n  - WordPress\nid: '562'\ncategories:\n  - - 学习笔记\n  - - 文章\ndate: 2022-03-10 12:17:02\n---\n\n1.  通过FTP软件将下载的wordpress包传输到Linux的/var/www/html/目录下 ![通过FTP软件将下载的wordpress包传输到Linux](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E9%80%9A%E8%BF%87FTP%E8%BD%AF%E4%BB%B6%E5%B0%86%E4%B8%8B%E8%BD%BD%E7%9A%84wordpress%E5%8C%85%E4%BC%A0%E8%BE%93%E5%88%B0Linux.png) 或者通过wget获取我站点上的安装包（看情况万一我的OSS服务没了这个方法也就不行了） 在当前根目录获取安装包 `sudo wget https://redamancy9189.oss-cn-beijing.aliyuncs.com/wordpress%E4%B8%BB%E9%A2%98%E5%8C%85/wordpress-5.9-zh_CN.zip` 解压 `unzip wordpress-5.9-zh_CN.zip` 移动到根目录 `mv wordpress /var/www/` 删除原本的html并修改wordpress为html `cd /var/www` `rm -rf html` `mv wordpress html`\n2.  打开服务器站点（一般为locahost）,根据提示输入数据库密码并进行安装 ![image-20220310130420800](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220310160319591.png)\n3.  完成安装，进入后台页面 ![Wordpress界面](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/Wordpress%E7%95%8C%E9%9D%A2.png) 4.安装主题，开始编写自己的文章吧！\n<!-- more -->\n### 解决wordpress安装主题时的问题\n\n*   解决安装WordPress主题及插件需要输入FTP问题\n    \n    安装一个WordPress好像挺简单，但是默认主题不喜欢，想更换一个，无奈本地可以更换，但是服务器更换的时候需要设置FTP 。OK，设置呗，好像我的用户名密码之类的都是正确的，就是不让我通过，因此，找了一下解决方案\n    \n    进入WordPress根目录\n    \n    ```javascript\n    vim wp-config.php\n    ```\n    \n    添加以下三句代码\n    \n    ```javascript\n    define(\"FS_METHOD\", \"direct\");\n    define(\"FS_CHMOD_DIR\", 0777);\n    define(\"FS_CHMOD_FILE\", 0777);\n    ```\n    \n    接着重新访问你的网站，重新安装主题\n    \n*   无法建立目录wp-content/uploads/xxxx/xx。有没有上级目录的写权限？\n    \n    给wp-content目录添加权限 `sudo chmod -R 777 wordpress/wp-content`\n    \n*   Nginx出现 `413Request Entity Too Large` 打开nginx.conf配置文件 `sudo vim /etc/nginx/nginx.conf`\n    \n\n在http{}中加入`client_max_body_size 100M`; 重启ngnix；\n\n#### Wordpress5.9要安装Markdown编辑器的话用 `WP-githuber md`\n\n首先要先禁用新版编辑器 `古堡疼`，在主题文件编辑器那里找到 function.php，在最后添加上\n\n```php\n//禁用古腾堡编辑器\nadd_filter('use_block_editor_for_post', '__return_false');\n//屏蔽古腾堡的样式加载\nremove_action( 'wp_enqueue_scripts', 'wp_common_block_scripts_and_styles' );\n```\n\nWordpress插件推荐：`WPvivid Backup Plugin`、`WP Statistics`、`WP Githuber MD`\n\n![](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220302200717627.png)","slug":"wordpress完整建站过程二","published":1,"updated":"2024-03-12T10:44:34.176Z","_id":"cltnrar4o001ejry133ts4bzv","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li> 通过FTP软件将下载的wordpress包传输到Linux的/var/www/html/目录下 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E9%80%9A%E8%BF%87FTP%E8%BD%AF%E4%BB%B6%E5%B0%86%E4%B8%8B%E8%BD%BD%E7%9A%84wordpress%E5%8C%85%E4%BC%A0%E8%BE%93%E5%88%B0Linux.png\" alt=\"通过FTP软件将下载的wordpress包传输到Linux\"> 或者通过wget获取我站点上的安装包（看情况万一我的OSS服务没了这个方法也就不行了） 在当前根目录获取安装包 <code>sudo wget https://redamancy9189.oss-cn-beijing.aliyuncs.com/wordpress%E4%B8%BB%E9%A2%98%E5%8C%85/wordpress-5.9-zh_CN.zip</code> 解压 <code>unzip wordpress-5.9-zh_CN.zip</code> 移动到根目录 <code>mv wordpress /var/www/</code> 删除原本的html并修改wordpress为html <code>cd /var/www</code> <code>rm -rf html</code> <code>mv wordpress html</code></li>\n<li> 打开服务器站点（一般为locahost）,根据提示输入数据库密码并进行安装 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220310160319591.png\" alt=\"image-20220310130420800\"></li>\n<li> 完成安装，进入后台页面 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/Wordpress%E7%95%8C%E9%9D%A2.png\" alt=\"Wordpress界面\"> 4.安装主题，开始编写自己的文章吧！<span id=\"more\"></span>\n<h3 id=\"解决wordpress安装主题时的问题\"><a href=\"#解决wordpress安装主题时的问题\" class=\"headerlink\" title=\"解决wordpress安装主题时的问题\"></a>解决wordpress安装主题时的问题</h3></li>\n</ol>\n<ul>\n<li>解决安装WordPress主题及插件需要输入FTP问题  安装一个WordPress好像挺简单，但是默认主题不喜欢，想更换一个，无奈本地可以更换，但是服务器更换的时候需要设置FTP 。OK，设置呗，好像我的用户名密码之类的都是正确的，就是不让我通过，因此，找了一下解决方案  进入WordPress根目录  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim wp-config.<span class=\"property\">php</span></span><br></pre></td></tr></table></figure>\n  添加以下三句代码  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"string\">&quot;FS_METHOD&quot;</span>, <span class=\"string\">&quot;direct&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"string\">&quot;FS_CHMOD_DIR&quot;</span>, <span class=\"number\">0777</span>);</span><br><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"string\">&quot;FS_CHMOD_FILE&quot;</span>, <span class=\"number\">0777</span>);</span><br></pre></td></tr></table></figure>\n  接着重新访问你的网站，重新安装主题</li>\n<li>无法建立目录wp-content/uploads/xxxx/xx。有没有上级目录的写权限？  给wp-content目录添加权限 <code>sudo chmod -R 777 wordpress/wp-content</code></li>\n<li>Nginx出现 <code>413Request Entity Too Large</code> 打开nginx.conf配置文件 <code>sudo vim /etc/nginx/nginx.conf</code></li>\n</ul>\n<p>在http{}中加入<code>client_max_body_size 100M</code>; 重启ngnix；</p>\n<h4 id=\"Wordpress5-9要安装Markdown编辑器的话用-WP-githuber-md\"><a href=\"#Wordpress5-9要安装Markdown编辑器的话用-WP-githuber-md\" class=\"headerlink\" title=\"Wordpress5.9要安装Markdown编辑器的话用 WP-githuber md\"></a>Wordpress5.9要安装Markdown编辑器的话用 <code>WP-githuber md</code></h4><p>首先要先禁用新版编辑器 <code>古堡疼</code>，在主题文件编辑器那里找到 function.php，在最后添加上</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//禁用古腾堡编辑器</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">add_filter</span>(<span class=\"string\">&#x27;use_block_editor_for_post&#x27;</span>, <span class=\"string\">&#x27;__return_false&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//屏蔽古腾堡的样式加载</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">remove_action</span>( <span class=\"string\">&#x27;wp_enqueue_scripts&#x27;</span>, <span class=\"string\">&#x27;wp_common_block_scripts_and_styles&#x27;</span> );</span><br></pre></td></tr></table></figure>\n\n<p>Wordpress插件推荐：<code>WPvivid Backup Plugin</code>、<code>WP Statistics</code>、<code>WP Githuber MD</code></p>\n<p><img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220302200717627.png\"></p>\n","site":{"data":{}},"excerpt":"<ol>\n<li> 通过FTP软件将下载的wordpress包传输到Linux的/var/www/html/目录下 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E9%80%9A%E8%BF%87FTP%E8%BD%AF%E4%BB%B6%E5%B0%86%E4%B8%8B%E8%BD%BD%E7%9A%84wordpress%E5%8C%85%E4%BC%A0%E8%BE%93%E5%88%B0Linux.png\" alt=\"通过FTP软件将下载的wordpress包传输到Linux\"> 或者通过wget获取我站点上的安装包（看情况万一我的OSS服务没了这个方法也就不行了） 在当前根目录获取安装包 <code>sudo wget https://redamancy9189.oss-cn-beijing.aliyuncs.com/wordpress%E4%B8%BB%E9%A2%98%E5%8C%85/wordpress-5.9-zh_CN.zip</code> 解压 <code>unzip wordpress-5.9-zh_CN.zip</code> 移动到根目录 <code>mv wordpress /var/www/</code> 删除原本的html并修改wordpress为html <code>cd /var/www</code> <code>rm -rf html</code> <code>mv wordpress html</code></li>\n<li> 打开服务器站点（一般为locahost）,根据提示输入数据库密码并进行安装 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220310160319591.png\" alt=\"image-20220310130420800\"></li>\n<li> 完成安装，进入后台页面 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/Wordpress%E7%95%8C%E9%9D%A2.png\" alt=\"Wordpress界面\"> 4.安装主题，开始编写自己的文章吧！","more":"<h3 id=\"解决wordpress安装主题时的问题\"><a href=\"#解决wordpress安装主题时的问题\" class=\"headerlink\" title=\"解决wordpress安装主题时的问题\"></a>解决wordpress安装主题时的问题</h3></li>\n</ol>\n<ul>\n<li>解决安装WordPress主题及插件需要输入FTP问题  安装一个WordPress好像挺简单，但是默认主题不喜欢，想更换一个，无奈本地可以更换，但是服务器更换的时候需要设置FTP 。OK，设置呗，好像我的用户名密码之类的都是正确的，就是不让我通过，因此，找了一下解决方案  进入WordPress根目录  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim wp-config.<span class=\"property\">php</span></span><br></pre></td></tr></table></figure>\n  添加以下三句代码  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"string\">&quot;FS_METHOD&quot;</span>, <span class=\"string\">&quot;direct&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"string\">&quot;FS_CHMOD_DIR&quot;</span>, <span class=\"number\">0777</span>);</span><br><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"string\">&quot;FS_CHMOD_FILE&quot;</span>, <span class=\"number\">0777</span>);</span><br></pre></td></tr></table></figure>\n  接着重新访问你的网站，重新安装主题</li>\n<li>无法建立目录wp-content/uploads/xxxx/xx。有没有上级目录的写权限？  给wp-content目录添加权限 <code>sudo chmod -R 777 wordpress/wp-content</code></li>\n<li>Nginx出现 <code>413Request Entity Too Large</code> 打开nginx.conf配置文件 <code>sudo vim /etc/nginx/nginx.conf</code></li>\n</ul>\n<p>在http{}中加入<code>client_max_body_size 100M</code>; 重启ngnix；</p>\n<h4 id=\"Wordpress5-9要安装Markdown编辑器的话用-WP-githuber-md\"><a href=\"#Wordpress5-9要安装Markdown编辑器的话用-WP-githuber-md\" class=\"headerlink\" title=\"Wordpress5.9要安装Markdown编辑器的话用 WP-githuber md\"></a>Wordpress5.9要安装Markdown编辑器的话用 <code>WP-githuber md</code></h4><p>首先要先禁用新版编辑器 <code>古堡疼</code>，在主题文件编辑器那里找到 function.php，在最后添加上</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//禁用古腾堡编辑器</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">add_filter</span>(<span class=\"string\">&#x27;use_block_editor_for_post&#x27;</span>, <span class=\"string\">&#x27;__return_false&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//屏蔽古腾堡的样式加载</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">remove_action</span>( <span class=\"string\">&#x27;wp_enqueue_scripts&#x27;</span>, <span class=\"string\">&#x27;wp_common_block_scripts_and_styles&#x27;</span> );</span><br></pre></td></tr></table></figure>\n\n<p>Wordpress插件推荐：<code>WPvivid Backup Plugin</code>、<code>WP Statistics</code>、<code>WP Githuber MD</code></p>\n<p><img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220302200717627.png\"></p>"},{"title":"遇到的Wordpress问题集","id":"328","date":"2022-03-01T02:10:48.000Z","_content":"\n在网站的搭建过程中难免会遇到一些问题，本篇文章将过程记录下来，分享给大家，希望对大家有帮助。各位遇到的问题也欢迎留言讨论，一起学习~ 问题链接:\n\n*   ##### [Wordpress头像显示问题](https://wangwangyz.site/archives/837)\n    \n*   ##### [解决Argon主题预览时只能点击标题进入文章](https://wangwangyz.site/archives/835)\n    \n*   ##### [Wordpress伪静态链接问题](https://wangwangyz.site/archives/919)\n    \n<!-- more -->\n一些小问题:\n\n#### 1、Wordpress5.9要安装Markdown编辑器的话用 `WP-githuber md`\n\n首先要先禁用新版编辑器 `古堡疼`，在主题文件编辑器那里找到 function.php，在最后添加上\n\n```php\n//禁用古腾堡编辑器\nadd_filter(&#039;use_block_editor_for_post&#039;, &#039;__return_false&#039;);\n//屏蔽古腾堡的样式加载\nremove_action( &#039;wp_enqueue_scripts&#039;, &#039;wp_common_block_scripts_and_styles&#039; );\n```\n\nWordpress插件推荐：`WPvivid Backup Plugin`(备份插件)、`WP Statistics`(统计插件，PC端右侧的统计信息就是使用该插件)、`WP Githuber MD` （Markdown语法支持插件）\n\n#### 2、后台修改WordPress Address（URL）后导致无法登陆后台的解决办法\n\n登陆数据数据库，进入wordpress数据库\n\n```sql\nsudo mysql -u root -p\nuse wordpress;\nupdate wp_options set option_value=\"http://xx.xx.xx.xx\" where option_name=\"siteurl\";\nupdate wp_options set option_value=\"http://xx.xx.xx.xx\" where option_name=\"home\";\n```\n\n**option\\_value要设置回原服务器的ip/域名，注意要加协议名http或https**(根据网站是否配置了https证书选择)\n\n#### 3、关于phpmyadmin出现404原因\n\n> 环境：Ubuntu20.04 Apache2.4\n\n一、由于phpmyadmin的文件在usr/share/phpmyadmin中，而网页访问的根目录在www/html中，需要在根目录创建快捷方式 ：`sudo ln -s /usr/share/phpmyadmin /var/www`\n\n*   查看文件\n    \n    ```\n    sudo gedit /etc/apache2/apache2.conf\n    ```\n    \n*   进入文本编译器之后，会看到很长的代码 在末尾加上这句话:\n    \n    ```\n    Include /etc/phpmyadmin/apache.conf\n    ```\n    \n*   保存退出重启apache\n    \n    ```\n    /etc/init.d/apache2 restart\n    ```\n    \n*   访问localhost/phpmyadim,用mysql数据库root/密码登陆\n    \n\n#### 4、解决配置CDN后台IP定位不准确\n\n> wordpress版本：5.9.2\n\n在根目录下找到 `wp-config.php`,在最后给它添加上：\n\n```php\nif (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {\n $list=explode(',',$_SERVER['HTTP_X_FORWARDED_FOR']);\n $_SERVER['REMOTE_ADDR'] = $list[0];\n}\n```","source":"_posts/wordpress注意问题.md","raw":"---\ntitle: 遇到的Wordpress问题集\ntags:\n  - MySQL\n  - PHP\n  - WordPress\nid: '328'\ncategories:\n  - - 学习笔记\n  - - 文章\ndate: 2022-03-01 10:10:48\n---\n\n在网站的搭建过程中难免会遇到一些问题，本篇文章将过程记录下来，分享给大家，希望对大家有帮助。各位遇到的问题也欢迎留言讨论，一起学习~ 问题链接:\n\n*   ##### [Wordpress头像显示问题](https://wangwangyz.site/archives/837)\n    \n*   ##### [解决Argon主题预览时只能点击标题进入文章](https://wangwangyz.site/archives/835)\n    \n*   ##### [Wordpress伪静态链接问题](https://wangwangyz.site/archives/919)\n    \n<!-- more -->\n一些小问题:\n\n#### 1、Wordpress5.9要安装Markdown编辑器的话用 `WP-githuber md`\n\n首先要先禁用新版编辑器 `古堡疼`，在主题文件编辑器那里找到 function.php，在最后添加上\n\n```php\n//禁用古腾堡编辑器\nadd_filter(&#039;use_block_editor_for_post&#039;, &#039;__return_false&#039;);\n//屏蔽古腾堡的样式加载\nremove_action( &#039;wp_enqueue_scripts&#039;, &#039;wp_common_block_scripts_and_styles&#039; );\n```\n\nWordpress插件推荐：`WPvivid Backup Plugin`(备份插件)、`WP Statistics`(统计插件，PC端右侧的统计信息就是使用该插件)、`WP Githuber MD` （Markdown语法支持插件）\n\n#### 2、后台修改WordPress Address（URL）后导致无法登陆后台的解决办法\n\n登陆数据数据库，进入wordpress数据库\n\n```sql\nsudo mysql -u root -p\nuse wordpress;\nupdate wp_options set option_value=\"http://xx.xx.xx.xx\" where option_name=\"siteurl\";\nupdate wp_options set option_value=\"http://xx.xx.xx.xx\" where option_name=\"home\";\n```\n\n**option\\_value要设置回原服务器的ip/域名，注意要加协议名http或https**(根据网站是否配置了https证书选择)\n\n#### 3、关于phpmyadmin出现404原因\n\n> 环境：Ubuntu20.04 Apache2.4\n\n一、由于phpmyadmin的文件在usr/share/phpmyadmin中，而网页访问的根目录在www/html中，需要在根目录创建快捷方式 ：`sudo ln -s /usr/share/phpmyadmin /var/www`\n\n*   查看文件\n    \n    ```\n    sudo gedit /etc/apache2/apache2.conf\n    ```\n    \n*   进入文本编译器之后，会看到很长的代码 在末尾加上这句话:\n    \n    ```\n    Include /etc/phpmyadmin/apache.conf\n    ```\n    \n*   保存退出重启apache\n    \n    ```\n    /etc/init.d/apache2 restart\n    ```\n    \n*   访问localhost/phpmyadim,用mysql数据库root/密码登陆\n    \n\n#### 4、解决配置CDN后台IP定位不准确\n\n> wordpress版本：5.9.2\n\n在根目录下找到 `wp-config.php`,在最后给它添加上：\n\n```php\nif (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) {\n $list=explode(',',$_SERVER['HTTP_X_FORWARDED_FOR']);\n $_SERVER['REMOTE_ADDR'] = $list[0];\n}\n```","slug":"wordpress注意问题","published":1,"updated":"2024-03-12T02:24:18.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltnrar4q001ijry167eue39n","content":"<p>在网站的搭建过程中难免会遇到一些问题，本篇文章将过程记录下来，分享给大家，希望对大家有帮助。各位遇到的问题也欢迎留言讨论，一起学习~ 问题链接:</p>\n<ul>\n<li><h5 id=\"Wordpress头像显示问题\"><a href=\"#Wordpress头像显示问题\" class=\"headerlink\" title=\"Wordpress头像显示问题\"></a><a href=\"https://wangwangyz.site/archives/837\">Wordpress头像显示问题</a></h5></li>\n<li><h5 id=\"解决Argon主题预览时只能点击标题进入文章\"><a href=\"#解决Argon主题预览时只能点击标题进入文章\" class=\"headerlink\" title=\"解决Argon主题预览时只能点击标题进入文章\"></a><a href=\"https://wangwangyz.site/archives/835\">解决Argon主题预览时只能点击标题进入文章</a></h5></li>\n<li><h5 id=\"Wordpress伪静态链接问题\"><a href=\"#Wordpress伪静态链接问题\" class=\"headerlink\" title=\"Wordpress伪静态链接问题\"></a><a href=\"https://wangwangyz.site/archives/919\">Wordpress伪静态链接问题</a></h5></li>\n</ul>\n<span id=\"more\"></span>\n<p>一些小问题:</p>\n<h4 id=\"1、Wordpress5-9要安装Markdown编辑器的话用-WP-githuber-md\"><a href=\"#1、Wordpress5-9要安装Markdown编辑器的话用-WP-githuber-md\" class=\"headerlink\" title=\"1、Wordpress5.9要安装Markdown编辑器的话用 WP-githuber md\"></a>1、Wordpress5.9要安装Markdown编辑器的话用 <code>WP-githuber md</code></h4><p>首先要先禁用新版编辑器 <code>古堡疼</code>，在主题文件编辑器那里找到 function.php，在最后添加上</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//禁用古腾堡编辑器</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">add_filter</span>(&amp;#<span class=\"number\">039</span>;use_block_editor_for_post&amp;#<span class=\"number\">039</span>;, &amp;#<span class=\"number\">039</span>;__return_false&amp;#<span class=\"number\">039</span>;);</span><br><span class=\"line\"><span class=\"comment\">//屏蔽古腾堡的样式加载</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">remove_action</span>( &amp;#<span class=\"number\">039</span>;wp_enqueue_scripts&amp;#<span class=\"number\">039</span>;, &amp;#<span class=\"number\">039</span>;wp_common_block_scripts_and_styles&amp;#<span class=\"number\">039</span>; );</span><br></pre></td></tr></table></figure>\n\n<p>Wordpress插件推荐：<code>WPvivid Backup Plugin</code>(备份插件)、<code>WP Statistics</code>(统计插件，PC端右侧的统计信息就是使用该插件)、<code>WP Githuber MD</code> （Markdown语法支持插件）</p>\n<h4 id=\"2、后台修改WordPress-Address（URL）后导致无法登陆后台的解决办法\"><a href=\"#2、后台修改WordPress-Address（URL）后导致无法登陆后台的解决办法\" class=\"headerlink\" title=\"2、后台修改WordPress Address（URL）后导致无法登陆后台的解决办法\"></a>2、后台修改WordPress Address（URL）后导致无法登陆后台的解决办法</h4><p>登陆数据数据库，进入wordpress数据库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mysql <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>p</span><br><span class=\"line\">use wordpress;</span><br><span class=\"line\"><span class=\"keyword\">update</span> wp_options <span class=\"keyword\">set</span> option_value<span class=\"operator\">=</span>&quot;http://xx.xx.xx.xx&quot; <span class=\"keyword\">where</span> option_name<span class=\"operator\">=</span>&quot;siteurl&quot;;</span><br><span class=\"line\"><span class=\"keyword\">update</span> wp_options <span class=\"keyword\">set</span> option_value<span class=\"operator\">=</span>&quot;http://xx.xx.xx.xx&quot; <span class=\"keyword\">where</span> option_name<span class=\"operator\">=</span>&quot;home&quot;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>option_value要设置回原服务器的ip/域名，注意要加协议名http或https</strong>(根据网站是否配置了https证书选择)</p>\n<h4 id=\"3、关于phpmyadmin出现404原因\"><a href=\"#3、关于phpmyadmin出现404原因\" class=\"headerlink\" title=\"3、关于phpmyadmin出现404原因\"></a>3、关于phpmyadmin出现404原因</h4><blockquote>\n<p>环境：Ubuntu20.04 Apache2.4</p>\n</blockquote>\n<p>一、由于phpmyadmin的文件在usr/share/phpmyadmin中，而网页访问的根目录在www/html中，需要在根目录创建快捷方式 ：<code>sudo ln -s /usr/share/phpmyadmin /var/www</code></p>\n<ul>\n<li>查看文件  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li>进入文本编译器之后，会看到很长的代码 在末尾加上这句话:  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Include /etc/phpmyadmin/apache.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li>保存退出重启apache  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure>\n</li>\n<li>访问localhost/phpmyadim,用mysql数据库root/密码登陆</li>\n</ul>\n<h4 id=\"4、解决配置CDN后台IP定位不准确\"><a href=\"#4、解决配置CDN后台IP定位不准确\" class=\"headerlink\" title=\"4、解决配置CDN后台IP定位不准确\"></a>4、解决配置CDN后台IP定位不准确</h4><blockquote>\n<p>wordpress版本：5.9.2</p>\n</blockquote>\n<p>在根目录下找到 <code>wp-config.php</code>,在最后给它添加上：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class=\"line\"> <span class=\"variable\">$list</span>=<span class=\"title function_ invoke__\">explode</span>(<span class=\"string\">&#x27;,&#x27;</span>,<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);</span><br><span class=\"line\"> <span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;REMOTE_ADDR&#x27;</span>] = <span class=\"variable\">$list</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>在网站的搭建过程中难免会遇到一些问题，本篇文章将过程记录下来，分享给大家，希望对大家有帮助。各位遇到的问题也欢迎留言讨论，一起学习~ 问题链接:</p>\n<ul>\n<li><h5 id=\"Wordpress头像显示问题\"><a href=\"#Wordpress头像显示问题\" class=\"headerlink\" title=\"Wordpress头像显示问题\"></a><a href=\"https://wangwangyz.site/archives/837\">Wordpress头像显示问题</a></h5></li>\n<li><h5 id=\"解决Argon主题预览时只能点击标题进入文章\"><a href=\"#解决Argon主题预览时只能点击标题进入文章\" class=\"headerlink\" title=\"解决Argon主题预览时只能点击标题进入文章\"></a><a href=\"https://wangwangyz.site/archives/835\">解决Argon主题预览时只能点击标题进入文章</a></h5></li>\n<li><h5 id=\"Wordpress伪静态链接问题\"><a href=\"#Wordpress伪静态链接问题\" class=\"headerlink\" title=\"Wordpress伪静态链接问题\"></a><a href=\"https://wangwangyz.site/archives/919\">Wordpress伪静态链接问题</a></h5></li>\n</ul>","more":"<p>一些小问题:</p>\n<h4 id=\"1、Wordpress5-9要安装Markdown编辑器的话用-WP-githuber-md\"><a href=\"#1、Wordpress5-9要安装Markdown编辑器的话用-WP-githuber-md\" class=\"headerlink\" title=\"1、Wordpress5.9要安装Markdown编辑器的话用 WP-githuber md\"></a>1、Wordpress5.9要安装Markdown编辑器的话用 <code>WP-githuber md</code></h4><p>首先要先禁用新版编辑器 <code>古堡疼</code>，在主题文件编辑器那里找到 function.php，在最后添加上</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//禁用古腾堡编辑器</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">add_filter</span>(&amp;#<span class=\"number\">039</span>;use_block_editor_for_post&amp;#<span class=\"number\">039</span>;, &amp;#<span class=\"number\">039</span>;__return_false&amp;#<span class=\"number\">039</span>;);</span><br><span class=\"line\"><span class=\"comment\">//屏蔽古腾堡的样式加载</span></span><br><span class=\"line\"><span class=\"title function_ invoke__\">remove_action</span>( &amp;#<span class=\"number\">039</span>;wp_enqueue_scripts&amp;#<span class=\"number\">039</span>;, &amp;#<span class=\"number\">039</span>;wp_common_block_scripts_and_styles&amp;#<span class=\"number\">039</span>; );</span><br></pre></td></tr></table></figure>\n\n<p>Wordpress插件推荐：<code>WPvivid Backup Plugin</code>(备份插件)、<code>WP Statistics</code>(统计插件，PC端右侧的统计信息就是使用该插件)、<code>WP Githuber MD</code> （Markdown语法支持插件）</p>\n<h4 id=\"2、后台修改WordPress-Address（URL）后导致无法登陆后台的解决办法\"><a href=\"#2、后台修改WordPress-Address（URL）后导致无法登陆后台的解决办法\" class=\"headerlink\" title=\"2、后台修改WordPress Address（URL）后导致无法登陆后台的解决办法\"></a>2、后台修改WordPress Address（URL）后导致无法登陆后台的解决办法</h4><p>登陆数据数据库，进入wordpress数据库</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mysql <span class=\"operator\">-</span>u root <span class=\"operator\">-</span>p</span><br><span class=\"line\">use wordpress;</span><br><span class=\"line\"><span class=\"keyword\">update</span> wp_options <span class=\"keyword\">set</span> option_value<span class=\"operator\">=</span>&quot;http://xx.xx.xx.xx&quot; <span class=\"keyword\">where</span> option_name<span class=\"operator\">=</span>&quot;siteurl&quot;;</span><br><span class=\"line\"><span class=\"keyword\">update</span> wp_options <span class=\"keyword\">set</span> option_value<span class=\"operator\">=</span>&quot;http://xx.xx.xx.xx&quot; <span class=\"keyword\">where</span> option_name<span class=\"operator\">=</span>&quot;home&quot;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>option_value要设置回原服务器的ip/域名，注意要加协议名http或https</strong>(根据网站是否配置了https证书选择)</p>\n<h4 id=\"3、关于phpmyadmin出现404原因\"><a href=\"#3、关于phpmyadmin出现404原因\" class=\"headerlink\" title=\"3、关于phpmyadmin出现404原因\"></a>3、关于phpmyadmin出现404原因</h4><blockquote>\n<p>环境：Ubuntu20.04 Apache2.4</p>\n</blockquote>\n<p>一、由于phpmyadmin的文件在usr/share/phpmyadmin中，而网页访问的根目录在www/html中，需要在根目录创建快捷方式 ：<code>sudo ln -s /usr/share/phpmyadmin /var/www</code></p>\n<ul>\n<li>查看文件  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gedit /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li>进入文本编译器之后，会看到很长的代码 在末尾加上这句话:  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Include /etc/phpmyadmin/apache.conf</span><br></pre></td></tr></table></figure>\n</li>\n<li>保存退出重启apache  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/apache2 restart</span><br></pre></td></tr></table></figure>\n</li>\n<li>访问localhost/phpmyadim,用mysql数据库root/密码登陆</li>\n</ul>\n<h4 id=\"4、解决配置CDN后台IP定位不准确\"><a href=\"#4、解决配置CDN后台IP定位不准确\" class=\"headerlink\" title=\"4、解决配置CDN后台IP定位不准确\"></a>4、解决配置CDN后台IP定位不准确</h4><blockquote>\n<p>wordpress版本：5.9.2</p>\n</blockquote>\n<p>在根目录下找到 <code>wp-config.php</code>,在最后给它添加上：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>])) &#123;</span><br><span class=\"line\"> <span class=\"variable\">$list</span>=<span class=\"title function_ invoke__\">explode</span>(<span class=\"string\">&#x27;,&#x27;</span>,<span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);</span><br><span class=\"line\"> <span class=\"variable\">$_SERVER</span>[<span class=\"string\">&#x27;REMOTE_ADDR&#x27;</span>] = <span class=\"variable\">$list</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"优雅地使用WSL2","id":"1035","date":"2022-04-24T04:24:26.000Z","thumbnail":"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424002629616.png","toc":true,"_content":"\n记录一次安装WSL 2的过程...\n\n#### 什么是WSL2\n\nWSL全称为Windows Subsystem for Linux，官网译为：适用于 Linux 的 Windows 子系统 (WSL)。\n\n官方文档直达：[适用于 Linux 的 Windows 子系统文档 | Microsoft Docs](https://docs.microsoft.com/zh-cn/windows/wsl/)\n<!-- more -->\n[WSL1和WSL2的比较](https://docs.microsoft.com/zh-cn/windows/wsl/compare-versions):\n\n| 功能                                           | WSL 1 | WSL 2 |\n| :--------------------------------------------- | :---- | :---- |\n| Windows 和 Linux 之间的集成                    | ✅     | ✅     |\n| 启动时间短                                     | ✅     | ✅     |\n| 与传统虚拟机相比，占用的资源量少               | ✅     | ✅     |\n| 可以与当前版本的 VMware 和 VirtualBox 一起运行 | ✅     | ✅     |\n| 托管 VM                                        | ❌     | ✅     |\n| 完整的 Linux 内核                              | ❌     | ✅     |\n| 完全的系统调用兼容性                           | ❌     | ✅     |\n| 跨 OS 文件系统的性能                           | ✅     | ❌     |\n\n#### 为什么要WSL2\n\n官方解释：可让开发人员直接在 Windows 上按原样运行 GNU/Linux 环境（包括大多数命令行工具、实用工具和应用程序），且不会产生传统虚拟机或双启动设置开销。\n\n我的观点：日常生活中程序的开发离不开Linux，而Windows的GUI界面又是我们常用的（微信、Office等）。我们可以有很多种方式使用Linux，如：\n\n| 方案         | 优点                                                 | 缺点                                                         |\n| ------------ | ---------------------------------------------------- | ------------------------------------------------------------ |\n| 单主机双系统 | 能实实在的运行不同、完整的操作系统                   | 切换系统都需要重启，麻烦                                     |\n| 双主机双系统 | 物理隔离方式，真正实现双系统                         | 真的有人那么有钱吗？开发程序用两台电脑？如果有，请问土豪缺朋友吗😁 |\n| 远程服务器   | 和单主机双系统一样                                   | 性能、带宽、流量有局限                                       |\n| 虚拟机VMware | 和单主机双系统一样                                   | 资源消耗大、启动慢、运行效率低。我用过之后觉得有的时候卡死也不知道怎么弄。。 |\n| WSL！！！    | 几乎能运行完整的操作系统，资源消耗小、启动快、切换快 | 有些软件可能不支持...（后续有什么毛病再更新）                |\n\n重点：Windows与Linux子系统将共用同一文件系统!!!!  我们可以在WSL中使用三剑客命令查询分析windows文档、日志、使用shell命令或者bash脚本运行存储在windows中的linux程序、甚至在WSL中创建docker容器，在windows下使用docker desktop进行可视化管理。\n\n总结：<u>**WSL2让我们既拥有Windows的操作界面又拥有Linux的命令行工具。**</u>\n\n#### 启用“虚拟机平台”\n\nWSL 2 需要启用 Windows 10 的 “虚拟机平台” 特性。它独立于 Hyper-V，并提供了一些在 Linux 的 Windows 子系统新版本中可用的更有趣的平台集成。\n\n要在 **Windows 10（2004）**上启用虚拟机平台，请以管理员身份打开 PowerShell 或  cmd 并运行：\n\n```shell\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n```\n\n要在 **Windows 10（1903，1909）**上启用虚拟机平台，请以管理员身份打开 PowerShell或  cmd 并运行：\n\n```shell\nEnable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -NoRestart\n```\n\n为了确保所有相关部件都整齐到位，您应该在**此时重启系统**，否则可能会发现事情没按预期进行。\n\n![image-20220424002629616](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424002629616.png)\n\n#### 安装WSL2\n\n本次安装环境\n\n>处理器\t  Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz   2.11 GHz\n>机带 RAM\t   8.00 GB (7.79 GB 可用)\n>系统类型\t   64 位操作系统, 基于 x64 的处理器\n>操作系统\t   Windows 10 家庭中文版\n\n注意：本次安装之前没安装过WSL和Ubuntu，只运行过VMware虚拟机。\n\n##### 检查是否可以安装\n\n[您的电脑需要以下配置](https://www.cnblogs.com/ittranslator/p/14128570.html)：\n\n- Windows 10 2020年5月(2004) 版, Windows 10 2019年5月(1903) 版，或者 Windows 10 2019年11月(1909) 版\n- 一台支持 Hyper-V 虚拟化的计算机\n\n查看是否支持Hyper-V的方法：\n\n- 打开cmd，输入\n\n  ```shell\n  systeminfo\n  ```\n\n- 查看Hyper-V信息\n\n  比如我的电脑就可以支持\n\n  ![image-20220423221854978](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220423221854978.png)\n\n##### 安装WSL\n\n用管理员身份运行PowerShell\n\n```sh\nwsl --install\n```\n\n--install 命令执行以下操作：\n\n- 启用可选的 WSL 和虚拟机平台组件\n- 下载并安装最新 Linux 内核\n- 将 WSL 2 设置为默认值\n- 下载并安装 Ubuntu Linux 发行版（**可能需要重新启动**）\n\n[注意](https://docs.microsoft.com/zh-cn/windows/wsl/install)： 上述命令仅在完全未安装 WSL 时才有效，如果运行 `wsl --install` 并查看 WSL 帮助文本，请尝试运行 `wsl --list --online` 以查看可用发行版列表并运行 `wsl --install -d <DistroName>` 以安装发行版。\n\n![image-20220423221123835](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220423221123835.png)\n\n等待一会会，去打局游戏再回来....\n\n顺便查看了一下可以支持的linux系统，大便、Kali、OpenSUSE、乌班图都有，默认安装Ubuntu。\n\n```shell\nwsl --list --online\n```\n\n![image-20220423223723552](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220423223723552.png)\n\n----\n\n安装了好一会儿了。。。。发现还是在85.7%，等不下去了`CTRL+C`了。\n\n重新安装，这次安装指定的系统\n\n```shell\nwsl --install -d Ubuntu-20.04\n```\n\n![image-20220423224013320](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220423224013320.png)\n\n重启，然后成功了!\n\n---\n\n##### 配置Linux\n\n接下来打开已安装的Ubuntu，这时候会提示你配置用户和密码\n\n配置完毕！即可享用\n\n测试一下，用命令 `cd / && ls -la` 查看所有文件，如下（是不是很熟悉）\n\n![image-20220424000945772](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424000945772.png)\n\n更新一下镜像源：\n\n```shell\nsudo vim /etc/apt/sources.list\n```\n\n将官方的源都注释掉，换成下面两个之一即可（我的是Ubuntu20.04，别的版本或者源可以自行网上搜）\n\n- 阿里源\n\n```shell\ndeb https://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse\ndeb https://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse\ndeb-src https://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse\ndeb https://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse\ndeb https://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse\ndeb-src https://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse\ndeb https://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse\ndeb-src https://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse\n```\n\n- 清华源\n\n```shell\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse \n```\n\nDebian系统分好几种，`wheezy`、`jessie`、`stretch`、`buster`，它们分别对应：\n\n| Debian版本 | 对应名称 |\n| :--------: | :------: |\n|  Debian7   |  wheezy  |\n|  Debian8   |  jessie  |\n|  Debian9   | stretch  |\n|  Debian10  |  buster  |\n|  Debian11  | bullseye |\n\nDebian 11（Bullseye）国内镜像源：\n\n- 阿里\n\n```shell\ndeb https://mirrors.aliyun.com/debian/ bullseye main non-free contrib\ndeb-src https://mirrors.aliyun.com/debian/ bullseye main non-free contrib\ndeb https://mirrors.aliyun.com/debian-security/ bullseye-security main\ndeb-src https://mirrors.aliyun.com/debian-security/ bullseye-security main\ndeb https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib\ndeb-src https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib\ndeb https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib\ndeb-src https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib\n```\n\n- 清华\n\n```shell\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free\n```\n\n##### 遇到问题：\n\nCertificate verification failed: The certificate is NOT trusted——更新Ubuntu20.04、Debian11的过程中遇到的证书验证失败问题。\n\n解决办法：\n\n1. 更改源文件，将所有的https改成http\n\n  ```sh\nsudo nano /etc/apt/sources.list\n  ```\n\n2. 重新更新源\n\n  ```shell\nsudo apt update\n  ```\n\n3. 安装/更新证书ca-certificates\n\n  ```shell\nsudo apt install --reinstall ca-certificates\n  ```\n\n4. 参照步骤一将镜像源文件改回https\n\n5. 再次更新源\n\n  ```shell\nsudo apt update && sudo apt upgrade\n  ```\n\n6. 大功告成\n\n#### 安装Windows Terminal\n\nWindows Terminal能帮助我们管理命令行工具、PowerShell和WSL等Shell用户的工具，能为我们提供最佳的 WSL 体验。\n\n下载方式\n\n- https://www.microsoft.com/store/productId/9N0DX20HK701\n- MicroSoft Store （微软商店）找关键字 `Windows Terminal`\n\n![image-20220424115803757](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424115803757.png)\n\n下载安装即可。功能确实很多哈哈哈，效果：\n\n![WindowsTerminal_HCukprnOs0](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/WindowsTerminal_HCukprnOs0.gif)\n\n---\n\n遇到的问题：过程中下载失败了好多次我不断点击重新下载才成功。\n\n#### 查看Linux版本信息\n\n1. `cat  /etc/os-release`\n\n   ![image-20220424132217753](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424132217753.png) \n\n2. `cat  /proc/version`\n\n   ![image-20220424132605991](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424132605991.png)\n\n3. `uname -a`\n\n4. ![image-20220424133412380](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424133412380.png)\n\n5. `lsb_release -a`\n\n   ![image-20220424133534249](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424133534249.png)\n\n6. `neofetch`\n\n   ![image-20220502182008974](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220502182008974.png)\n\n#### 总结\n\n刚安装了还不知道怎么样，看网上的说法褒贬不一，我也在不断尝试，后续再更，说说感受。\n\n参考：\n\n[Winux之路-WSL 2的使用及填坑 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/224753478)\n\n[适用于 Linux 的 Windows 子系统文档 | Microsoft Docs](https://docs.microsoft.com/zh-cn/windows/wsl/)\n\n\n","source":"_posts/优雅地使用WSL2.md","raw":"---\ntitle: 优雅地使用WSL2\ntags:\n  - Linux\n  - Windows\nid: '1035'\ncategories:\n  - - 学习笔记\n  - - 工具\ndate: 2022-04-24 12:24:26\n# cover: https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424002629616.png\nthumbnail: https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424002629616.png\ntoc: true\n---\n\n记录一次安装WSL 2的过程...\n\n#### 什么是WSL2\n\nWSL全称为Windows Subsystem for Linux，官网译为：适用于 Linux 的 Windows 子系统 (WSL)。\n\n官方文档直达：[适用于 Linux 的 Windows 子系统文档 | Microsoft Docs](https://docs.microsoft.com/zh-cn/windows/wsl/)\n<!-- more -->\n[WSL1和WSL2的比较](https://docs.microsoft.com/zh-cn/windows/wsl/compare-versions):\n\n| 功能                                           | WSL 1 | WSL 2 |\n| :--------------------------------------------- | :---- | :---- |\n| Windows 和 Linux 之间的集成                    | ✅     | ✅     |\n| 启动时间短                                     | ✅     | ✅     |\n| 与传统虚拟机相比，占用的资源量少               | ✅     | ✅     |\n| 可以与当前版本的 VMware 和 VirtualBox 一起运行 | ✅     | ✅     |\n| 托管 VM                                        | ❌     | ✅     |\n| 完整的 Linux 内核                              | ❌     | ✅     |\n| 完全的系统调用兼容性                           | ❌     | ✅     |\n| 跨 OS 文件系统的性能                           | ✅     | ❌     |\n\n#### 为什么要WSL2\n\n官方解释：可让开发人员直接在 Windows 上按原样运行 GNU/Linux 环境（包括大多数命令行工具、实用工具和应用程序），且不会产生传统虚拟机或双启动设置开销。\n\n我的观点：日常生活中程序的开发离不开Linux，而Windows的GUI界面又是我们常用的（微信、Office等）。我们可以有很多种方式使用Linux，如：\n\n| 方案         | 优点                                                 | 缺点                                                         |\n| ------------ | ---------------------------------------------------- | ------------------------------------------------------------ |\n| 单主机双系统 | 能实实在的运行不同、完整的操作系统                   | 切换系统都需要重启，麻烦                                     |\n| 双主机双系统 | 物理隔离方式，真正实现双系统                         | 真的有人那么有钱吗？开发程序用两台电脑？如果有，请问土豪缺朋友吗😁 |\n| 远程服务器   | 和单主机双系统一样                                   | 性能、带宽、流量有局限                                       |\n| 虚拟机VMware | 和单主机双系统一样                                   | 资源消耗大、启动慢、运行效率低。我用过之后觉得有的时候卡死也不知道怎么弄。。 |\n| WSL！！！    | 几乎能运行完整的操作系统，资源消耗小、启动快、切换快 | 有些软件可能不支持...（后续有什么毛病再更新）                |\n\n重点：Windows与Linux子系统将共用同一文件系统!!!!  我们可以在WSL中使用三剑客命令查询分析windows文档、日志、使用shell命令或者bash脚本运行存储在windows中的linux程序、甚至在WSL中创建docker容器，在windows下使用docker desktop进行可视化管理。\n\n总结：<u>**WSL2让我们既拥有Windows的操作界面又拥有Linux的命令行工具。**</u>\n\n#### 启用“虚拟机平台”\n\nWSL 2 需要启用 Windows 10 的 “虚拟机平台” 特性。它独立于 Hyper-V，并提供了一些在 Linux 的 Windows 子系统新版本中可用的更有趣的平台集成。\n\n要在 **Windows 10（2004）**上启用虚拟机平台，请以管理员身份打开 PowerShell 或  cmd 并运行：\n\n```shell\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n```\n\n要在 **Windows 10（1903，1909）**上启用虚拟机平台，请以管理员身份打开 PowerShell或  cmd 并运行：\n\n```shell\nEnable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -NoRestart\n```\n\n为了确保所有相关部件都整齐到位，您应该在**此时重启系统**，否则可能会发现事情没按预期进行。\n\n![image-20220424002629616](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424002629616.png)\n\n#### 安装WSL2\n\n本次安装环境\n\n>处理器\t  Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz   2.11 GHz\n>机带 RAM\t   8.00 GB (7.79 GB 可用)\n>系统类型\t   64 位操作系统, 基于 x64 的处理器\n>操作系统\t   Windows 10 家庭中文版\n\n注意：本次安装之前没安装过WSL和Ubuntu，只运行过VMware虚拟机。\n\n##### 检查是否可以安装\n\n[您的电脑需要以下配置](https://www.cnblogs.com/ittranslator/p/14128570.html)：\n\n- Windows 10 2020年5月(2004) 版, Windows 10 2019年5月(1903) 版，或者 Windows 10 2019年11月(1909) 版\n- 一台支持 Hyper-V 虚拟化的计算机\n\n查看是否支持Hyper-V的方法：\n\n- 打开cmd，输入\n\n  ```shell\n  systeminfo\n  ```\n\n- 查看Hyper-V信息\n\n  比如我的电脑就可以支持\n\n  ![image-20220423221854978](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220423221854978.png)\n\n##### 安装WSL\n\n用管理员身份运行PowerShell\n\n```sh\nwsl --install\n```\n\n--install 命令执行以下操作：\n\n- 启用可选的 WSL 和虚拟机平台组件\n- 下载并安装最新 Linux 内核\n- 将 WSL 2 设置为默认值\n- 下载并安装 Ubuntu Linux 发行版（**可能需要重新启动**）\n\n[注意](https://docs.microsoft.com/zh-cn/windows/wsl/install)： 上述命令仅在完全未安装 WSL 时才有效，如果运行 `wsl --install` 并查看 WSL 帮助文本，请尝试运行 `wsl --list --online` 以查看可用发行版列表并运行 `wsl --install -d <DistroName>` 以安装发行版。\n\n![image-20220423221123835](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220423221123835.png)\n\n等待一会会，去打局游戏再回来....\n\n顺便查看了一下可以支持的linux系统，大便、Kali、OpenSUSE、乌班图都有，默认安装Ubuntu。\n\n```shell\nwsl --list --online\n```\n\n![image-20220423223723552](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220423223723552.png)\n\n----\n\n安装了好一会儿了。。。。发现还是在85.7%，等不下去了`CTRL+C`了。\n\n重新安装，这次安装指定的系统\n\n```shell\nwsl --install -d Ubuntu-20.04\n```\n\n![image-20220423224013320](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220423224013320.png)\n\n重启，然后成功了!\n\n---\n\n##### 配置Linux\n\n接下来打开已安装的Ubuntu，这时候会提示你配置用户和密码\n\n配置完毕！即可享用\n\n测试一下，用命令 `cd / && ls -la` 查看所有文件，如下（是不是很熟悉）\n\n![image-20220424000945772](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424000945772.png)\n\n更新一下镜像源：\n\n```shell\nsudo vim /etc/apt/sources.list\n```\n\n将官方的源都注释掉，换成下面两个之一即可（我的是Ubuntu20.04，别的版本或者源可以自行网上搜）\n\n- 阿里源\n\n```shell\ndeb https://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse\ndeb https://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse\ndeb-src https://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse\ndeb https://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse\ndeb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse\ndeb https://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse\ndeb-src https://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse\ndeb https://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse\ndeb-src https://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse\n```\n\n- 清华源\n\n```shell\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse \n```\n\nDebian系统分好几种，`wheezy`、`jessie`、`stretch`、`buster`，它们分别对应：\n\n| Debian版本 | 对应名称 |\n| :--------: | :------: |\n|  Debian7   |  wheezy  |\n|  Debian8   |  jessie  |\n|  Debian9   | stretch  |\n|  Debian10  |  buster  |\n|  Debian11  | bullseye |\n\nDebian 11（Bullseye）国内镜像源：\n\n- 阿里\n\n```shell\ndeb https://mirrors.aliyun.com/debian/ bullseye main non-free contrib\ndeb-src https://mirrors.aliyun.com/debian/ bullseye main non-free contrib\ndeb https://mirrors.aliyun.com/debian-security/ bullseye-security main\ndeb-src https://mirrors.aliyun.com/debian-security/ bullseye-security main\ndeb https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib\ndeb-src https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib\ndeb https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib\ndeb-src https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib\n```\n\n- 清华\n\n```shell\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free\ndeb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free\n```\n\n##### 遇到问题：\n\nCertificate verification failed: The certificate is NOT trusted——更新Ubuntu20.04、Debian11的过程中遇到的证书验证失败问题。\n\n解决办法：\n\n1. 更改源文件，将所有的https改成http\n\n  ```sh\nsudo nano /etc/apt/sources.list\n  ```\n\n2. 重新更新源\n\n  ```shell\nsudo apt update\n  ```\n\n3. 安装/更新证书ca-certificates\n\n  ```shell\nsudo apt install --reinstall ca-certificates\n  ```\n\n4. 参照步骤一将镜像源文件改回https\n\n5. 再次更新源\n\n  ```shell\nsudo apt update && sudo apt upgrade\n  ```\n\n6. 大功告成\n\n#### 安装Windows Terminal\n\nWindows Terminal能帮助我们管理命令行工具、PowerShell和WSL等Shell用户的工具，能为我们提供最佳的 WSL 体验。\n\n下载方式\n\n- https://www.microsoft.com/store/productId/9N0DX20HK701\n- MicroSoft Store （微软商店）找关键字 `Windows Terminal`\n\n![image-20220424115803757](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424115803757.png)\n\n下载安装即可。功能确实很多哈哈哈，效果：\n\n![WindowsTerminal_HCukprnOs0](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/WindowsTerminal_HCukprnOs0.gif)\n\n---\n\n遇到的问题：过程中下载失败了好多次我不断点击重新下载才成功。\n\n#### 查看Linux版本信息\n\n1. `cat  /etc/os-release`\n\n   ![image-20220424132217753](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424132217753.png) \n\n2. `cat  /proc/version`\n\n   ![image-20220424132605991](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424132605991.png)\n\n3. `uname -a`\n\n4. ![image-20220424133412380](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424133412380.png)\n\n5. `lsb_release -a`\n\n   ![image-20220424133534249](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424133534249.png)\n\n6. `neofetch`\n\n   ![image-20220502182008974](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220502182008974.png)\n\n#### 总结\n\n刚安装了还不知道怎么样，看网上的说法褒贬不一，我也在不断尝试，后续再更，说说感受。\n\n参考：\n\n[Winux之路-WSL 2的使用及填坑 - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/224753478)\n\n[适用于 Linux 的 Windows 子系统文档 | Microsoft Docs](https://docs.microsoft.com/zh-cn/windows/wsl/)\n\n\n","slug":"优雅地使用WSL2","published":1,"updated":"2024-03-12T10:43:17.428Z","_id":"cltnrar4s001ljry154if8aay","comments":1,"layout":"post","photos":[],"link":"","content":"<p>记录一次安装WSL 2的过程…</p>\n<h4 id=\"什么是WSL2\"><a href=\"#什么是WSL2\" class=\"headerlink\" title=\"什么是WSL2\"></a>什么是WSL2</h4><p>WSL全称为Windows Subsystem for Linux，官网译为：适用于 Linux 的 Windows 子系统 (WSL)。</p>\n<p>官方文档直达：<a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/\">适用于 Linux 的 Windows 子系统文档 | Microsoft Docs</a></p>\n<span id=\"more\"></span>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/compare-versions\">WSL1和WSL2的比较</a>:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">功能</th>\n<th align=\"left\">WSL 1</th>\n<th align=\"left\">WSL 2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Windows 和 Linux 之间的集成</td>\n<td align=\"left\">✅</td>\n<td align=\"left\">✅</td>\n</tr>\n<tr>\n<td align=\"left\">启动时间短</td>\n<td align=\"left\">✅</td>\n<td align=\"left\">✅</td>\n</tr>\n<tr>\n<td align=\"left\">与传统虚拟机相比，占用的资源量少</td>\n<td align=\"left\">✅</td>\n<td align=\"left\">✅</td>\n</tr>\n<tr>\n<td align=\"left\">可以与当前版本的 VMware 和 VirtualBox 一起运行</td>\n<td align=\"left\">✅</td>\n<td align=\"left\">✅</td>\n</tr>\n<tr>\n<td align=\"left\">托管 VM</td>\n<td align=\"left\">❌</td>\n<td align=\"left\">✅</td>\n</tr>\n<tr>\n<td align=\"left\">完整的 Linux 内核</td>\n<td align=\"left\">❌</td>\n<td align=\"left\">✅</td>\n</tr>\n<tr>\n<td align=\"left\">完全的系统调用兼容性</td>\n<td align=\"left\">❌</td>\n<td align=\"left\">✅</td>\n</tr>\n<tr>\n<td align=\"left\">跨 OS 文件系统的性能</td>\n<td align=\"left\">✅</td>\n<td align=\"left\">❌</td>\n</tr>\n</tbody></table>\n<h4 id=\"为什么要WSL2\"><a href=\"#为什么要WSL2\" class=\"headerlink\" title=\"为什么要WSL2\"></a>为什么要WSL2</h4><p>官方解释：可让开发人员直接在 Windows 上按原样运行 GNU/Linux 环境（包括大多数命令行工具、实用工具和应用程序），且不会产生传统虚拟机或双启动设置开销。</p>\n<p>我的观点：日常生活中程序的开发离不开Linux，而Windows的GUI界面又是我们常用的（微信、Office等）。我们可以有很多种方式使用Linux，如：</p>\n<table>\n<thead>\n<tr>\n<th>方案</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单主机双系统</td>\n<td>能实实在的运行不同、完整的操作系统</td>\n<td>切换系统都需要重启，麻烦</td>\n</tr>\n<tr>\n<td>双主机双系统</td>\n<td>物理隔离方式，真正实现双系统</td>\n<td>真的有人那么有钱吗？开发程序用两台电脑？如果有，请问土豪缺朋友吗😁</td>\n</tr>\n<tr>\n<td>远程服务器</td>\n<td>和单主机双系统一样</td>\n<td>性能、带宽、流量有局限</td>\n</tr>\n<tr>\n<td>虚拟机VMware</td>\n<td>和单主机双系统一样</td>\n<td>资源消耗大、启动慢、运行效率低。我用过之后觉得有的时候卡死也不知道怎么弄。。</td>\n</tr>\n<tr>\n<td>WSL！！！</td>\n<td>几乎能运行完整的操作系统，资源消耗小、启动快、切换快</td>\n<td>有些软件可能不支持…（后续有什么毛病再更新）</td>\n</tr>\n</tbody></table>\n<p>重点：Windows与Linux子系统将共用同一文件系统!!!!  我们可以在WSL中使用三剑客命令查询分析windows文档、日志、使用shell命令或者bash脚本运行存储在windows中的linux程序、甚至在WSL中创建docker容器，在windows下使用docker desktop进行可视化管理。</p>\n<p>总结：<u><strong>WSL2让我们既拥有Windows的操作界面又拥有Linux的命令行工具。</strong></u></p>\n<h4 id=\"启用“虚拟机平台”\"><a href=\"#启用“虚拟机平台”\" class=\"headerlink\" title=\"启用“虚拟机平台”\"></a>启用“虚拟机平台”</h4><p>WSL 2 需要启用 Windows 10 的 “虚拟机平台” 特性。它独立于 Hyper-V，并提供了一些在 Linux 的 Windows 子系统新版本中可用的更有趣的平台集成。</p>\n<p>要在 <strong>Windows 10（2004）</strong>上启用虚拟机平台，请以管理员身份打开 PowerShell 或  cmd 并运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>\n\n<p>要在 <strong>Windows 10（1903，1909）</strong>上启用虚拟机平台，请以管理员身份打开 PowerShell或  cmd 并运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -NoRestart</span><br></pre></td></tr></table></figure>\n\n<p>为了确保所有相关部件都整齐到位，您应该在<strong>此时重启系统</strong>，否则可能会发现事情没按预期进行。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424002629616.png\" alt=\"image-20220424002629616\"></p>\n<h4 id=\"安装WSL2\"><a href=\"#安装WSL2\" class=\"headerlink\" title=\"安装WSL2\"></a>安装WSL2</h4><p>本次安装环境</p>\n<blockquote>\n<p>处理器      Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz   2.11 GHz<br>机带 RAM       8.00 GB (7.79 GB 可用)<br>系统类型       64 位操作系统, 基于 x64 的处理器<br>操作系统       Windows 10 家庭中文版</p>\n</blockquote>\n<p>注意：本次安装之前没安装过WSL和Ubuntu，只运行过VMware虚拟机。</p>\n<h5 id=\"检查是否可以安装\"><a href=\"#检查是否可以安装\" class=\"headerlink\" title=\"检查是否可以安装\"></a>检查是否可以安装</h5><p><a href=\"https://www.cnblogs.com/ittranslator/p/14128570.html\">您的电脑需要以下配置</a>：</p>\n<ul>\n<li>Windows 10 2020年5月(2004) 版, Windows 10 2019年5月(1903) 版，或者 Windows 10 2019年11月(1909) 版</li>\n<li>一台支持 Hyper-V 虚拟化的计算机</li>\n</ul>\n<p>查看是否支持Hyper-V的方法：</p>\n<ul>\n<li><p>打开cmd，输入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systeminfo</span><br></pre></td></tr></table></figure></li>\n<li><p>查看Hyper-V信息</p>\n<p>比如我的电脑就可以支持</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220423221854978.png\" alt=\"image-20220423221854978\"></p>\n</li>\n</ul>\n<h5 id=\"安装WSL\"><a href=\"#安装WSL\" class=\"headerlink\" title=\"安装WSL\"></a>安装WSL</h5><p>用管理员身份运行PowerShell</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl --install</span><br></pre></td></tr></table></figure>\n\n<p>–install 命令执行以下操作：</p>\n<ul>\n<li>启用可选的 WSL 和虚拟机平台组件</li>\n<li>下载并安装最新 Linux 内核</li>\n<li>将 WSL 2 设置为默认值</li>\n<li>下载并安装 Ubuntu Linux 发行版（<strong>可能需要重新启动</strong>）</li>\n</ul>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install\">注意</a>： 上述命令仅在完全未安装 WSL 时才有效，如果运行 <code>wsl --install</code> 并查看 WSL 帮助文本，请尝试运行 <code>wsl --list --online</code> 以查看可用发行版列表并运行 <code>wsl --install -d &lt;DistroName&gt;</code> 以安装发行版。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220423221123835.png\" alt=\"image-20220423221123835\"></p>\n<p>等待一会会，去打局游戏再回来….</p>\n<p>顺便查看了一下可以支持的linux系统，大便、Kali、OpenSUSE、乌班图都有，默认安装Ubuntu。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl --list --online</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220423223723552.png\" alt=\"image-20220423223723552\"></p>\n<hr>\n<p>安装了好一会儿了。。。。发现还是在85.7%，等不下去了<code>CTRL+C</code>了。</p>\n<p>重新安装，这次安装指定的系统</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl --install -d Ubuntu-20.04</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220423224013320.png\" alt=\"image-20220423224013320\"></p>\n<p>重启，然后成功了!</p>\n<hr>\n<h5 id=\"配置Linux\"><a href=\"#配置Linux\" class=\"headerlink\" title=\"配置Linux\"></a>配置Linux</h5><p>接下来打开已安装的Ubuntu，这时候会提示你配置用户和密码</p>\n<p>配置完毕！即可享用</p>\n<p>测试一下，用命令 <code>cd / &amp;&amp; ls -la</code> 查看所有文件，如下（是不是很熟悉）</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424000945772.png\" alt=\"image-20220424000945772\"></p>\n<p>更新一下镜像源：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n<p>将官方的源都注释掉，换成下面两个之一即可（我的是Ubuntu20.04，别的版本或者源可以自行网上搜）</p>\n<ul>\n<li>阿里源</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb https://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>清华源</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse </span><br></pre></td></tr></table></figure>\n\n<p>Debian系统分好几种，<code>wheezy</code>、<code>jessie</code>、<code>stretch</code>、<code>buster</code>，它们分别对应：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Debian版本</th>\n<th align=\"center\">对应名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Debian7</td>\n<td align=\"center\">wheezy</td>\n</tr>\n<tr>\n<td align=\"center\">Debian8</td>\n<td align=\"center\">jessie</td>\n</tr>\n<tr>\n<td align=\"center\">Debian9</td>\n<td align=\"center\">stretch</td>\n</tr>\n<tr>\n<td align=\"center\">Debian10</td>\n<td align=\"center\">buster</td>\n</tr>\n<tr>\n<td align=\"center\">Debian11</td>\n<td align=\"center\">bullseye</td>\n</tr>\n</tbody></table>\n<p>Debian 11（Bullseye）国内镜像源：</p>\n<ul>\n<li>阿里</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb https://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span><br><span class=\"line\">deb-src https://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span><br><span class=\"line\">deb https://mirrors.aliyun.com/debian-security/ bullseye-security main</span><br><span class=\"line\">deb-src https://mirrors.aliyun.com/debian-security/ bullseye-security main</span><br><span class=\"line\">deb https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span><br><span class=\"line\">deb-src https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span><br><span class=\"line\">deb https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span><br><span class=\"line\">deb-src https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>清华</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"遇到问题：\"><a href=\"#遇到问题：\" class=\"headerlink\" title=\"遇到问题：\"></a>遇到问题：</h5><p>Certificate verification failed: The certificate is NOT trusted——更新Ubuntu20.04、Debian11的过程中遇到的证书验证失败问题。</p>\n<p>解决办法：</p>\n<ol>\n<li>更改源文件，将所有的https改成http</li>\n</ol>\n  <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>重新更新源</li>\n</ol>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装/更新证书ca-certificates</li>\n</ol>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install --reinstall ca-certificates</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><p>参照步骤一将镜像源文件改回https</p>\n</li>\n<li><p>再次更新源</p>\n</li>\n</ol>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update &amp;&amp; sudo apt upgrade</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>大功告成</li>\n</ol>\n<h4 id=\"安装Windows-Terminal\"><a href=\"#安装Windows-Terminal\" class=\"headerlink\" title=\"安装Windows Terminal\"></a>安装Windows Terminal</h4><p>Windows Terminal能帮助我们管理命令行工具、PowerShell和WSL等Shell用户的工具，能为我们提供最佳的 WSL 体验。</p>\n<p>下载方式</p>\n<ul>\n<li><a href=\"https://www.microsoft.com/store/productId/9N0DX20HK701\">https://www.microsoft.com/store/productId/9N0DX20HK701</a></li>\n<li>MicroSoft Store （微软商店）找关键字 <code>Windows Terminal</code></li>\n</ul>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424115803757.png\" alt=\"image-20220424115803757\"></p>\n<p>下载安装即可。功能确实很多哈哈哈，效果：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/WindowsTerminal_HCukprnOs0.gif\" alt=\"WindowsTerminal_HCukprnOs0\"></p>\n<hr>\n<p>遇到的问题：过程中下载失败了好多次我不断点击重新下载才成功。</p>\n<h4 id=\"查看Linux版本信息\"><a href=\"#查看Linux版本信息\" class=\"headerlink\" title=\"查看Linux版本信息\"></a>查看Linux版本信息</h4><ol>\n<li><p><code>cat  /etc/os-release</code></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424132217753.png\" alt=\"image-20220424132217753\"> </p>\n</li>\n<li><p><code>cat  /proc/version</code></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424132605991.png\" alt=\"image-20220424132605991\"></p>\n</li>\n<li><p><code>uname -a</code></p>\n</li>\n<li><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424133412380.png\" alt=\"image-20220424133412380\"></p>\n</li>\n<li><p><code>lsb_release -a</code></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424133534249.png\" alt=\"image-20220424133534249\"></p>\n</li>\n<li><p><code>neofetch</code></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220502182008974.png\" alt=\"image-20220502182008974\"></p>\n</li>\n</ol>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>刚安装了还不知道怎么样，看网上的说法褒贬不一，我也在不断尝试，后续再更，说说感受。</p>\n<p>参考：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/224753478\">Winux之路-WSL 2的使用及填坑 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/\">适用于 Linux 的 Windows 子系统文档 | Microsoft Docs</a></p>\n","site":{"data":{}},"excerpt":"<p>记录一次安装WSL 2的过程…</p>\n<h4 id=\"什么是WSL2\"><a href=\"#什么是WSL2\" class=\"headerlink\" title=\"什么是WSL2\"></a>什么是WSL2</h4><p>WSL全称为Windows Subsystem for Linux，官网译为：适用于 Linux 的 Windows 子系统 (WSL)。</p>\n<p>官方文档直达：<a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/\">适用于 Linux 的 Windows 子系统文档 | Microsoft Docs</a></p>","more":"<p><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/compare-versions\">WSL1和WSL2的比较</a>:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">功能</th>\n<th align=\"left\">WSL 1</th>\n<th align=\"left\">WSL 2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Windows 和 Linux 之间的集成</td>\n<td align=\"left\">✅</td>\n<td align=\"left\">✅</td>\n</tr>\n<tr>\n<td align=\"left\">启动时间短</td>\n<td align=\"left\">✅</td>\n<td align=\"left\">✅</td>\n</tr>\n<tr>\n<td align=\"left\">与传统虚拟机相比，占用的资源量少</td>\n<td align=\"left\">✅</td>\n<td align=\"left\">✅</td>\n</tr>\n<tr>\n<td align=\"left\">可以与当前版本的 VMware 和 VirtualBox 一起运行</td>\n<td align=\"left\">✅</td>\n<td align=\"left\">✅</td>\n</tr>\n<tr>\n<td align=\"left\">托管 VM</td>\n<td align=\"left\">❌</td>\n<td align=\"left\">✅</td>\n</tr>\n<tr>\n<td align=\"left\">完整的 Linux 内核</td>\n<td align=\"left\">❌</td>\n<td align=\"left\">✅</td>\n</tr>\n<tr>\n<td align=\"left\">完全的系统调用兼容性</td>\n<td align=\"left\">❌</td>\n<td align=\"left\">✅</td>\n</tr>\n<tr>\n<td align=\"left\">跨 OS 文件系统的性能</td>\n<td align=\"left\">✅</td>\n<td align=\"left\">❌</td>\n</tr>\n</tbody></table>\n<h4 id=\"为什么要WSL2\"><a href=\"#为什么要WSL2\" class=\"headerlink\" title=\"为什么要WSL2\"></a>为什么要WSL2</h4><p>官方解释：可让开发人员直接在 Windows 上按原样运行 GNU/Linux 环境（包括大多数命令行工具、实用工具和应用程序），且不会产生传统虚拟机或双启动设置开销。</p>\n<p>我的观点：日常生活中程序的开发离不开Linux，而Windows的GUI界面又是我们常用的（微信、Office等）。我们可以有很多种方式使用Linux，如：</p>\n<table>\n<thead>\n<tr>\n<th>方案</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单主机双系统</td>\n<td>能实实在的运行不同、完整的操作系统</td>\n<td>切换系统都需要重启，麻烦</td>\n</tr>\n<tr>\n<td>双主机双系统</td>\n<td>物理隔离方式，真正实现双系统</td>\n<td>真的有人那么有钱吗？开发程序用两台电脑？如果有，请问土豪缺朋友吗😁</td>\n</tr>\n<tr>\n<td>远程服务器</td>\n<td>和单主机双系统一样</td>\n<td>性能、带宽、流量有局限</td>\n</tr>\n<tr>\n<td>虚拟机VMware</td>\n<td>和单主机双系统一样</td>\n<td>资源消耗大、启动慢、运行效率低。我用过之后觉得有的时候卡死也不知道怎么弄。。</td>\n</tr>\n<tr>\n<td>WSL！！！</td>\n<td>几乎能运行完整的操作系统，资源消耗小、启动快、切换快</td>\n<td>有些软件可能不支持…（后续有什么毛病再更新）</td>\n</tr>\n</tbody></table>\n<p>重点：Windows与Linux子系统将共用同一文件系统!!!!  我们可以在WSL中使用三剑客命令查询分析windows文档、日志、使用shell命令或者bash脚本运行存储在windows中的linux程序、甚至在WSL中创建docker容器，在windows下使用docker desktop进行可视化管理。</p>\n<p>总结：<u><strong>WSL2让我们既拥有Windows的操作界面又拥有Linux的命令行工具。</strong></u></p>\n<h4 id=\"启用“虚拟机平台”\"><a href=\"#启用“虚拟机平台”\" class=\"headerlink\" title=\"启用“虚拟机平台”\"></a>启用“虚拟机平台”</h4><p>WSL 2 需要启用 Windows 10 的 “虚拟机平台” 特性。它独立于 Hyper-V，并提供了一些在 Linux 的 Windows 子系统新版本中可用的更有趣的平台集成。</p>\n<p>要在 <strong>Windows 10（2004）</strong>上启用虚拟机平台，请以管理员身份打开 PowerShell 或  cmd 并运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>\n\n<p>要在 <strong>Windows 10（1903，1909）</strong>上启用虚拟机平台，请以管理员身份打开 PowerShell或  cmd 并运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -NoRestart</span><br></pre></td></tr></table></figure>\n\n<p>为了确保所有相关部件都整齐到位，您应该在<strong>此时重启系统</strong>，否则可能会发现事情没按预期进行。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424002629616.png\" alt=\"image-20220424002629616\"></p>\n<h4 id=\"安装WSL2\"><a href=\"#安装WSL2\" class=\"headerlink\" title=\"安装WSL2\"></a>安装WSL2</h4><p>本次安装环境</p>\n<blockquote>\n<p>处理器      Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz   2.11 GHz<br>机带 RAM       8.00 GB (7.79 GB 可用)<br>系统类型       64 位操作系统, 基于 x64 的处理器<br>操作系统       Windows 10 家庭中文版</p>\n</blockquote>\n<p>注意：本次安装之前没安装过WSL和Ubuntu，只运行过VMware虚拟机。</p>\n<h5 id=\"检查是否可以安装\"><a href=\"#检查是否可以安装\" class=\"headerlink\" title=\"检查是否可以安装\"></a>检查是否可以安装</h5><p><a href=\"https://www.cnblogs.com/ittranslator/p/14128570.html\">您的电脑需要以下配置</a>：</p>\n<ul>\n<li>Windows 10 2020年5月(2004) 版, Windows 10 2019年5月(1903) 版，或者 Windows 10 2019年11月(1909) 版</li>\n<li>一台支持 Hyper-V 虚拟化的计算机</li>\n</ul>\n<p>查看是否支持Hyper-V的方法：</p>\n<ul>\n<li><p>打开cmd，输入</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systeminfo</span><br></pre></td></tr></table></figure></li>\n<li><p>查看Hyper-V信息</p>\n<p>比如我的电脑就可以支持</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220423221854978.png\" alt=\"image-20220423221854978\"></p>\n</li>\n</ul>\n<h5 id=\"安装WSL\"><a href=\"#安装WSL\" class=\"headerlink\" title=\"安装WSL\"></a>安装WSL</h5><p>用管理员身份运行PowerShell</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl --install</span><br></pre></td></tr></table></figure>\n\n<p>–install 命令执行以下操作：</p>\n<ul>\n<li>启用可选的 WSL 和虚拟机平台组件</li>\n<li>下载并安装最新 Linux 内核</li>\n<li>将 WSL 2 设置为默认值</li>\n<li>下载并安装 Ubuntu Linux 发行版（<strong>可能需要重新启动</strong>）</li>\n</ul>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/install\">注意</a>： 上述命令仅在完全未安装 WSL 时才有效，如果运行 <code>wsl --install</code> 并查看 WSL 帮助文本，请尝试运行 <code>wsl --list --online</code> 以查看可用发行版列表并运行 <code>wsl --install -d &lt;DistroName&gt;</code> 以安装发行版。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220423221123835.png\" alt=\"image-20220423221123835\"></p>\n<p>等待一会会，去打局游戏再回来….</p>\n<p>顺便查看了一下可以支持的linux系统，大便、Kali、OpenSUSE、乌班图都有，默认安装Ubuntu。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl --list --online</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220423223723552.png\" alt=\"image-20220423223723552\"></p>\n<hr>\n<p>安装了好一会儿了。。。。发现还是在85.7%，等不下去了<code>CTRL+C</code>了。</p>\n<p>重新安装，这次安装指定的系统</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wsl --install -d Ubuntu-20.04</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220423224013320.png\" alt=\"image-20220423224013320\"></p>\n<p>重启，然后成功了!</p>\n<hr>\n<h5 id=\"配置Linux\"><a href=\"#配置Linux\" class=\"headerlink\" title=\"配置Linux\"></a>配置Linux</h5><p>接下来打开已安装的Ubuntu，这时候会提示你配置用户和密码</p>\n<p>配置完毕！即可享用</p>\n<p>测试一下，用命令 <code>cd / &amp;&amp; ls -la</code> 查看所有文件，如下（是不是很熟悉）</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424000945772.png\" alt=\"image-20220424000945772\"></p>\n<p>更新一下镜像源：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n<p>将官方的源都注释掉，换成下面两个之一即可（我的是Ubuntu20.04，别的版本或者源可以自行网上搜）</p>\n<ul>\n<li>阿里源</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb https://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>清华源</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse </span><br></pre></td></tr></table></figure>\n\n<p>Debian系统分好几种，<code>wheezy</code>、<code>jessie</code>、<code>stretch</code>、<code>buster</code>，它们分别对应：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Debian版本</th>\n<th align=\"center\">对应名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Debian7</td>\n<td align=\"center\">wheezy</td>\n</tr>\n<tr>\n<td align=\"center\">Debian8</td>\n<td align=\"center\">jessie</td>\n</tr>\n<tr>\n<td align=\"center\">Debian9</td>\n<td align=\"center\">stretch</td>\n</tr>\n<tr>\n<td align=\"center\">Debian10</td>\n<td align=\"center\">buster</td>\n</tr>\n<tr>\n<td align=\"center\">Debian11</td>\n<td align=\"center\">bullseye</td>\n</tr>\n</tbody></table>\n<p>Debian 11（Bullseye）国内镜像源：</p>\n<ul>\n<li>阿里</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb https://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span><br><span class=\"line\">deb-src https://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span><br><span class=\"line\">deb https://mirrors.aliyun.com/debian-security/ bullseye-security main</span><br><span class=\"line\">deb-src https://mirrors.aliyun.com/debian-security/ bullseye-security main</span><br><span class=\"line\">deb https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span><br><span class=\"line\">deb-src https://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span><br><span class=\"line\">deb https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span><br><span class=\"line\">deb-src https://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>清华</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye main contrib non-free</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-updates main contrib non-free</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ bullseye-backports main contrib non-free</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free</span><br><span class=\"line\">deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security bullseye-security main contrib non-free</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"遇到问题：\"><a href=\"#遇到问题：\" class=\"headerlink\" title=\"遇到问题：\"></a>遇到问题：</h5><p>Certificate verification failed: The certificate is NOT trusted——更新Ubuntu20.04、Debian11的过程中遇到的证书验证失败问题。</p>\n<p>解决办法：</p>\n<ol>\n<li>更改源文件，将所有的https改成http</li>\n</ol>\n  <figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>重新更新源</li>\n</ol>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>安装/更新证书ca-certificates</li>\n</ol>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install --reinstall ca-certificates</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><p>参照步骤一将镜像源文件改回https</p>\n</li>\n<li><p>再次更新源</p>\n</li>\n</ol>\n  <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update &amp;&amp; sudo apt upgrade</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>大功告成</li>\n</ol>\n<h4 id=\"安装Windows-Terminal\"><a href=\"#安装Windows-Terminal\" class=\"headerlink\" title=\"安装Windows Terminal\"></a>安装Windows Terminal</h4><p>Windows Terminal能帮助我们管理命令行工具、PowerShell和WSL等Shell用户的工具，能为我们提供最佳的 WSL 体验。</p>\n<p>下载方式</p>\n<ul>\n<li><a href=\"https://www.microsoft.com/store/productId/9N0DX20HK701\">https://www.microsoft.com/store/productId/9N0DX20HK701</a></li>\n<li>MicroSoft Store （微软商店）找关键字 <code>Windows Terminal</code></li>\n</ul>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424115803757.png\" alt=\"image-20220424115803757\"></p>\n<p>下载安装即可。功能确实很多哈哈哈，效果：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/WindowsTerminal_HCukprnOs0.gif\" alt=\"WindowsTerminal_HCukprnOs0\"></p>\n<hr>\n<p>遇到的问题：过程中下载失败了好多次我不断点击重新下载才成功。</p>\n<h4 id=\"查看Linux版本信息\"><a href=\"#查看Linux版本信息\" class=\"headerlink\" title=\"查看Linux版本信息\"></a>查看Linux版本信息</h4><ol>\n<li><p><code>cat  /etc/os-release</code></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424132217753.png\" alt=\"image-20220424132217753\"> </p>\n</li>\n<li><p><code>cat  /proc/version</code></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424132605991.png\" alt=\"image-20220424132605991\"></p>\n</li>\n<li><p><code>uname -a</code></p>\n</li>\n<li><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424133412380.png\" alt=\"image-20220424133412380\"></p>\n</li>\n<li><p><code>lsb_release -a</code></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220424133534249.png\" alt=\"image-20220424133534249\"></p>\n</li>\n<li><p><code>neofetch</code></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220502182008974.png\" alt=\"image-20220502182008974\"></p>\n</li>\n</ol>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>刚安装了还不知道怎么样，看网上的说法褒贬不一，我也在不断尝试，后续再更，说说感受。</p>\n<p>参考：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/224753478\">Winux之路-WSL 2的使用及填坑 - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/wsl/\">适用于 Linux 的 Windows 子系统文档 | Microsoft Docs</a></p>"},{"title":"安利几款Win10小软件","id":"1071","date":"2022-05-09T15:19:54.000Z","_content":"\n## 1、coodesk\n\n一款开源免费、轻便的桌面管理工具。有一键整理、分类功能，让桌面变得整洁。👉[官网下载链接](https://www.coodesker.com/downloads)\n\n整理后我的桌面：\n\n![image-20220509225456101](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509225456101.png)\n<!-- more -->\n![aQXsB07vmA](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/aQXsB07vmA.gif)\n\n盗用一张效果网图：（[原链](https://zhuanlan.zhihu.com/p/322595348)）\n\n![img](https://pic1.zhimg.com/v2-eefc5f0a61cafcacd5bf1a6ad5b85a80_b.webp)\n\n## 2、ShareX\n\n一款开源免费截屏+Gif工具，支持自定义、序号、马赛克、水印等等。\n\n官网下载：[ShareX - The best free and open source screenshot tool for Windows (getsharex.com)](https://getsharex.com/)\n\nGitHub下载：[Releases · ShareX/ShareX (github.com)](https://github.com/ShareX/ShareX/releases)\n\n效果图：\n\n![image-20220509225833017](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509225833017.png)\n\n开源项目地址：\n\n下载地址：\n\n## 3、Typora+Picgo\n\nMarkdown笔记神器+图床。在座应该比我知道的还多...不再赘述有需求再问\n\n关于typora的主题有一个小推荐：[evgo2017/typora-theme-orange-heart: A Typora Theme - 一个 Typora 主题 (github.com)](https://github.com/evgo2017/typora-theme-orange-heart)\n\n样式效果：![Typora_0mLuPLHphY](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/Typora_0mLuPLHphY.gif)\n\n## 4、TranslucentTB\n\nWin10透明桌面栏，有两种方法一个是MS store下载，\n\n![image-20220509230341736](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509230341736.png)\n\n一个是Github下载\n\n[Releases · TranslucentTB/TranslucentTB (github.com)](https://github.com/TranslucentTB/TranslucentTB/releases)\n\n效果图：\n\n![image-20220509224235748](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509224235748.png)\n\n![image-20220509225456101](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509225456101.png)\n\n## 5、drwio\n\n一款免费、功能多的作图工具，可以支持制作流程图、UML等多种图。还能在VScode中直接使用！\n\nwin10下载地址：[Download Draw.io for Windows - Free - 13.9.9 (digitaltrends.com)](https://downloads.digitaltrends.com/draw-io/windows)\n\n官网：[Flowchart Maker & Online Diagram Software (draw.io)](https://www.draw.io/index.html)\n\n![image-20220509230622037](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509230622037.png)\n\n## 6、sourcetree\n\n一款Git可视化管理工具，Mac也有，个人的一些Git服务以及树莓派搭建的gitea都是用这个来辅助管理的，很不错。\n\n官网及下载地址：[Sourcetree Free Git GUI for Mac and Windows (sourcetreeapp.com)](https://www.sourcetreeapp.com/)\n\n![image-20220509224703903](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509224703903.png)","source":"_posts/安利几款win10小软件.md","raw":"---\ntitle: 安利几款Win10小软件\ntags:\n  - 分享\nid: '1071'\ncategories:\n  - - 工具\n  - - 生活点滴\ndate: 2022-05-09 23:19:54\n---\n\n## 1、coodesk\n\n一款开源免费、轻便的桌面管理工具。有一键整理、分类功能，让桌面变得整洁。👉[官网下载链接](https://www.coodesker.com/downloads)\n\n整理后我的桌面：\n\n![image-20220509225456101](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509225456101.png)\n<!-- more -->\n![aQXsB07vmA](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/aQXsB07vmA.gif)\n\n盗用一张效果网图：（[原链](https://zhuanlan.zhihu.com/p/322595348)）\n\n![img](https://pic1.zhimg.com/v2-eefc5f0a61cafcacd5bf1a6ad5b85a80_b.webp)\n\n## 2、ShareX\n\n一款开源免费截屏+Gif工具，支持自定义、序号、马赛克、水印等等。\n\n官网下载：[ShareX - The best free and open source screenshot tool for Windows (getsharex.com)](https://getsharex.com/)\n\nGitHub下载：[Releases · ShareX/ShareX (github.com)](https://github.com/ShareX/ShareX/releases)\n\n效果图：\n\n![image-20220509225833017](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509225833017.png)\n\n开源项目地址：\n\n下载地址：\n\n## 3、Typora+Picgo\n\nMarkdown笔记神器+图床。在座应该比我知道的还多...不再赘述有需求再问\n\n关于typora的主题有一个小推荐：[evgo2017/typora-theme-orange-heart: A Typora Theme - 一个 Typora 主题 (github.com)](https://github.com/evgo2017/typora-theme-orange-heart)\n\n样式效果：![Typora_0mLuPLHphY](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/Typora_0mLuPLHphY.gif)\n\n## 4、TranslucentTB\n\nWin10透明桌面栏，有两种方法一个是MS store下载，\n\n![image-20220509230341736](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509230341736.png)\n\n一个是Github下载\n\n[Releases · TranslucentTB/TranslucentTB (github.com)](https://github.com/TranslucentTB/TranslucentTB/releases)\n\n效果图：\n\n![image-20220509224235748](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509224235748.png)\n\n![image-20220509225456101](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509225456101.png)\n\n## 5、drwio\n\n一款免费、功能多的作图工具，可以支持制作流程图、UML等多种图。还能在VScode中直接使用！\n\nwin10下载地址：[Download Draw.io for Windows - Free - 13.9.9 (digitaltrends.com)](https://downloads.digitaltrends.com/draw-io/windows)\n\n官网：[Flowchart Maker & Online Diagram Software (draw.io)](https://www.draw.io/index.html)\n\n![image-20220509230622037](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509230622037.png)\n\n## 6、sourcetree\n\n一款Git可视化管理工具，Mac也有，个人的一些Git服务以及树莓派搭建的gitea都是用这个来辅助管理的，很不错。\n\n官网及下载地址：[Sourcetree Free Git GUI for Mac and Windows (sourcetreeapp.com)](https://www.sourcetreeapp.com/)\n\n![image-20220509224703903](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509224703903.png)","slug":"安利几款win10小软件","published":1,"updated":"2024-03-12T10:42:31.000Z","_id":"cltnrar4t001pjry1a13z0qdw","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1、coodesk\"><a href=\"#1、coodesk\" class=\"headerlink\" title=\"1、coodesk\"></a>1、coodesk</h2><p>一款开源免费、轻便的桌面管理工具。有一键整理、分类功能，让桌面变得整洁。👉<a href=\"https://www.coodesker.com/downloads\">官网下载链接</a></p>\n<p>整理后我的桌面：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509225456101.png\" alt=\"image-20220509225456101\"></p>\n<span id=\"more\"></span>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/aQXsB07vmA.gif\" alt=\"aQXsB07vmA\"></p>\n<p>盗用一张效果网图：（<a href=\"https://zhuanlan.zhihu.com/p/322595348\">原链</a>）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-eefc5f0a61cafcacd5bf1a6ad5b85a80_b.webp\" alt=\"img\"></p>\n<h2 id=\"2、ShareX\"><a href=\"#2、ShareX\" class=\"headerlink\" title=\"2、ShareX\"></a>2、ShareX</h2><p>一款开源免费截屏+Gif工具，支持自定义、序号、马赛克、水印等等。</p>\n<p>官网下载：<a href=\"https://getsharex.com/\">ShareX - The best free and open source screenshot tool for Windows (getsharex.com)</a></p>\n<p>GitHub下载：<a href=\"https://github.com/ShareX/ShareX/releases\">Releases · ShareX/ShareX (github.com)</a></p>\n<p>效果图：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509225833017.png\" alt=\"image-20220509225833017\"></p>\n<p>开源项目地址：</p>\n<p>下载地址：</p>\n<h2 id=\"3、Typora-Picgo\"><a href=\"#3、Typora-Picgo\" class=\"headerlink\" title=\"3、Typora+Picgo\"></a>3、Typora+Picgo</h2><p>Markdown笔记神器+图床。在座应该比我知道的还多…不再赘述有需求再问</p>\n<p>关于typora的主题有一个小推荐：<a href=\"https://github.com/evgo2017/typora-theme-orange-heart\">evgo2017/typora-theme-orange-heart: A Typora Theme - 一个 Typora 主题 (github.com)</a></p>\n<p>样式效果：<img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/Typora_0mLuPLHphY.gif\" alt=\"Typora_0mLuPLHphY\"></p>\n<h2 id=\"4、TranslucentTB\"><a href=\"#4、TranslucentTB\" class=\"headerlink\" title=\"4、TranslucentTB\"></a>4、TranslucentTB</h2><p>Win10透明桌面栏，有两种方法一个是MS store下载，</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509230341736.png\" alt=\"image-20220509230341736\"></p>\n<p>一个是Github下载</p>\n<p><a href=\"https://github.com/TranslucentTB/TranslucentTB/releases\">Releases · TranslucentTB/TranslucentTB (github.com)</a></p>\n<p>效果图：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509224235748.png\" alt=\"image-20220509224235748\"></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509225456101.png\" alt=\"image-20220509225456101\"></p>\n<h2 id=\"5、drwio\"><a href=\"#5、drwio\" class=\"headerlink\" title=\"5、drwio\"></a>5、drwio</h2><p>一款免费、功能多的作图工具，可以支持制作流程图、UML等多种图。还能在VScode中直接使用！</p>\n<p>win10下载地址：<a href=\"https://downloads.digitaltrends.com/draw-io/windows\">Download Draw.io for Windows - Free - 13.9.9 (digitaltrends.com)</a></p>\n<p>官网：<a href=\"https://www.draw.io/index.html\">Flowchart Maker &amp; Online Diagram Software (draw.io)</a></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509230622037.png\" alt=\"image-20220509230622037\"></p>\n<h2 id=\"6、sourcetree\"><a href=\"#6、sourcetree\" class=\"headerlink\" title=\"6、sourcetree\"></a>6、sourcetree</h2><p>一款Git可视化管理工具，Mac也有，个人的一些Git服务以及树莓派搭建的gitea都是用这个来辅助管理的，很不错。</p>\n<p>官网及下载地址：<a href=\"https://www.sourcetreeapp.com/\">Sourcetree Free Git GUI for Mac and Windows (sourcetreeapp.com)</a></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509224703903.png\" alt=\"image-20220509224703903\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"1、coodesk\"><a href=\"#1、coodesk\" class=\"headerlink\" title=\"1、coodesk\"></a>1、coodesk</h2><p>一款开源免费、轻便的桌面管理工具。有一键整理、分类功能，让桌面变得整洁。👉<a href=\"https://www.coodesker.com/downloads\">官网下载链接</a></p>\n<p>整理后我的桌面：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509225456101.png\" alt=\"image-20220509225456101\"></p>","more":"<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/aQXsB07vmA.gif\" alt=\"aQXsB07vmA\"></p>\n<p>盗用一张效果网图：（<a href=\"https://zhuanlan.zhihu.com/p/322595348\">原链</a>）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-eefc5f0a61cafcacd5bf1a6ad5b85a80_b.webp\" alt=\"img\"></p>\n<h2 id=\"2、ShareX\"><a href=\"#2、ShareX\" class=\"headerlink\" title=\"2、ShareX\"></a>2、ShareX</h2><p>一款开源免费截屏+Gif工具，支持自定义、序号、马赛克、水印等等。</p>\n<p>官网下载：<a href=\"https://getsharex.com/\">ShareX - The best free and open source screenshot tool for Windows (getsharex.com)</a></p>\n<p>GitHub下载：<a href=\"https://github.com/ShareX/ShareX/releases\">Releases · ShareX/ShareX (github.com)</a></p>\n<p>效果图：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509225833017.png\" alt=\"image-20220509225833017\"></p>\n<p>开源项目地址：</p>\n<p>下载地址：</p>\n<h2 id=\"3、Typora-Picgo\"><a href=\"#3、Typora-Picgo\" class=\"headerlink\" title=\"3、Typora+Picgo\"></a>3、Typora+Picgo</h2><p>Markdown笔记神器+图床。在座应该比我知道的还多…不再赘述有需求再问</p>\n<p>关于typora的主题有一个小推荐：<a href=\"https://github.com/evgo2017/typora-theme-orange-heart\">evgo2017/typora-theme-orange-heart: A Typora Theme - 一个 Typora 主题 (github.com)</a></p>\n<p>样式效果：<img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/Typora_0mLuPLHphY.gif\" alt=\"Typora_0mLuPLHphY\"></p>\n<h2 id=\"4、TranslucentTB\"><a href=\"#4、TranslucentTB\" class=\"headerlink\" title=\"4、TranslucentTB\"></a>4、TranslucentTB</h2><p>Win10透明桌面栏，有两种方法一个是MS store下载，</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509230341736.png\" alt=\"image-20220509230341736\"></p>\n<p>一个是Github下载</p>\n<p><a href=\"https://github.com/TranslucentTB/TranslucentTB/releases\">Releases · TranslucentTB/TranslucentTB (github.com)</a></p>\n<p>效果图：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509224235748.png\" alt=\"image-20220509224235748\"></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509225456101.png\" alt=\"image-20220509225456101\"></p>\n<h2 id=\"5、drwio\"><a href=\"#5、drwio\" class=\"headerlink\" title=\"5、drwio\"></a>5、drwio</h2><p>一款免费、功能多的作图工具，可以支持制作流程图、UML等多种图。还能在VScode中直接使用！</p>\n<p>win10下载地址：<a href=\"https://downloads.digitaltrends.com/draw-io/windows\">Download Draw.io for Windows - Free - 13.9.9 (digitaltrends.com)</a></p>\n<p>官网：<a href=\"https://www.draw.io/index.html\">Flowchart Maker &amp; Online Diagram Software (draw.io)</a></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509230622037.png\" alt=\"image-20220509230622037\"></p>\n<h2 id=\"6、sourcetree\"><a href=\"#6、sourcetree\" class=\"headerlink\" title=\"6、sourcetree\"></a>6、sourcetree</h2><p>一款Git可视化管理工具，Mac也有，个人的一些Git服务以及树莓派搭建的gitea都是用这个来辅助管理的，很不错。</p>\n<p>官网及下载地址：<a href=\"https://www.sourcetreeapp.com/\">Sourcetree Free Git GUI for Mac and Windows (sourcetreeapp.com)</a></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220509224703903.png\" alt=\"image-20220509224703903\"></p>"},{"title":"常见HTTP状态码及简介","id":"1222","date":"2023-03-10T16:23:56.000Z","_content":"\n# HTTP状态码\n\n所有状态码的第一个数字代表了响应的五种状态之一（消息、成功、重定向、请求错误、服务器错误）。\n\n## 消息（1xx）\n\n这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。\n\n#### 100 Continue（继续）\n\n[客户端](https://baike.baidu.com/item/客户端)应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。\n\n## 成功（2xx）\n\n这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。\n\n#### 200 OK（成功）\n<!-- more -->\n请求已成功，请求所希望的响应头或数据体将随此响应返回。出现此状态码是表示正常状态。\n\n#### 204 No Content（没有内容）\n\n服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。\n\n如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。\n\n## 重定向（3xx）\n\n这一类型的状态码用来重定向，后续的请求地址（重定向目标）在本次响应的 Location 域中指明。\n\n#### 301 Moved Permanently（永久移除）\n\n被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。\n\n> 注意：对于某些使用 HTTP/1.0 协议的浏览器，当它们发送的 POST 请求得到了一个301响应的话，接下来的重定向请求将会变成 GET 方式。如果这不是一个 GET 或者 HEAD 请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。\n\n#### 302 Move Temporarily（暂时移动）\n\n请求的资源临时从不同的 URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。\n\n> 注意：同301\n\n#### 304 Not Modified（未修改）\n\n如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。\n\n## 请求错误（4xx）\n\n这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个 HEAD 请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。\n\n#### 400 Bad Request（错误请求）\n\n1.  语义有误，当前请求无法被服务器理解。\n2.  请求参数有误。\n\n#### 401 Unauthorized（未经授权）\n\n当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。\n\n#### 403 Forbidden（被禁止）\n\n服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。\n\n#### 404 Not Found（找不到）\n\n请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。出现这个错误的最有可能的原因是服务器端没有这个页面。\n\n#### 405 Method Not Allowed（不允许的方法）\n\n请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。\n\n鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。\n\n#### 408 Request Timeout（请求超时）\n\n请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。\n\n## 服务器错误（5xx）\n\n这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD 请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。\n\n#### 500 Internal Server Error（内部服务器错误）\n\n服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器端的源代码出现错误时出现。\n\n#### 502 Bad Gateway（错误的网关）\n\n作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。\n\n#### 503 Service Unavailable（服务不可用）\n\n由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。\n\n注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接。\n\n* * *\n\n**详细链接**\n\n[HTTP状态码401、404等代码的意思](https://zhuanlan.zhihu.com/p/270297661)","source":"_posts/常见http状态码及简介.md","raw":"---\ntitle: 常见HTTP状态码及简介\ntags:\n  - HTTP\n  - 计算机网络\nid: '1222'\ncategories:\n  - - 专业技术\n  - - 学习笔记\ndate: 2023-03-11 00:23:56\n---\n\n# HTTP状态码\n\n所有状态码的第一个数字代表了响应的五种状态之一（消息、成功、重定向、请求错误、服务器错误）。\n\n## 消息（1xx）\n\n这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。\n\n#### 100 Continue（继续）\n\n[客户端](https://baike.baidu.com/item/客户端)应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。\n\n## 成功（2xx）\n\n这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。\n\n#### 200 OK（成功）\n<!-- more -->\n请求已成功，请求所希望的响应头或数据体将随此响应返回。出现此状态码是表示正常状态。\n\n#### 204 No Content（没有内容）\n\n服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。\n\n如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。\n\n## 重定向（3xx）\n\n这一类型的状态码用来重定向，后续的请求地址（重定向目标）在本次响应的 Location 域中指明。\n\n#### 301 Moved Permanently（永久移除）\n\n被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。\n\n> 注意：对于某些使用 HTTP/1.0 协议的浏览器，当它们发送的 POST 请求得到了一个301响应的话，接下来的重定向请求将会变成 GET 方式。如果这不是一个 GET 或者 HEAD 请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。\n\n#### 302 Move Temporarily（暂时移动）\n\n请求的资源临时从不同的 URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。\n\n> 注意：同301\n\n#### 304 Not Modified（未修改）\n\n如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。\n\n## 请求错误（4xx）\n\n这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个 HEAD 请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。\n\n#### 400 Bad Request（错误请求）\n\n1.  语义有误，当前请求无法被服务器理解。\n2.  请求参数有误。\n\n#### 401 Unauthorized（未经授权）\n\n当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。\n\n#### 403 Forbidden（被禁止）\n\n服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。\n\n#### 404 Not Found（找不到）\n\n请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。出现这个错误的最有可能的原因是服务器端没有这个页面。\n\n#### 405 Method Not Allowed（不允许的方法）\n\n请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。\n\n鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。\n\n#### 408 Request Timeout（请求超时）\n\n请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。\n\n## 服务器错误（5xx）\n\n这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD 请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。\n\n#### 500 Internal Server Error（内部服务器错误）\n\n服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器端的源代码出现错误时出现。\n\n#### 502 Bad Gateway（错误的网关）\n\n作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。\n\n#### 503 Service Unavailable（服务不可用）\n\n由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。\n\n注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接。\n\n* * *\n\n**详细链接**\n\n[HTTP状态码401、404等代码的意思](https://zhuanlan.zhihu.com/p/270297661)","slug":"常见http状态码及简介","published":1,"updated":"2024-03-12T02:24:18.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltnrar4v001tjry1c7kdeeut","content":"<h1 id=\"HTTP状态码\"><a href=\"#HTTP状态码\" class=\"headerlink\" title=\"HTTP状态码\"></a>HTTP状态码</h1><p>所有状态码的第一个数字代表了响应的五种状态之一（消息、成功、重定向、请求错误、服务器错误）。</p>\n<h2 id=\"消息（1xx）\"><a href=\"#消息（1xx）\" class=\"headerlink\" title=\"消息（1xx）\"></a>消息（1xx）</h2><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。</p>\n<h4 id=\"100-Continue（继续）\"><a href=\"#100-Continue（继续）\" class=\"headerlink\" title=\"100 Continue（继续）\"></a>100 Continue（继续）</h4><p><a href=\"https://baike.baidu.com/item/%E5%AE%A2%E6%88%B7%E7%AB%AF\">客户端</a>应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。</p>\n<h2 id=\"成功（2xx）\"><a href=\"#成功（2xx）\" class=\"headerlink\" title=\"成功（2xx）\"></a>成功（2xx）</h2><p>这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。</p>\n<h4 id=\"200-OK（成功）\"><a href=\"#200-OK（成功）\" class=\"headerlink\" title=\"200 OK（成功）\"></a>200 OK（成功）</h4><span id=\"more\"></span>\n<p>请求已成功，请求所希望的响应头或数据体将随此响应返回。出现此状态码是表示正常状态。</p>\n<h4 id=\"204-No-Content（没有内容）\"><a href=\"#204-No-Content（没有内容）\" class=\"headerlink\" title=\"204 No Content（没有内容）\"></a>204 No Content（没有内容）</h4><p>服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。</p>\n<p>如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。</p>\n<h2 id=\"重定向（3xx）\"><a href=\"#重定向（3xx）\" class=\"headerlink\" title=\"重定向（3xx）\"></a>重定向（3xx）</h2><p>这一类型的状态码用来重定向，后续的请求地址（重定向目标）在本次响应的 Location 域中指明。</p>\n<h4 id=\"301-Moved-Permanently（永久移除）\"><a href=\"#301-Moved-Permanently（永久移除）\" class=\"headerlink\" title=\"301 Moved Permanently（永久移除）\"></a>301 Moved Permanently（永久移除）</h4><p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。</p>\n<blockquote>\n<p>注意：对于某些使用 HTTP/1.0 协议的浏览器，当它们发送的 POST 请求得到了一个301响应的话，接下来的重定向请求将会变成 GET 方式。如果这不是一个 GET 或者 HEAD 请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p>\n</blockquote>\n<h4 id=\"302-Move-Temporarily（暂时移动）\"><a href=\"#302-Move-Temporarily（暂时移动）\" class=\"headerlink\" title=\"302 Move Temporarily（暂时移动）\"></a>302 Move Temporarily（暂时移动）</h4><p>请求的资源临时从不同的 URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p>\n<blockquote>\n<p>注意：同301</p>\n</blockquote>\n<h4 id=\"304-Not-Modified（未修改）\"><a href=\"#304-Not-Modified（未修改）\" class=\"headerlink\" title=\"304 Not Modified（未修改）\"></a>304 Not Modified（未修改）</h4><p>如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。</p>\n<h2 id=\"请求错误（4xx）\"><a href=\"#请求错误（4xx）\" class=\"headerlink\" title=\"请求错误（4xx）\"></a>请求错误（4xx）</h2><p>这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个 HEAD 请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。</p>\n<h4 id=\"400-Bad-Request（错误请求）\"><a href=\"#400-Bad-Request（错误请求）\" class=\"headerlink\" title=\"400 Bad Request（错误请求）\"></a>400 Bad Request（错误请求）</h4><ol>\n<li> 语义有误，当前请求无法被服务器理解。</li>\n<li> 请求参数有误。</li>\n</ol>\n<h4 id=\"401-Unauthorized（未经授权）\"><a href=\"#401-Unauthorized（未经授权）\" class=\"headerlink\" title=\"401 Unauthorized（未经授权）\"></a>401 Unauthorized（未经授权）</h4><p>当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。</p>\n<h4 id=\"403-Forbidden（被禁止）\"><a href=\"#403-Forbidden（被禁止）\" class=\"headerlink\" title=\"403 Forbidden（被禁止）\"></a>403 Forbidden（被禁止）</h4><p>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</p>\n<h4 id=\"404-Not-Found（找不到）\"><a href=\"#404-Not-Found（找不到）\" class=\"headerlink\" title=\"404 Not Found（找不到）\"></a>404 Not Found（找不到）</h4><p>请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。出现这个错误的最有可能的原因是服务器端没有这个页面。</p>\n<h4 id=\"405-Method-Not-Allowed（不允许的方法）\"><a href=\"#405-Method-Not-Allowed（不允许的方法）\" class=\"headerlink\" title=\"405 Method Not Allowed（不允许的方法）\"></a>405 Method Not Allowed（不允许的方法）</h4><p>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。</p>\n<p>鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</p>\n<h4 id=\"408-Request-Timeout（请求超时）\"><a href=\"#408-Request-Timeout（请求超时）\" class=\"headerlink\" title=\"408 Request Timeout（请求超时）\"></a>408 Request Timeout（请求超时）</h4><p>请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</p>\n<h2 id=\"服务器错误（5xx）\"><a href=\"#服务器错误（5xx）\" class=\"headerlink\" title=\"服务器错误（5xx）\"></a>服务器错误（5xx）</h2><p>这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD 请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。</p>\n<h4 id=\"500-Internal-Server-Error（内部服务器错误）\"><a href=\"#500-Internal-Server-Error（内部服务器错误）\" class=\"headerlink\" title=\"500 Internal Server Error（内部服务器错误）\"></a>500 Internal Server Error（内部服务器错误）</h4><p>服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器端的源代码出现错误时出现。</p>\n<h4 id=\"502-Bad-Gateway（错误的网关）\"><a href=\"#502-Bad-Gateway（错误的网关）\" class=\"headerlink\" title=\"502 Bad Gateway（错误的网关）\"></a>502 Bad Gateway（错误的网关）</h4><p>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p>\n<h4 id=\"503-Service-Unavailable（服务不可用）\"><a href=\"#503-Service-Unavailable（服务不可用）\" class=\"headerlink\" title=\"503 Service Unavailable（服务不可用）\"></a>503 Service Unavailable（服务不可用）</h4><p>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。</p>\n<p>注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接。</p>\n<hr>\n<p><strong>详细链接</strong></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/270297661\">HTTP状态码401、404等代码的意思</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"HTTP状态码\"><a href=\"#HTTP状态码\" class=\"headerlink\" title=\"HTTP状态码\"></a>HTTP状态码</h1><p>所有状态码的第一个数字代表了响应的五种状态之一（消息、成功、重定向、请求错误、服务器错误）。</p>\n<h2 id=\"消息（1xx）\"><a href=\"#消息（1xx）\" class=\"headerlink\" title=\"消息（1xx）\"></a>消息（1xx）</h2><p>这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。</p>\n<h4 id=\"100-Continue（继续）\"><a href=\"#100-Continue（继续）\" class=\"headerlink\" title=\"100 Continue（继续）\"></a>100 Continue（继续）</h4><p><a href=\"https://baike.baidu.com/item/%E5%AE%A2%E6%88%B7%E7%AB%AF\">客户端</a>应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。</p>\n<h2 id=\"成功（2xx）\"><a href=\"#成功（2xx）\" class=\"headerlink\" title=\"成功（2xx）\"></a>成功（2xx）</h2><p>这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。</p>\n<h4 id=\"200-OK（成功）\"><a href=\"#200-OK（成功）\" class=\"headerlink\" title=\"200 OK（成功）\"></a>200 OK（成功）</h4>","more":"<p>请求已成功，请求所希望的响应头或数据体将随此响应返回。出现此状态码是表示正常状态。</p>\n<h4 id=\"204-No-Content（没有内容）\"><a href=\"#204-No-Content（没有内容）\" class=\"headerlink\" title=\"204 No Content（没有内容）\"></a>204 No Content（没有内容）</h4><p>服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。</p>\n<p>如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。</p>\n<h2 id=\"重定向（3xx）\"><a href=\"#重定向（3xx）\" class=\"headerlink\" title=\"重定向（3xx）\"></a>重定向（3xx）</h2><p>这一类型的状态码用来重定向，后续的请求地址（重定向目标）在本次响应的 Location 域中指明。</p>\n<h4 id=\"301-Moved-Permanently（永久移除）\"><a href=\"#301-Moved-Permanently（永久移除）\" class=\"headerlink\" title=\"301 Moved Permanently（永久移除）\"></a>301 Moved Permanently（永久移除）</h4><p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。</p>\n<blockquote>\n<p>注意：对于某些使用 HTTP/1.0 协议的浏览器，当它们发送的 POST 请求得到了一个301响应的话，接下来的重定向请求将会变成 GET 方式。如果这不是一个 GET 或者 HEAD 请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</p>\n</blockquote>\n<h4 id=\"302-Move-Temporarily（暂时移动）\"><a href=\"#302-Move-Temporarily（暂时移动）\" class=\"headerlink\" title=\"302 Move Temporarily（暂时移动）\"></a>302 Move Temporarily（暂时移动）</h4><p>请求的资源临时从不同的 URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。</p>\n<blockquote>\n<p>注意：同301</p>\n</blockquote>\n<h4 id=\"304-Not-Modified（未修改）\"><a href=\"#304-Not-Modified（未修改）\" class=\"headerlink\" title=\"304 Not Modified（未修改）\"></a>304 Not Modified（未修改）</h4><p>如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。</p>\n<h2 id=\"请求错误（4xx）\"><a href=\"#请求错误（4xx）\" class=\"headerlink\" title=\"请求错误（4xx）\"></a>请求错误（4xx）</h2><p>这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个 HEAD 请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。</p>\n<h4 id=\"400-Bad-Request（错误请求）\"><a href=\"#400-Bad-Request（错误请求）\" class=\"headerlink\" title=\"400 Bad Request（错误请求）\"></a>400 Bad Request（错误请求）</h4><ol>\n<li> 语义有误，当前请求无法被服务器理解。</li>\n<li> 请求参数有误。</li>\n</ol>\n<h4 id=\"401-Unauthorized（未经授权）\"><a href=\"#401-Unauthorized（未经授权）\" class=\"headerlink\" title=\"401 Unauthorized（未经授权）\"></a>401 Unauthorized（未经授权）</h4><p>当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。</p>\n<h4 id=\"403-Forbidden（被禁止）\"><a href=\"#403-Forbidden（被禁止）\" class=\"headerlink\" title=\"403 Forbidden（被禁止）\"></a>403 Forbidden（被禁止）</h4><p>服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</p>\n<h4 id=\"404-Not-Found（找不到）\"><a href=\"#404-Not-Found（找不到）\" class=\"headerlink\" title=\"404 Not Found（找不到）\"></a>404 Not Found（找不到）</h4><p>请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。出现这个错误的最有可能的原因是服务器端没有这个页面。</p>\n<h4 id=\"405-Method-Not-Allowed（不允许的方法）\"><a href=\"#405-Method-Not-Allowed（不允许的方法）\" class=\"headerlink\" title=\"405 Method Not Allowed（不允许的方法）\"></a>405 Method Not Allowed（不允许的方法）</h4><p>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。</p>\n<p>鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</p>\n<h4 id=\"408-Request-Timeout（请求超时）\"><a href=\"#408-Request-Timeout（请求超时）\" class=\"headerlink\" title=\"408 Request Timeout（请求超时）\"></a>408 Request Timeout（请求超时）</h4><p>请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</p>\n<h2 id=\"服务器错误（5xx）\"><a href=\"#服务器错误（5xx）\" class=\"headerlink\" title=\"服务器错误（5xx）\"></a>服务器错误（5xx）</h2><p>这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD 请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。</p>\n<h4 id=\"500-Internal-Server-Error（内部服务器错误）\"><a href=\"#500-Internal-Server-Error（内部服务器错误）\" class=\"headerlink\" title=\"500 Internal Server Error（内部服务器错误）\"></a>500 Internal Server Error（内部服务器错误）</h4><p>服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器端的源代码出现错误时出现。</p>\n<h4 id=\"502-Bad-Gateway（错误的网关）\"><a href=\"#502-Bad-Gateway（错误的网关）\" class=\"headerlink\" title=\"502 Bad Gateway（错误的网关）\"></a>502 Bad Gateway（错误的网关）</h4><p>作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</p>\n<h4 id=\"503-Service-Unavailable（服务不可用）\"><a href=\"#503-Service-Unavailable（服务不可用）\" class=\"headerlink\" title=\"503 Service Unavailable（服务不可用）\"></a>503 Service Unavailable（服务不可用）</h4><p>由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。</p>\n<p>注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接。</p>\n<hr>\n<p><strong>详细链接</strong></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/270297661\">HTTP状态码401、404等代码的意思</a></p>"},{"title":"建站成功了记录一下","id":"213","date":"2022-03-01T04:46:25.000Z","_content":"\n![](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E8%83%8C%E6%99%AF%E5%9B%BE/4k%E8%B6%85%E6%B8%85/site.jpg?x-oss-process=style/no_style)\n\n1、一开始花了两天多的时间来搭建LAMP的环境，（本想着宝塔面板会方便很多，没想到宝塔居然无法识别出我先前安装的AMP环境。。。）\n\n2、接着又在wordpress主题上面纠结了很久（本想着[sakurairo](https://github.com/mashirozx/Sakura)主题看起来不错，但是运行起来太耗时间了）\n\n3、接着就是找到了现在这个[Argon](https://solstice23.top/)主题（嗯不错，界面简洁清晰，而且至少现在来看不卡了。）\n<!-- more -->\n![](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E8%83%8C%E6%99%AF%E5%9B%BE/4k%E8%B6%85%E6%B8%85/site1.jpg?x-oss-process=style/no_style)\n\n4、接着就是一堆配置问题了（具体的就不说了...因为都忘记哪些bug了）\n\n5、不过在我可爱女朋友瑶瑶子的鼓励下，终于和完成了大部分了！\n\n6、接下来计划给自己网站添加一些样式和功能，比如导航栏那一块还没有图标、对于一些错误的操作和重复的点击导致网站负担加大也没进行限制，还有对于评论的筛查也要弄一下。\n\n嗯 就 这 样  \nEnd~\n<!-- more -->\n","source":"_posts/建站成功了记录一下.md","raw":"---\ntitle: 建站成功了记录一下\ntags: []\nid: '213'\ncategories:\n  - - 文章\n  - - 生活点滴\ndate: 2022-03-01 12:46:25\n---\n\n![](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E8%83%8C%E6%99%AF%E5%9B%BE/4k%E8%B6%85%E6%B8%85/site.jpg?x-oss-process=style/no_style)\n\n1、一开始花了两天多的时间来搭建LAMP的环境，（本想着宝塔面板会方便很多，没想到宝塔居然无法识别出我先前安装的AMP环境。。。）\n\n2、接着又在wordpress主题上面纠结了很久（本想着[sakurairo](https://github.com/mashirozx/Sakura)主题看起来不错，但是运行起来太耗时间了）\n\n3、接着就是找到了现在这个[Argon](https://solstice23.top/)主题（嗯不错，界面简洁清晰，而且至少现在来看不卡了。）\n<!-- more -->\n![](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E8%83%8C%E6%99%AF%E5%9B%BE/4k%E8%B6%85%E6%B8%85/site1.jpg?x-oss-process=style/no_style)\n\n4、接着就是一堆配置问题了（具体的就不说了...因为都忘记哪些bug了）\n\n5、不过在我可爱女朋友瑶瑶子的鼓励下，终于和完成了大部分了！\n\n6、接下来计划给自己网站添加一些样式和功能，比如导航栏那一块还没有图标、对于一些错误的操作和重复的点击导致网站负担加大也没进行限制，还有对于评论的筛查也要弄一下。\n\n嗯 就 这 样  \nEnd~\n<!-- more -->\n","slug":"建站成功了记录一下","published":1,"updated":"2024-03-12T10:42:45.144Z","_id":"cltnrar4x001xjry15hh21pcq","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E8%83%8C%E6%99%AF%E5%9B%BE/4k%E8%B6%85%E6%B8%85/site.jpg?x-oss-process=style/no_style\"></p>\n<p>1、一开始花了两天多的时间来搭建LAMP的环境，（本想着宝塔面板会方便很多，没想到宝塔居然无法识别出我先前安装的AMP环境。。。）</p>\n<p>2、接着又在wordpress主题上面纠结了很久（本想着<a href=\"https://github.com/mashirozx/Sakura\">sakurairo</a>主题看起来不错，但是运行起来太耗时间了）</p>\n<p>3、接着就是找到了现在这个<a href=\"https://solstice23.top/\">Argon</a>主题（嗯不错，界面简洁清晰，而且至少现在来看不卡了。）</p>\n<span id=\"more\"></span>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E8%83%8C%E6%99%AF%E5%9B%BE/4k%E8%B6%85%E6%B8%85/site1.jpg?x-oss-process=style/no_style\"></p>\n<p>4、接着就是一堆配置问题了（具体的就不说了…因为都忘记哪些bug了）</p>\n<p>5、不过在我可爱女朋友瑶瑶子的鼓励下，终于和完成了大部分了！</p>\n<p>6、接下来计划给自己网站添加一些样式和功能，比如导航栏那一块还没有图标、对于一些错误的操作和重复的点击导致网站负担加大也没进行限制，还有对于评论的筛查也要弄一下。</p>\n<p>嗯 就 这 样<br>End~</p>\n<!-- more -->\n","site":{"data":{}},"excerpt":"<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E8%83%8C%E6%99%AF%E5%9B%BE/4k%E8%B6%85%E6%B8%85/site.jpg?x-oss-process=style/no_style\"></p>\n<p>1、一开始花了两天多的时间来搭建LAMP的环境，（本想着宝塔面板会方便很多，没想到宝塔居然无法识别出我先前安装的AMP环境。。。）</p>\n<p>2、接着又在wordpress主题上面纠结了很久（本想着<a href=\"https://github.com/mashirozx/Sakura\">sakurairo</a>主题看起来不错，但是运行起来太耗时间了）</p>\n<p>3、接着就是找到了现在这个<a href=\"https://solstice23.top/\">Argon</a>主题（嗯不错，界面简洁清晰，而且至少现在来看不卡了。）</p>","more":"<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E8%83%8C%E6%99%AF%E5%9B%BE/4k%E8%B6%85%E6%B8%85/site1.jpg?x-oss-process=style/no_style\"></p>\n<p>4、接着就是一堆配置问题了（具体的就不说了…因为都忘记哪些bug了）</p>\n<p>5、不过在我可爱女朋友瑶瑶子的鼓励下，终于和完成了大部分了！</p>\n<p>6、接下来计划给自己网站添加一些样式和功能，比如导航栏那一块还没有图标、对于一些错误的操作和重复的点击导致网站负担加大也没进行限制，还有对于评论的筛查也要弄一下。</p>\n<p>嗯 就 这 样<br>End~</p>\n<!-- more -->"},{"title":"小网页开发","id":"1177","date":"2022-11-12T07:45:40.000Z","_content":"\n开发了一个小网页，用于展示Bing每日一图，大伙过来瞧瞧嘿嘿(〃∀〃)，有什么不足之处欢迎[留言](https://wangwangyz.site/messageboard)指正吖(◡‿◡)\n\n源码：[https://github.com/InvalidSyntaxxx/CodeCollection/tree/main/%E5%89%8D%E7%AB%AF/Web%E6%99%BA%E8%83%BD%E7%BC%96%E7%A8%8B/mid-term](https://github.com/InvalidSyntaxxx/CodeCollection/tree/main/%E5%89%8D%E7%AB%AF/Web%E6%99%BA%E8%83%BD%E7%BC%96%E7%A8%8B/mid-term)\n\n各位喜欢的话可以自取，不过是`原生HTML`+`比较久远的技术`...\n\n#### 效果图\n\n![image-20221112153649596](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221112153649596.png)\n<!-- more -->\n#### 食用方式\n\n1.  PC\n    \n    ![image-20221112154053207](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221112154053207.png)\n    \n    首先要确认是掉发收集站哦！，然后鼠标移到`说说/随想录`一栏，再点击`摄影展`(瞎起的名哈哈哈)，就可以啦！\n    \n2.  移动端\n    \n    ![image-20221112154432413](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221112154432413.png)\n    \n    和PC一样，不过需要点击右上角的搜索图标，然后点击`说说/随想录`就看到`摄影展`啦！\n    \n    #### 结语\n    \n    想不到说什么哈哈，因为目前还在开发中...，并不是最终效果 ———— 2022年11月12日15点50分","source":"_posts/摄影展-小网页开发.md","raw":"---\ntitle: 小网页开发\ntags:\n  - html\n  - Javascript\n  - Python\n  - 分享\nid: '1177'\ncategories:\n  - - 学习笔记\ndate: 2022-11-12 15:45:40\n---\n\n开发了一个小网页，用于展示Bing每日一图，大伙过来瞧瞧嘿嘿(〃∀〃)，有什么不足之处欢迎[留言](https://wangwangyz.site/messageboard)指正吖(◡‿◡)\n\n源码：[https://github.com/InvalidSyntaxxx/CodeCollection/tree/main/%E5%89%8D%E7%AB%AF/Web%E6%99%BA%E8%83%BD%E7%BC%96%E7%A8%8B/mid-term](https://github.com/InvalidSyntaxxx/CodeCollection/tree/main/%E5%89%8D%E7%AB%AF/Web%E6%99%BA%E8%83%BD%E7%BC%96%E7%A8%8B/mid-term)\n\n各位喜欢的话可以自取，不过是`原生HTML`+`比较久远的技术`...\n\n#### 效果图\n\n![image-20221112153649596](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221112153649596.png)\n<!-- more -->\n#### 食用方式\n\n1.  PC\n    \n    ![image-20221112154053207](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221112154053207.png)\n    \n    首先要确认是掉发收集站哦！，然后鼠标移到`说说/随想录`一栏，再点击`摄影展`(瞎起的名哈哈哈)，就可以啦！\n    \n2.  移动端\n    \n    ![image-20221112154432413](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221112154432413.png)\n    \n    和PC一样，不过需要点击右上角的搜索图标，然后点击`说说/随想录`就看到`摄影展`啦！\n    \n    #### 结语\n    \n    想不到说什么哈哈，因为目前还在开发中...，并不是最终效果 ———— 2022年11月12日15点50分","slug":"摄影展-小网页开发","published":1,"updated":"2024-03-12T10:42:56.644Z","_id":"cltnrar4y0020jry13k0y1r6k","comments":1,"layout":"post","photos":[],"link":"","content":"<p>开发了一个小网页，用于展示Bing每日一图，大伙过来瞧瞧嘿嘿(〃∀〃)，有什么不足之处欢迎<a href=\"https://wangwangyz.site/messageboard\">留言</a>指正吖(◡‿◡)</p>\n<p>源码：<a href=\"https://github.com/InvalidSyntaxxx/CodeCollection/tree/main/%E5%89%8D%E7%AB%AF/Web%E6%99%BA%E8%83%BD%E7%BC%96%E7%A8%8B/mid-term\">https://github.com/InvalidSyntaxxx/CodeCollection/tree/main/%E5%89%8D%E7%AB%AF/Web%E6%99%BA%E8%83%BD%E7%BC%96%E7%A8%8B/mid-term</a></p>\n<p>各位喜欢的话可以自取，不过是<code>原生HTML</code>+<code>比较久远的技术</code>…</p>\n<h4 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221112153649596.png\" alt=\"image-20221112153649596\"></p>\n<span id=\"more\"></span>\n<h4 id=\"食用方式\"><a href=\"#食用方式\" class=\"headerlink\" title=\"食用方式\"></a>食用方式</h4><ol>\n<li>PC <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221112154053207.png\" alt=\"image-20221112154053207\"> 首先要确认是掉发收集站哦！，然后鼠标移到<code>说说/随想录</code>一栏，再点击<code>摄影展</code>(瞎起的名哈哈哈)，就可以啦！</li>\n<li>移动端 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221112154432413.png\" alt=\"image-20221112154432413\"> 和PC一样，不过需要点击右上角的搜索图标，然后点击<code>说说/随想录</code>就看到<code>摄影展</code>啦！<h4 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h4> 想不到说什么哈哈，因为目前还在开发中…，并不是最终效果 ———— 2022年11月12日15点50分</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>开发了一个小网页，用于展示Bing每日一图，大伙过来瞧瞧嘿嘿(〃∀〃)，有什么不足之处欢迎<a href=\"https://wangwangyz.site/messageboard\">留言</a>指正吖(◡‿◡)</p>\n<p>源码：<a href=\"https://github.com/InvalidSyntaxxx/CodeCollection/tree/main/%E5%89%8D%E7%AB%AF/Web%E6%99%BA%E8%83%BD%E7%BC%96%E7%A8%8B/mid-term\">https://github.com/InvalidSyntaxxx/CodeCollection/tree/main/%E5%89%8D%E7%AB%AF/Web%E6%99%BA%E8%83%BD%E7%BC%96%E7%A8%8B/mid-term</a></p>\n<p>各位喜欢的话可以自取，不过是<code>原生HTML</code>+<code>比较久远的技术</code>…</p>\n<h4 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221112153649596.png\" alt=\"image-20221112153649596\"></p>","more":"<h4 id=\"食用方式\"><a href=\"#食用方式\" class=\"headerlink\" title=\"食用方式\"></a>食用方式</h4><ol>\n<li>PC <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221112154053207.png\" alt=\"image-20221112154053207\"> 首先要确认是掉发收集站哦！，然后鼠标移到<code>说说/随想录</code>一栏，再点击<code>摄影展</code>(瞎起的名哈哈哈)，就可以啦！</li>\n<li>移动端 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221112154432413.png\" alt=\"image-20221112154432413\"> 和PC一样，不过需要点击右上角的搜索图标，然后点击<code>说说/随想录</code>就看到<code>摄影展</code>啦！<h4 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h4> 想不到说什么哈哈，因为目前还在开发中…，并不是最终效果 ———— 2022年11月12日15点50分</li>\n</ol>"},{"title":"操作系统学习笔记（一）","id":"549","date":"2022-03-08T15:25:25.000Z","_content":"\n## 进程\n\n### 进程管理\n\n#### 什么是进程\n\n进程是\n\n进程(Process)包括 `程序的代码` 、`程序的数据`、`指示下一条运行的指令`、`一组通用寄存器的当前值`、 `一组系统资源`。\n\n进程特征包括 `结构特征`、 `动态性`、 `并发性`、`独立性`、 `异步性`\n\n进程三种基本状态： `就绪状态`、`执行状态`、`阻塞状态`\n\n（有的为五种：最前为 `新建态`、最后为 `终止态`）\n<!-- more -->\n进程状态转换关系\n\n![进程状态转换关系](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%85%B3%E7%B3%BB.png)\n\n挂起状态(基本状态之外): 进程被从内存调出进驻外存，不再接受调度。\n\nPCB\\[^PCB\\]: PCB中记录了操作系统所需的，用于描述进程的当前情况以及控制进程运行的全部信息。**PCB是进程存在的唯一标志**。\n\n上下文切换: 将CPU切换到另一进程需要保存原来进程的状态并装入新进程的保存状态。上下文切换时间与硬件支持密切相关。\n\n#### 进程控制\n\n*   进程创建：在一个已经存在的进程（用户进程或系统进程）当中，通过系统调用来创建一个新的进程。\n    \n    ![进程创建](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA.png)\n    \n*   创建步骤：1、申请空白PCB 2、新进程分配资源 3、初始化PCB 4、进程插入就绪状态\n    \n*   进程终止\n    \n    ![进程终止](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E8%BF%9B%E7%A8%8B%E7%BB%88%E6%AD%A2.png)\n    \n*   进程阻塞与唤醒\n    \n    原因：`请求系统服务`、`新数据尚未到达`、`无进程新任务`\n    \n    阻塞过程：调用 `阻塞原语block` 把自己阻塞、将PCB插入阻塞队列、重新调度。\n    \n    唤醒过程：阻塞队列移出阻塞进程、PCB从阻塞改为就绪、PCB插入就绪队列。\n    \n*   进程挂起与激活\n    \n    挂起过程：修改进程状态、PCB复制到指定内存块、（如有必要转调度程序）。\n    \n    激活状态：进程调入内存、修改进程状态、（如抢占调度考虑是否执行）\n    \n\n#### 进程同步\n\n*   进程通信\\[^IPC\\]\n    \n*   临界区和临界资源\n    \n    进程的工作分为两类：1、内部计算 2、对共享内存或共享文件的访问（竞争条件的产生）\n    \n    完成第二类工作的程序片段就是 `临界区`， 需要互斥访问的共享资源就是 `临界资源` 。\n    \n*   整形信号量：Dijkstra提出：把整形信号量定义为一个整形量，除初始化外，仅能通过两个标准的 `原子操作` (Atomic Operation) `wait(S)`和 `signal(S)`来访问。分别称为P、V操作。\n    \n    ```C\n    //P原语操作的定义\n    procedure wait(S)\n      var S:semaphore;\n    begin\n      S.value:=S.value-1;\n      if S.value<0 then\n          block(S,L)\n    end\n    ```\n    \n    ![P原语操作的定义](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/P%E5%8E%9F%E8%AF%AD%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9A%E4%B9%89.png)\n    \n    ```c\n    //V原语操作的定义\n    procedure signal(S)\n      var S:semaphore;\n    begin\n      S.value:=S.value+1;\n      if S.value<=0 then\n          wakeup(S,L);\n    end\n    ```\n    \n    ![V原语操作的定义](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/V%E5%8E%9F%E8%AF%AD%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9A%E4%B9%89.png)\n    \n*   记录型信号量\n    \n    信号量被描述为一个记录(或者结构)\n    \n    ![信号量被描述为一个记录](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E4%BF%A1%E5%8F%B7%E9%87%8F%E8%A2%AB%E6%8F%8F%E8%BF%B0%E4%B8%BA%E4%B8%80%E4%B8%AA%E8%AE%B0%E5%BD%95.png)\n    \n    S.value的处置表示为系统中某类资源的数目，因此也称资源信号量。每次wait操作进程请求该一个单位的该类资源；当S.value<0时，进程调用block原语自我阻塞，并插入信号量链表S.L中。\n    \n*   AND型信号量\n    \n    一次性将进程所需所有资源分配到进程里，待使用完释放(避免死锁)\n    \n*   利用信号量实现进程互斥\n    \n    n个进程互斥地使用某个临界资源是，设定信号量`mutex` 用于互斥访问，初始化为1。\n    \n    ![信号量实现进程互斥](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5.png)\n    \n    进程互斥还可能出现死锁\n    \n*   同步与互斥的混合问题\n    \n    有一个仓库，可以存放A和B 两种产品。要求：1)每次只能存入一种产品(A或B)；2)-N<A产品数量-B产品数量<M。试用PV操作描述产品A与产品B的入库过程。\n    \n    ![同步与互斥的混合问题](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5%E7%9A%84%E6%B7%B7%E5%90%88%E9%97%AE%E9%A2%98.png)\n    \n\n#### 经典IPC问题\n\n*   主要问题：如何选择信号量, 如何安排P、V原语的顺序。\n    \n    生产者-消费者问题、哲学家进餐问题、读者-写者问题、理发师问题、和尚喝水问题。\n    \n\n信号量方法的缺点：\n\n*   逻辑关系复杂，可读性差、维护困难、容易导致竞争状态或者死锁严重问题。\n\n#### 管程\n\n由Hoare和Hansen提出，基本思想：`将共享变量以及对共享变量所进行的操作封装在一个模块中`。\n\n*   结构\n    \n    由一组变量、数据结构和函数构成的软件模块。\n    \n    ![管程 ](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E7%AE%A1%E7%A8%8B%20.png)\n    \n*   特性\n    \n    封装性、互斥性、语言相关性\n    \n*   等待与唤醒\n    \n    条件变量\\[^条件变量\\] 用于描述等待的原因，通过 `wait` 和 `signal` 操作条件变量。`wait` 和 `signal` 类似P、V原语，但条件变量不取具体数值，不进行累加。\n    \n*   send 和 receive\n    \n    ```C\n    send(target,&msg)//将消息msg发送到目标(进程)target中\n    receive(src,&msg)//接收src传来的msg,如果无消息可用，阻塞接受者\n    ```\n    \n    有可能面临`ACK` \\[^ACK\\]丢失问题\n    \n\n### 进程高级通信\n\n#### 线程\n\n*   线程与进程\n    \n    进程=资源平台+线程\n    \n    *   一个进程中可以同时存在多个线程;\n    *   各个线程之间可以并发地执行;\n    *   各个线程之间可以共享地址空间。\n    \n    进程是资源分配单位，线程是CPU调度单位；线程可实现进程级的并发。\n    \n    单线程与多线程的关系图：\n    \n    ![单线程与多线程的关系图](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%8D%95%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%85%B3%E7%B3%BB%E5%9B%BE.png)\n    \n*   用户线程\n    \n    在用户空间实现，不依赖操作系统的内核。\n    \n    ![用户线程](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B.png)\n    \n*   内核线程\n    \n    ![内核线程](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B.png)\n    \n    由内核来维护进程和线程的上下文信息（PCB\\[^PCB\\]和TCB\\[^TCB\\]）。线程的创建、终止和切换都是通过系统调用的方式来进行，需要从用户态转换到系统态，由内核来完成，系统开销较大。\n    \n\n### 用户态和内核态\n\n两种CPU状态：内核态（Kernel Mode，运行操作系统程序）、用户态（User Mode，运行用户程序 ）\n\n#### 指令划分\n\n特权指令：只能由操作系统使用、用户程序不能使用的指令。 举例：启动I/O 内存清零 修改程序状态字 设置时钟 允许/禁止终端 停机\n\n非特权指令：用户程序可以使用的指令。 举例：控制转移 算数运算 取数指令 访管指令（使用户程序从用户态陷入内核态）\n\n#### 特权级别\n\n特权环：R0、R1、R2和R3\n\nR0相当于内核态，R3相当于用户态；\n\n不同级别能够运行不同的指令集合；\n\n#### CPU状态之间的转换\n\n**用户态 ->内核态：**唯一途径是通过中断、异常、陷入机制（访管指令）\n\n**内核态 ->用户态：**设置程序状态字PSW\n\n#### 内核态与用户态的区别\n\n内核态与用户态是操作系统的两种运行级别，当程序运行在3级特权级上时，就可以称之为运行在用户态。因为这是最低特权级，是普通的用户进程运行的特权级，大部分用户直接面对的程序都是运行在用户态；当程序运行在0级特权级上时，就可以称之为运行在内核态。\n\n运行在用户态下的程序不能直接访问操作系统内核数据结构和程序。当我们在系统中执行一个程序时，大部分时间是运行在用户态下的，在其需要操作系统帮助完成某些它没有权力和能力完成的工作时就会切换到内核态。\n\n这两种状态的主要差别是：处于用户态执行时，进程所能访问的内存空间和对象受到限制，其所处于占有的处理机是可被抢占的 ；而处于核心态执行中的进程，则能访问所有的内存空间和对象，且所占有的处理机是不允许被抢占的\n\n### 并发和并行\n\n#### 并发\n\nConcurrent，在操作系统中，一个时间段里有几个程序都处于已启动运行到运行完成之间，且这几个程序在同一个处理机上完成。\n\n#### 并行\n\nParallel，当系统有一个以上CPU时，一个CPU执行一个进程，另一个CPU可以执行另一个进程，两个进程互不抢夺CPU资源，可以同时进行。\n\n### 课后作业\n\n1.  ##### 操作系统的四个特征是什么？分别是什么含义？\n    \n\n*   答：1、并发：两个或者多个事件在同一时间间隔内发生；2、共享：系统内资源可供多个并发进程共同使用；3、异步：进程以不可预知的速度向前推进；4、虚拟：通过某种技术把一个物理实体变成若干个逻辑上的对应物。\n\n2.  ##### 什么是操作系统内核？内核的主要功能是什么？\n    \n\n*   答：内核是操作系统最基本部分。主要功能是为众多应用程序提供对计算机硬件的安全访问。\n\n3.  ##### 什么是系统调用？系统调用与一般程序有什么不同？\n    \n\n*   答：系统调用是操作系统内核和用户运行程序之间的接口。不同：`运行的状态不同`，在程序中的过程一般或都是用户程序，或都是系统程序，都是运行在同一个系统状态的（用户态或内核态）。`进入的方式不同`，一般程序可以直接由调用过程直接转换到被调用过程，而系统调用则不允许，只能通过一条能产生异常的机器指令（\"自陷指令\"或叫\"访管指令\"）进入操作系统，再转到相应的应用处理程序。`返回的方式不同`。`代码层次不同`，一般程序是用户级程序，而系统调用是操作系统的代码程序，是系统级程序。[^1]([操作系统中系统调用和一般过程的区别_百度知道 \"baidu.com)](https://zhidao.baidu.com/question/436653622.html\")\n\n4.  ##### 什么是进程，为什么OS要引入进程?\n    \n\n*   答：进程是一个**具有一定独立功能的程序在一个数据集上的一次动态执行的过程**；引入进程是为了提高计算机资源的利用率。\n\n5.  ##### 进程的基本状态有哪些？会由什么事件导致进程状态的转化？\n    \n\n*   答：就绪(Ready)状态、执行(Running)状态、阻塞(Block)状态。等待I/O的结果、等待某一进程提供输入、运行进程用完时间片、高优先级进中断低优先级线程、调度程序选择新进程运行、等待事件发生。\n\n6.  ##### 什么是临界资源？什么是临界区？\n    \n\n*   答：需要互斥访问的共享资源为临界资源。完成对共享内存和共享资源的访问工作叫做临界区。\n\n7.  ##### 什么是忙等？它有什么缺点？\n    \n\n*   答：一个进程位于其临界区内时，任何试图进入其临界区的进程都必须在其进入代码中持续地循环。容易造成资源利用率低，系统阻塞。\n\n8.  ##### m个共享进程共享一个临界资源，问信号量的变化范围。\n    \n\n*   答：信号量初始值为1，每进行一次P操作则其值减1，每进行一次V操作则其值加1，当有一个进程获得资源，其他m–1个进程在等待队列中时，其值为-(m-1)\n\n9.  什么是进程的同步？它包含哪两种形式？什么是临界资源、临界区？\n\n*   答：进程的同步是指：在多道程序环境下，进程是并发执行的，不同进程之间具有不同的互相制约条件。两种形式：`同步代码块`(被同步关键字封装的代码) 、`同步函数`(被同步关键字修饰的函数)。\n\n9.  男女生共同使用公共洗澡间。规则是：洗澡间门上有可以翻的牌子，牌子分别为“无人”、“男”“女”。若来洗澡的同学发现牌子显示为“无人”，则可以把牌子翻成和自己一样的性别，然后入室洗澡。若来洗澡的同学发现牌子和自己的性别相同，可以直接入室洗澡。若来洗澡的同学发现牌子和自己的性别不同，则须在室外等待。最后一个洗澡的同学离开洗澡间时需要将牌子翻成“无人”。请使用信号量和PV操作，设计男生和女生的同步机制。\n\n*   答：\n    \n    ```c\n    //空闲资源数\n    semaph mutex=1;\n    //占用浴室男生数，占用浴室女生数\n    int S_man=0,S_women=0;\n    //等待的男生数,等待的女生数\n    int man_wait = 0,women_wait = 0;\n    \n    //男生想要进入浴室\n    void man_want_entry(){\n      if(S_women==0){\n         P(mutex);\n         S_man++;\n         洗澡...\n         man_leave_bathroom();\n      }else{\n          man_wait++;\n      }\n    }\n    \n    //男生离开浴室\n    void man_leave_bathroom(){\n      S_man--;\n      V(mutex);\n    }\n    \n    //女生想要进入浴室\n    void woman_want_entry(){\n      P(mutex);\n      if\n    }\n    ```\n    \n\n9.  某机房有N台电脑。门口有一个刷卡机。学生上机时，必须在刷卡机上刷卡登录，下机时也必须在刷卡机上刷卡结算费用。请用信号量方法给来上机的同学设计同步机制。\n    \n10.  线程是什么？线程主要包含什么内容？内核级线程和用户级线程是什么？\n    \n    答：线程是操作系统能够进行运算调度的最小单位。主要包含线程ID、程序计数器、寄存器组合堆栈。内核级线程是由内核管理的线程。用户级线程是指不需要内核支持而在用户程序中实现的线程。\n    \n\n## 处理机调度和死锁\n\n### 处理机调度的基本概念\n\n处理 一个CPU中有多个进程的竞争(选择一个进程将处理机分配给它) 称为 `调度程序`, 该程序使用的算法叫做 `调度算法`。\n\n#### 三种调度\n\n进程调度(初级调度)、内存调度(中级调度)、作业调度(高级调度)\n\n*   进程调度(内存—>CPU)\n    \n    频率最高。按照某种调度算法，从就绪队列选择一个进程分配给处理机。\n    \n*   内存调度(外存—>内存)\n    \n    频率中等。按照某种调度算法，从 **挂起队列** 选择合适进程将其数据调回内存。\n    \n*   作业调度(外存—>内存)\n    \n    频率最低。按照某种调度算法，从 **后备队列** 中选择合适的作业将其调入内存，并为其创建进程(PCB)。\n    \n\n![image-20220324100005952](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E4%B8%89%E7%A7%8D%E8%B0%83%E5%BA%A6.png)\n\n#### 进程行为\n\n进程分为计算密集型(CPU-Bound)和I/O密集型(I/O-Bound)。\n\n![image-20220411083017883](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220411083017883.png)\n\nCPU的提高比磁盘更快？越来越多的进程倾向于IO密集型\n\n### 调度算法\n\n#### FCFS调度算法\n\n批处理系统的先来先服务调度算法(FCFS, First come First Served或叫FIFO First In First Out)，按照作业到达的先后次序进行调度。\n\n优点：简单，易于实现，如排队。\n\n缺点：若出现长作业出现在短作业之前的情况，会增加平均周转时间\n\n![image-20220413143429011](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413143429011.png)\n\n![image-20220413143446410](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413143446410.png)\n\n#### SJF调度算法\n\n批处理系统的短作业优先调度算法(SJF, Shortest Job First)。\n\n优点：减少了平均周转时间\n\n缺点：大作业的的周转时间变长，不适合一些大项目？？\n\n两种实现方案\n\n*   不可抢占方式\n    \n    当前作业运行时不会被打断直到运行完毕或阻塞时，才让出CPU。\n    \n*   可抢占方式\n    \n    当一个新的短作业到来时，若其运行时间小于当前正在运行作业的 `剩余时间`，则抢占CPU运行。（此方式也叫SRTF，Shortest Remaining Time First）\n    \n\n不可抢占式SJF例题，求平均周转时间\n\n作业\n\n进入时刻（H）\n\n运行时间（H）\n\n1\n\n8\n\n2\n\n2\n\n8.5\n\n0.5\n\n3\n\n9\n\n0.1\n\n4\n\n9.5\n\n0.2\n\n​ 例题作业\n\n![image-20220413144946937](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413144946937.png)\n\n抢占式SJF例题，求平均等待时间\n\n![image-20220413145021926](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413145021926.png)\n\n#### HRRN调度算法\n\n批处理系统的最高响应比作业优先算法(HRRN, Highest Response Ratio Next)\n\n优点：综合平衡了FCFS和SJF\n\n响应比 R = 响应时间/需运行时间=1＋已等待时间 / 需运行时间。\n\n作业\n\n进入时刻（H）\n\n运行时间（H）\n\n1\n\n8\n\n2\n\n2\n\n8.5\n\n0.5\n\n3\n\n9\n\n0.1\n\n4\n\n9.5\n\n0.2\n\n​ 例题作业\n\n![image-20220413152036504](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413152036504.png)\n\nRR调度算法\n\n交互式系统的时间片轮转调度算法（RR，Round-Robin）\n\nMQ调度算法\n\n多级队列调度算法（MQ，Multilevel Queue）\n\n多级反馈算法\n\n### 实时调度\n\n### 多处理系统的调度\n\n### 死锁\n\n#### 含义\n\n每个进程都占用着若干个资源，同时又在等待得到该组进程中另一进程所占用的资源，因而造成的所有进程都无法进展下去的现象。这一组进程就称为死锁进程。\n\n#### 计算机资源\n\n有：CPU、时钟、IO设备、内存空间、数据库记录等。\n\n资源分为两大类：\n\n*   可抢占的\n    \n    存储器、内存、CPU等。当进程正在使用该类型资源时，抢占不会造成任何不良影响。\n    \n*   不可抢占的\n    \n    刻录机、光盘、磁带机、打印机等。当一个进程正在使用该类型资源时，不可强行抢占，否则会导致进程运行失败。\n    \n\n**注意**:不可抢占性资源是临界资源，但是临界资源不是不可抢占性资源\n\n死锁主要由不可抢占资源引起\n\n#### 死锁产生的原因\n\n*   资源有限\n    \n    进程中有多个共享资源如打印机、公共队列等\n    \n*   并发进程间的推进顺序不当\n    \n    请求和释放资源的顺序不当，会导致产生进程死锁\n    \n\n### 预防死锁\n\n### 死锁的检测和解除\n\n### 课后作业\n\n1.  线程是什么？线程主要包含什么内容？内核级线程和用户级线程是什么？\n    \n    答：线程是操作系统能够进行运算调度的最小单位。线程的实体包括程序、数据和TCB。内核级线程是，用户级线程是在用户空间上实现，不依赖于系统内核。内核级线程是系统内核管理的线程，由内核完成调度。\n    \n2.  假定在一台处理机上执行下表所示的作业，假定这些作业在0时刻，以1,2,3,4,5的次序顺序到达。说明分别用FCFS、RR（时间片1）、SJF、以及非抢占式优先级（优先级1最高）调度算法，给出平均周转时间。\n    \n    **作业**\n    \n    **执行时间**\n    \n    **优先级**\n    \n    **1**\n    \n    10\n    \n    3\n    \n    **2**\n    \n    1\n    \n    1\n    \n    **3**\n    \n    2\n    \n    3\n    \n    **4**\n    \n    1\n    \n    4\n    \n    **5**\n    \n    5\n    \n    2\n    \n    FCFS：\n    \n    T = (10+10+11+11+15)/5=11.4\n    \n    RR:\n    \n    T = (19+1+5+1+10)/5 = 11.2\n    \n    SJF:\n    \n    *   抢占式：T = ()\n        \n    *   非抢占式: T = ()\n        \n    \n    非抢占式优先级：T = (10+10+17+17+12)/5 = 13.2\n    \n3.  一带闸门的运河，其上有两架吊桥。吊桥坐落在一条公路上，为使该公路避开一块沼泽地而令其横跨运河两次。运河和公路的交通都是单方向的。运河上的基本运输由驳船担负。在一艘驳船接近吊桥A时就拉汽笛警告，若桥上无车辆，吊桥就吊起，直到驳船尾部通过此桥为止。对吊桥B也按同样次序处理。\n    \n    *   一艘典型驳船的长度为200米，当它在河上航行时是否会产生死锁？若会，其理由是什么？\n        \n        答：会产生，假设A无车辆，迪奥条吊起驳船通过100米到达B，若此时B上有车辆，会发生A处吊桥不放下，汽车无法通过，B处吊桥不吊起驳船无法通过的现象。\n        \n    *   如何能克服一个可能的死锁？请提出一个防止死锁的办法。\n        \n        答：限制驳船的大小不超过100米；当AB上无车辆时且有驳船通过时，同时吊起AB桥。\n        \n    *   如何利用信号灯上的P、V操作实现车辆和驳船的同步？\n        \n        答：\n        \n        ```\n        int p,v\n        ```\n        \n        ![image-20220410221633012](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220410221633012.png)\n        \n4.  设系统中有三种类型的资源（A、B、C）和五个进程（P1、P2、P3、P4、P5），A资源的数量为17，B资源的数量为5，C资源的数量为20。在T0时刻系统状态如下表所示。系统采用银行家算法实施死锁避免策略。\n    \n    *   T0时刻是否为安全状态若是，请给出安全序列。\n    *   在T0时刻若进程P2请求资源（0, 3, 4），是否能实施资源分配为什么\n    *   在（2）的基础上，若进程P4请求资源（2, 0, 1），是否能实施资源分配，为什么\n    *   在（3）的基础上，若进程P2请求资源（0, 2, 0），是否能实施资源分配，为什么\n    \n    **MAX**\n    \n    **ALLOCTION**\n    \n    A\n    \n    B\n    \n    C\n    \n    A\n    \n    B\n    \n    C\n    \n    **P1**\n    \n    5\n    \n    5\n    \n    9\n    \n    2\n    \n    1\n    \n    2\n    \n    **P2**\n    \n    5\n    \n    3\n    \n    6\n    \n    4\n    \n    0\n    \n    2\n    \n    **P3**\n    \n    4\n    \n    0\n    \n    11\n    \n    4\n    \n    0\n    \n    5\n    \n    **P4**\n    \n    4\n    \n    2\n    \n    5\n    \n    2\n    \n    0\n    \n    4\n    \n    **P5**\n    \n    4\n    \n    2\n    \n    4\n    \n    3\n    \n    1\n    \n    4\n    \n\n## 存储器管理\n\n### 程序的装入和链接\n\nbuffer和cache的解释\n\n*   A buffer is something that has yet to be \"written\" to disk.\n    \n*   A cache is something that has been \"read\" from the disk and stored for later use.\n    \n\n也就是说buffer是用于存放要输出到disk（块设备）的数据的，而cache存放从disk上读出的数据。这二者是为了提高IO性能的，并由OS管理。\n\n### 连续分配方式\n\n### 分页存储管理\n\n分页系统的地址转换机制\n\n![image-20220414090249801](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220414090249801.png)\n\n### 分段存储管理\n\n### 虚拟存储器的基本概念\n\n### 请求分页存储管理方式\n\n### 页面置换算法\n\n### 请求分段存储管理方式\n\n### 课后作业\n\n1.  什么是逻辑地址，什么是物理地址？\n    \n    答：逻辑地址是CPU所生成的地址。加载到内存地址寄存器中的地址，内存单元的真正地址。\n    \n2.  什么是地址重定位？动态分区存储和分页存储如何进行地址重定位？\n    \n    答：地址重定向是把程序的逻辑地址空间转变为内存中的实际物理地址空间的过程。动态分区存储在程序运行时CPU每次访问内存单元才进行地址变换。分页存储\n    \n3.  相对于分区存储管理，分页存储管理的优势是什么？分页过大或过小会带来什么问题？\n    \n    答：使得一个程序的逻辑地址可以分布在若干个离散的内存块上，减少内碎片和外碎片，提高内存利用率。过大会导致页内碎片增多。过小导致进程页表过长，占用大量内存，还降低页面换进换出的效率。\n    \n4.  如何管理内存块的分配与回收？分别以内存分区表和位图来说明。\n    \n    答：\n    \n5.  编程题：求m个进程（序号0到m-1）, n个资源情况下，所有的安全序列。\n    \n    输入\n    \n    > m,n m\\*n 矩阵 max m\\*n 矩阵 allo n维向量 avai\n    \n    输出所有安全序列\n    \n\n\\[^PCB\\]: (Process Control Block,PCB,进程控制块) \\[^IPC\\]: (InterProcess Communication,IPC,) \\[^条件变量\\]: (Condition Variables,条件变量) \\[^ACK\\]: (Acknowledge character,ACK,确认字符) \\[^TCB\\]: (Thread Control Block,TCB,线程控制块 )","source":"_posts/操作系统-进程学习.md","raw":"---\ntitle: 操作系统学习笔记（一）\ntags:\n  - C\n  - 操作系统\n  - 线程\n  - 进程\n  - 锁\nid: '549'\ncategories:\n  - - 学习笔记\n  - - 文章\ndate: 2022-03-08 23:25:25\n---\n\n## 进程\n\n### 进程管理\n\n#### 什么是进程\n\n进程是\n\n进程(Process)包括 `程序的代码` 、`程序的数据`、`指示下一条运行的指令`、`一组通用寄存器的当前值`、 `一组系统资源`。\n\n进程特征包括 `结构特征`、 `动态性`、 `并发性`、`独立性`、 `异步性`\n\n进程三种基本状态： `就绪状态`、`执行状态`、`阻塞状态`\n\n（有的为五种：最前为 `新建态`、最后为 `终止态`）\n<!-- more -->\n进程状态转换关系\n\n![进程状态转换关系](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%85%B3%E7%B3%BB.png)\n\n挂起状态(基本状态之外): 进程被从内存调出进驻外存，不再接受调度。\n\nPCB\\[^PCB\\]: PCB中记录了操作系统所需的，用于描述进程的当前情况以及控制进程运行的全部信息。**PCB是进程存在的唯一标志**。\n\n上下文切换: 将CPU切换到另一进程需要保存原来进程的状态并装入新进程的保存状态。上下文切换时间与硬件支持密切相关。\n\n#### 进程控制\n\n*   进程创建：在一个已经存在的进程（用户进程或系统进程）当中，通过系统调用来创建一个新的进程。\n    \n    ![进程创建](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA.png)\n    \n*   创建步骤：1、申请空白PCB 2、新进程分配资源 3、初始化PCB 4、进程插入就绪状态\n    \n*   进程终止\n    \n    ![进程终止](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E8%BF%9B%E7%A8%8B%E7%BB%88%E6%AD%A2.png)\n    \n*   进程阻塞与唤醒\n    \n    原因：`请求系统服务`、`新数据尚未到达`、`无进程新任务`\n    \n    阻塞过程：调用 `阻塞原语block` 把自己阻塞、将PCB插入阻塞队列、重新调度。\n    \n    唤醒过程：阻塞队列移出阻塞进程、PCB从阻塞改为就绪、PCB插入就绪队列。\n    \n*   进程挂起与激活\n    \n    挂起过程：修改进程状态、PCB复制到指定内存块、（如有必要转调度程序）。\n    \n    激活状态：进程调入内存、修改进程状态、（如抢占调度考虑是否执行）\n    \n\n#### 进程同步\n\n*   进程通信\\[^IPC\\]\n    \n*   临界区和临界资源\n    \n    进程的工作分为两类：1、内部计算 2、对共享内存或共享文件的访问（竞争条件的产生）\n    \n    完成第二类工作的程序片段就是 `临界区`， 需要互斥访问的共享资源就是 `临界资源` 。\n    \n*   整形信号量：Dijkstra提出：把整形信号量定义为一个整形量，除初始化外，仅能通过两个标准的 `原子操作` (Atomic Operation) `wait(S)`和 `signal(S)`来访问。分别称为P、V操作。\n    \n    ```C\n    //P原语操作的定义\n    procedure wait(S)\n      var S:semaphore;\n    begin\n      S.value:=S.value-1;\n      if S.value<0 then\n          block(S,L)\n    end\n    ```\n    \n    ![P原语操作的定义](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/P%E5%8E%9F%E8%AF%AD%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9A%E4%B9%89.png)\n    \n    ```c\n    //V原语操作的定义\n    procedure signal(S)\n      var S:semaphore;\n    begin\n      S.value:=S.value+1;\n      if S.value<=0 then\n          wakeup(S,L);\n    end\n    ```\n    \n    ![V原语操作的定义](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/V%E5%8E%9F%E8%AF%AD%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9A%E4%B9%89.png)\n    \n*   记录型信号量\n    \n    信号量被描述为一个记录(或者结构)\n    \n    ![信号量被描述为一个记录](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E4%BF%A1%E5%8F%B7%E9%87%8F%E8%A2%AB%E6%8F%8F%E8%BF%B0%E4%B8%BA%E4%B8%80%E4%B8%AA%E8%AE%B0%E5%BD%95.png)\n    \n    S.value的处置表示为系统中某类资源的数目，因此也称资源信号量。每次wait操作进程请求该一个单位的该类资源；当S.value<0时，进程调用block原语自我阻塞，并插入信号量链表S.L中。\n    \n*   AND型信号量\n    \n    一次性将进程所需所有资源分配到进程里，待使用完释放(避免死锁)\n    \n*   利用信号量实现进程互斥\n    \n    n个进程互斥地使用某个临界资源是，设定信号量`mutex` 用于互斥访问，初始化为1。\n    \n    ![信号量实现进程互斥](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5.png)\n    \n    进程互斥还可能出现死锁\n    \n*   同步与互斥的混合问题\n    \n    有一个仓库，可以存放A和B 两种产品。要求：1)每次只能存入一种产品(A或B)；2)-N<A产品数量-B产品数量<M。试用PV操作描述产品A与产品B的入库过程。\n    \n    ![同步与互斥的混合问题](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5%E7%9A%84%E6%B7%B7%E5%90%88%E9%97%AE%E9%A2%98.png)\n    \n\n#### 经典IPC问题\n\n*   主要问题：如何选择信号量, 如何安排P、V原语的顺序。\n    \n    生产者-消费者问题、哲学家进餐问题、读者-写者问题、理发师问题、和尚喝水问题。\n    \n\n信号量方法的缺点：\n\n*   逻辑关系复杂，可读性差、维护困难、容易导致竞争状态或者死锁严重问题。\n\n#### 管程\n\n由Hoare和Hansen提出，基本思想：`将共享变量以及对共享变量所进行的操作封装在一个模块中`。\n\n*   结构\n    \n    由一组变量、数据结构和函数构成的软件模块。\n    \n    ![管程 ](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E7%AE%A1%E7%A8%8B%20.png)\n    \n*   特性\n    \n    封装性、互斥性、语言相关性\n    \n*   等待与唤醒\n    \n    条件变量\\[^条件变量\\] 用于描述等待的原因，通过 `wait` 和 `signal` 操作条件变量。`wait` 和 `signal` 类似P、V原语，但条件变量不取具体数值，不进行累加。\n    \n*   send 和 receive\n    \n    ```C\n    send(target,&msg)//将消息msg发送到目标(进程)target中\n    receive(src,&msg)//接收src传来的msg,如果无消息可用，阻塞接受者\n    ```\n    \n    有可能面临`ACK` \\[^ACK\\]丢失问题\n    \n\n### 进程高级通信\n\n#### 线程\n\n*   线程与进程\n    \n    进程=资源平台+线程\n    \n    *   一个进程中可以同时存在多个线程;\n    *   各个线程之间可以并发地执行;\n    *   各个线程之间可以共享地址空间。\n    \n    进程是资源分配单位，线程是CPU调度单位；线程可实现进程级的并发。\n    \n    单线程与多线程的关系图：\n    \n    ![单线程与多线程的关系图](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%8D%95%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%85%B3%E7%B3%BB%E5%9B%BE.png)\n    \n*   用户线程\n    \n    在用户空间实现，不依赖操作系统的内核。\n    \n    ![用户线程](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B.png)\n    \n*   内核线程\n    \n    ![内核线程](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B.png)\n    \n    由内核来维护进程和线程的上下文信息（PCB\\[^PCB\\]和TCB\\[^TCB\\]）。线程的创建、终止和切换都是通过系统调用的方式来进行，需要从用户态转换到系统态，由内核来完成，系统开销较大。\n    \n\n### 用户态和内核态\n\n两种CPU状态：内核态（Kernel Mode，运行操作系统程序）、用户态（User Mode，运行用户程序 ）\n\n#### 指令划分\n\n特权指令：只能由操作系统使用、用户程序不能使用的指令。 举例：启动I/O 内存清零 修改程序状态字 设置时钟 允许/禁止终端 停机\n\n非特权指令：用户程序可以使用的指令。 举例：控制转移 算数运算 取数指令 访管指令（使用户程序从用户态陷入内核态）\n\n#### 特权级别\n\n特权环：R0、R1、R2和R3\n\nR0相当于内核态，R3相当于用户态；\n\n不同级别能够运行不同的指令集合；\n\n#### CPU状态之间的转换\n\n**用户态 ->内核态：**唯一途径是通过中断、异常、陷入机制（访管指令）\n\n**内核态 ->用户态：**设置程序状态字PSW\n\n#### 内核态与用户态的区别\n\n内核态与用户态是操作系统的两种运行级别，当程序运行在3级特权级上时，就可以称之为运行在用户态。因为这是最低特权级，是普通的用户进程运行的特权级，大部分用户直接面对的程序都是运行在用户态；当程序运行在0级特权级上时，就可以称之为运行在内核态。\n\n运行在用户态下的程序不能直接访问操作系统内核数据结构和程序。当我们在系统中执行一个程序时，大部分时间是运行在用户态下的，在其需要操作系统帮助完成某些它没有权力和能力完成的工作时就会切换到内核态。\n\n这两种状态的主要差别是：处于用户态执行时，进程所能访问的内存空间和对象受到限制，其所处于占有的处理机是可被抢占的 ；而处于核心态执行中的进程，则能访问所有的内存空间和对象，且所占有的处理机是不允许被抢占的\n\n### 并发和并行\n\n#### 并发\n\nConcurrent，在操作系统中，一个时间段里有几个程序都处于已启动运行到运行完成之间，且这几个程序在同一个处理机上完成。\n\n#### 并行\n\nParallel，当系统有一个以上CPU时，一个CPU执行一个进程，另一个CPU可以执行另一个进程，两个进程互不抢夺CPU资源，可以同时进行。\n\n### 课后作业\n\n1.  ##### 操作系统的四个特征是什么？分别是什么含义？\n    \n\n*   答：1、并发：两个或者多个事件在同一时间间隔内发生；2、共享：系统内资源可供多个并发进程共同使用；3、异步：进程以不可预知的速度向前推进；4、虚拟：通过某种技术把一个物理实体变成若干个逻辑上的对应物。\n\n2.  ##### 什么是操作系统内核？内核的主要功能是什么？\n    \n\n*   答：内核是操作系统最基本部分。主要功能是为众多应用程序提供对计算机硬件的安全访问。\n\n3.  ##### 什么是系统调用？系统调用与一般程序有什么不同？\n    \n\n*   答：系统调用是操作系统内核和用户运行程序之间的接口。不同：`运行的状态不同`，在程序中的过程一般或都是用户程序，或都是系统程序，都是运行在同一个系统状态的（用户态或内核态）。`进入的方式不同`，一般程序可以直接由调用过程直接转换到被调用过程，而系统调用则不允许，只能通过一条能产生异常的机器指令（\"自陷指令\"或叫\"访管指令\"）进入操作系统，再转到相应的应用处理程序。`返回的方式不同`。`代码层次不同`，一般程序是用户级程序，而系统调用是操作系统的代码程序，是系统级程序。[^1]([操作系统中系统调用和一般过程的区别_百度知道 \"baidu.com)](https://zhidao.baidu.com/question/436653622.html\")\n\n4.  ##### 什么是进程，为什么OS要引入进程?\n    \n\n*   答：进程是一个**具有一定独立功能的程序在一个数据集上的一次动态执行的过程**；引入进程是为了提高计算机资源的利用率。\n\n5.  ##### 进程的基本状态有哪些？会由什么事件导致进程状态的转化？\n    \n\n*   答：就绪(Ready)状态、执行(Running)状态、阻塞(Block)状态。等待I/O的结果、等待某一进程提供输入、运行进程用完时间片、高优先级进中断低优先级线程、调度程序选择新进程运行、等待事件发生。\n\n6.  ##### 什么是临界资源？什么是临界区？\n    \n\n*   答：需要互斥访问的共享资源为临界资源。完成对共享内存和共享资源的访问工作叫做临界区。\n\n7.  ##### 什么是忙等？它有什么缺点？\n    \n\n*   答：一个进程位于其临界区内时，任何试图进入其临界区的进程都必须在其进入代码中持续地循环。容易造成资源利用率低，系统阻塞。\n\n8.  ##### m个共享进程共享一个临界资源，问信号量的变化范围。\n    \n\n*   答：信号量初始值为1，每进行一次P操作则其值减1，每进行一次V操作则其值加1，当有一个进程获得资源，其他m–1个进程在等待队列中时，其值为-(m-1)\n\n9.  什么是进程的同步？它包含哪两种形式？什么是临界资源、临界区？\n\n*   答：进程的同步是指：在多道程序环境下，进程是并发执行的，不同进程之间具有不同的互相制约条件。两种形式：`同步代码块`(被同步关键字封装的代码) 、`同步函数`(被同步关键字修饰的函数)。\n\n9.  男女生共同使用公共洗澡间。规则是：洗澡间门上有可以翻的牌子，牌子分别为“无人”、“男”“女”。若来洗澡的同学发现牌子显示为“无人”，则可以把牌子翻成和自己一样的性别，然后入室洗澡。若来洗澡的同学发现牌子和自己的性别相同，可以直接入室洗澡。若来洗澡的同学发现牌子和自己的性别不同，则须在室外等待。最后一个洗澡的同学离开洗澡间时需要将牌子翻成“无人”。请使用信号量和PV操作，设计男生和女生的同步机制。\n\n*   答：\n    \n    ```c\n    //空闲资源数\n    semaph mutex=1;\n    //占用浴室男生数，占用浴室女生数\n    int S_man=0,S_women=0;\n    //等待的男生数,等待的女生数\n    int man_wait = 0,women_wait = 0;\n    \n    //男生想要进入浴室\n    void man_want_entry(){\n      if(S_women==0){\n         P(mutex);\n         S_man++;\n         洗澡...\n         man_leave_bathroom();\n      }else{\n          man_wait++;\n      }\n    }\n    \n    //男生离开浴室\n    void man_leave_bathroom(){\n      S_man--;\n      V(mutex);\n    }\n    \n    //女生想要进入浴室\n    void woman_want_entry(){\n      P(mutex);\n      if\n    }\n    ```\n    \n\n9.  某机房有N台电脑。门口有一个刷卡机。学生上机时，必须在刷卡机上刷卡登录，下机时也必须在刷卡机上刷卡结算费用。请用信号量方法给来上机的同学设计同步机制。\n    \n10.  线程是什么？线程主要包含什么内容？内核级线程和用户级线程是什么？\n    \n    答：线程是操作系统能够进行运算调度的最小单位。主要包含线程ID、程序计数器、寄存器组合堆栈。内核级线程是由内核管理的线程。用户级线程是指不需要内核支持而在用户程序中实现的线程。\n    \n\n## 处理机调度和死锁\n\n### 处理机调度的基本概念\n\n处理 一个CPU中有多个进程的竞争(选择一个进程将处理机分配给它) 称为 `调度程序`, 该程序使用的算法叫做 `调度算法`。\n\n#### 三种调度\n\n进程调度(初级调度)、内存调度(中级调度)、作业调度(高级调度)\n\n*   进程调度(内存—>CPU)\n    \n    频率最高。按照某种调度算法，从就绪队列选择一个进程分配给处理机。\n    \n*   内存调度(外存—>内存)\n    \n    频率中等。按照某种调度算法，从 **挂起队列** 选择合适进程将其数据调回内存。\n    \n*   作业调度(外存—>内存)\n    \n    频率最低。按照某种调度算法，从 **后备队列** 中选择合适的作业将其调入内存，并为其创建进程(PCB)。\n    \n\n![image-20220324100005952](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E4%B8%89%E7%A7%8D%E8%B0%83%E5%BA%A6.png)\n\n#### 进程行为\n\n进程分为计算密集型(CPU-Bound)和I/O密集型(I/O-Bound)。\n\n![image-20220411083017883](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220411083017883.png)\n\nCPU的提高比磁盘更快？越来越多的进程倾向于IO密集型\n\n### 调度算法\n\n#### FCFS调度算法\n\n批处理系统的先来先服务调度算法(FCFS, First come First Served或叫FIFO First In First Out)，按照作业到达的先后次序进行调度。\n\n优点：简单，易于实现，如排队。\n\n缺点：若出现长作业出现在短作业之前的情况，会增加平均周转时间\n\n![image-20220413143429011](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413143429011.png)\n\n![image-20220413143446410](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413143446410.png)\n\n#### SJF调度算法\n\n批处理系统的短作业优先调度算法(SJF, Shortest Job First)。\n\n优点：减少了平均周转时间\n\n缺点：大作业的的周转时间变长，不适合一些大项目？？\n\n两种实现方案\n\n*   不可抢占方式\n    \n    当前作业运行时不会被打断直到运行完毕或阻塞时，才让出CPU。\n    \n*   可抢占方式\n    \n    当一个新的短作业到来时，若其运行时间小于当前正在运行作业的 `剩余时间`，则抢占CPU运行。（此方式也叫SRTF，Shortest Remaining Time First）\n    \n\n不可抢占式SJF例题，求平均周转时间\n\n作业\n\n进入时刻（H）\n\n运行时间（H）\n\n1\n\n8\n\n2\n\n2\n\n8.5\n\n0.5\n\n3\n\n9\n\n0.1\n\n4\n\n9.5\n\n0.2\n\n​ 例题作业\n\n![image-20220413144946937](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413144946937.png)\n\n抢占式SJF例题，求平均等待时间\n\n![image-20220413145021926](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413145021926.png)\n\n#### HRRN调度算法\n\n批处理系统的最高响应比作业优先算法(HRRN, Highest Response Ratio Next)\n\n优点：综合平衡了FCFS和SJF\n\n响应比 R = 响应时间/需运行时间=1＋已等待时间 / 需运行时间。\n\n作业\n\n进入时刻（H）\n\n运行时间（H）\n\n1\n\n8\n\n2\n\n2\n\n8.5\n\n0.5\n\n3\n\n9\n\n0.1\n\n4\n\n9.5\n\n0.2\n\n​ 例题作业\n\n![image-20220413152036504](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413152036504.png)\n\nRR调度算法\n\n交互式系统的时间片轮转调度算法（RR，Round-Robin）\n\nMQ调度算法\n\n多级队列调度算法（MQ，Multilevel Queue）\n\n多级反馈算法\n\n### 实时调度\n\n### 多处理系统的调度\n\n### 死锁\n\n#### 含义\n\n每个进程都占用着若干个资源，同时又在等待得到该组进程中另一进程所占用的资源，因而造成的所有进程都无法进展下去的现象。这一组进程就称为死锁进程。\n\n#### 计算机资源\n\n有：CPU、时钟、IO设备、内存空间、数据库记录等。\n\n资源分为两大类：\n\n*   可抢占的\n    \n    存储器、内存、CPU等。当进程正在使用该类型资源时，抢占不会造成任何不良影响。\n    \n*   不可抢占的\n    \n    刻录机、光盘、磁带机、打印机等。当一个进程正在使用该类型资源时，不可强行抢占，否则会导致进程运行失败。\n    \n\n**注意**:不可抢占性资源是临界资源，但是临界资源不是不可抢占性资源\n\n死锁主要由不可抢占资源引起\n\n#### 死锁产生的原因\n\n*   资源有限\n    \n    进程中有多个共享资源如打印机、公共队列等\n    \n*   并发进程间的推进顺序不当\n    \n    请求和释放资源的顺序不当，会导致产生进程死锁\n    \n\n### 预防死锁\n\n### 死锁的检测和解除\n\n### 课后作业\n\n1.  线程是什么？线程主要包含什么内容？内核级线程和用户级线程是什么？\n    \n    答：线程是操作系统能够进行运算调度的最小单位。线程的实体包括程序、数据和TCB。内核级线程是，用户级线程是在用户空间上实现，不依赖于系统内核。内核级线程是系统内核管理的线程，由内核完成调度。\n    \n2.  假定在一台处理机上执行下表所示的作业，假定这些作业在0时刻，以1,2,3,4,5的次序顺序到达。说明分别用FCFS、RR（时间片1）、SJF、以及非抢占式优先级（优先级1最高）调度算法，给出平均周转时间。\n    \n    **作业**\n    \n    **执行时间**\n    \n    **优先级**\n    \n    **1**\n    \n    10\n    \n    3\n    \n    **2**\n    \n    1\n    \n    1\n    \n    **3**\n    \n    2\n    \n    3\n    \n    **4**\n    \n    1\n    \n    4\n    \n    **5**\n    \n    5\n    \n    2\n    \n    FCFS：\n    \n    T = (10+10+11+11+15)/5=11.4\n    \n    RR:\n    \n    T = (19+1+5+1+10)/5 = 11.2\n    \n    SJF:\n    \n    *   抢占式：T = ()\n        \n    *   非抢占式: T = ()\n        \n    \n    非抢占式优先级：T = (10+10+17+17+12)/5 = 13.2\n    \n3.  一带闸门的运河，其上有两架吊桥。吊桥坐落在一条公路上，为使该公路避开一块沼泽地而令其横跨运河两次。运河和公路的交通都是单方向的。运河上的基本运输由驳船担负。在一艘驳船接近吊桥A时就拉汽笛警告，若桥上无车辆，吊桥就吊起，直到驳船尾部通过此桥为止。对吊桥B也按同样次序处理。\n    \n    *   一艘典型驳船的长度为200米，当它在河上航行时是否会产生死锁？若会，其理由是什么？\n        \n        答：会产生，假设A无车辆，迪奥条吊起驳船通过100米到达B，若此时B上有车辆，会发生A处吊桥不放下，汽车无法通过，B处吊桥不吊起驳船无法通过的现象。\n        \n    *   如何能克服一个可能的死锁？请提出一个防止死锁的办法。\n        \n        答：限制驳船的大小不超过100米；当AB上无车辆时且有驳船通过时，同时吊起AB桥。\n        \n    *   如何利用信号灯上的P、V操作实现车辆和驳船的同步？\n        \n        答：\n        \n        ```\n        int p,v\n        ```\n        \n        ![image-20220410221633012](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220410221633012.png)\n        \n4.  设系统中有三种类型的资源（A、B、C）和五个进程（P1、P2、P3、P4、P5），A资源的数量为17，B资源的数量为5，C资源的数量为20。在T0时刻系统状态如下表所示。系统采用银行家算法实施死锁避免策略。\n    \n    *   T0时刻是否为安全状态若是，请给出安全序列。\n    *   在T0时刻若进程P2请求资源（0, 3, 4），是否能实施资源分配为什么\n    *   在（2）的基础上，若进程P4请求资源（2, 0, 1），是否能实施资源分配，为什么\n    *   在（3）的基础上，若进程P2请求资源（0, 2, 0），是否能实施资源分配，为什么\n    \n    **MAX**\n    \n    **ALLOCTION**\n    \n    A\n    \n    B\n    \n    C\n    \n    A\n    \n    B\n    \n    C\n    \n    **P1**\n    \n    5\n    \n    5\n    \n    9\n    \n    2\n    \n    1\n    \n    2\n    \n    **P2**\n    \n    5\n    \n    3\n    \n    6\n    \n    4\n    \n    0\n    \n    2\n    \n    **P3**\n    \n    4\n    \n    0\n    \n    11\n    \n    4\n    \n    0\n    \n    5\n    \n    **P4**\n    \n    4\n    \n    2\n    \n    5\n    \n    2\n    \n    0\n    \n    4\n    \n    **P5**\n    \n    4\n    \n    2\n    \n    4\n    \n    3\n    \n    1\n    \n    4\n    \n\n## 存储器管理\n\n### 程序的装入和链接\n\nbuffer和cache的解释\n\n*   A buffer is something that has yet to be \"written\" to disk.\n    \n*   A cache is something that has been \"read\" from the disk and stored for later use.\n    \n\n也就是说buffer是用于存放要输出到disk（块设备）的数据的，而cache存放从disk上读出的数据。这二者是为了提高IO性能的，并由OS管理。\n\n### 连续分配方式\n\n### 分页存储管理\n\n分页系统的地址转换机制\n\n![image-20220414090249801](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220414090249801.png)\n\n### 分段存储管理\n\n### 虚拟存储器的基本概念\n\n### 请求分页存储管理方式\n\n### 页面置换算法\n\n### 请求分段存储管理方式\n\n### 课后作业\n\n1.  什么是逻辑地址，什么是物理地址？\n    \n    答：逻辑地址是CPU所生成的地址。加载到内存地址寄存器中的地址，内存单元的真正地址。\n    \n2.  什么是地址重定位？动态分区存储和分页存储如何进行地址重定位？\n    \n    答：地址重定向是把程序的逻辑地址空间转变为内存中的实际物理地址空间的过程。动态分区存储在程序运行时CPU每次访问内存单元才进行地址变换。分页存储\n    \n3.  相对于分区存储管理，分页存储管理的优势是什么？分页过大或过小会带来什么问题？\n    \n    答：使得一个程序的逻辑地址可以分布在若干个离散的内存块上，减少内碎片和外碎片，提高内存利用率。过大会导致页内碎片增多。过小导致进程页表过长，占用大量内存，还降低页面换进换出的效率。\n    \n4.  如何管理内存块的分配与回收？分别以内存分区表和位图来说明。\n    \n    答：\n    \n5.  编程题：求m个进程（序号0到m-1）, n个资源情况下，所有的安全序列。\n    \n    输入\n    \n    > m,n m\\*n 矩阵 max m\\*n 矩阵 allo n维向量 avai\n    \n    输出所有安全序列\n    \n\n\\[^PCB\\]: (Process Control Block,PCB,进程控制块) \\[^IPC\\]: (InterProcess Communication,IPC,) \\[^条件变量\\]: (Condition Variables,条件变量) \\[^ACK\\]: (Acknowledge character,ACK,确认字符) \\[^TCB\\]: (Thread Control Block,TCB,线程控制块 )","slug":"操作系统-进程学习","published":1,"updated":"2024-03-12T10:42:27.432Z","_id":"cltnrar500023jry196vo8hyj","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><h3 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h3><h4 id=\"什么是进程\"><a href=\"#什么是进程\" class=\"headerlink\" title=\"什么是进程\"></a>什么是进程</h4><p>进程是</p>\n<p>进程(Process)包括 <code>程序的代码</code> 、<code>程序的数据</code>、<code>指示下一条运行的指令</code>、<code>一组通用寄存器的当前值</code>、 <code>一组系统资源</code>。</p>\n<p>进程特征包括 <code>结构特征</code>、 <code>动态性</code>、 <code>并发性</code>、<code>独立性</code>、 <code>异步性</code></p>\n<p>进程三种基本状态： <code>就绪状态</code>、<code>执行状态</code>、<code>阻塞状态</code></p>\n<p>（有的为五种：最前为 <code>新建态</code>、最后为 <code>终止态</code>）</p>\n<span id=\"more\"></span>\n<p>进程状态转换关系</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%85%B3%E7%B3%BB.png\" alt=\"进程状态转换关系\"></p>\n<p>挂起状态(基本状态之外): 进程被从内存调出进驻外存，不再接受调度。</p>\n<p>PCB[^PCB]: PCB中记录了操作系统所需的，用于描述进程的当前情况以及控制进程运行的全部信息。<strong>PCB是进程存在的唯一标志</strong>。</p>\n<p>上下文切换: 将CPU切换到另一进程需要保存原来进程的状态并装入新进程的保存状态。上下文切换时间与硬件支持密切相关。</p>\n<h4 id=\"进程控制\"><a href=\"#进程控制\" class=\"headerlink\" title=\"进程控制\"></a>进程控制</h4><ul>\n<li>进程创建：在一个已经存在的进程（用户进程或系统进程）当中，通过系统调用来创建一个新的进程。  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA.png\" alt=\"进程创建\"></li>\n<li>创建步骤：1、申请空白PCB 2、新进程分配资源 3、初始化PCB 4、进程插入就绪状态</li>\n<li>进程终止  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E8%BF%9B%E7%A8%8B%E7%BB%88%E6%AD%A2.png\" alt=\"进程终止\"></li>\n<li>进程阻塞与唤醒  原因：<code>请求系统服务</code>、<code>新数据尚未到达</code>、<code>无进程新任务</code>  阻塞过程：调用 <code>阻塞原语block</code> 把自己阻塞、将PCB插入阻塞队列、重新调度。  唤醒过程：阻塞队列移出阻塞进程、PCB从阻塞改为就绪、PCB插入就绪队列。</li>\n<li>进程挂起与激活  挂起过程：修改进程状态、PCB复制到指定内存块、（如有必要转调度程序）。  激活状态：进程调入内存、修改进程状态、（如抢占调度考虑是否执行）</li>\n</ul>\n<h4 id=\"进程同步\"><a href=\"#进程同步\" class=\"headerlink\" title=\"进程同步\"></a>进程同步</h4><ul>\n<li>进程通信[^IPC]</li>\n<li>临界区和临界资源  进程的工作分为两类：1、内部计算 2、对共享内存或共享文件的访问（竞争条件的产生）  完成第二类工作的程序片段就是 <code>临界区</code>， 需要互斥访问的共享资源就是 <code>临界资源</code> 。</li>\n<li>整形信号量：Dijkstra提出：把整形信号量定义为一个整形量，除初始化外，仅能通过两个标准的 <code>原子操作</code> (Atomic Operation) <code>wait(S)</code>和 <code>signal(S)</code>来访问。分别称为P、V操作。  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//P原语操作的定义</span></span><br><span class=\"line\">procedure <span class=\"title function_\">wait</span><span class=\"params\">(S)</span></span><br><span class=\"line\">  var S:semaphore;</span><br><span class=\"line\">begin</span><br><span class=\"line\">  S.value:=S.value<span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> S.value&lt;<span class=\"number\">0</span> then</span><br><span class=\"line\">      <span class=\"title function_\">block</span><span class=\"params\">(S,L)</span></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/P%E5%8E%9F%E8%AF%AD%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9A%E4%B9%89.png\" alt=\"P原语操作的定义\">  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//V原语操作的定义</span></span><br><span class=\"line\">procedure <span class=\"title function_\">signal</span><span class=\"params\">(S)</span></span><br><span class=\"line\">  var S:semaphore;</span><br><span class=\"line\">begin</span><br><span class=\"line\">  S.value:=S.value+<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> S.value&lt;=<span class=\"number\">0</span> then</span><br><span class=\"line\">      wakeup(S,L);</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/V%E5%8E%9F%E8%AF%AD%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9A%E4%B9%89.png\" alt=\"V原语操作的定义\"></li>\n<li>记录型信号量  信号量被描述为一个记录(或者结构)  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E4%BF%A1%E5%8F%B7%E9%87%8F%E8%A2%AB%E6%8F%8F%E8%BF%B0%E4%B8%BA%E4%B8%80%E4%B8%AA%E8%AE%B0%E5%BD%95.png\" alt=\"信号量被描述为一个记录\">  S.value的处置表示为系统中某类资源的数目，因此也称资源信号量。每次wait操作进程请求该一个单位的该类资源；当S.value&lt;0时，进程调用block原语自我阻塞，并插入信号量链表S.L中。</li>\n<li>AND型信号量  一次性将进程所需所有资源分配到进程里，待使用完释放(避免死锁)</li>\n<li>利用信号量实现进程互斥  n个进程互斥地使用某个临界资源是，设定信号量<code>mutex</code> 用于互斥访问，初始化为1。  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5.png\" alt=\"信号量实现进程互斥\">  进程互斥还可能出现死锁</li>\n<li>同步与互斥的混合问题  有一个仓库，可以存放A和B 两种产品。要求：1)每次只能存入一种产品(A或B)；2)-N&lt;A产品数量-B产品数量&lt;M。试用PV操作描述产品A与产品B的入库过程。  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5%E7%9A%84%E6%B7%B7%E5%90%88%E9%97%AE%E9%A2%98.png\" alt=\"同步与互斥的混合问题\"></li>\n</ul>\n<h4 id=\"经典IPC问题\"><a href=\"#经典IPC问题\" class=\"headerlink\" title=\"经典IPC问题\"></a>经典IPC问题</h4><ul>\n<li>主要问题：如何选择信号量, 如何安排P、V原语的顺序。  生产者-消费者问题、哲学家进餐问题、读者-写者问题、理发师问题、和尚喝水问题。</li>\n</ul>\n<p>信号量方法的缺点：</p>\n<ul>\n<li>  逻辑关系复杂，可读性差、维护困难、容易导致竞争状态或者死锁严重问题。</li>\n</ul>\n<h4 id=\"管程\"><a href=\"#管程\" class=\"headerlink\" title=\"管程\"></a>管程</h4><p>由Hoare和Hansen提出，基本思想：<code>将共享变量以及对共享变量所进行的操作封装在一个模块中</code>。</p>\n<ul>\n<li>结构  由一组变量、数据结构和函数构成的软件模块。  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E7%AE%A1%E7%A8%8B%20.png\" alt=\"管程 \"></li>\n<li>特性  封装性、互斥性、语言相关性</li>\n<li>等待与唤醒  条件变量[^条件变量] 用于描述等待的原因，通过 <code>wait</code> 和 <code>signal</code> 操作条件变量。<code>wait</code> 和 <code>signal</code> 类似P、V原语，但条件变量不取具体数值，不进行累加。</li>\n<li>send 和 receive  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">send(target,&amp;msg)<span class=\"comment\">//将消息msg发送到目标(进程)target中</span></span><br><span class=\"line\">receive(src,&amp;msg)<span class=\"comment\">//接收src传来的msg,如果无消息可用，阻塞接受者</span></span><br></pre></td></tr></table></figure>\n  有可能面临<code>ACK</code> [^ACK]丢失问题</li>\n</ul>\n<h3 id=\"进程高级通信\"><a href=\"#进程高级通信\" class=\"headerlink\" title=\"进程高级通信\"></a>进程高级通信</h3><h4 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h4><ul>\n<li>线程与进程  进程=资源平台+线程<ul>\n<li>  一个进程中可以同时存在多个线程;</li>\n<li>  各个线程之间可以并发地执行;</li>\n<li>  各个线程之间可以共享地址空间。</li>\n</ul>\n  进程是资源分配单位，线程是CPU调度单位；线程可实现进程级的并发。  单线程与多线程的关系图：  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%8D%95%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%85%B3%E7%B3%BB%E5%9B%BE.png\" alt=\"单线程与多线程的关系图\"></li>\n<li>用户线程  在用户空间实现，不依赖操作系统的内核。  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B.png\" alt=\"用户线程\"></li>\n<li>内核线程  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B.png\" alt=\"内核线程\">  由内核来维护进程和线程的上下文信息（PCB[^PCB]和TCB[^TCB]）。线程的创建、终止和切换都是通过系统调用的方式来进行，需要从用户态转换到系统态，由内核来完成，系统开销较大。</li>\n</ul>\n<h3 id=\"用户态和内核态\"><a href=\"#用户态和内核态\" class=\"headerlink\" title=\"用户态和内核态\"></a>用户态和内核态</h3><p>两种CPU状态：内核态（Kernel Mode，运行操作系统程序）、用户态（User Mode，运行用户程序 ）</p>\n<h4 id=\"指令划分\"><a href=\"#指令划分\" class=\"headerlink\" title=\"指令划分\"></a>指令划分</h4><p>特权指令：只能由操作系统使用、用户程序不能使用的指令。 举例：启动I/O 内存清零 修改程序状态字 设置时钟 允许/禁止终端 停机</p>\n<p>非特权指令：用户程序可以使用的指令。 举例：控制转移 算数运算 取数指令 访管指令（使用户程序从用户态陷入内核态）</p>\n<h4 id=\"特权级别\"><a href=\"#特权级别\" class=\"headerlink\" title=\"特权级别\"></a>特权级别</h4><p>特权环：R0、R1、R2和R3</p>\n<p>R0相当于内核态，R3相当于用户态；</p>\n<p>不同级别能够运行不同的指令集合；</p>\n<h4 id=\"CPU状态之间的转换\"><a href=\"#CPU状态之间的转换\" class=\"headerlink\" title=\"CPU状态之间的转换\"></a>CPU状态之间的转换</h4><p><strong>用户态 -&gt;内核态：</strong>唯一途径是通过中断、异常、陷入机制（访管指令）</p>\n<p><strong>内核态 -&gt;用户态：</strong>设置程序状态字PSW</p>\n<h4 id=\"内核态与用户态的区别\"><a href=\"#内核态与用户态的区别\" class=\"headerlink\" title=\"内核态与用户态的区别\"></a>内核态与用户态的区别</h4><p>内核态与用户态是操作系统的两种运行级别，当程序运行在3级特权级上时，就可以称之为运行在用户态。因为这是最低特权级，是普通的用户进程运行的特权级，大部分用户直接面对的程序都是运行在用户态；当程序运行在0级特权级上时，就可以称之为运行在内核态。</p>\n<p>运行在用户态下的程序不能直接访问操作系统内核数据结构和程序。当我们在系统中执行一个程序时，大部分时间是运行在用户态下的，在其需要操作系统帮助完成某些它没有权力和能力完成的工作时就会切换到内核态。</p>\n<p>这两种状态的主要差别是：处于用户态执行时，进程所能访问的内存空间和对象受到限制，其所处于占有的处理机是可被抢占的 ；而处于核心态执行中的进程，则能访问所有的内存空间和对象，且所占有的处理机是不允许被抢占的</p>\n<h3 id=\"并发和并行\"><a href=\"#并发和并行\" class=\"headerlink\" title=\"并发和并行\"></a>并发和并行</h3><h4 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h4><p>Concurrent，在操作系统中，一个时间段里有几个程序都处于已启动运行到运行完成之间，且这几个程序在同一个处理机上完成。</p>\n<h4 id=\"并行\"><a href=\"#并行\" class=\"headerlink\" title=\"并行\"></a>并行</h4><p>Parallel，当系统有一个以上CPU时，一个CPU执行一个进程，另一个CPU可以执行另一个进程，两个进程互不抢夺CPU资源，可以同时进行。</p>\n<h3 id=\"课后作业\"><a href=\"#课后作业\" class=\"headerlink\" title=\"课后作业\"></a>课后作业</h3><ol>\n<li><h5 id=\"操作系统的四个特征是什么？分别是什么含义？\"><a href=\"#操作系统的四个特征是什么？分别是什么含义？\" class=\"headerlink\" title=\"操作系统的四个特征是什么？分别是什么含义？\"></a>操作系统的四个特征是什么？分别是什么含义？</h5></li>\n</ol>\n<ul>\n<li>  答：1、并发：两个或者多个事件在同一时间间隔内发生；2、共享：系统内资源可供多个并发进程共同使用；3、异步：进程以不可预知的速度向前推进；4、虚拟：通过某种技术把一个物理实体变成若干个逻辑上的对应物。</li>\n</ul>\n<ol start=\"2\">\n<li><h5 id=\"什么是操作系统内核？内核的主要功能是什么？\"><a href=\"#什么是操作系统内核？内核的主要功能是什么？\" class=\"headerlink\" title=\"什么是操作系统内核？内核的主要功能是什么？\"></a>什么是操作系统内核？内核的主要功能是什么？</h5></li>\n</ol>\n<ul>\n<li>  答：内核是操作系统最基本部分。主要功能是为众多应用程序提供对计算机硬件的安全访问。</li>\n</ul>\n<ol start=\"3\">\n<li><h5 id=\"什么是系统调用？系统调用与一般程序有什么不同？\"><a href=\"#什么是系统调用？系统调用与一般程序有什么不同？\" class=\"headerlink\" title=\"什么是系统调用？系统调用与一般程序有什么不同？\"></a>什么是系统调用？系统调用与一般程序有什么不同？</h5></li>\n</ol>\n<ul>\n<li>  答：系统调用是操作系统内核和用户运行程序之间的接口。不同：<code>运行的状态不同</code>，在程序中的过程一般或都是用户程序，或都是系统程序，都是运行在同一个系统状态的（用户态或内核态）。<code>进入的方式不同</code>，一般程序可以直接由调用过程直接转换到被调用过程，而系统调用则不允许，只能通过一条能产生异常的机器指令（”自陷指令”或叫”访管指令”）进入操作系统，再转到相应的应用处理程序。<code>返回的方式不同</code>。<code>代码层次不同</code>，一般程序是用户级程序，而系统调用是操作系统的代码程序，是系统级程序。<a href=\"%5B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%92%8C%E4%B8%80%E8%88%AC%E8%BF%87%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB_%E7%99%BE%E5%BA%A6%E7%9F%A5%E9%81%93\" title=\"baidu.com)](https://zhidao.baidu.com/question/436653622.html\">^1</a></li>\n</ul>\n<ol start=\"4\">\n<li><h5 id=\"什么是进程，为什么OS要引入进程\"><a href=\"#什么是进程，为什么OS要引入进程\" class=\"headerlink\" title=\"什么是进程，为什么OS要引入进程?\"></a>什么是进程，为什么OS要引入进程?</h5></li>\n</ol>\n<ul>\n<li>  答：进程是一个<strong>具有一定独立功能的程序在一个数据集上的一次动态执行的过程</strong>；引入进程是为了提高计算机资源的利用率。</li>\n</ul>\n<ol start=\"5\">\n<li><h5 id=\"进程的基本状态有哪些？会由什么事件导致进程状态的转化？\"><a href=\"#进程的基本状态有哪些？会由什么事件导致进程状态的转化？\" class=\"headerlink\" title=\"进程的基本状态有哪些？会由什么事件导致进程状态的转化？\"></a>进程的基本状态有哪些？会由什么事件导致进程状态的转化？</h5></li>\n</ol>\n<ul>\n<li>  答：就绪(Ready)状态、执行(Running)状态、阻塞(Block)状态。等待I/O的结果、等待某一进程提供输入、运行进程用完时间片、高优先级进中断低优先级线程、调度程序选择新进程运行、等待事件发生。</li>\n</ul>\n<ol start=\"6\">\n<li><h5 id=\"什么是临界资源？什么是临界区？\"><a href=\"#什么是临界资源？什么是临界区？\" class=\"headerlink\" title=\"什么是临界资源？什么是临界区？\"></a>什么是临界资源？什么是临界区？</h5></li>\n</ol>\n<ul>\n<li>  答：需要互斥访问的共享资源为临界资源。完成对共享内存和共享资源的访问工作叫做临界区。</li>\n</ul>\n<ol start=\"7\">\n<li><h5 id=\"什么是忙等？它有什么缺点？\"><a href=\"#什么是忙等？它有什么缺点？\" class=\"headerlink\" title=\"什么是忙等？它有什么缺点？\"></a>什么是忙等？它有什么缺点？</h5></li>\n</ol>\n<ul>\n<li>  答：一个进程位于其临界区内时，任何试图进入其临界区的进程都必须在其进入代码中持续地循环。容易造成资源利用率低，系统阻塞。</li>\n</ul>\n<ol start=\"8\">\n<li><h5 id=\"m个共享进程共享一个临界资源，问信号量的变化范围。\"><a href=\"#m个共享进程共享一个临界资源，问信号量的变化范围。\" class=\"headerlink\" title=\"m个共享进程共享一个临界资源，问信号量的变化范围。\"></a>m个共享进程共享一个临界资源，问信号量的变化范围。</h5></li>\n</ol>\n<ul>\n<li>  答：信号量初始值为1，每进行一次P操作则其值减1，每进行一次V操作则其值加1，当有一个进程获得资源，其他m–1个进程在等待队列中时，其值为-(m-1)</li>\n</ul>\n<ol start=\"9\">\n<li> 什么是进程的同步？它包含哪两种形式？什么是临界资源、临界区？</li>\n</ol>\n<ul>\n<li>  答：进程的同步是指：在多道程序环境下，进程是并发执行的，不同进程之间具有不同的互相制约条件。两种形式：<code>同步代码块</code>(被同步关键字封装的代码) 、<code>同步函数</code>(被同步关键字修饰的函数)。</li>\n</ul>\n<ol start=\"9\">\n<li> 男女生共同使用公共洗澡间。规则是：洗澡间门上有可以翻的牌子，牌子分别为“无人”、“男”“女”。若来洗澡的同学发现牌子显示为“无人”，则可以把牌子翻成和自己一样的性别，然后入室洗澡。若来洗澡的同学发现牌子和自己的性别相同，可以直接入室洗澡。若来洗澡的同学发现牌子和自己的性别不同，则须在室外等待。最后一个洗澡的同学离开洗澡间时需要将牌子翻成“无人”。请使用信号量和PV操作，设计男生和女生的同步机制。</li>\n</ol>\n<ul>\n<li>答：  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//空闲资源数</span></span><br><span class=\"line\">semaph mutex=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//占用浴室男生数，占用浴室女生数</span></span><br><span class=\"line\"><span class=\"type\">int</span> S_man=<span class=\"number\">0</span>,S_women=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//等待的男生数,等待的女生数</span></span><br><span class=\"line\"><span class=\"type\">int</span> man_wait = <span class=\"number\">0</span>,women_wait = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//男生想要进入浴室</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">man_want_entry</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(S_women==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">     P(mutex);</span><br><span class=\"line\">     S_man++;</span><br><span class=\"line\">     洗澡...</span><br><span class=\"line\">     man_leave_bathroom();</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      man_wait++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//男生离开浴室</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">man_leave_bathroom</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  S_man--;</span><br><span class=\"line\">  V(mutex);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//女生想要进入浴室</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">woman_want_entry</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  P(mutex);</span><br><span class=\"line\">  <span class=\"keyword\">if</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"9\">\n<li>某机房有N台电脑。门口有一个刷卡机。学生上机时，必须在刷卡机上刷卡登录，下机时也必须在刷卡机上刷卡结算费用。请用信号量方法给来上机的同学设计同步机制。</li>\n<li> 线程是什么？线程主要包含什么内容？内核级线程和用户级线程是什么？</li>\n</ol>\n<pre><code>答：线程是操作系统能够进行运算调度的最小单位。主要包含线程ID、程序计数器、寄存器组合堆栈。内核级线程是由内核管理的线程。用户级线程是指不需要内核支持而在用户程序中实现的线程。\n</code></pre>\n<h2 id=\"处理机调度和死锁\"><a href=\"#处理机调度和死锁\" class=\"headerlink\" title=\"处理机调度和死锁\"></a>处理机调度和死锁</h2><h3 id=\"处理机调度的基本概念\"><a href=\"#处理机调度的基本概念\" class=\"headerlink\" title=\"处理机调度的基本概念\"></a>处理机调度的基本概念</h3><p>处理 一个CPU中有多个进程的竞争(选择一个进程将处理机分配给它) 称为 <code>调度程序</code>, 该程序使用的算法叫做 <code>调度算法</code>。</p>\n<h4 id=\"三种调度\"><a href=\"#三种调度\" class=\"headerlink\" title=\"三种调度\"></a>三种调度</h4><p>进程调度(初级调度)、内存调度(中级调度)、作业调度(高级调度)</p>\n<ul>\n<li>进程调度(内存—&gt;CPU)  频率最高。按照某种调度算法，从就绪队列选择一个进程分配给处理机。</li>\n<li>内存调度(外存—&gt;内存)  频率中等。按照某种调度算法，从 <strong>挂起队列</strong> 选择合适进程将其数据调回内存。</li>\n<li>作业调度(外存—&gt;内存)  频率最低。按照某种调度算法，从 <strong>后备队列</strong> 中选择合适的作业将其调入内存，并为其创建进程(PCB)。</li>\n</ul>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E4%B8%89%E7%A7%8D%E8%B0%83%E5%BA%A6.png\" alt=\"image-20220324100005952\"></p>\n<h4 id=\"进程行为\"><a href=\"#进程行为\" class=\"headerlink\" title=\"进程行为\"></a>进程行为</h4><p>进程分为计算密集型(CPU-Bound)和I/O密集型(I/O-Bound)。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220411083017883.png\" alt=\"image-20220411083017883\"></p>\n<p>CPU的提高比磁盘更快？越来越多的进程倾向于IO密集型</p>\n<h3 id=\"调度算法\"><a href=\"#调度算法\" class=\"headerlink\" title=\"调度算法\"></a>调度算法</h3><h4 id=\"FCFS调度算法\"><a href=\"#FCFS调度算法\" class=\"headerlink\" title=\"FCFS调度算法\"></a>FCFS调度算法</h4><p>批处理系统的先来先服务调度算法(FCFS, First come First Served或叫FIFO First In First Out)，按照作业到达的先后次序进行调度。</p>\n<p>优点：简单，易于实现，如排队。</p>\n<p>缺点：若出现长作业出现在短作业之前的情况，会增加平均周转时间</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413143429011.png\" alt=\"image-20220413143429011\"></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413143446410.png\" alt=\"image-20220413143446410\"></p>\n<h4 id=\"SJF调度算法\"><a href=\"#SJF调度算法\" class=\"headerlink\" title=\"SJF调度算法\"></a>SJF调度算法</h4><p>批处理系统的短作业优先调度算法(SJF, Shortest Job First)。</p>\n<p>优点：减少了平均周转时间</p>\n<p>缺点：大作业的的周转时间变长，不适合一些大项目？？</p>\n<p>两种实现方案</p>\n<ul>\n<li>不可抢占方式  当前作业运行时不会被打断直到运行完毕或阻塞时，才让出CPU。</li>\n<li>可抢占方式  当一个新的短作业到来时，若其运行时间小于当前正在运行作业的 <code>剩余时间</code>，则抢占CPU运行。（此方式也叫SRTF，Shortest Remaining Time First）</li>\n</ul>\n<p>不可抢占式SJF例题，求平均周转时间</p>\n<p>作业</p>\n<p>进入时刻（H）</p>\n<p>运行时间（H）</p>\n<p>1</p>\n<p>8</p>\n<p>2</p>\n<p>2</p>\n<p>8.5</p>\n<p>0.5</p>\n<p>3</p>\n<p>9</p>\n<p>0.1</p>\n<p>4</p>\n<p>9.5</p>\n<p>0.2</p>\n<p>​ 例题作业</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413144946937.png\" alt=\"image-20220413144946937\"></p>\n<p>抢占式SJF例题，求平均等待时间</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413145021926.png\" alt=\"image-20220413145021926\"></p>\n<h4 id=\"HRRN调度算法\"><a href=\"#HRRN调度算法\" class=\"headerlink\" title=\"HRRN调度算法\"></a>HRRN调度算法</h4><p>批处理系统的最高响应比作业优先算法(HRRN, Highest Response Ratio Next)</p>\n<p>优点：综合平衡了FCFS和SJF</p>\n<p>响应比 R = 响应时间/需运行时间=1＋已等待时间 / 需运行时间。</p>\n<p>作业</p>\n<p>进入时刻（H）</p>\n<p>运行时间（H）</p>\n<p>1</p>\n<p>8</p>\n<p>2</p>\n<p>2</p>\n<p>8.5</p>\n<p>0.5</p>\n<p>3</p>\n<p>9</p>\n<p>0.1</p>\n<p>4</p>\n<p>9.5</p>\n<p>0.2</p>\n<p>​ 例题作业</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413152036504.png\" alt=\"image-20220413152036504\"></p>\n<p>RR调度算法</p>\n<p>交互式系统的时间片轮转调度算法（RR，Round-Robin）</p>\n<p>MQ调度算法</p>\n<p>多级队列调度算法（MQ，Multilevel Queue）</p>\n<p>多级反馈算法</p>\n<h3 id=\"实时调度\"><a href=\"#实时调度\" class=\"headerlink\" title=\"实时调度\"></a>实时调度</h3><h3 id=\"多处理系统的调度\"><a href=\"#多处理系统的调度\" class=\"headerlink\" title=\"多处理系统的调度\"></a>多处理系统的调度</h3><h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><h4 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h4><p>每个进程都占用着若干个资源，同时又在等待得到该组进程中另一进程所占用的资源，因而造成的所有进程都无法进展下去的现象。这一组进程就称为死锁进程。</p>\n<h4 id=\"计算机资源\"><a href=\"#计算机资源\" class=\"headerlink\" title=\"计算机资源\"></a>计算机资源</h4><p>有：CPU、时钟、IO设备、内存空间、数据库记录等。</p>\n<p>资源分为两大类：</p>\n<ul>\n<li>可抢占的  存储器、内存、CPU等。当进程正在使用该类型资源时，抢占不会造成任何不良影响。</li>\n<li>不可抢占的  刻录机、光盘、磁带机、打印机等。当一个进程正在使用该类型资源时，不可强行抢占，否则会导致进程运行失败。</li>\n</ul>\n<p><strong>注意</strong>:不可抢占性资源是临界资源，但是临界资源不是不可抢占性资源</p>\n<p>死锁主要由不可抢占资源引起</p>\n<h4 id=\"死锁产生的原因\"><a href=\"#死锁产生的原因\" class=\"headerlink\" title=\"死锁产生的原因\"></a>死锁产生的原因</h4><ul>\n<li>资源有限  进程中有多个共享资源如打印机、公共队列等</li>\n<li>并发进程间的推进顺序不当  请求和释放资源的顺序不当，会导致产生进程死锁</li>\n</ul>\n<h3 id=\"预防死锁\"><a href=\"#预防死锁\" class=\"headerlink\" title=\"预防死锁\"></a>预防死锁</h3><h3 id=\"死锁的检测和解除\"><a href=\"#死锁的检测和解除\" class=\"headerlink\" title=\"死锁的检测和解除\"></a>死锁的检测和解除</h3><h3 id=\"课后作业-1\"><a href=\"#课后作业-1\" class=\"headerlink\" title=\"课后作业\"></a>课后作业</h3><ol>\n<li>线程是什么？线程主要包含什么内容？内核级线程和用户级线程是什么？ 答：线程是操作系统能够进行运算调度的最小单位。线程的实体包括程序、数据和TCB。内核级线程是，用户级线程是在用户空间上实现，不依赖于系统内核。内核级线程是系统内核管理的线程，由内核完成调度。</li>\n<li>假定在一台处理机上执行下表所示的作业，假定这些作业在0时刻，以1,2,3,4,5的次序顺序到达。说明分别用FCFS、RR（时间片1）、SJF、以及非抢占式优先级（优先级1最高）调度算法，给出平均周转时间。 <strong>作业</strong> <strong>执行时间</strong> <strong>优先级</strong> <strong>1</strong> 10 3 <strong>2</strong> 1 1 <strong>3</strong> 2 3 <strong>4</strong> 1 4 <strong>5</strong> 5 2 FCFS： T = (10+10+11+11+15)/5=11.4 RR: T = (19+1+5+1+10)/5 = 11.2 SJF:<ul>\n<li>抢占式：T = ()</li>\n<li>  非抢占式: T = ()</li>\n</ul>\n 非抢占式优先级：T = (10+10+17+17+12)/5 = 13.2</li>\n<li>一带闸门的运河，其上有两架吊桥。吊桥坐落在一条公路上，为使该公路避开一块沼泽地而令其横跨运河两次。运河和公路的交通都是单方向的。运河上的基本运输由驳船担负。在一艘驳船接近吊桥A时就拉汽笛警告，若桥上无车辆，吊桥就吊起，直到驳船尾部通过此桥为止。对吊桥B也按同样次序处理。<ul>\n<li>一艘典型驳船的长度为200米，当它在河上航行时是否会产生死锁？若会，其理由是什么？  答：会产生，假设A无车辆，迪奥条吊起驳船通过100米到达B，若此时B上有车辆，会发生A处吊桥不放下，汽车无法通过，B处吊桥不吊起驳船无法通过的现象。</li>\n<li>如何能克服一个可能的死锁？请提出一个防止死锁的办法。  答：限制驳船的大小不超过100米；当AB上无车辆时且有驳船通过时，同时吊起AB桥。</li>\n<li>如何利用信号灯上的P、V操作实现车辆和驳船的同步？  答：  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int p,v</span><br></pre></td></tr></table></figure>\n  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220410221633012.png\" alt=\"image-20220410221633012\"></li>\n</ul>\n</li>\n<li>设系统中有三种类型的资源（A、B、C）和五个进程（P1、P2、P3、P4、P5），A资源的数量为17，B资源的数量为5，C资源的数量为20。在T0时刻系统状态如下表所示。系统采用银行家算法实施死锁避免策略。<ul>\n<li>  T0时刻是否为安全状态若是，请给出安全序列。</li>\n<li>  在T0时刻若进程P2请求资源（0, 3, 4），是否能实施资源分配为什么</li>\n<li>  在（2）的基础上，若进程P4请求资源（2, 0, 1），是否能实施资源分配，为什么</li>\n<li>在（3）的基础上，若进程P2请求资源（0, 2, 0），是否能实施资源分配，为什么</li>\n<li><em>MAX</em>*</li>\n<li><em>ALLOCTION</em>*</li>\n</ul>\n A B C A B C <strong>P1</strong> 5 5 9 2 1 2 <strong>P2</strong> 5 3 6 4 0 2 <strong>P3</strong> 4 0 11 4 0 5 <strong>P4</strong> 4 2 5 2 0 4 <strong>P5</strong> 4 2 4 3 1 4</li>\n</ol>\n<h2 id=\"存储器管理\"><a href=\"#存储器管理\" class=\"headerlink\" title=\"存储器管理\"></a>存储器管理</h2><h3 id=\"程序的装入和链接\"><a href=\"#程序的装入和链接\" class=\"headerlink\" title=\"程序的装入和链接\"></a>程序的装入和链接</h3><p>buffer和cache的解释</p>\n<ul>\n<li>A buffer is something that has yet to be “written” to disk.</li>\n<li>A cache is something that has been “read” from the disk and stored for later use.</li>\n</ul>\n<p>也就是说buffer是用于存放要输出到disk（块设备）的数据的，而cache存放从disk上读出的数据。这二者是为了提高IO性能的，并由OS管理。</p>\n<h3 id=\"连续分配方式\"><a href=\"#连续分配方式\" class=\"headerlink\" title=\"连续分配方式\"></a>连续分配方式</h3><h3 id=\"分页存储管理\"><a href=\"#分页存储管理\" class=\"headerlink\" title=\"分页存储管理\"></a>分页存储管理</h3><p>分页系统的地址转换机制</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220414090249801.png\" alt=\"image-20220414090249801\"></p>\n<h3 id=\"分段存储管理\"><a href=\"#分段存储管理\" class=\"headerlink\" title=\"分段存储管理\"></a>分段存储管理</h3><h3 id=\"虚拟存储器的基本概念\"><a href=\"#虚拟存储器的基本概念\" class=\"headerlink\" title=\"虚拟存储器的基本概念\"></a>虚拟存储器的基本概念</h3><h3 id=\"请求分页存储管理方式\"><a href=\"#请求分页存储管理方式\" class=\"headerlink\" title=\"请求分页存储管理方式\"></a>请求分页存储管理方式</h3><h3 id=\"页面置换算法\"><a href=\"#页面置换算法\" class=\"headerlink\" title=\"页面置换算法\"></a>页面置换算法</h3><h3 id=\"请求分段存储管理方式\"><a href=\"#请求分段存储管理方式\" class=\"headerlink\" title=\"请求分段存储管理方式\"></a>请求分段存储管理方式</h3><h3 id=\"课后作业-2\"><a href=\"#课后作业-2\" class=\"headerlink\" title=\"课后作业\"></a>课后作业</h3><ol>\n<li>什么是逻辑地址，什么是物理地址？ 答：逻辑地址是CPU所生成的地址。加载到内存地址寄存器中的地址，内存单元的真正地址。</li>\n<li>什么是地址重定位？动态分区存储和分页存储如何进行地址重定位？ 答：地址重定向是把程序的逻辑地址空间转变为内存中的实际物理地址空间的过程。动态分区存储在程序运行时CPU每次访问内存单元才进行地址变换。分页存储</li>\n<li>相对于分区存储管理，分页存储管理的优势是什么？分页过大或过小会带来什么问题？ 答：使得一个程序的逻辑地址可以分布在若干个离散的内存块上，减少内碎片和外碎片，提高内存利用率。过大会导致页内碎片增多。过小导致进程页表过长，占用大量内存，还降低页面换进换出的效率。</li>\n<li>如何管理内存块的分配与回收？分别以内存分区表和位图来说明。 答：</li>\n<li>编程题：求m个进程（序号0到m-1）, n个资源情况下，所有的安全序列。 输入<blockquote>\n<p>m,n m*n 矩阵 max m*n 矩阵 allo n维向量 avai</p>\n</blockquote>\n 输出所有安全序列</li>\n</ol>\n<p>[^PCB]: (Process Control Block,PCB,进程控制块) [^IPC]: (InterProcess Communication,IPC,) [^条件变量]: (Condition Variables,条件变量) [^ACK]: (Acknowledge character,ACK,确认字符) [^TCB]: (Thread Control Block,TCB,线程控制块 )</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h2><h3 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h3><h4 id=\"什么是进程\"><a href=\"#什么是进程\" class=\"headerlink\" title=\"什么是进程\"></a>什么是进程</h4><p>进程是</p>\n<p>进程(Process)包括 <code>程序的代码</code> 、<code>程序的数据</code>、<code>指示下一条运行的指令</code>、<code>一组通用寄存器的当前值</code>、 <code>一组系统资源</code>。</p>\n<p>进程特征包括 <code>结构特征</code>、 <code>动态性</code>、 <code>并发性</code>、<code>独立性</code>、 <code>异步性</code></p>\n<p>进程三种基本状态： <code>就绪状态</code>、<code>执行状态</code>、<code>阻塞状态</code></p>\n<p>（有的为五种：最前为 <code>新建态</code>、最后为 <code>终止态</code>）</p>","more":"<p>进程状态转换关系</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%85%B3%E7%B3%BB.png\" alt=\"进程状态转换关系\"></p>\n<p>挂起状态(基本状态之外): 进程被从内存调出进驻外存，不再接受调度。</p>\n<p>PCB[^PCB]: PCB中记录了操作系统所需的，用于描述进程的当前情况以及控制进程运行的全部信息。<strong>PCB是进程存在的唯一标志</strong>。</p>\n<p>上下文切换: 将CPU切换到另一进程需要保存原来进程的状态并装入新进程的保存状态。上下文切换时间与硬件支持密切相关。</p>\n<h4 id=\"进程控制\"><a href=\"#进程控制\" class=\"headerlink\" title=\"进程控制\"></a>进程控制</h4><ul>\n<li>进程创建：在一个已经存在的进程（用户进程或系统进程）当中，通过系统调用来创建一个新的进程。  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA.png\" alt=\"进程创建\"></li>\n<li>创建步骤：1、申请空白PCB 2、新进程分配资源 3、初始化PCB 4、进程插入就绪状态</li>\n<li>进程终止  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E8%BF%9B%E7%A8%8B%E7%BB%88%E6%AD%A2.png\" alt=\"进程终止\"></li>\n<li>进程阻塞与唤醒  原因：<code>请求系统服务</code>、<code>新数据尚未到达</code>、<code>无进程新任务</code>  阻塞过程：调用 <code>阻塞原语block</code> 把自己阻塞、将PCB插入阻塞队列、重新调度。  唤醒过程：阻塞队列移出阻塞进程、PCB从阻塞改为就绪、PCB插入就绪队列。</li>\n<li>进程挂起与激活  挂起过程：修改进程状态、PCB复制到指定内存块、（如有必要转调度程序）。  激活状态：进程调入内存、修改进程状态、（如抢占调度考虑是否执行）</li>\n</ul>\n<h4 id=\"进程同步\"><a href=\"#进程同步\" class=\"headerlink\" title=\"进程同步\"></a>进程同步</h4><ul>\n<li>进程通信[^IPC]</li>\n<li>临界区和临界资源  进程的工作分为两类：1、内部计算 2、对共享内存或共享文件的访问（竞争条件的产生）  完成第二类工作的程序片段就是 <code>临界区</code>， 需要互斥访问的共享资源就是 <code>临界资源</code> 。</li>\n<li>整形信号量：Dijkstra提出：把整形信号量定义为一个整形量，除初始化外，仅能通过两个标准的 <code>原子操作</code> (Atomic Operation) <code>wait(S)</code>和 <code>signal(S)</code>来访问。分别称为P、V操作。  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//P原语操作的定义</span></span><br><span class=\"line\">procedure <span class=\"title function_\">wait</span><span class=\"params\">(S)</span></span><br><span class=\"line\">  var S:semaphore;</span><br><span class=\"line\">begin</span><br><span class=\"line\">  S.value:=S.value<span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> S.value&lt;<span class=\"number\">0</span> then</span><br><span class=\"line\">      <span class=\"title function_\">block</span><span class=\"params\">(S,L)</span></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/P%E5%8E%9F%E8%AF%AD%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9A%E4%B9%89.png\" alt=\"P原语操作的定义\">  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//V原语操作的定义</span></span><br><span class=\"line\">procedure <span class=\"title function_\">signal</span><span class=\"params\">(S)</span></span><br><span class=\"line\">  var S:semaphore;</span><br><span class=\"line\">begin</span><br><span class=\"line\">  S.value:=S.value+<span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> S.value&lt;=<span class=\"number\">0</span> then</span><br><span class=\"line\">      wakeup(S,L);</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/V%E5%8E%9F%E8%AF%AD%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9A%E4%B9%89.png\" alt=\"V原语操作的定义\"></li>\n<li>记录型信号量  信号量被描述为一个记录(或者结构)  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E4%BF%A1%E5%8F%B7%E9%87%8F%E8%A2%AB%E6%8F%8F%E8%BF%B0%E4%B8%BA%E4%B8%80%E4%B8%AA%E8%AE%B0%E5%BD%95.png\" alt=\"信号量被描述为一个记录\">  S.value的处置表示为系统中某类资源的数目，因此也称资源信号量。每次wait操作进程请求该一个单位的该类资源；当S.value&lt;0时，进程调用block原语自我阻塞，并插入信号量链表S.L中。</li>\n<li>AND型信号量  一次性将进程所需所有资源分配到进程里，待使用完释放(避免死锁)</li>\n<li>利用信号量实现进程互斥  n个进程互斥地使用某个临界资源是，设定信号量<code>mutex</code> 用于互斥访问，初始化为1。  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5.png\" alt=\"信号量实现进程互斥\">  进程互斥还可能出现死锁</li>\n<li>同步与互斥的混合问题  有一个仓库，可以存放A和B 两种产品。要求：1)每次只能存入一种产品(A或B)；2)-N&lt;A产品数量-B产品数量&lt;M。试用PV操作描述产品A与产品B的入库过程。  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%90%8C%E6%AD%A5%E4%B8%8E%E4%BA%92%E6%96%A5%E7%9A%84%E6%B7%B7%E5%90%88%E9%97%AE%E9%A2%98.png\" alt=\"同步与互斥的混合问题\"></li>\n</ul>\n<h4 id=\"经典IPC问题\"><a href=\"#经典IPC问题\" class=\"headerlink\" title=\"经典IPC问题\"></a>经典IPC问题</h4><ul>\n<li>主要问题：如何选择信号量, 如何安排P、V原语的顺序。  生产者-消费者问题、哲学家进餐问题、读者-写者问题、理发师问题、和尚喝水问题。</li>\n</ul>\n<p>信号量方法的缺点：</p>\n<ul>\n<li>  逻辑关系复杂，可读性差、维护困难、容易导致竞争状态或者死锁严重问题。</li>\n</ul>\n<h4 id=\"管程\"><a href=\"#管程\" class=\"headerlink\" title=\"管程\"></a>管程</h4><p>由Hoare和Hansen提出，基本思想：<code>将共享变量以及对共享变量所进行的操作封装在一个模块中</code>。</p>\n<ul>\n<li>结构  由一组变量、数据结构和函数构成的软件模块。  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E7%AE%A1%E7%A8%8B%20.png\" alt=\"管程 \"></li>\n<li>特性  封装性、互斥性、语言相关性</li>\n<li>等待与唤醒  条件变量[^条件变量] 用于描述等待的原因，通过 <code>wait</code> 和 <code>signal</code> 操作条件变量。<code>wait</code> 和 <code>signal</code> 类似P、V原语，但条件变量不取具体数值，不进行累加。</li>\n<li>send 和 receive  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">send(target,&amp;msg)<span class=\"comment\">//将消息msg发送到目标(进程)target中</span></span><br><span class=\"line\">receive(src,&amp;msg)<span class=\"comment\">//接收src传来的msg,如果无消息可用，阻塞接受者</span></span><br></pre></td></tr></table></figure>\n  有可能面临<code>ACK</code> [^ACK]丢失问题</li>\n</ul>\n<h3 id=\"进程高级通信\"><a href=\"#进程高级通信\" class=\"headerlink\" title=\"进程高级通信\"></a>进程高级通信</h3><h4 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h4><ul>\n<li>线程与进程  进程=资源平台+线程<ul>\n<li>  一个进程中可以同时存在多个线程;</li>\n<li>  各个线程之间可以并发地执行;</li>\n<li>  各个线程之间可以共享地址空间。</li>\n</ul>\n  进程是资源分配单位，线程是CPU调度单位；线程可实现进程级的并发。  单线程与多线程的关系图：  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%8D%95%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%85%B3%E7%B3%BB%E5%9B%BE.png\" alt=\"单线程与多线程的关系图\"></li>\n<li>用户线程  在用户空间实现，不依赖操作系统的内核。  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B.png\" alt=\"用户线程\"></li>\n<li>内核线程  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B.png\" alt=\"内核线程\">  由内核来维护进程和线程的上下文信息（PCB[^PCB]和TCB[^TCB]）。线程的创建、终止和切换都是通过系统调用的方式来进行，需要从用户态转换到系统态，由内核来完成，系统开销较大。</li>\n</ul>\n<h3 id=\"用户态和内核态\"><a href=\"#用户态和内核态\" class=\"headerlink\" title=\"用户态和内核态\"></a>用户态和内核态</h3><p>两种CPU状态：内核态（Kernel Mode，运行操作系统程序）、用户态（User Mode，运行用户程序 ）</p>\n<h4 id=\"指令划分\"><a href=\"#指令划分\" class=\"headerlink\" title=\"指令划分\"></a>指令划分</h4><p>特权指令：只能由操作系统使用、用户程序不能使用的指令。 举例：启动I/O 内存清零 修改程序状态字 设置时钟 允许/禁止终端 停机</p>\n<p>非特权指令：用户程序可以使用的指令。 举例：控制转移 算数运算 取数指令 访管指令（使用户程序从用户态陷入内核态）</p>\n<h4 id=\"特权级别\"><a href=\"#特权级别\" class=\"headerlink\" title=\"特权级别\"></a>特权级别</h4><p>特权环：R0、R1、R2和R3</p>\n<p>R0相当于内核态，R3相当于用户态；</p>\n<p>不同级别能够运行不同的指令集合；</p>\n<h4 id=\"CPU状态之间的转换\"><a href=\"#CPU状态之间的转换\" class=\"headerlink\" title=\"CPU状态之间的转换\"></a>CPU状态之间的转换</h4><p><strong>用户态 -&gt;内核态：</strong>唯一途径是通过中断、异常、陷入机制（访管指令）</p>\n<p><strong>内核态 -&gt;用户态：</strong>设置程序状态字PSW</p>\n<h4 id=\"内核态与用户态的区别\"><a href=\"#内核态与用户态的区别\" class=\"headerlink\" title=\"内核态与用户态的区别\"></a>内核态与用户态的区别</h4><p>内核态与用户态是操作系统的两种运行级别，当程序运行在3级特权级上时，就可以称之为运行在用户态。因为这是最低特权级，是普通的用户进程运行的特权级，大部分用户直接面对的程序都是运行在用户态；当程序运行在0级特权级上时，就可以称之为运行在内核态。</p>\n<p>运行在用户态下的程序不能直接访问操作系统内核数据结构和程序。当我们在系统中执行一个程序时，大部分时间是运行在用户态下的，在其需要操作系统帮助完成某些它没有权力和能力完成的工作时就会切换到内核态。</p>\n<p>这两种状态的主要差别是：处于用户态执行时，进程所能访问的内存空间和对象受到限制，其所处于占有的处理机是可被抢占的 ；而处于核心态执行中的进程，则能访问所有的内存空间和对象，且所占有的处理机是不允许被抢占的</p>\n<h3 id=\"并发和并行\"><a href=\"#并发和并行\" class=\"headerlink\" title=\"并发和并行\"></a>并发和并行</h3><h4 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h4><p>Concurrent，在操作系统中，一个时间段里有几个程序都处于已启动运行到运行完成之间，且这几个程序在同一个处理机上完成。</p>\n<h4 id=\"并行\"><a href=\"#并行\" class=\"headerlink\" title=\"并行\"></a>并行</h4><p>Parallel，当系统有一个以上CPU时，一个CPU执行一个进程，另一个CPU可以执行另一个进程，两个进程互不抢夺CPU资源，可以同时进行。</p>\n<h3 id=\"课后作业\"><a href=\"#课后作业\" class=\"headerlink\" title=\"课后作业\"></a>课后作业</h3><ol>\n<li><h5 id=\"操作系统的四个特征是什么？分别是什么含义？\"><a href=\"#操作系统的四个特征是什么？分别是什么含义？\" class=\"headerlink\" title=\"操作系统的四个特征是什么？分别是什么含义？\"></a>操作系统的四个特征是什么？分别是什么含义？</h5></li>\n</ol>\n<ul>\n<li>  答：1、并发：两个或者多个事件在同一时间间隔内发生；2、共享：系统内资源可供多个并发进程共同使用；3、异步：进程以不可预知的速度向前推进；4、虚拟：通过某种技术把一个物理实体变成若干个逻辑上的对应物。</li>\n</ul>\n<ol start=\"2\">\n<li><h5 id=\"什么是操作系统内核？内核的主要功能是什么？\"><a href=\"#什么是操作系统内核？内核的主要功能是什么？\" class=\"headerlink\" title=\"什么是操作系统内核？内核的主要功能是什么？\"></a>什么是操作系统内核？内核的主要功能是什么？</h5></li>\n</ol>\n<ul>\n<li>  答：内核是操作系统最基本部分。主要功能是为众多应用程序提供对计算机硬件的安全访问。</li>\n</ul>\n<ol start=\"3\">\n<li><h5 id=\"什么是系统调用？系统调用与一般程序有什么不同？\"><a href=\"#什么是系统调用？系统调用与一般程序有什么不同？\" class=\"headerlink\" title=\"什么是系统调用？系统调用与一般程序有什么不同？\"></a>什么是系统调用？系统调用与一般程序有什么不同？</h5></li>\n</ol>\n<ul>\n<li>  答：系统调用是操作系统内核和用户运行程序之间的接口。不同：<code>运行的状态不同</code>，在程序中的过程一般或都是用户程序，或都是系统程序，都是运行在同一个系统状态的（用户态或内核态）。<code>进入的方式不同</code>，一般程序可以直接由调用过程直接转换到被调用过程，而系统调用则不允许，只能通过一条能产生异常的机器指令（”自陷指令”或叫”访管指令”）进入操作系统，再转到相应的应用处理程序。<code>返回的方式不同</code>。<code>代码层次不同</code>，一般程序是用户级程序，而系统调用是操作系统的代码程序，是系统级程序。<a href=\"%5B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E5%92%8C%E4%B8%80%E8%88%AC%E8%BF%87%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB_%E7%99%BE%E5%BA%A6%E7%9F%A5%E9%81%93\" title=\"baidu.com)](https://zhidao.baidu.com/question/436653622.html\">^1</a></li>\n</ul>\n<ol start=\"4\">\n<li><h5 id=\"什么是进程，为什么OS要引入进程\"><a href=\"#什么是进程，为什么OS要引入进程\" class=\"headerlink\" title=\"什么是进程，为什么OS要引入进程?\"></a>什么是进程，为什么OS要引入进程?</h5></li>\n</ol>\n<ul>\n<li>  答：进程是一个<strong>具有一定独立功能的程序在一个数据集上的一次动态执行的过程</strong>；引入进程是为了提高计算机资源的利用率。</li>\n</ul>\n<ol start=\"5\">\n<li><h5 id=\"进程的基本状态有哪些？会由什么事件导致进程状态的转化？\"><a href=\"#进程的基本状态有哪些？会由什么事件导致进程状态的转化？\" class=\"headerlink\" title=\"进程的基本状态有哪些？会由什么事件导致进程状态的转化？\"></a>进程的基本状态有哪些？会由什么事件导致进程状态的转化？</h5></li>\n</ol>\n<ul>\n<li>  答：就绪(Ready)状态、执行(Running)状态、阻塞(Block)状态。等待I/O的结果、等待某一进程提供输入、运行进程用完时间片、高优先级进中断低优先级线程、调度程序选择新进程运行、等待事件发生。</li>\n</ul>\n<ol start=\"6\">\n<li><h5 id=\"什么是临界资源？什么是临界区？\"><a href=\"#什么是临界资源？什么是临界区？\" class=\"headerlink\" title=\"什么是临界资源？什么是临界区？\"></a>什么是临界资源？什么是临界区？</h5></li>\n</ol>\n<ul>\n<li>  答：需要互斥访问的共享资源为临界资源。完成对共享内存和共享资源的访问工作叫做临界区。</li>\n</ul>\n<ol start=\"7\">\n<li><h5 id=\"什么是忙等？它有什么缺点？\"><a href=\"#什么是忙等？它有什么缺点？\" class=\"headerlink\" title=\"什么是忙等？它有什么缺点？\"></a>什么是忙等？它有什么缺点？</h5></li>\n</ol>\n<ul>\n<li>  答：一个进程位于其临界区内时，任何试图进入其临界区的进程都必须在其进入代码中持续地循环。容易造成资源利用率低，系统阻塞。</li>\n</ul>\n<ol start=\"8\">\n<li><h5 id=\"m个共享进程共享一个临界资源，问信号量的变化范围。\"><a href=\"#m个共享进程共享一个临界资源，问信号量的变化范围。\" class=\"headerlink\" title=\"m个共享进程共享一个临界资源，问信号量的变化范围。\"></a>m个共享进程共享一个临界资源，问信号量的变化范围。</h5></li>\n</ol>\n<ul>\n<li>  答：信号量初始值为1，每进行一次P操作则其值减1，每进行一次V操作则其值加1，当有一个进程获得资源，其他m–1个进程在等待队列中时，其值为-(m-1)</li>\n</ul>\n<ol start=\"9\">\n<li> 什么是进程的同步？它包含哪两种形式？什么是临界资源、临界区？</li>\n</ol>\n<ul>\n<li>  答：进程的同步是指：在多道程序环境下，进程是并发执行的，不同进程之间具有不同的互相制约条件。两种形式：<code>同步代码块</code>(被同步关键字封装的代码) 、<code>同步函数</code>(被同步关键字修饰的函数)。</li>\n</ul>\n<ol start=\"9\">\n<li> 男女生共同使用公共洗澡间。规则是：洗澡间门上有可以翻的牌子，牌子分别为“无人”、“男”“女”。若来洗澡的同学发现牌子显示为“无人”，则可以把牌子翻成和自己一样的性别，然后入室洗澡。若来洗澡的同学发现牌子和自己的性别相同，可以直接入室洗澡。若来洗澡的同学发现牌子和自己的性别不同，则须在室外等待。最后一个洗澡的同学离开洗澡间时需要将牌子翻成“无人”。请使用信号量和PV操作，设计男生和女生的同步机制。</li>\n</ol>\n<ul>\n<li>答：  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//空闲资源数</span></span><br><span class=\"line\">semaph mutex=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//占用浴室男生数，占用浴室女生数</span></span><br><span class=\"line\"><span class=\"type\">int</span> S_man=<span class=\"number\">0</span>,S_women=<span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//等待的男生数,等待的女生数</span></span><br><span class=\"line\"><span class=\"type\">int</span> man_wait = <span class=\"number\">0</span>,women_wait = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//男生想要进入浴室</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">man_want_entry</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(S_women==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">     P(mutex);</span><br><span class=\"line\">     S_man++;</span><br><span class=\"line\">     洗澡...</span><br><span class=\"line\">     man_leave_bathroom();</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">      man_wait++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//男生离开浴室</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">man_leave_bathroom</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  S_man--;</span><br><span class=\"line\">  V(mutex);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//女生想要进入浴室</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">woman_want_entry</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  P(mutex);</span><br><span class=\"line\">  <span class=\"keyword\">if</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"9\">\n<li>某机房有N台电脑。门口有一个刷卡机。学生上机时，必须在刷卡机上刷卡登录，下机时也必须在刷卡机上刷卡结算费用。请用信号量方法给来上机的同学设计同步机制。</li>\n<li> 线程是什么？线程主要包含什么内容？内核级线程和用户级线程是什么？</li>\n</ol>\n<pre><code>答：线程是操作系统能够进行运算调度的最小单位。主要包含线程ID、程序计数器、寄存器组合堆栈。内核级线程是由内核管理的线程。用户级线程是指不需要内核支持而在用户程序中实现的线程。\n</code></pre>\n<h2 id=\"处理机调度和死锁\"><a href=\"#处理机调度和死锁\" class=\"headerlink\" title=\"处理机调度和死锁\"></a>处理机调度和死锁</h2><h3 id=\"处理机调度的基本概念\"><a href=\"#处理机调度的基本概念\" class=\"headerlink\" title=\"处理机调度的基本概念\"></a>处理机调度的基本概念</h3><p>处理 一个CPU中有多个进程的竞争(选择一个进程将处理机分配给它) 称为 <code>调度程序</code>, 该程序使用的算法叫做 <code>调度算法</code>。</p>\n<h4 id=\"三种调度\"><a href=\"#三种调度\" class=\"headerlink\" title=\"三种调度\"></a>三种调度</h4><p>进程调度(初级调度)、内存调度(中级调度)、作业调度(高级调度)</p>\n<ul>\n<li>进程调度(内存—&gt;CPU)  频率最高。按照某种调度算法，从就绪队列选择一个进程分配给处理机。</li>\n<li>内存调度(外存—&gt;内存)  频率中等。按照某种调度算法，从 <strong>挂起队列</strong> 选择合适进程将其数据调回内存。</li>\n<li>作业调度(外存—&gt;内存)  频率最低。按照某种调度算法，从 <strong>后备队列</strong> 中选择合适的作业将其调入内存，并为其创建进程(PCB)。</li>\n</ul>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E4%B8%89%E7%A7%8D%E8%B0%83%E5%BA%A6.png\" alt=\"image-20220324100005952\"></p>\n<h4 id=\"进程行为\"><a href=\"#进程行为\" class=\"headerlink\" title=\"进程行为\"></a>进程行为</h4><p>进程分为计算密集型(CPU-Bound)和I/O密集型(I/O-Bound)。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220411083017883.png\" alt=\"image-20220411083017883\"></p>\n<p>CPU的提高比磁盘更快？越来越多的进程倾向于IO密集型</p>\n<h3 id=\"调度算法\"><a href=\"#调度算法\" class=\"headerlink\" title=\"调度算法\"></a>调度算法</h3><h4 id=\"FCFS调度算法\"><a href=\"#FCFS调度算法\" class=\"headerlink\" title=\"FCFS调度算法\"></a>FCFS调度算法</h4><p>批处理系统的先来先服务调度算法(FCFS, First come First Served或叫FIFO First In First Out)，按照作业到达的先后次序进行调度。</p>\n<p>优点：简单，易于实现，如排队。</p>\n<p>缺点：若出现长作业出现在短作业之前的情况，会增加平均周转时间</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413143429011.png\" alt=\"image-20220413143429011\"></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413143446410.png\" alt=\"image-20220413143446410\"></p>\n<h4 id=\"SJF调度算法\"><a href=\"#SJF调度算法\" class=\"headerlink\" title=\"SJF调度算法\"></a>SJF调度算法</h4><p>批处理系统的短作业优先调度算法(SJF, Shortest Job First)。</p>\n<p>优点：减少了平均周转时间</p>\n<p>缺点：大作业的的周转时间变长，不适合一些大项目？？</p>\n<p>两种实现方案</p>\n<ul>\n<li>不可抢占方式  当前作业运行时不会被打断直到运行完毕或阻塞时，才让出CPU。</li>\n<li>可抢占方式  当一个新的短作业到来时，若其运行时间小于当前正在运行作业的 <code>剩余时间</code>，则抢占CPU运行。（此方式也叫SRTF，Shortest Remaining Time First）</li>\n</ul>\n<p>不可抢占式SJF例题，求平均周转时间</p>\n<p>作业</p>\n<p>进入时刻（H）</p>\n<p>运行时间（H）</p>\n<p>1</p>\n<p>8</p>\n<p>2</p>\n<p>2</p>\n<p>8.5</p>\n<p>0.5</p>\n<p>3</p>\n<p>9</p>\n<p>0.1</p>\n<p>4</p>\n<p>9.5</p>\n<p>0.2</p>\n<p>​ 例题作业</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413144946937.png\" alt=\"image-20220413144946937\"></p>\n<p>抢占式SJF例题，求平均等待时间</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413145021926.png\" alt=\"image-20220413145021926\"></p>\n<h4 id=\"HRRN调度算法\"><a href=\"#HRRN调度算法\" class=\"headerlink\" title=\"HRRN调度算法\"></a>HRRN调度算法</h4><p>批处理系统的最高响应比作业优先算法(HRRN, Highest Response Ratio Next)</p>\n<p>优点：综合平衡了FCFS和SJF</p>\n<p>响应比 R = 响应时间/需运行时间=1＋已等待时间 / 需运行时间。</p>\n<p>作业</p>\n<p>进入时刻（H）</p>\n<p>运行时间（H）</p>\n<p>1</p>\n<p>8</p>\n<p>2</p>\n<p>2</p>\n<p>8.5</p>\n<p>0.5</p>\n<p>3</p>\n<p>9</p>\n<p>0.1</p>\n<p>4</p>\n<p>9.5</p>\n<p>0.2</p>\n<p>​ 例题作业</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220413152036504.png\" alt=\"image-20220413152036504\"></p>\n<p>RR调度算法</p>\n<p>交互式系统的时间片轮转调度算法（RR，Round-Robin）</p>\n<p>MQ调度算法</p>\n<p>多级队列调度算法（MQ，Multilevel Queue）</p>\n<p>多级反馈算法</p>\n<h3 id=\"实时调度\"><a href=\"#实时调度\" class=\"headerlink\" title=\"实时调度\"></a>实时调度</h3><h3 id=\"多处理系统的调度\"><a href=\"#多处理系统的调度\" class=\"headerlink\" title=\"多处理系统的调度\"></a>多处理系统的调度</h3><h3 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h3><h4 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h4><p>每个进程都占用着若干个资源，同时又在等待得到该组进程中另一进程所占用的资源，因而造成的所有进程都无法进展下去的现象。这一组进程就称为死锁进程。</p>\n<h4 id=\"计算机资源\"><a href=\"#计算机资源\" class=\"headerlink\" title=\"计算机资源\"></a>计算机资源</h4><p>有：CPU、时钟、IO设备、内存空间、数据库记录等。</p>\n<p>资源分为两大类：</p>\n<ul>\n<li>可抢占的  存储器、内存、CPU等。当进程正在使用该类型资源时，抢占不会造成任何不良影响。</li>\n<li>不可抢占的  刻录机、光盘、磁带机、打印机等。当一个进程正在使用该类型资源时，不可强行抢占，否则会导致进程运行失败。</li>\n</ul>\n<p><strong>注意</strong>:不可抢占性资源是临界资源，但是临界资源不是不可抢占性资源</p>\n<p>死锁主要由不可抢占资源引起</p>\n<h4 id=\"死锁产生的原因\"><a href=\"#死锁产生的原因\" class=\"headerlink\" title=\"死锁产生的原因\"></a>死锁产生的原因</h4><ul>\n<li>资源有限  进程中有多个共享资源如打印机、公共队列等</li>\n<li>并发进程间的推进顺序不当  请求和释放资源的顺序不当，会导致产生进程死锁</li>\n</ul>\n<h3 id=\"预防死锁\"><a href=\"#预防死锁\" class=\"headerlink\" title=\"预防死锁\"></a>预防死锁</h3><h3 id=\"死锁的检测和解除\"><a href=\"#死锁的检测和解除\" class=\"headerlink\" title=\"死锁的检测和解除\"></a>死锁的检测和解除</h3><h3 id=\"课后作业-1\"><a href=\"#课后作业-1\" class=\"headerlink\" title=\"课后作业\"></a>课后作业</h3><ol>\n<li>线程是什么？线程主要包含什么内容？内核级线程和用户级线程是什么？ 答：线程是操作系统能够进行运算调度的最小单位。线程的实体包括程序、数据和TCB。内核级线程是，用户级线程是在用户空间上实现，不依赖于系统内核。内核级线程是系统内核管理的线程，由内核完成调度。</li>\n<li>假定在一台处理机上执行下表所示的作业，假定这些作业在0时刻，以1,2,3,4,5的次序顺序到达。说明分别用FCFS、RR（时间片1）、SJF、以及非抢占式优先级（优先级1最高）调度算法，给出平均周转时间。 <strong>作业</strong> <strong>执行时间</strong> <strong>优先级</strong> <strong>1</strong> 10 3 <strong>2</strong> 1 1 <strong>3</strong> 2 3 <strong>4</strong> 1 4 <strong>5</strong> 5 2 FCFS： T = (10+10+11+11+15)/5=11.4 RR: T = (19+1+5+1+10)/5 = 11.2 SJF:<ul>\n<li>抢占式：T = ()</li>\n<li>  非抢占式: T = ()</li>\n</ul>\n 非抢占式优先级：T = (10+10+17+17+12)/5 = 13.2</li>\n<li>一带闸门的运河，其上有两架吊桥。吊桥坐落在一条公路上，为使该公路避开一块沼泽地而令其横跨运河两次。运河和公路的交通都是单方向的。运河上的基本运输由驳船担负。在一艘驳船接近吊桥A时就拉汽笛警告，若桥上无车辆，吊桥就吊起，直到驳船尾部通过此桥为止。对吊桥B也按同样次序处理。<ul>\n<li>一艘典型驳船的长度为200米，当它在河上航行时是否会产生死锁？若会，其理由是什么？  答：会产生，假设A无车辆，迪奥条吊起驳船通过100米到达B，若此时B上有车辆，会发生A处吊桥不放下，汽车无法通过，B处吊桥不吊起驳船无法通过的现象。</li>\n<li>如何能克服一个可能的死锁？请提出一个防止死锁的办法。  答：限制驳船的大小不超过100米；当AB上无车辆时且有驳船通过时，同时吊起AB桥。</li>\n<li>如何利用信号灯上的P、V操作实现车辆和驳船的同步？  答：  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int p,v</span><br></pre></td></tr></table></figure>\n  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220410221633012.png\" alt=\"image-20220410221633012\"></li>\n</ul>\n</li>\n<li>设系统中有三种类型的资源（A、B、C）和五个进程（P1、P2、P3、P4、P5），A资源的数量为17，B资源的数量为5，C资源的数量为20。在T0时刻系统状态如下表所示。系统采用银行家算法实施死锁避免策略。<ul>\n<li>  T0时刻是否为安全状态若是，请给出安全序列。</li>\n<li>  在T0时刻若进程P2请求资源（0, 3, 4），是否能实施资源分配为什么</li>\n<li>  在（2）的基础上，若进程P4请求资源（2, 0, 1），是否能实施资源分配，为什么</li>\n<li>在（3）的基础上，若进程P2请求资源（0, 2, 0），是否能实施资源分配，为什么</li>\n<li><em>MAX</em>*</li>\n<li><em>ALLOCTION</em>*</li>\n</ul>\n A B C A B C <strong>P1</strong> 5 5 9 2 1 2 <strong>P2</strong> 5 3 6 4 0 2 <strong>P3</strong> 4 0 11 4 0 5 <strong>P4</strong> 4 2 5 2 0 4 <strong>P5</strong> 4 2 4 3 1 4</li>\n</ol>\n<h2 id=\"存储器管理\"><a href=\"#存储器管理\" class=\"headerlink\" title=\"存储器管理\"></a>存储器管理</h2><h3 id=\"程序的装入和链接\"><a href=\"#程序的装入和链接\" class=\"headerlink\" title=\"程序的装入和链接\"></a>程序的装入和链接</h3><p>buffer和cache的解释</p>\n<ul>\n<li>A buffer is something that has yet to be “written” to disk.</li>\n<li>A cache is something that has been “read” from the disk and stored for later use.</li>\n</ul>\n<p>也就是说buffer是用于存放要输出到disk（块设备）的数据的，而cache存放从disk上读出的数据。这二者是为了提高IO性能的，并由OS管理。</p>\n<h3 id=\"连续分配方式\"><a href=\"#连续分配方式\" class=\"headerlink\" title=\"连续分配方式\"></a>连续分配方式</h3><h3 id=\"分页存储管理\"><a href=\"#分页存储管理\" class=\"headerlink\" title=\"分页存储管理\"></a>分页存储管理</h3><p>分页系统的地址转换机制</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220414090249801.png\" alt=\"image-20220414090249801\"></p>\n<h3 id=\"分段存储管理\"><a href=\"#分段存储管理\" class=\"headerlink\" title=\"分段存储管理\"></a>分段存储管理</h3><h3 id=\"虚拟存储器的基本概念\"><a href=\"#虚拟存储器的基本概念\" class=\"headerlink\" title=\"虚拟存储器的基本概念\"></a>虚拟存储器的基本概念</h3><h3 id=\"请求分页存储管理方式\"><a href=\"#请求分页存储管理方式\" class=\"headerlink\" title=\"请求分页存储管理方式\"></a>请求分页存储管理方式</h3><h3 id=\"页面置换算法\"><a href=\"#页面置换算法\" class=\"headerlink\" title=\"页面置换算法\"></a>页面置换算法</h3><h3 id=\"请求分段存储管理方式\"><a href=\"#请求分段存储管理方式\" class=\"headerlink\" title=\"请求分段存储管理方式\"></a>请求分段存储管理方式</h3><h3 id=\"课后作业-2\"><a href=\"#课后作业-2\" class=\"headerlink\" title=\"课后作业\"></a>课后作业</h3><ol>\n<li>什么是逻辑地址，什么是物理地址？ 答：逻辑地址是CPU所生成的地址。加载到内存地址寄存器中的地址，内存单元的真正地址。</li>\n<li>什么是地址重定位？动态分区存储和分页存储如何进行地址重定位？ 答：地址重定向是把程序的逻辑地址空间转变为内存中的实际物理地址空间的过程。动态分区存储在程序运行时CPU每次访问内存单元才进行地址变换。分页存储</li>\n<li>相对于分区存储管理，分页存储管理的优势是什么？分页过大或过小会带来什么问题？ 答：使得一个程序的逻辑地址可以分布在若干个离散的内存块上，减少内碎片和外碎片，提高内存利用率。过大会导致页内碎片增多。过小导致进程页表过长，占用大量内存，还降低页面换进换出的效率。</li>\n<li>如何管理内存块的分配与回收？分别以内存分区表和位图来说明。 答：</li>\n<li>编程题：求m个进程（序号0到m-1）, n个资源情况下，所有的安全序列。 输入<blockquote>\n<p>m,n m*n 矩阵 max m*n 矩阵 allo n维向量 avai</p>\n</blockquote>\n 输出所有安全序列</li>\n</ol>\n<p>[^PCB]: (Process Control Block,PCB,进程控制块) [^IPC]: (InterProcess Communication,IPC,) [^条件变量]: (Condition Variables,条件变量) [^ACK]: (Acknowledge character,ACK,确认字符) [^TCB]: (Thread Control Block,TCB,线程控制块 )</p>"},{"title":"数据库设计三大范式","id":"780","date":"2022-03-22T08:25:02.000Z","_content":"\n### 三大范式\n\n### 1、三大范式\n\n###### 1.1 第一范式(1NF)\n\n确保每列的原子性，要求每列都是不可再分的最小数据单元。每个单一属性必须由基本的数据类型构成，如整数、字符串。\n<!-- more -->\n例如，这张表\n\n编号\n\n姓名\n\n性别\n\n联系电话\n\n地址\n\n1\n\n王大宝\n\n男\n\n199000000\n\n广东省广州市新华路tan90 号\n\n问题：现实生活中每个人都有可能不止一个联系电话，而且地址可再分为省份和城市。不符合1NF\n\n优化：\n\n编号\n\n姓名\n\n性别\n\n个人电话\n\n家庭电话\n\n省份\n\n城市\n\n详细地址\n\n1\n\n王大宝\n\n女\n\n15015246623\n\n663323\n\n广东\n\n广州\n\n新华路tan90 号\n\n###### 1.2 第二范式(2NF)\n\n在1NF基础上，要求表中每列都和主键相关，除了主键之外全部列依赖于该主键。\n\n例如，设计一个订单信息表，因为订单中可能会有多种商品，所以要将订单编号和商品编号作为数据库表的联合主键：\n\n订单编号\n\n商品编号\n\n商品名称\n\n数量\n\n单位\n\n商品单价\n\n订单客户\n\n所属单位\n\n联系方式\n\n0001\n\n1\n\n电风扇\n\n5\n\n台\n\n99\n\n王大宝\n\n蓝翔技术\n\n010-10086\n\n问题：商品名称、单位与商品单价与订单编号主键无关，不符合2NF。\n\n优化：\n\n商品表\n\n商品编号\n\n商品名称\n\n单位\n\n商品单价\n\n1\n\n电风扇\n\n台\n\n99\n\n订单项目表\n\n订单编号\n\n商品编号\n\n0001\n\n1\n\n订单信息表\n\n订单编号\n\n订单客户\n\n所属单位\n\n联系方式\n\n0001\n\n王大宝\n\n蓝翔技术\n\n010-100086\n\n###### 1.3 第三范式(3NF)\n\n确保每列都和主键列直接相关, 不可包含间接依赖。\n\n例如，这张表：\n\n课程编号\n\n课程名字\n\n上课时间\n\n任课老师\n\n老师电话\n\n老师职位\n\n101\n\n马克思理论基础\n\n8:00\n\nLily\n\n18016253155\n\n讲师\n\n102\n\n经济学\n\n14:00\n\nLucy\n\n18055231233\n\n教授\n\n问题：老师电话和老师职位是直接依赖于任课老师的，而不是直接依赖主键课程编号，是传递依赖，不符合3NF。\n\n优化：\n\n课程表\n\n课程编号\n\n课程名字\n\n上课时间\n\n任课老师\n\n101\n\n马克思理论基础\n\n8:00\n\nLily\n\n102\n\n经济学\n\n14:00\n\nLucy\n\n教师表\n\n任课老师\n\n老师电话\n\n老师职位\n\nLily\n\n18016253155\n\n讲师\n\nLucy\n\n18055231233\n\n教授\n\n**必须先满足第一范式才能满足第二范式，必须同时满足第一第二范式才能满足第三范式**\n\n满足三大范式的数据库E-R图实例：\n\n![5-200PG00302918](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/5-200PG00302918.png)\n\n满足三大范式的数据库模型图：\n\n![img](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/5-200PG04330352.png)","source":"_posts/数据库设计三大范式.md","raw":"---\ntitle: 数据库设计三大范式\ntags:\n  - MySQL\nid: '780'\ncategories:\n  - - 学习笔记\n  - - 文章\ndate: 2022-03-22 16:25:02\n---\n\n### 三大范式\n\n### 1、三大范式\n\n###### 1.1 第一范式(1NF)\n\n确保每列的原子性，要求每列都是不可再分的最小数据单元。每个单一属性必须由基本的数据类型构成，如整数、字符串。\n<!-- more -->\n例如，这张表\n\n编号\n\n姓名\n\n性别\n\n联系电话\n\n地址\n\n1\n\n王大宝\n\n男\n\n199000000\n\n广东省广州市新华路tan90 号\n\n问题：现实生活中每个人都有可能不止一个联系电话，而且地址可再分为省份和城市。不符合1NF\n\n优化：\n\n编号\n\n姓名\n\n性别\n\n个人电话\n\n家庭电话\n\n省份\n\n城市\n\n详细地址\n\n1\n\n王大宝\n\n女\n\n15015246623\n\n663323\n\n广东\n\n广州\n\n新华路tan90 号\n\n###### 1.2 第二范式(2NF)\n\n在1NF基础上，要求表中每列都和主键相关，除了主键之外全部列依赖于该主键。\n\n例如，设计一个订单信息表，因为订单中可能会有多种商品，所以要将订单编号和商品编号作为数据库表的联合主键：\n\n订单编号\n\n商品编号\n\n商品名称\n\n数量\n\n单位\n\n商品单价\n\n订单客户\n\n所属单位\n\n联系方式\n\n0001\n\n1\n\n电风扇\n\n5\n\n台\n\n99\n\n王大宝\n\n蓝翔技术\n\n010-10086\n\n问题：商品名称、单位与商品单价与订单编号主键无关，不符合2NF。\n\n优化：\n\n商品表\n\n商品编号\n\n商品名称\n\n单位\n\n商品单价\n\n1\n\n电风扇\n\n台\n\n99\n\n订单项目表\n\n订单编号\n\n商品编号\n\n0001\n\n1\n\n订单信息表\n\n订单编号\n\n订单客户\n\n所属单位\n\n联系方式\n\n0001\n\n王大宝\n\n蓝翔技术\n\n010-100086\n\n###### 1.3 第三范式(3NF)\n\n确保每列都和主键列直接相关, 不可包含间接依赖。\n\n例如，这张表：\n\n课程编号\n\n课程名字\n\n上课时间\n\n任课老师\n\n老师电话\n\n老师职位\n\n101\n\n马克思理论基础\n\n8:00\n\nLily\n\n18016253155\n\n讲师\n\n102\n\n经济学\n\n14:00\n\nLucy\n\n18055231233\n\n教授\n\n问题：老师电话和老师职位是直接依赖于任课老师的，而不是直接依赖主键课程编号，是传递依赖，不符合3NF。\n\n优化：\n\n课程表\n\n课程编号\n\n课程名字\n\n上课时间\n\n任课老师\n\n101\n\n马克思理论基础\n\n8:00\n\nLily\n\n102\n\n经济学\n\n14:00\n\nLucy\n\n教师表\n\n任课老师\n\n老师电话\n\n老师职位\n\nLily\n\n18016253155\n\n讲师\n\nLucy\n\n18055231233\n\n教授\n\n**必须先满足第一范式才能满足第二范式，必须同时满足第一第二范式才能满足第三范式**\n\n满足三大范式的数据库E-R图实例：\n\n![5-200PG00302918](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/5-200PG00302918.png)\n\n满足三大范式的数据库模型图：\n\n![img](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/5-200PG04330352.png)","slug":"数据库设计三大范式","published":1,"updated":"2024-03-12T10:43:07.800Z","_id":"cltnrar510026jry1a9mg84u8","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"三大范式\"><a href=\"#三大范式\" class=\"headerlink\" title=\"三大范式\"></a>三大范式</h3><h3 id=\"1、三大范式\"><a href=\"#1、三大范式\" class=\"headerlink\" title=\"1、三大范式\"></a>1、三大范式</h3><h6 id=\"1-1-第一范式-1NF\"><a href=\"#1-1-第一范式-1NF\" class=\"headerlink\" title=\"1.1 第一范式(1NF)\"></a>1.1 第一范式(1NF)</h6><p>确保每列的原子性，要求每列都是不可再分的最小数据单元。每个单一属性必须由基本的数据类型构成，如整数、字符串。</p>\n<span id=\"more\"></span>\n<p>例如，这张表</p>\n<p>编号</p>\n<p>姓名</p>\n<p>性别</p>\n<p>联系电话</p>\n<p>地址</p>\n<p>1</p>\n<p>王大宝</p>\n<p>男</p>\n<p>199000000</p>\n<p>广东省广州市新华路tan90 号</p>\n<p>问题：现实生活中每个人都有可能不止一个联系电话，而且地址可再分为省份和城市。不符合1NF</p>\n<p>优化：</p>\n<p>编号</p>\n<p>姓名</p>\n<p>性别</p>\n<p>个人电话</p>\n<p>家庭电话</p>\n<p>省份</p>\n<p>城市</p>\n<p>详细地址</p>\n<p>1</p>\n<p>王大宝</p>\n<p>女</p>\n<p>15015246623</p>\n<p>663323</p>\n<p>广东</p>\n<p>广州</p>\n<p>新华路tan90 号</p>\n<h6 id=\"1-2-第二范式-2NF\"><a href=\"#1-2-第二范式-2NF\" class=\"headerlink\" title=\"1.2 第二范式(2NF)\"></a>1.2 第二范式(2NF)</h6><p>在1NF基础上，要求表中每列都和主键相关，除了主键之外全部列依赖于该主键。</p>\n<p>例如，设计一个订单信息表，因为订单中可能会有多种商品，所以要将订单编号和商品编号作为数据库表的联合主键：</p>\n<p>订单编号</p>\n<p>商品编号</p>\n<p>商品名称</p>\n<p>数量</p>\n<p>单位</p>\n<p>商品单价</p>\n<p>订单客户</p>\n<p>所属单位</p>\n<p>联系方式</p>\n<p>0001</p>\n<p>1</p>\n<p>电风扇</p>\n<p>5</p>\n<p>台</p>\n<p>99</p>\n<p>王大宝</p>\n<p>蓝翔技术</p>\n<p>010-10086</p>\n<p>问题：商品名称、单位与商品单价与订单编号主键无关，不符合2NF。</p>\n<p>优化：</p>\n<p>商品表</p>\n<p>商品编号</p>\n<p>商品名称</p>\n<p>单位</p>\n<p>商品单价</p>\n<p>1</p>\n<p>电风扇</p>\n<p>台</p>\n<p>99</p>\n<p>订单项目表</p>\n<p>订单编号</p>\n<p>商品编号</p>\n<p>0001</p>\n<p>1</p>\n<p>订单信息表</p>\n<p>订单编号</p>\n<p>订单客户</p>\n<p>所属单位</p>\n<p>联系方式</p>\n<p>0001</p>\n<p>王大宝</p>\n<p>蓝翔技术</p>\n<p>010-100086</p>\n<h6 id=\"1-3-第三范式-3NF\"><a href=\"#1-3-第三范式-3NF\" class=\"headerlink\" title=\"1.3 第三范式(3NF)\"></a>1.3 第三范式(3NF)</h6><p>确保每列都和主键列直接相关, 不可包含间接依赖。</p>\n<p>例如，这张表：</p>\n<p>课程编号</p>\n<p>课程名字</p>\n<p>上课时间</p>\n<p>任课老师</p>\n<p>老师电话</p>\n<p>老师职位</p>\n<p>101</p>\n<p>马克思理论基础</p>\n<p>8:00</p>\n<p>Lily</p>\n<p>18016253155</p>\n<p>讲师</p>\n<p>102</p>\n<p>经济学</p>\n<p>14:00</p>\n<p>Lucy</p>\n<p>18055231233</p>\n<p>教授</p>\n<p>问题：老师电话和老师职位是直接依赖于任课老师的，而不是直接依赖主键课程编号，是传递依赖，不符合3NF。</p>\n<p>优化：</p>\n<p>课程表</p>\n<p>课程编号</p>\n<p>课程名字</p>\n<p>上课时间</p>\n<p>任课老师</p>\n<p>101</p>\n<p>马克思理论基础</p>\n<p>8:00</p>\n<p>Lily</p>\n<p>102</p>\n<p>经济学</p>\n<p>14:00</p>\n<p>Lucy</p>\n<p>教师表</p>\n<p>任课老师</p>\n<p>老师电话</p>\n<p>老师职位</p>\n<p>Lily</p>\n<p>18016253155</p>\n<p>讲师</p>\n<p>Lucy</p>\n<p>18055231233</p>\n<p>教授</p>\n<p><strong>必须先满足第一范式才能满足第二范式，必须同时满足第一第二范式才能满足第三范式</strong></p>\n<p>满足三大范式的数据库E-R图实例：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/5-200PG00302918.png\" alt=\"5-200PG00302918\"></p>\n<p>满足三大范式的数据库模型图：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/5-200PG04330352.png\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"三大范式\"><a href=\"#三大范式\" class=\"headerlink\" title=\"三大范式\"></a>三大范式</h3><h3 id=\"1、三大范式\"><a href=\"#1、三大范式\" class=\"headerlink\" title=\"1、三大范式\"></a>1、三大范式</h3><h6 id=\"1-1-第一范式-1NF\"><a href=\"#1-1-第一范式-1NF\" class=\"headerlink\" title=\"1.1 第一范式(1NF)\"></a>1.1 第一范式(1NF)</h6><p>确保每列的原子性，要求每列都是不可再分的最小数据单元。每个单一属性必须由基本的数据类型构成，如整数、字符串。</p>","more":"<p>例如，这张表</p>\n<p>编号</p>\n<p>姓名</p>\n<p>性别</p>\n<p>联系电话</p>\n<p>地址</p>\n<p>1</p>\n<p>王大宝</p>\n<p>男</p>\n<p>199000000</p>\n<p>广东省广州市新华路tan90 号</p>\n<p>问题：现实生活中每个人都有可能不止一个联系电话，而且地址可再分为省份和城市。不符合1NF</p>\n<p>优化：</p>\n<p>编号</p>\n<p>姓名</p>\n<p>性别</p>\n<p>个人电话</p>\n<p>家庭电话</p>\n<p>省份</p>\n<p>城市</p>\n<p>详细地址</p>\n<p>1</p>\n<p>王大宝</p>\n<p>女</p>\n<p>15015246623</p>\n<p>663323</p>\n<p>广东</p>\n<p>广州</p>\n<p>新华路tan90 号</p>\n<h6 id=\"1-2-第二范式-2NF\"><a href=\"#1-2-第二范式-2NF\" class=\"headerlink\" title=\"1.2 第二范式(2NF)\"></a>1.2 第二范式(2NF)</h6><p>在1NF基础上，要求表中每列都和主键相关，除了主键之外全部列依赖于该主键。</p>\n<p>例如，设计一个订单信息表，因为订单中可能会有多种商品，所以要将订单编号和商品编号作为数据库表的联合主键：</p>\n<p>订单编号</p>\n<p>商品编号</p>\n<p>商品名称</p>\n<p>数量</p>\n<p>单位</p>\n<p>商品单价</p>\n<p>订单客户</p>\n<p>所属单位</p>\n<p>联系方式</p>\n<p>0001</p>\n<p>1</p>\n<p>电风扇</p>\n<p>5</p>\n<p>台</p>\n<p>99</p>\n<p>王大宝</p>\n<p>蓝翔技术</p>\n<p>010-10086</p>\n<p>问题：商品名称、单位与商品单价与订单编号主键无关，不符合2NF。</p>\n<p>优化：</p>\n<p>商品表</p>\n<p>商品编号</p>\n<p>商品名称</p>\n<p>单位</p>\n<p>商品单价</p>\n<p>1</p>\n<p>电风扇</p>\n<p>台</p>\n<p>99</p>\n<p>订单项目表</p>\n<p>订单编号</p>\n<p>商品编号</p>\n<p>0001</p>\n<p>1</p>\n<p>订单信息表</p>\n<p>订单编号</p>\n<p>订单客户</p>\n<p>所属单位</p>\n<p>联系方式</p>\n<p>0001</p>\n<p>王大宝</p>\n<p>蓝翔技术</p>\n<p>010-100086</p>\n<h6 id=\"1-3-第三范式-3NF\"><a href=\"#1-3-第三范式-3NF\" class=\"headerlink\" title=\"1.3 第三范式(3NF)\"></a>1.3 第三范式(3NF)</h6><p>确保每列都和主键列直接相关, 不可包含间接依赖。</p>\n<p>例如，这张表：</p>\n<p>课程编号</p>\n<p>课程名字</p>\n<p>上课时间</p>\n<p>任课老师</p>\n<p>老师电话</p>\n<p>老师职位</p>\n<p>101</p>\n<p>马克思理论基础</p>\n<p>8:00</p>\n<p>Lily</p>\n<p>18016253155</p>\n<p>讲师</p>\n<p>102</p>\n<p>经济学</p>\n<p>14:00</p>\n<p>Lucy</p>\n<p>18055231233</p>\n<p>教授</p>\n<p>问题：老师电话和老师职位是直接依赖于任课老师的，而不是直接依赖主键课程编号，是传递依赖，不符合3NF。</p>\n<p>优化：</p>\n<p>课程表</p>\n<p>课程编号</p>\n<p>课程名字</p>\n<p>上课时间</p>\n<p>任课老师</p>\n<p>101</p>\n<p>马克思理论基础</p>\n<p>8:00</p>\n<p>Lily</p>\n<p>102</p>\n<p>经济学</p>\n<p>14:00</p>\n<p>Lucy</p>\n<p>教师表</p>\n<p>任课老师</p>\n<p>老师电话</p>\n<p>老师职位</p>\n<p>Lily</p>\n<p>18016253155</p>\n<p>讲师</p>\n<p>Lucy</p>\n<p>18055231233</p>\n<p>教授</p>\n<p><strong>必须先满足第一范式才能满足第二范式，必须同时满足第一第二范式才能满足第三范式</strong></p>\n<p>满足三大范式的数据库E-R图实例：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/5-200PG00302918.png\" alt=\"5-200PG00302918\"></p>\n<p>满足三大范式的数据库模型图：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/5-200PG04330352.png\" alt=\"img\"></p>"},{"title":"树莓派4b使用摄像头","id":"737","date":"2022-03-17T03:16:56.000Z","_content":"\n## 树莓派4b使用摄像头\n\n#### 1、先升级源：\n\n> sudo apt-get update sudo apt-get upgrade\n\n#### 2、打开树莓派配置\n\n> sudo raspi-config\n\n![image-20220317085244518](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220317085244518.png)\n\n打开 `Interfacing Option` ,接着找到 `Camera` 选项,打开树莓派摄像头。\n\n然后点击 `finish`, 重启即可\n<!-- more -->\n#### 3、测试\n\nrapistill指令来截图\n\n> raspistill -o a.jpg\n\n打开根目录，就可以看到a.jpg啦~\n\n![image-20220317111355345](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220317111355345.png)\n\n相关参数：\n\n\\-v：调试信息查看 -w：图像宽度 -h：图像高度 -rot：图像旋转角度，只支持 0、90、180、270 度（这里说明一下，测试发现其他角度的输入都会被转换到这四个角度之上） -o：图像输出地址，例如image.jpg，如果文件名为“-”，将输出发送至标准输出设备 -t：获取图像前等待时间，默认为5000，即5秒 -tl：多久执行一次图像抓取\n\n例如执行下面的指令：\n\n> raspistill -o image%d.jpg -rot 180 -w 1024 -h 768 -t 20000 -tl 5000 -v\n\n**注意：如果没看到照片，先看看摄像头能否运行**\n\n> ls -al /dev/ grep video\n\n![img](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/cf671f21bc29586021cf8d4ecbfe1a38.png)\n\n以上出现video则说明摄像头正常，再找找照片试试\n\n如果在以上工作都完成的情况下，摄像头还是不能正常的使用或者驱动，请先检查硬件的连接的问题，可能是排线没有很好的插稳，或者是摄像头本身的问题\n\n#### 4、实时监控\n\n安装motion(开源监控软件)\n\n> sudo apt-get install motion\n\n首先将motion软件的后台进程改为开启，让它能够一直在后台运行。输入以下命令，将文件中 “start\\_motion\\_daemon=no” 的no改为yes。\n\n> sudo nano /etc/default/motion\n\n之后输入命令打开motion的配置文件：\n\n> sudo nano /etc/motion/motion.conf\n\n要更改的参数有以下几行，在nano编辑器环境下可以使用快捷键ctrl+w对关键字进行查找。\n\n```python\ndaemon on  #off改成on\nwidth  640 \nheight 480 #根据摄像头像素自行更改\nframerate 50 #帧率\nstream_maxrate 200\nstream_localhost off    #设为off，允许局域网内所有用户访问\n```\n\n然后重启motion\n\n> sudo service motion.service restart\n> \n> # 重启motion服务，也可以kill\n> \n> sudo motion #开启motion\n\n同局域网下访问 `树莓派ip:8081` ,便能看到实时画面了\n\n![image-20220317102603092](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220317102603092.png)","source":"_posts/树莓派4b使用摄像头.md","raw":"---\ntitle: 树莓派4b使用摄像头\ntags:\n  - Linux\n  - 树莓派\nid: '737'\ncategories:\n  - - 学习笔记\n  - - 文章\ndate: 2022-03-17 11:16:56\n---\n\n## 树莓派4b使用摄像头\n\n#### 1、先升级源：\n\n> sudo apt-get update sudo apt-get upgrade\n\n#### 2、打开树莓派配置\n\n> sudo raspi-config\n\n![image-20220317085244518](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220317085244518.png)\n\n打开 `Interfacing Option` ,接着找到 `Camera` 选项,打开树莓派摄像头。\n\n然后点击 `finish`, 重启即可\n<!-- more -->\n#### 3、测试\n\nrapistill指令来截图\n\n> raspistill -o a.jpg\n\n打开根目录，就可以看到a.jpg啦~\n\n![image-20220317111355345](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220317111355345.png)\n\n相关参数：\n\n\\-v：调试信息查看 -w：图像宽度 -h：图像高度 -rot：图像旋转角度，只支持 0、90、180、270 度（这里说明一下，测试发现其他角度的输入都会被转换到这四个角度之上） -o：图像输出地址，例如image.jpg，如果文件名为“-”，将输出发送至标准输出设备 -t：获取图像前等待时间，默认为5000，即5秒 -tl：多久执行一次图像抓取\n\n例如执行下面的指令：\n\n> raspistill -o image%d.jpg -rot 180 -w 1024 -h 768 -t 20000 -tl 5000 -v\n\n**注意：如果没看到照片，先看看摄像头能否运行**\n\n> ls -al /dev/ grep video\n\n![img](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/cf671f21bc29586021cf8d4ecbfe1a38.png)\n\n以上出现video则说明摄像头正常，再找找照片试试\n\n如果在以上工作都完成的情况下，摄像头还是不能正常的使用或者驱动，请先检查硬件的连接的问题，可能是排线没有很好的插稳，或者是摄像头本身的问题\n\n#### 4、实时监控\n\n安装motion(开源监控软件)\n\n> sudo apt-get install motion\n\n首先将motion软件的后台进程改为开启，让它能够一直在后台运行。输入以下命令，将文件中 “start\\_motion\\_daemon=no” 的no改为yes。\n\n> sudo nano /etc/default/motion\n\n之后输入命令打开motion的配置文件：\n\n> sudo nano /etc/motion/motion.conf\n\n要更改的参数有以下几行，在nano编辑器环境下可以使用快捷键ctrl+w对关键字进行查找。\n\n```python\ndaemon on  #off改成on\nwidth  640 \nheight 480 #根据摄像头像素自行更改\nframerate 50 #帧率\nstream_maxrate 200\nstream_localhost off    #设为off，允许局域网内所有用户访问\n```\n\n然后重启motion\n\n> sudo service motion.service restart\n> \n> # 重启motion服务，也可以kill\n> \n> sudo motion #开启motion\n\n同局域网下访问 `树莓派ip:8081` ,便能看到实时画面了\n\n![image-20220317102603092](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220317102603092.png)","slug":"树莓派4b使用摄像头","published":1,"updated":"2024-03-12T10:43:05.136Z","_id":"cltnrar530029jry17o7abu7j","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"树莓派4b使用摄像头\"><a href=\"#树莓派4b使用摄像头\" class=\"headerlink\" title=\"树莓派4b使用摄像头\"></a>树莓派4b使用摄像头</h2><h4 id=\"1、先升级源：\"><a href=\"#1、先升级源：\" class=\"headerlink\" title=\"1、先升级源：\"></a>1、先升级源：</h4><blockquote>\n<p>sudo apt-get update sudo apt-get upgrade</p>\n</blockquote>\n<h4 id=\"2、打开树莓派配置\"><a href=\"#2、打开树莓派配置\" class=\"headerlink\" title=\"2、打开树莓派配置\"></a>2、打开树莓派配置</h4><blockquote>\n<p>sudo raspi-config</p>\n</blockquote>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220317085244518.png\" alt=\"image-20220317085244518\"></p>\n<p>打开 <code>Interfacing Option</code> ,接着找到 <code>Camera</code> 选项,打开树莓派摄像头。</p>\n<p>然后点击 <code>finish</code>, 重启即可</p>\n<span id=\"more\"></span>\n<h4 id=\"3、测试\"><a href=\"#3、测试\" class=\"headerlink\" title=\"3、测试\"></a>3、测试</h4><p>rapistill指令来截图</p>\n<blockquote>\n<p>raspistill -o a.jpg</p>\n</blockquote>\n<p>打开根目录，就可以看到a.jpg啦~</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220317111355345.png\" alt=\"image-20220317111355345\"></p>\n<p>相关参数：</p>\n<p>-v：调试信息查看 -w：图像宽度 -h：图像高度 -rot：图像旋转角度，只支持 0、90、180、270 度（这里说明一下，测试发现其他角度的输入都会被转换到这四个角度之上） -o：图像输出地址，例如image.jpg，如果文件名为“-”，将输出发送至标准输出设备 -t：获取图像前等待时间，默认为5000，即5秒 -tl：多久执行一次图像抓取</p>\n<p>例如执行下面的指令：</p>\n<blockquote>\n<p>raspistill -o image%d.jpg -rot 180 -w 1024 -h 768 -t 20000 -tl 5000 -v</p>\n</blockquote>\n<p><strong>注意：如果没看到照片，先看看摄像头能否运行</strong></p>\n<blockquote>\n<p>ls -al /dev/ grep video</p>\n</blockquote>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/cf671f21bc29586021cf8d4ecbfe1a38.png\" alt=\"img\"></p>\n<p>以上出现video则说明摄像头正常，再找找照片试试</p>\n<p>如果在以上工作都完成的情况下，摄像头还是不能正常的使用或者驱动，请先检查硬件的连接的问题，可能是排线没有很好的插稳，或者是摄像头本身的问题</p>\n<h4 id=\"4、实时监控\"><a href=\"#4、实时监控\" class=\"headerlink\" title=\"4、实时监控\"></a>4、实时监控</h4><p>安装motion(开源监控软件)</p>\n<blockquote>\n<p>sudo apt-get install motion</p>\n</blockquote>\n<p>首先将motion软件的后台进程改为开启，让它能够一直在后台运行。输入以下命令，将文件中 “start_motion_daemon=no” 的no改为yes。</p>\n<blockquote>\n<p>sudo nano /etc/default/motion</p>\n</blockquote>\n<p>之后输入命令打开motion的配置文件：</p>\n<blockquote>\n<p>sudo nano /etc/motion/motion.conf</p>\n</blockquote>\n<p>要更改的参数有以下几行，在nano编辑器环境下可以使用快捷键ctrl+w对关键字进行查找。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemon on  <span class=\"comment\">#off改成on</span></span><br><span class=\"line\">width  <span class=\"number\">640</span> </span><br><span class=\"line\">height <span class=\"number\">480</span> <span class=\"comment\">#根据摄像头像素自行更改</span></span><br><span class=\"line\">framerate <span class=\"number\">50</span> <span class=\"comment\">#帧率</span></span><br><span class=\"line\">stream_maxrate <span class=\"number\">200</span></span><br><span class=\"line\">stream_localhost off    <span class=\"comment\">#设为off，允许局域网内所有用户访问</span></span><br></pre></td></tr></table></figure>\n\n<p>然后重启motion</p>\n<blockquote>\n<p>sudo service motion.service restart</p>\n<h1 id=\"重启motion服务，也可以kill\"><a href=\"#重启motion服务，也可以kill\" class=\"headerlink\" title=\"重启motion服务，也可以kill\"></a>重启motion服务，也可以kill</h1><p>sudo motion #开启motion</p>\n</blockquote>\n<p>同局域网下访问 <code>树莓派ip:8081</code> ,便能看到实时画面了</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220317102603092.png\" alt=\"image-20220317102603092\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"树莓派4b使用摄像头\"><a href=\"#树莓派4b使用摄像头\" class=\"headerlink\" title=\"树莓派4b使用摄像头\"></a>树莓派4b使用摄像头</h2><h4 id=\"1、先升级源：\"><a href=\"#1、先升级源：\" class=\"headerlink\" title=\"1、先升级源：\"></a>1、先升级源：</h4><blockquote>\n<p>sudo apt-get update sudo apt-get upgrade</p>\n</blockquote>\n<h4 id=\"2、打开树莓派配置\"><a href=\"#2、打开树莓派配置\" class=\"headerlink\" title=\"2、打开树莓派配置\"></a>2、打开树莓派配置</h4><blockquote>\n<p>sudo raspi-config</p>\n</blockquote>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220317085244518.png\" alt=\"image-20220317085244518\"></p>\n<p>打开 <code>Interfacing Option</code> ,接着找到 <code>Camera</code> 选项,打开树莓派摄像头。</p>\n<p>然后点击 <code>finish</code>, 重启即可</p>","more":"<h4 id=\"3、测试\"><a href=\"#3、测试\" class=\"headerlink\" title=\"3、测试\"></a>3、测试</h4><p>rapistill指令来截图</p>\n<blockquote>\n<p>raspistill -o a.jpg</p>\n</blockquote>\n<p>打开根目录，就可以看到a.jpg啦~</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220317111355345.png\" alt=\"image-20220317111355345\"></p>\n<p>相关参数：</p>\n<p>-v：调试信息查看 -w：图像宽度 -h：图像高度 -rot：图像旋转角度，只支持 0、90、180、270 度（这里说明一下，测试发现其他角度的输入都会被转换到这四个角度之上） -o：图像输出地址，例如image.jpg，如果文件名为“-”，将输出发送至标准输出设备 -t：获取图像前等待时间，默认为5000，即5秒 -tl：多久执行一次图像抓取</p>\n<p>例如执行下面的指令：</p>\n<blockquote>\n<p>raspistill -o image%d.jpg -rot 180 -w 1024 -h 768 -t 20000 -tl 5000 -v</p>\n</blockquote>\n<p><strong>注意：如果没看到照片，先看看摄像头能否运行</strong></p>\n<blockquote>\n<p>ls -al /dev/ grep video</p>\n</blockquote>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/cf671f21bc29586021cf8d4ecbfe1a38.png\" alt=\"img\"></p>\n<p>以上出现video则说明摄像头正常，再找找照片试试</p>\n<p>如果在以上工作都完成的情况下，摄像头还是不能正常的使用或者驱动，请先检查硬件的连接的问题，可能是排线没有很好的插稳，或者是摄像头本身的问题</p>\n<h4 id=\"4、实时监控\"><a href=\"#4、实时监控\" class=\"headerlink\" title=\"4、实时监控\"></a>4、实时监控</h4><p>安装motion(开源监控软件)</p>\n<blockquote>\n<p>sudo apt-get install motion</p>\n</blockquote>\n<p>首先将motion软件的后台进程改为开启，让它能够一直在后台运行。输入以下命令，将文件中 “start_motion_daemon=no” 的no改为yes。</p>\n<blockquote>\n<p>sudo nano /etc/default/motion</p>\n</blockquote>\n<p>之后输入命令打开motion的配置文件：</p>\n<blockquote>\n<p>sudo nano /etc/motion/motion.conf</p>\n</blockquote>\n<p>要更改的参数有以下几行，在nano编辑器环境下可以使用快捷键ctrl+w对关键字进行查找。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemon on  <span class=\"comment\">#off改成on</span></span><br><span class=\"line\">width  <span class=\"number\">640</span> </span><br><span class=\"line\">height <span class=\"number\">480</span> <span class=\"comment\">#根据摄像头像素自行更改</span></span><br><span class=\"line\">framerate <span class=\"number\">50</span> <span class=\"comment\">#帧率</span></span><br><span class=\"line\">stream_maxrate <span class=\"number\">200</span></span><br><span class=\"line\">stream_localhost off    <span class=\"comment\">#设为off，允许局域网内所有用户访问</span></span><br></pre></td></tr></table></figure>\n\n<p>然后重启motion</p>\n<blockquote>\n<p>sudo service motion.service restart</p>\n<h1 id=\"重启motion服务，也可以kill\"><a href=\"#重启motion服务，也可以kill\" class=\"headerlink\" title=\"重启motion服务，也可以kill\"></a>重启motion服务，也可以kill</h1><p>sudo motion #开启motion</p>\n</blockquote>\n<p>同局域网下访问 <code>树莓派ip:8081</code> ,便能看到实时画面了</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220317102603092.png\" alt=\"image-20220317102603092\"></p>"},{"title":"树莓派4B点亮LED(Python实现)","id":"644","date":"2022-03-14T15:43:33.000Z","_content":"\n#### 1、树莓派GPIO引脚图\n\n![rpi-pins-40-0](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/rpi-pins-40-0.png)\n\n\\[admonition title=\"注意\" color=\"red\"\\] 先简单了解一下引脚，我们对树莓派引脚的操作是有可能损坏我们的树莓派的。有必要提前了解。\\[/admonition\\]\n\n功能名：\n\n*   绿色背景：GPIO是标准引脚，可以用来打开和关闭设备。例如，一个LED。\n*   浅蓝色背景：I2C(Inter-Integrated Circuit)引脚连接并与支持该协议(I2C协议)的硬件模块对话。这个协议通常会占用两个引脚。\n*   紫色背景：SPI（串行外设接口总线）引脚可用于连接和对话SPI设备。和I2C差不多，但使用了不同的协议。\n*   深蓝色背景：UART(Universal asynchronous receiver/transmitter，通用异步接收/发送器)是用于与其他设备通信的串行引脚。\n*   黑色：GND是用来接地的引脚。使用哪个引脚并不重要，因为它们都连接在同一条线上。\n<!-- more -->\n#### 2、主要实验材料\n\n树莓派4B主板、SD卡、USB电源、1k欧姆电阻、红色LED发光二极管、杜邦线\n\n#### 3、实验步骤\n\n*   连接电路\n    \n    发光二极管正极接上1kΩ电阻，两边连接杜邦线。将二极管正极插入GPIO引脚21(BCM编码，也就是物理引脚的40)，二极管负极接入GND(这里插入物理引脚39)\n    \n*   树莓派编写程序代码\n    \n    在这之前先检查Python是否安装了 `RPI.GPIO` 模块，Python2已经预装，Python3需要手动安装\n    \n    ```\n    sudo apt-get update\n    sudo apt-get install python3-rpi.gpio\n    ```\n    \n    创建`pi.py` 文件,写入：\n    \n    ```python\n    import RPi.GPIO as GPIO\n    import time\n    #注意BOARD和BCM编码的不同，这里设置的是BCM编码\n    GPIO.setmode(GPIO.BCM)\n    GPIO.setup(21, GPIO.OUT)\n    #闪5次\n    for i in range(5):\n      GPIO.output(21,GPIO.HIGH)\n      time.sleep(1)\n      GPIO.output(21,GPIO.LOW)\n      time.sleep(1)\n    #建议每次退出时都用cleanup设置GPIO引脚为低电平状态\n    GPIO.cleanup()\n    ```\n    \n*   运行py程序\n    \n    ```c\n    sudo python pi.py\n    ```\n    \n    观察到二极管灯一闪一闪既大功告成！\n    \n\n#### 4、总结\n\n关于在过程中遇到的一些问题\n\n*   python版本问题\n    \n    树莓派4B默认使用python2.7，我们可以将它删除更换为python3.7\n    \n    ```c\n    //卸载python2.7\n    sudo apt-get autoremove python2.7\n    //链接python3.7\n    sudo ln -s /usr/bin/python3.7 /usr/bin/python\n    //链接pip3\n    sudo ln -s /usr/bin/pip3 /usr/bin/pip\n    ```\n    \n*   安装rpi.gpio库出现**Requirement already satisfied**问题\n    \n\n![image-20220314223217804](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220314223217804.png)\n\n将安装的rpi模块直接指向文件目录\n\n```python\n  pip install --target=/usr/lib/python3/dist-packages rpi.gpio\n```","source":"_posts/树莓派4b点亮ledpython实现.md","raw":"---\ntitle: 树莓派4B点亮LED(Python实现)\ntags:\n  - Linux\n  - Python\n  - 树莓派\nid: '644'\ncategories:\n  - - 学习笔记\n  - - 文章\ndate: 2022-03-14 23:43:33\n---\n\n#### 1、树莓派GPIO引脚图\n\n![rpi-pins-40-0](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/rpi-pins-40-0.png)\n\n\\[admonition title=\"注意\" color=\"red\"\\] 先简单了解一下引脚，我们对树莓派引脚的操作是有可能损坏我们的树莓派的。有必要提前了解。\\[/admonition\\]\n\n功能名：\n\n*   绿色背景：GPIO是标准引脚，可以用来打开和关闭设备。例如，一个LED。\n*   浅蓝色背景：I2C(Inter-Integrated Circuit)引脚连接并与支持该协议(I2C协议)的硬件模块对话。这个协议通常会占用两个引脚。\n*   紫色背景：SPI（串行外设接口总线）引脚可用于连接和对话SPI设备。和I2C差不多，但使用了不同的协议。\n*   深蓝色背景：UART(Universal asynchronous receiver/transmitter，通用异步接收/发送器)是用于与其他设备通信的串行引脚。\n*   黑色：GND是用来接地的引脚。使用哪个引脚并不重要，因为它们都连接在同一条线上。\n<!-- more -->\n#### 2、主要实验材料\n\n树莓派4B主板、SD卡、USB电源、1k欧姆电阻、红色LED发光二极管、杜邦线\n\n#### 3、实验步骤\n\n*   连接电路\n    \n    发光二极管正极接上1kΩ电阻，两边连接杜邦线。将二极管正极插入GPIO引脚21(BCM编码，也就是物理引脚的40)，二极管负极接入GND(这里插入物理引脚39)\n    \n*   树莓派编写程序代码\n    \n    在这之前先检查Python是否安装了 `RPI.GPIO` 模块，Python2已经预装，Python3需要手动安装\n    \n    ```\n    sudo apt-get update\n    sudo apt-get install python3-rpi.gpio\n    ```\n    \n    创建`pi.py` 文件,写入：\n    \n    ```python\n    import RPi.GPIO as GPIO\n    import time\n    #注意BOARD和BCM编码的不同，这里设置的是BCM编码\n    GPIO.setmode(GPIO.BCM)\n    GPIO.setup(21, GPIO.OUT)\n    #闪5次\n    for i in range(5):\n      GPIO.output(21,GPIO.HIGH)\n      time.sleep(1)\n      GPIO.output(21,GPIO.LOW)\n      time.sleep(1)\n    #建议每次退出时都用cleanup设置GPIO引脚为低电平状态\n    GPIO.cleanup()\n    ```\n    \n*   运行py程序\n    \n    ```c\n    sudo python pi.py\n    ```\n    \n    观察到二极管灯一闪一闪既大功告成！\n    \n\n#### 4、总结\n\n关于在过程中遇到的一些问题\n\n*   python版本问题\n    \n    树莓派4B默认使用python2.7，我们可以将它删除更换为python3.7\n    \n    ```c\n    //卸载python2.7\n    sudo apt-get autoremove python2.7\n    //链接python3.7\n    sudo ln -s /usr/bin/python3.7 /usr/bin/python\n    //链接pip3\n    sudo ln -s /usr/bin/pip3 /usr/bin/pip\n    ```\n    \n*   安装rpi.gpio库出现**Requirement already satisfied**问题\n    \n\n![image-20220314223217804](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220314223217804.png)\n\n将安装的rpi模块直接指向文件目录\n\n```python\n  pip install --target=/usr/lib/python3/dist-packages rpi.gpio\n```","slug":"树莓派4b点亮ledpython实现","published":1,"updated":"2024-03-12T10:42:59.140Z","_id":"cltnrar55002djry17z32buol","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"1、树莓派GPIO引脚图\"><a href=\"#1、树莓派GPIO引脚图\" class=\"headerlink\" title=\"1、树莓派GPIO引脚图\"></a>1、树莓派GPIO引脚图</h4><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/rpi-pins-40-0.png\" alt=\"rpi-pins-40-0\"></p>\n<p>[admonition title=”注意” color=”red”] 先简单了解一下引脚，我们对树莓派引脚的操作是有可能损坏我们的树莓派的。有必要提前了解。[/admonition]</p>\n<p>功能名：</p>\n<ul>\n<li>  绿色背景：GPIO是标准引脚，可以用来打开和关闭设备。例如，一个LED。</li>\n<li>  浅蓝色背景：I2C(Inter-Integrated Circuit)引脚连接并与支持该协议(I2C协议)的硬件模块对话。这个协议通常会占用两个引脚。</li>\n<li>  紫色背景：SPI（串行外设接口总线）引脚可用于连接和对话SPI设备。和I2C差不多，但使用了不同的协议。</li>\n<li>  深蓝色背景：UART(Universal asynchronous receiver/transmitter，通用异步接收/发送器)是用于与其他设备通信的串行引脚。</li>\n<li>  黑色：GND是用来接地的引脚。使用哪个引脚并不重要，因为它们都连接在同一条线上。<span id=\"more\"></span>\n<h4 id=\"2、主要实验材料\"><a href=\"#2、主要实验材料\" class=\"headerlink\" title=\"2、主要实验材料\"></a>2、主要实验材料</h4></li>\n</ul>\n<p>树莓派4B主板、SD卡、USB电源、1k欧姆电阻、红色LED发光二极管、杜邦线</p>\n<h4 id=\"3、实验步骤\"><a href=\"#3、实验步骤\" class=\"headerlink\" title=\"3、实验步骤\"></a>3、实验步骤</h4><ul>\n<li>连接电路  发光二极管正极接上1kΩ电阻，两边连接杜邦线。将二极管正极插入GPIO引脚21(BCM编码，也就是物理引脚的40)，二极管负极接入GND(这里插入物理引脚39)</li>\n<li>树莓派编写程序代码  在这之前先检查Python是否安装了 <code>RPI.GPIO</code> 模块，Python2已经预装，Python3需要手动安装  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install python3-rpi.gpio</span><br></pre></td></tr></table></figure>\n  创建<code>pi.py</code> 文件,写入：  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RPi.GPIO <span class=\"keyword\">as</span> GPIO</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"comment\">#注意BOARD和BCM编码的不同，这里设置的是BCM编码</span></span><br><span class=\"line\">GPIO.setmode(GPIO.BCM)</span><br><span class=\"line\">GPIO.setup(<span class=\"number\">21</span>, GPIO.OUT)</span><br><span class=\"line\"><span class=\"comment\">#闪5次</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">  GPIO.output(<span class=\"number\">21</span>,GPIO.HIGH)</span><br><span class=\"line\">  time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">  GPIO.output(<span class=\"number\">21</span>,GPIO.LOW)</span><br><span class=\"line\">  time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#建议每次退出时都用cleanup设置GPIO引脚为低电平状态</span></span><br><span class=\"line\">GPIO.cleanup()</span><br></pre></td></tr></table></figure>\n</li>\n<li>运行py程序  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo python pi.py</span><br></pre></td></tr></table></figure>\n  观察到二极管灯一闪一闪既大功告成！</li>\n</ul>\n<h4 id=\"4、总结\"><a href=\"#4、总结\" class=\"headerlink\" title=\"4、总结\"></a>4、总结</h4><p>关于在过程中遇到的一些问题</p>\n<ul>\n<li>python版本问题  树莓派4B默认使用python2.7，我们可以将它删除更换为python3.7  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//卸载python2.7</span></span><br><span class=\"line\">sudo apt-get autoremove python2<span class=\"number\">.7</span></span><br><span class=\"line\"><span class=\"comment\">//链接python3.7</span></span><br><span class=\"line\">sudo ln -s /usr/bin/python3<span class=\"number\">.7</span> /usr/bin/python</span><br><span class=\"line\"><span class=\"comment\">//链接pip3</span></span><br><span class=\"line\">sudo ln -s /usr/bin/pip3 /usr/bin/pip</span><br></pre></td></tr></table></figure>\n</li>\n<li>安装rpi.gpio库出现<strong>Requirement already satisfied</strong>问题</li>\n</ul>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220314223217804.png\" alt=\"image-20220314223217804\"></p>\n<p>将安装的rpi模块直接指向文件目录</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install --target=/usr/lib/python3/dist-packages rpi.gpio</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"1、树莓派GPIO引脚图\"><a href=\"#1、树莓派GPIO引脚图\" class=\"headerlink\" title=\"1、树莓派GPIO引脚图\"></a>1、树莓派GPIO引脚图</h4><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/rpi-pins-40-0.png\" alt=\"rpi-pins-40-0\"></p>\n<p>[admonition title=”注意” color=”red”] 先简单了解一下引脚，我们对树莓派引脚的操作是有可能损坏我们的树莓派的。有必要提前了解。[/admonition]</p>\n<p>功能名：</p>\n<ul>\n<li>  绿色背景：GPIO是标准引脚，可以用来打开和关闭设备。例如，一个LED。</li>\n<li>  浅蓝色背景：I2C(Inter-Integrated Circuit)引脚连接并与支持该协议(I2C协议)的硬件模块对话。这个协议通常会占用两个引脚。</li>\n<li>  紫色背景：SPI（串行外设接口总线）引脚可用于连接和对话SPI设备。和I2C差不多，但使用了不同的协议。</li>\n<li>  深蓝色背景：UART(Universal asynchronous receiver/transmitter，通用异步接收/发送器)是用于与其他设备通信的串行引脚。</li>\n<li>  黑色：GND是用来接地的引脚。使用哪个引脚并不重要，因为它们都连接在同一条线上。","more":"<h4 id=\"2、主要实验材料\"><a href=\"#2、主要实验材料\" class=\"headerlink\" title=\"2、主要实验材料\"></a>2、主要实验材料</h4></li>\n</ul>\n<p>树莓派4B主板、SD卡、USB电源、1k欧姆电阻、红色LED发光二极管、杜邦线</p>\n<h4 id=\"3、实验步骤\"><a href=\"#3、实验步骤\" class=\"headerlink\" title=\"3、实验步骤\"></a>3、实验步骤</h4><ul>\n<li>连接电路  发光二极管正极接上1kΩ电阻，两边连接杜邦线。将二极管正极插入GPIO引脚21(BCM编码，也就是物理引脚的40)，二极管负极接入GND(这里插入物理引脚39)</li>\n<li>树莓派编写程序代码  在这之前先检查Python是否安装了 <code>RPI.GPIO</code> 模块，Python2已经预装，Python3需要手动安装  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install python3-rpi.gpio</span><br></pre></td></tr></table></figure>\n  创建<code>pi.py</code> 文件,写入：  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RPi.GPIO <span class=\"keyword\">as</span> GPIO</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"comment\">#注意BOARD和BCM编码的不同，这里设置的是BCM编码</span></span><br><span class=\"line\">GPIO.setmode(GPIO.BCM)</span><br><span class=\"line\">GPIO.setup(<span class=\"number\">21</span>, GPIO.OUT)</span><br><span class=\"line\"><span class=\"comment\">#闪5次</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">  GPIO.output(<span class=\"number\">21</span>,GPIO.HIGH)</span><br><span class=\"line\">  time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">  GPIO.output(<span class=\"number\">21</span>,GPIO.LOW)</span><br><span class=\"line\">  time.sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#建议每次退出时都用cleanup设置GPIO引脚为低电平状态</span></span><br><span class=\"line\">GPIO.cleanup()</span><br></pre></td></tr></table></figure>\n</li>\n<li>运行py程序  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo python pi.py</span><br></pre></td></tr></table></figure>\n  观察到二极管灯一闪一闪既大功告成！</li>\n</ul>\n<h4 id=\"4、总结\"><a href=\"#4、总结\" class=\"headerlink\" title=\"4、总结\"></a>4、总结</h4><p>关于在过程中遇到的一些问题</p>\n<ul>\n<li>python版本问题  树莓派4B默认使用python2.7，我们可以将它删除更换为python3.7  <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//卸载python2.7</span></span><br><span class=\"line\">sudo apt-get autoremove python2<span class=\"number\">.7</span></span><br><span class=\"line\"><span class=\"comment\">//链接python3.7</span></span><br><span class=\"line\">sudo ln -s /usr/bin/python3<span class=\"number\">.7</span> /usr/bin/python</span><br><span class=\"line\"><span class=\"comment\">//链接pip3</span></span><br><span class=\"line\">sudo ln -s /usr/bin/pip3 /usr/bin/pip</span><br></pre></td></tr></table></figure>\n</li>\n<li>安装rpi.gpio库出现<strong>Requirement already satisfied</strong>问题</li>\n</ul>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220314223217804.png\" alt=\"image-20220314223217804\"></p>\n<p>将安装的rpi模块直接指向文件目录</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install --target=/usr/lib/python3/dist-packages rpi.gpio</span><br></pre></td></tr></table></figure>"},{"title":"树莓派4B+LCD1602, 检测网站访问情况","id":"842","date":"2022-04-04T14:26:36.000Z","_content":"\n### 树莓派4B+LCD1602+Python脚本, 检测网站情况\n\n硬件设备\n\n> 5V 3A电源 树莓派4B 4G内存 液晶显示屏LCD1602 LCD液晶屏转接板 杜邦线\n\n软件设备\n\n> 镜像系统：2022-01-28-raspios-bullseye-arm64-full(Debian11) 语言：Python3.7\n\n###### 效果图\n\n![image-20220404215420605](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404215420605.png)\n<!-- more -->\n模块上有一颗可调电阻，用于调节显示的对比度。如果你新拿到一块屏幕无论怎么调试都不见显示，记得调节一下这里\n\n![image-20220404215638919](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404215638919.png)\n\n###### 接线\n\n```\nGND --- GND\nVCC --- 接树莓派 5V\nSDA --- I2C 数据\nSCL --- I2C 时钟\n```\n\n![微信图片_20220405165148](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220405165148.jpg)\n\n###### 启动树莓派I2C\n\n```\nsudo  apt-get install -y python-smbus\nsudo  apt-get install -y i2c-tools\nsudo  raspi-config\n```\n\n![image-20220404220733270](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404220733270.png)\n\n重启 sudo reboot\n\n###### 测试\n\n```\nsudo i2cdetect -y 1\n```\n\n![image-20220404220926386](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404220926386.png)\n\n如上图说明已成功连接LCD1602。\n\n###### 添加驱动程序 LCD1602.py\n\n```python\nimport time\nimport smbus\nBUS = smbus.SMBus(1)\nLCD_ADDR = 0x27\nBLEN = 1\n\ndef turn_light(key):\n    global BLEN\n    BLEN = key\n    if key ==1:\n        BUS.write_byte(LCD_ADDR, 0x08)\n    else:\n        BUS.write_byte(LCD_ADDR, 0x00)\n\ndef write_word(addr, data):\n    global BLEN\n    temp = data\n    if BLEN == 1:\n        temp = 0x08\n    else:\n        temp &=0xF7\n    BUS.write_byte(addr, temp)\ndef send_command(comm):\n    buf = comm & 0xF0\n    buf = 0x04\n    write_word(LCD_ADDR, buf)\n    time.sleep(0.002)\n    buf &=0xFB\n    write_word(LCD_ADDR, buf)\n     # Send bit3-0 secondly\n    buf = (comm & 0x0F) << 4\n    buf = 0x04               # RS = 0, RW = 0, EN = 1\n    write_word(LCD_ADDR ,buf)\n    time.sleep(0.002)\n    buf &= 0xFB               # Make EN = 0\n    write_word(LCD_ADDR ,buf)\n\ndef send_data(data):\n    # Send bit7-4 firstly\n    buf = data & 0xF0\n    buf = 0x05               # RS = 1, RW = 0, EN = 1\n    write_word(LCD_ADDR ,buf)\n    time.sleep(0.002)\n    buf &= 0xFB               # Make EN = 0\n    write_word(LCD_ADDR ,buf)\n\n    # Send bit3-0 secondly\n    buf = (data & 0x0F) << 4\n    buf = 0x05               # RS = 1, RW = 0, EN = 1\n    write_word(LCD_ADDR ,buf)\n    time.sleep(0.002)\n    buf &= 0xFB               # Make EN = 0\n    write_word(LCD_ADDR ,buf)\n\ndef init_lcd():\n    try:\n        send_command(0x33) # Must initialize to 8-line mode at first\n        time.sleep(0.005)\n        send_command(0x32) # Then initialize to 4-line mode\n        time.sleep(0.005)\n        send_command(0x28) # 2 Lines & 5*7 dots\n        time.sleep(0.005)\n        send_command(0x0C) # Enable display without cursor\n        time.sleep(0.005)\n        send_command(0x01) # Clear Screen\n        BUS.write_byte(LCD_ADDR ,0x08)\n    except:\n        return False\n    else:\n        return True\n\ndef clear_lcd():\n    send_command(0x01) # Clear Screen\n\ndef print_lcd(x, y, str):\n    if x < 0:\n        x = 0\n    if x > 15:\n        x = 15\n    if y <0:\n        y = 0\n    if y > 1:\n        y = 1\n\n    # Move cursor\n    addr = 0x80 + 0x40 * y + x\n    send_command(addr)\n\n    for chr in str:\n        send_data(ord(chr))\n\nif __name__ == '__main__':\n    init_lcd()\n    print_lcd(0, 0, 'Hello, world!')\n```\n\n###### 添加自己的运行文件main.py\n\n```python\n#!/user/bin/env python\nimport smbus\nimport time\nimport subprocess\nimport pymysql\nfrom sshtunnel import SSHTunnelForwarder\nimport LCD1602 as LCD\n#获取网站访问数据\ndef getVisit():\n    ssh_host = \"ip\"  # 你的ip地址或主机名\n    ssh_port = 22  # 连接mysql服务器的端口号，一般都是22，必须是数字\n    ssh_user = \"user\"  # 这是你的用户名\n    ssh_password = \"password\"  # 这是你的用户密码\n    mysql_host = \"127.0.0.1\"  # 这是你mysql服务器的主机名或ip地址\n    mysql_port = 3306  # 这是你mysql服务器上的端口，3306，mysql就是3306，必须是数字\n    mysql_user = \"root\"  # 这是你mysql数据库上的用户名\n    mysql_password = \"password\"  # 这是你mysql数据库的密码\n    mysql_db = \"wordpress\"  # mysql服务器上的数据库名\n\n# 严格缩进要求，否则连接失败\n    with SSHTunnelForwarder(\n            (ssh_host, ssh_port),\n            ssh_username=ssh_user,\n            ssh_password=ssh_password,\n            remote_bind_address=(mysql_host, mysql_port)) as server:\n            conn = pymysql.connect(host=mysql_host,\n                                port=server.local_bind_port,\n                                user=mysql_user,\n                                passwd=mysql_password,\n                                db=mysql_db)\n\n            cursor = conn.cursor()\n            cursor.execute(\"select * from wp_statistics_visit where last_counter=\\\"\" + time.strftime(\"%Y-%m-%d\", time.localtime(time.time()))+\"\\\"\")\n            data = cursor.fetchall()\n\n            for row in data:\n                visit = row[3]\n            cursor.execute(\"select * from wp_statistics_visitor where last_counter=\\\"\" + time.strftime(\"%Y-%m-%d\", time.localtime(time.time()))+\"\\\"\")\n            data2 = cursor.fetchall()\n            temp = 0\n            last = \"\"\n            for row in data2:\n                if row[0]>temp:\n                    temp = row[0]\n                    last = row[7]\n            cursor.execute(\"select * from wp_statistics_useronline\")\n            data3 = cursor.fetchall()\n            onlineNum = 0\n            platform = \"\"\n\n            if data3 !=pymysql.NULL:\n                for row in data3:\n                    onlineNum+=1\n                    platform=row[7]\n            conn.commit()\n            server.close()\n            cursor.close()\n    if conn != pymysql.NULL:\n        print(\"conn is connect\")\n    return visit,last, onlineNum, platform\nif __name__ == \"__main__\":\n    LCD.init_lcd()\n    LCD.turn_light(1)\n    LCD.print_lcd(0, 0, \"    Hello\")\n    LCD.print_lcd(0, 1, \"Raspberry Pi\")\n    time.sleep(5)\n    while True:\n        now = time.strftime(\"%m-%d %H:%M\", time.localtime(time.time()))\n        siteData = getVisit()\n        LCD.clear_lcd()\n        LCD.print_lcd(0, 0, 'TIME:'+now)#显示当前时间\n        LCD.print_lcd(0, 1, 'ONLINE:'+str(siteData[2])+\" \"+siteData[3])\n        time.sleep(5)\n        LCD.clear_lcd()\n        LCD.print_lcd(0, 0, 'VISIT:'+str(siteData[0])+\" LAST:\")\n        LCD.print_lcd(0, 1, siteData[1])\n        time.sleep(5)\n```\n\n其中 LCD.print\\_lcd() 用来显示字符，前两个参数分别表示 X、Y 坐标（从 0 开始），后面的内容将从这个坐标的位置开始显示。第三个参数就是要显示的内容了。 LCD.turn\\_light(0) 表示关闭背光，LCD.turn\\_light(1) 表示打开背光。\n\n最后运行程序（LCD1602.py和main.py要在同一个模块）\n\n```c\nsudo python3 main.py\n```\n\n\\[video width=\"476\" height=\"1280\" mp4=\"https://wangwangyz.site/wp-content/uploads/2022/04/树莓派测试视频.mp4\"\\]\\[/video\\]\n\n###### References\n\n[树莓派通过 I2C 驱动 LCD1602 液晶屏 树莓派实验室 (nxez.com)](https://shumeipai.nxez.com/2020/06/17/raspberry-pi-drives-lcd1602-screen-through-i2c.html)","source":"_posts/树莓派4b驱动lcd1602-检测网站访问情况.md","raw":"---\ntitle: '树莓派4B+LCD1602, 检测网站访问情况'\ntags:\n  - Linux\n  - 树莓派\nid: '842'\ncategories:\n  - - 学习笔记\n  - - 文章\ndate: 2022-04-04 22:26:36\n---\n\n### 树莓派4B+LCD1602+Python脚本, 检测网站情况\n\n硬件设备\n\n> 5V 3A电源 树莓派4B 4G内存 液晶显示屏LCD1602 LCD液晶屏转接板 杜邦线\n\n软件设备\n\n> 镜像系统：2022-01-28-raspios-bullseye-arm64-full(Debian11) 语言：Python3.7\n\n###### 效果图\n\n![image-20220404215420605](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404215420605.png)\n<!-- more -->\n模块上有一颗可调电阻，用于调节显示的对比度。如果你新拿到一块屏幕无论怎么调试都不见显示，记得调节一下这里\n\n![image-20220404215638919](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404215638919.png)\n\n###### 接线\n\n```\nGND --- GND\nVCC --- 接树莓派 5V\nSDA --- I2C 数据\nSCL --- I2C 时钟\n```\n\n![微信图片_20220405165148](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220405165148.jpg)\n\n###### 启动树莓派I2C\n\n```\nsudo  apt-get install -y python-smbus\nsudo  apt-get install -y i2c-tools\nsudo  raspi-config\n```\n\n![image-20220404220733270](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404220733270.png)\n\n重启 sudo reboot\n\n###### 测试\n\n```\nsudo i2cdetect -y 1\n```\n\n![image-20220404220926386](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404220926386.png)\n\n如上图说明已成功连接LCD1602。\n\n###### 添加驱动程序 LCD1602.py\n\n```python\nimport time\nimport smbus\nBUS = smbus.SMBus(1)\nLCD_ADDR = 0x27\nBLEN = 1\n\ndef turn_light(key):\n    global BLEN\n    BLEN = key\n    if key ==1:\n        BUS.write_byte(LCD_ADDR, 0x08)\n    else:\n        BUS.write_byte(LCD_ADDR, 0x00)\n\ndef write_word(addr, data):\n    global BLEN\n    temp = data\n    if BLEN == 1:\n        temp = 0x08\n    else:\n        temp &=0xF7\n    BUS.write_byte(addr, temp)\ndef send_command(comm):\n    buf = comm & 0xF0\n    buf = 0x04\n    write_word(LCD_ADDR, buf)\n    time.sleep(0.002)\n    buf &=0xFB\n    write_word(LCD_ADDR, buf)\n     # Send bit3-0 secondly\n    buf = (comm & 0x0F) << 4\n    buf = 0x04               # RS = 0, RW = 0, EN = 1\n    write_word(LCD_ADDR ,buf)\n    time.sleep(0.002)\n    buf &= 0xFB               # Make EN = 0\n    write_word(LCD_ADDR ,buf)\n\ndef send_data(data):\n    # Send bit7-4 firstly\n    buf = data & 0xF0\n    buf = 0x05               # RS = 1, RW = 0, EN = 1\n    write_word(LCD_ADDR ,buf)\n    time.sleep(0.002)\n    buf &= 0xFB               # Make EN = 0\n    write_word(LCD_ADDR ,buf)\n\n    # Send bit3-0 secondly\n    buf = (data & 0x0F) << 4\n    buf = 0x05               # RS = 1, RW = 0, EN = 1\n    write_word(LCD_ADDR ,buf)\n    time.sleep(0.002)\n    buf &= 0xFB               # Make EN = 0\n    write_word(LCD_ADDR ,buf)\n\ndef init_lcd():\n    try:\n        send_command(0x33) # Must initialize to 8-line mode at first\n        time.sleep(0.005)\n        send_command(0x32) # Then initialize to 4-line mode\n        time.sleep(0.005)\n        send_command(0x28) # 2 Lines & 5*7 dots\n        time.sleep(0.005)\n        send_command(0x0C) # Enable display without cursor\n        time.sleep(0.005)\n        send_command(0x01) # Clear Screen\n        BUS.write_byte(LCD_ADDR ,0x08)\n    except:\n        return False\n    else:\n        return True\n\ndef clear_lcd():\n    send_command(0x01) # Clear Screen\n\ndef print_lcd(x, y, str):\n    if x < 0:\n        x = 0\n    if x > 15:\n        x = 15\n    if y <0:\n        y = 0\n    if y > 1:\n        y = 1\n\n    # Move cursor\n    addr = 0x80 + 0x40 * y + x\n    send_command(addr)\n\n    for chr in str:\n        send_data(ord(chr))\n\nif __name__ == '__main__':\n    init_lcd()\n    print_lcd(0, 0, 'Hello, world!')\n```\n\n###### 添加自己的运行文件main.py\n\n```python\n#!/user/bin/env python\nimport smbus\nimport time\nimport subprocess\nimport pymysql\nfrom sshtunnel import SSHTunnelForwarder\nimport LCD1602 as LCD\n#获取网站访问数据\ndef getVisit():\n    ssh_host = \"ip\"  # 你的ip地址或主机名\n    ssh_port = 22  # 连接mysql服务器的端口号，一般都是22，必须是数字\n    ssh_user = \"user\"  # 这是你的用户名\n    ssh_password = \"password\"  # 这是你的用户密码\n    mysql_host = \"127.0.0.1\"  # 这是你mysql服务器的主机名或ip地址\n    mysql_port = 3306  # 这是你mysql服务器上的端口，3306，mysql就是3306，必须是数字\n    mysql_user = \"root\"  # 这是你mysql数据库上的用户名\n    mysql_password = \"password\"  # 这是你mysql数据库的密码\n    mysql_db = \"wordpress\"  # mysql服务器上的数据库名\n\n# 严格缩进要求，否则连接失败\n    with SSHTunnelForwarder(\n            (ssh_host, ssh_port),\n            ssh_username=ssh_user,\n            ssh_password=ssh_password,\n            remote_bind_address=(mysql_host, mysql_port)) as server:\n            conn = pymysql.connect(host=mysql_host,\n                                port=server.local_bind_port,\n                                user=mysql_user,\n                                passwd=mysql_password,\n                                db=mysql_db)\n\n            cursor = conn.cursor()\n            cursor.execute(\"select * from wp_statistics_visit where last_counter=\\\"\" + time.strftime(\"%Y-%m-%d\", time.localtime(time.time()))+\"\\\"\")\n            data = cursor.fetchall()\n\n            for row in data:\n                visit = row[3]\n            cursor.execute(\"select * from wp_statistics_visitor where last_counter=\\\"\" + time.strftime(\"%Y-%m-%d\", time.localtime(time.time()))+\"\\\"\")\n            data2 = cursor.fetchall()\n            temp = 0\n            last = \"\"\n            for row in data2:\n                if row[0]>temp:\n                    temp = row[0]\n                    last = row[7]\n            cursor.execute(\"select * from wp_statistics_useronline\")\n            data3 = cursor.fetchall()\n            onlineNum = 0\n            platform = \"\"\n\n            if data3 !=pymysql.NULL:\n                for row in data3:\n                    onlineNum+=1\n                    platform=row[7]\n            conn.commit()\n            server.close()\n            cursor.close()\n    if conn != pymysql.NULL:\n        print(\"conn is connect\")\n    return visit,last, onlineNum, platform\nif __name__ == \"__main__\":\n    LCD.init_lcd()\n    LCD.turn_light(1)\n    LCD.print_lcd(0, 0, \"    Hello\")\n    LCD.print_lcd(0, 1, \"Raspberry Pi\")\n    time.sleep(5)\n    while True:\n        now = time.strftime(\"%m-%d %H:%M\", time.localtime(time.time()))\n        siteData = getVisit()\n        LCD.clear_lcd()\n        LCD.print_lcd(0, 0, 'TIME:'+now)#显示当前时间\n        LCD.print_lcd(0, 1, 'ONLINE:'+str(siteData[2])+\" \"+siteData[3])\n        time.sleep(5)\n        LCD.clear_lcd()\n        LCD.print_lcd(0, 0, 'VISIT:'+str(siteData[0])+\" LAST:\")\n        LCD.print_lcd(0, 1, siteData[1])\n        time.sleep(5)\n```\n\n其中 LCD.print\\_lcd() 用来显示字符，前两个参数分别表示 X、Y 坐标（从 0 开始），后面的内容将从这个坐标的位置开始显示。第三个参数就是要显示的内容了。 LCD.turn\\_light(0) 表示关闭背光，LCD.turn\\_light(1) 表示打开背光。\n\n最后运行程序（LCD1602.py和main.py要在同一个模块）\n\n```c\nsudo python3 main.py\n```\n\n\\[video width=\"476\" height=\"1280\" mp4=\"https://wangwangyz.site/wp-content/uploads/2022/04/树莓派测试视频.mp4\"\\]\\[/video\\]\n\n###### References\n\n[树莓派通过 I2C 驱动 LCD1602 液晶屏 树莓派实验室 (nxez.com)](https://shumeipai.nxez.com/2020/06/17/raspberry-pi-drives-lcd1602-screen-through-i2c.html)","slug":"树莓派4b驱动lcd1602-检测网站访问情况","published":1,"updated":"2024-03-12T10:43:01.176Z","_id":"cltnrar56002hjry13w9r13lj","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"树莓派4B-LCD1602-Python脚本-检测网站情况\"><a href=\"#树莓派4B-LCD1602-Python脚本-检测网站情况\" class=\"headerlink\" title=\"树莓派4B+LCD1602+Python脚本, 检测网站情况\"></a>树莓派4B+LCD1602+Python脚本, 检测网站情况</h3><p>硬件设备</p>\n<blockquote>\n<p>5V 3A电源 树莓派4B 4G内存 液晶显示屏LCD1602 LCD液晶屏转接板 杜邦线</p>\n</blockquote>\n<p>软件设备</p>\n<blockquote>\n<p>镜像系统：2022-01-28-raspios-bullseye-arm64-full(Debian11) 语言：Python3.7</p>\n</blockquote>\n<h6 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h6><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404215420605.png\" alt=\"image-20220404215420605\"></p>\n<span id=\"more\"></span>\n<p>模块上有一颗可调电阻，用于调节显示的对比度。如果你新拿到一块屏幕无论怎么调试都不见显示，记得调节一下这里</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404215638919.png\" alt=\"image-20220404215638919\"></p>\n<h6 id=\"接线\"><a href=\"#接线\" class=\"headerlink\" title=\"接线\"></a>接线</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GND --- GND</span><br><span class=\"line\">VCC --- 接树莓派 5V</span><br><span class=\"line\">SDA --- I2C 数据</span><br><span class=\"line\">SCL --- I2C 时钟</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220405165148.jpg\" alt=\"微信图片_20220405165148\"></p>\n<h6 id=\"启动树莓派I2C\"><a href=\"#启动树莓派I2C\" class=\"headerlink\" title=\"启动树莓派I2C\"></a>启动树莓派I2C</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo  apt-get install -y python-smbus</span><br><span class=\"line\">sudo  apt-get install -y i2c-tools</span><br><span class=\"line\">sudo  raspi-config</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404220733270.png\" alt=\"image-20220404220733270\"></p>\n<p>重启 sudo reboot</p>\n<h6 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo i2cdetect -y 1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404220926386.png\" alt=\"image-20220404220926386\"></p>\n<p>如上图说明已成功连接LCD1602。</p>\n<h6 id=\"添加驱动程序-LCD1602-py\"><a href=\"#添加驱动程序-LCD1602-py\" class=\"headerlink\" title=\"添加驱动程序 LCD1602.py\"></a>添加驱动程序 LCD1602.py</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> smbus</span><br><span class=\"line\">BUS = smbus.SMBus(<span class=\"number\">1</span>)</span><br><span class=\"line\">LCD_ADDR = <span class=\"number\">0x27</span></span><br><span class=\"line\">BLEN = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">turn_light</span>(<span class=\"params\">key</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> BLEN</span><br><span class=\"line\">    BLEN = key</span><br><span class=\"line\">    <span class=\"keyword\">if</span> key ==<span class=\"number\">1</span>:</span><br><span class=\"line\">        BUS.write_byte(LCD_ADDR, <span class=\"number\">0x08</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        BUS.write_byte(LCD_ADDR, <span class=\"number\">0x00</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">write_word</span>(<span class=\"params\">addr, data</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> BLEN</span><br><span class=\"line\">    temp = data</span><br><span class=\"line\">    <span class=\"keyword\">if</span> BLEN == <span class=\"number\">1</span>:</span><br><span class=\"line\">        temp = <span class=\"number\">0x08</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        temp &amp;=<span class=\"number\">0xF7</span></span><br><span class=\"line\">    BUS.write_byte(addr, temp)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">send_command</span>(<span class=\"params\">comm</span>):</span><br><span class=\"line\">    buf = comm &amp; <span class=\"number\">0xF0</span></span><br><span class=\"line\">    buf = <span class=\"number\">0x04</span></span><br><span class=\"line\">    write_word(LCD_ADDR, buf)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.002</span>)</span><br><span class=\"line\">    buf &amp;=<span class=\"number\">0xFB</span></span><br><span class=\"line\">    write_word(LCD_ADDR, buf)</span><br><span class=\"line\">     <span class=\"comment\"># Send bit3-0 secondly</span></span><br><span class=\"line\">    buf = (comm &amp; <span class=\"number\">0x0F</span>) &lt;&lt; <span class=\"number\">4</span></span><br><span class=\"line\">    buf = <span class=\"number\">0x04</span>               <span class=\"comment\"># RS = 0, RW = 0, EN = 1</span></span><br><span class=\"line\">    write_word(LCD_ADDR ,buf)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.002</span>)</span><br><span class=\"line\">    buf &amp;= <span class=\"number\">0xFB</span>               <span class=\"comment\"># Make EN = 0</span></span><br><span class=\"line\">    write_word(LCD_ADDR ,buf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">send_data</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"comment\"># Send bit7-4 firstly</span></span><br><span class=\"line\">    buf = data &amp; <span class=\"number\">0xF0</span></span><br><span class=\"line\">    buf = <span class=\"number\">0x05</span>               <span class=\"comment\"># RS = 1, RW = 0, EN = 1</span></span><br><span class=\"line\">    write_word(LCD_ADDR ,buf)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.002</span>)</span><br><span class=\"line\">    buf &amp;= <span class=\"number\">0xFB</span>               <span class=\"comment\"># Make EN = 0</span></span><br><span class=\"line\">    write_word(LCD_ADDR ,buf)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Send bit3-0 secondly</span></span><br><span class=\"line\">    buf = (data &amp; <span class=\"number\">0x0F</span>) &lt;&lt; <span class=\"number\">4</span></span><br><span class=\"line\">    buf = <span class=\"number\">0x05</span>               <span class=\"comment\"># RS = 1, RW = 0, EN = 1</span></span><br><span class=\"line\">    write_word(LCD_ADDR ,buf)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.002</span>)</span><br><span class=\"line\">    buf &amp;= <span class=\"number\">0xFB</span>               <span class=\"comment\"># Make EN = 0</span></span><br><span class=\"line\">    write_word(LCD_ADDR ,buf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">init_lcd</span>():</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        send_command(<span class=\"number\">0x33</span>) <span class=\"comment\"># Must initialize to 8-line mode at first</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.005</span>)</span><br><span class=\"line\">        send_command(<span class=\"number\">0x32</span>) <span class=\"comment\"># Then initialize to 4-line mode</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.005</span>)</span><br><span class=\"line\">        send_command(<span class=\"number\">0x28</span>) <span class=\"comment\"># 2 Lines &amp; 5*7 dots</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.005</span>)</span><br><span class=\"line\">        send_command(<span class=\"number\">0x0C</span>) <span class=\"comment\"># Enable display without cursor</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.005</span>)</span><br><span class=\"line\">        send_command(<span class=\"number\">0x01</span>) <span class=\"comment\"># Clear Screen</span></span><br><span class=\"line\">        BUS.write_byte(LCD_ADDR ,<span class=\"number\">0x08</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">clear_lcd</span>():</span><br><span class=\"line\">    send_command(<span class=\"number\">0x01</span>) <span class=\"comment\"># Clear Screen</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_lcd</span>(<span class=\"params\">x, y, <span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        x = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt; <span class=\"number\">15</span>:</span><br><span class=\"line\">        x = <span class=\"number\">15</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> y &lt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        y = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> y &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        y = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Move cursor</span></span><br><span class=\"line\">    addr = <span class=\"number\">0x80</span> + <span class=\"number\">0x40</span> * y + x</span><br><span class=\"line\">    send_command(addr)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"built_in\">chr</span> <span class=\"keyword\">in</span> <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        send_data(<span class=\"built_in\">ord</span>(<span class=\"built_in\">chr</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    init_lcd()</span><br><span class=\"line\">    print_lcd(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"string\">&#x27;Hello, world!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"添加自己的运行文件main-py\"><a href=\"#添加自己的运行文件main-py\" class=\"headerlink\" title=\"添加自己的运行文件main.py\"></a>添加自己的运行文件main.py</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/user/bin/env python</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> smbus</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> subprocess</span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"><span class=\"keyword\">from</span> sshtunnel <span class=\"keyword\">import</span> SSHTunnelForwarder</span><br><span class=\"line\"><span class=\"keyword\">import</span> LCD1602 <span class=\"keyword\">as</span> LCD</span><br><span class=\"line\"><span class=\"comment\">#获取网站访问数据</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getVisit</span>():</span><br><span class=\"line\">    ssh_host = <span class=\"string\">&quot;ip&quot;</span>  <span class=\"comment\"># 你的ip地址或主机名</span></span><br><span class=\"line\">    ssh_port = <span class=\"number\">22</span>  <span class=\"comment\"># 连接mysql服务器的端口号，一般都是22，必须是数字</span></span><br><span class=\"line\">    ssh_user = <span class=\"string\">&quot;user&quot;</span>  <span class=\"comment\"># 这是你的用户名</span></span><br><span class=\"line\">    ssh_password = <span class=\"string\">&quot;password&quot;</span>  <span class=\"comment\"># 这是你的用户密码</span></span><br><span class=\"line\">    mysql_host = <span class=\"string\">&quot;127.0.0.1&quot;</span>  <span class=\"comment\"># 这是你mysql服务器的主机名或ip地址</span></span><br><span class=\"line\">    mysql_port = <span class=\"number\">3306</span>  <span class=\"comment\"># 这是你mysql服务器上的端口，3306，mysql就是3306，必须是数字</span></span><br><span class=\"line\">    mysql_user = <span class=\"string\">&quot;root&quot;</span>  <span class=\"comment\"># 这是你mysql数据库上的用户名</span></span><br><span class=\"line\">    mysql_password = <span class=\"string\">&quot;password&quot;</span>  <span class=\"comment\"># 这是你mysql数据库的密码</span></span><br><span class=\"line\">    mysql_db = <span class=\"string\">&quot;wordpress&quot;</span>  <span class=\"comment\"># mysql服务器上的数据库名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 严格缩进要求，否则连接失败</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> SSHTunnelForwarder(</span><br><span class=\"line\">            (ssh_host, ssh_port),</span><br><span class=\"line\">            ssh_username=ssh_user,</span><br><span class=\"line\">            ssh_password=ssh_password,</span><br><span class=\"line\">            remote_bind_address=(mysql_host, mysql_port)) <span class=\"keyword\">as</span> server:</span><br><span class=\"line\">            conn = pymysql.connect(host=mysql_host,</span><br><span class=\"line\">                                port=server.local_bind_port,</span><br><span class=\"line\">                                user=mysql_user,</span><br><span class=\"line\">                                passwd=mysql_password,</span><br><span class=\"line\">                                db=mysql_db)</span><br><span class=\"line\"></span><br><span class=\"line\">            cursor = conn.cursor()</span><br><span class=\"line\">            cursor.execute(<span class=\"string\">&quot;select * from wp_statistics_visit where last_counter=\\&quot;&quot;</span> + time.strftime(<span class=\"string\">&quot;%Y-%m-%d&quot;</span>, time.localtime(time.time()))+<span class=\"string\">&quot;\\&quot;&quot;</span>)</span><br><span class=\"line\">            data = cursor.fetchall()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">                visit = row[<span class=\"number\">3</span>]</span><br><span class=\"line\">            cursor.execute(<span class=\"string\">&quot;select * from wp_statistics_visitor where last_counter=\\&quot;&quot;</span> + time.strftime(<span class=\"string\">&quot;%Y-%m-%d&quot;</span>, time.localtime(time.time()))+<span class=\"string\">&quot;\\&quot;&quot;</span>)</span><br><span class=\"line\">            data2 = cursor.fetchall()</span><br><span class=\"line\">            temp = <span class=\"number\">0</span></span><br><span class=\"line\">            last = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> data2:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> row[<span class=\"number\">0</span>]&gt;temp:</span><br><span class=\"line\">                    temp = row[<span class=\"number\">0</span>]</span><br><span class=\"line\">                    last = row[<span class=\"number\">7</span>]</span><br><span class=\"line\">            cursor.execute(<span class=\"string\">&quot;select * from wp_statistics_useronline&quot;</span>)</span><br><span class=\"line\">            data3 = cursor.fetchall()</span><br><span class=\"line\">            onlineNum = <span class=\"number\">0</span></span><br><span class=\"line\">            platform = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> data3 !=pymysql.NULL:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> data3:</span><br><span class=\"line\">                    onlineNum+=<span class=\"number\">1</span></span><br><span class=\"line\">                    platform=row[<span class=\"number\">7</span>]</span><br><span class=\"line\">            conn.commit()</span><br><span class=\"line\">            server.close()</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> conn != pymysql.NULL:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;conn is connect&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> visit,last, onlineNum, platform</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    LCD.init_lcd()</span><br><span class=\"line\">    LCD.turn_light(<span class=\"number\">1</span>)</span><br><span class=\"line\">    LCD.print_lcd(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;    Hello&quot;</span>)</span><br><span class=\"line\">    LCD.print_lcd(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"string\">&quot;Raspberry Pi&quot;</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        now = time.strftime(<span class=\"string\">&quot;%m-%d %H:%M&quot;</span>, time.localtime(time.time()))</span><br><span class=\"line\">        siteData = getVisit()</span><br><span class=\"line\">        LCD.clear_lcd()</span><br><span class=\"line\">        LCD.print_lcd(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"string\">&#x27;TIME:&#x27;</span>+now)<span class=\"comment\">#显示当前时间</span></span><br><span class=\"line\">        LCD.print_lcd(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"string\">&#x27;ONLINE:&#x27;</span>+<span class=\"built_in\">str</span>(siteData[<span class=\"number\">2</span>])+<span class=\"string\">&quot; &quot;</span>+siteData[<span class=\"number\">3</span>])</span><br><span class=\"line\">        time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">        LCD.clear_lcd()</span><br><span class=\"line\">        LCD.print_lcd(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"string\">&#x27;VISIT:&#x27;</span>+<span class=\"built_in\">str</span>(siteData[<span class=\"number\">0</span>])+<span class=\"string\">&quot; LAST:&quot;</span>)</span><br><span class=\"line\">        LCD.print_lcd(<span class=\"number\">0</span>, <span class=\"number\">1</span>, siteData[<span class=\"number\">1</span>])</span><br><span class=\"line\">        time.sleep(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<p>其中 LCD.print_lcd() 用来显示字符，前两个参数分别表示 X、Y 坐标（从 0 开始），后面的内容将从这个坐标的位置开始显示。第三个参数就是要显示的内容了。 LCD.turn_light(0) 表示关闭背光，LCD.turn_light(1) 表示打开背光。</p>\n<p>最后运行程序（LCD1602.py和main.py要在同一个模块）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo python3 main.py</span><br></pre></td></tr></table></figure>\n\n<p>[video width=”476” height=”1280” mp4=”<a href=\"https://wangwangyz.site/wp-content/uploads/2022/04/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%B5%8B%E8%AF%95%E8%A7%86%E9%A2%91.mp4&quot;/]/[/video/]\">https://wangwangyz.site/wp-content/uploads/2022/04/树莓派测试视频.mp4&quot;\\]\\[/video\\]</a></p>\n<h6 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h6><p><a href=\"https://shumeipai.nxez.com/2020/06/17/raspberry-pi-drives-lcd1602-screen-through-i2c.html\">树莓派通过 I2C 驱动 LCD1602 液晶屏 树莓派实验室 (nxez.com)</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"树莓派4B-LCD1602-Python脚本-检测网站情况\"><a href=\"#树莓派4B-LCD1602-Python脚本-检测网站情况\" class=\"headerlink\" title=\"树莓派4B+LCD1602+Python脚本, 检测网站情况\"></a>树莓派4B+LCD1602+Python脚本, 检测网站情况</h3><p>硬件设备</p>\n<blockquote>\n<p>5V 3A电源 树莓派4B 4G内存 液晶显示屏LCD1602 LCD液晶屏转接板 杜邦线</p>\n</blockquote>\n<p>软件设备</p>\n<blockquote>\n<p>镜像系统：2022-01-28-raspios-bullseye-arm64-full(Debian11) 语言：Python3.7</p>\n</blockquote>\n<h6 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h6><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404215420605.png\" alt=\"image-20220404215420605\"></p>","more":"<p>模块上有一颗可调电阻，用于调节显示的对比度。如果你新拿到一块屏幕无论怎么调试都不见显示，记得调节一下这里</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404215638919.png\" alt=\"image-20220404215638919\"></p>\n<h6 id=\"接线\"><a href=\"#接线\" class=\"headerlink\" title=\"接线\"></a>接线</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GND --- GND</span><br><span class=\"line\">VCC --- 接树莓派 5V</span><br><span class=\"line\">SDA --- I2C 数据</span><br><span class=\"line\">SCL --- I2C 时钟</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220405165148.jpg\" alt=\"微信图片_20220405165148\"></p>\n<h6 id=\"启动树莓派I2C\"><a href=\"#启动树莓派I2C\" class=\"headerlink\" title=\"启动树莓派I2C\"></a>启动树莓派I2C</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo  apt-get install -y python-smbus</span><br><span class=\"line\">sudo  apt-get install -y i2c-tools</span><br><span class=\"line\">sudo  raspi-config</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404220733270.png\" alt=\"image-20220404220733270\"></p>\n<p>重启 sudo reboot</p>\n<h6 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo i2cdetect -y 1</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404220926386.png\" alt=\"image-20220404220926386\"></p>\n<p>如上图说明已成功连接LCD1602。</p>\n<h6 id=\"添加驱动程序-LCD1602-py\"><a href=\"#添加驱动程序-LCD1602-py\" class=\"headerlink\" title=\"添加驱动程序 LCD1602.py\"></a>添加驱动程序 LCD1602.py</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> smbus</span><br><span class=\"line\">BUS = smbus.SMBus(<span class=\"number\">1</span>)</span><br><span class=\"line\">LCD_ADDR = <span class=\"number\">0x27</span></span><br><span class=\"line\">BLEN = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">turn_light</span>(<span class=\"params\">key</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> BLEN</span><br><span class=\"line\">    BLEN = key</span><br><span class=\"line\">    <span class=\"keyword\">if</span> key ==<span class=\"number\">1</span>:</span><br><span class=\"line\">        BUS.write_byte(LCD_ADDR, <span class=\"number\">0x08</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        BUS.write_byte(LCD_ADDR, <span class=\"number\">0x00</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">write_word</span>(<span class=\"params\">addr, data</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> BLEN</span><br><span class=\"line\">    temp = data</span><br><span class=\"line\">    <span class=\"keyword\">if</span> BLEN == <span class=\"number\">1</span>:</span><br><span class=\"line\">        temp = <span class=\"number\">0x08</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        temp &amp;=<span class=\"number\">0xF7</span></span><br><span class=\"line\">    BUS.write_byte(addr, temp)</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">send_command</span>(<span class=\"params\">comm</span>):</span><br><span class=\"line\">    buf = comm &amp; <span class=\"number\">0xF0</span></span><br><span class=\"line\">    buf = <span class=\"number\">0x04</span></span><br><span class=\"line\">    write_word(LCD_ADDR, buf)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.002</span>)</span><br><span class=\"line\">    buf &amp;=<span class=\"number\">0xFB</span></span><br><span class=\"line\">    write_word(LCD_ADDR, buf)</span><br><span class=\"line\">     <span class=\"comment\"># Send bit3-0 secondly</span></span><br><span class=\"line\">    buf = (comm &amp; <span class=\"number\">0x0F</span>) &lt;&lt; <span class=\"number\">4</span></span><br><span class=\"line\">    buf = <span class=\"number\">0x04</span>               <span class=\"comment\"># RS = 0, RW = 0, EN = 1</span></span><br><span class=\"line\">    write_word(LCD_ADDR ,buf)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.002</span>)</span><br><span class=\"line\">    buf &amp;= <span class=\"number\">0xFB</span>               <span class=\"comment\"># Make EN = 0</span></span><br><span class=\"line\">    write_word(LCD_ADDR ,buf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">send_data</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">    <span class=\"comment\"># Send bit7-4 firstly</span></span><br><span class=\"line\">    buf = data &amp; <span class=\"number\">0xF0</span></span><br><span class=\"line\">    buf = <span class=\"number\">0x05</span>               <span class=\"comment\"># RS = 1, RW = 0, EN = 1</span></span><br><span class=\"line\">    write_word(LCD_ADDR ,buf)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.002</span>)</span><br><span class=\"line\">    buf &amp;= <span class=\"number\">0xFB</span>               <span class=\"comment\"># Make EN = 0</span></span><br><span class=\"line\">    write_word(LCD_ADDR ,buf)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Send bit3-0 secondly</span></span><br><span class=\"line\">    buf = (data &amp; <span class=\"number\">0x0F</span>) &lt;&lt; <span class=\"number\">4</span></span><br><span class=\"line\">    buf = <span class=\"number\">0x05</span>               <span class=\"comment\"># RS = 1, RW = 0, EN = 1</span></span><br><span class=\"line\">    write_word(LCD_ADDR ,buf)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">0.002</span>)</span><br><span class=\"line\">    buf &amp;= <span class=\"number\">0xFB</span>               <span class=\"comment\"># Make EN = 0</span></span><br><span class=\"line\">    write_word(LCD_ADDR ,buf)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">init_lcd</span>():</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        send_command(<span class=\"number\">0x33</span>) <span class=\"comment\"># Must initialize to 8-line mode at first</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.005</span>)</span><br><span class=\"line\">        send_command(<span class=\"number\">0x32</span>) <span class=\"comment\"># Then initialize to 4-line mode</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.005</span>)</span><br><span class=\"line\">        send_command(<span class=\"number\">0x28</span>) <span class=\"comment\"># 2 Lines &amp; 5*7 dots</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.005</span>)</span><br><span class=\"line\">        send_command(<span class=\"number\">0x0C</span>) <span class=\"comment\"># Enable display without cursor</span></span><br><span class=\"line\">        time.sleep(<span class=\"number\">0.005</span>)</span><br><span class=\"line\">        send_command(<span class=\"number\">0x01</span>) <span class=\"comment\"># Clear Screen</span></span><br><span class=\"line\">        BUS.write_byte(LCD_ADDR ,<span class=\"number\">0x08</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">clear_lcd</span>():</span><br><span class=\"line\">    send_command(<span class=\"number\">0x01</span>) <span class=\"comment\"># Clear Screen</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_lcd</span>(<span class=\"params\">x, y, <span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        x = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> x &gt; <span class=\"number\">15</span>:</span><br><span class=\"line\">        x = <span class=\"number\">15</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> y &lt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        y = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> y &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        y = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Move cursor</span></span><br><span class=\"line\">    addr = <span class=\"number\">0x80</span> + <span class=\"number\">0x40</span> * y + x</span><br><span class=\"line\">    send_command(addr)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"built_in\">chr</span> <span class=\"keyword\">in</span> <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        send_data(<span class=\"built_in\">ord</span>(<span class=\"built_in\">chr</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    init_lcd()</span><br><span class=\"line\">    print_lcd(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"string\">&#x27;Hello, world!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"添加自己的运行文件main-py\"><a href=\"#添加自己的运行文件main-py\" class=\"headerlink\" title=\"添加自己的运行文件main.py\"></a>添加自己的运行文件main.py</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/user/bin/env python</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> smbus</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> subprocess</span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"><span class=\"keyword\">from</span> sshtunnel <span class=\"keyword\">import</span> SSHTunnelForwarder</span><br><span class=\"line\"><span class=\"keyword\">import</span> LCD1602 <span class=\"keyword\">as</span> LCD</span><br><span class=\"line\"><span class=\"comment\">#获取网站访问数据</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">getVisit</span>():</span><br><span class=\"line\">    ssh_host = <span class=\"string\">&quot;ip&quot;</span>  <span class=\"comment\"># 你的ip地址或主机名</span></span><br><span class=\"line\">    ssh_port = <span class=\"number\">22</span>  <span class=\"comment\"># 连接mysql服务器的端口号，一般都是22，必须是数字</span></span><br><span class=\"line\">    ssh_user = <span class=\"string\">&quot;user&quot;</span>  <span class=\"comment\"># 这是你的用户名</span></span><br><span class=\"line\">    ssh_password = <span class=\"string\">&quot;password&quot;</span>  <span class=\"comment\"># 这是你的用户密码</span></span><br><span class=\"line\">    mysql_host = <span class=\"string\">&quot;127.0.0.1&quot;</span>  <span class=\"comment\"># 这是你mysql服务器的主机名或ip地址</span></span><br><span class=\"line\">    mysql_port = <span class=\"number\">3306</span>  <span class=\"comment\"># 这是你mysql服务器上的端口，3306，mysql就是3306，必须是数字</span></span><br><span class=\"line\">    mysql_user = <span class=\"string\">&quot;root&quot;</span>  <span class=\"comment\"># 这是你mysql数据库上的用户名</span></span><br><span class=\"line\">    mysql_password = <span class=\"string\">&quot;password&quot;</span>  <span class=\"comment\"># 这是你mysql数据库的密码</span></span><br><span class=\"line\">    mysql_db = <span class=\"string\">&quot;wordpress&quot;</span>  <span class=\"comment\"># mysql服务器上的数据库名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 严格缩进要求，否则连接失败</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> SSHTunnelForwarder(</span><br><span class=\"line\">            (ssh_host, ssh_port),</span><br><span class=\"line\">            ssh_username=ssh_user,</span><br><span class=\"line\">            ssh_password=ssh_password,</span><br><span class=\"line\">            remote_bind_address=(mysql_host, mysql_port)) <span class=\"keyword\">as</span> server:</span><br><span class=\"line\">            conn = pymysql.connect(host=mysql_host,</span><br><span class=\"line\">                                port=server.local_bind_port,</span><br><span class=\"line\">                                user=mysql_user,</span><br><span class=\"line\">                                passwd=mysql_password,</span><br><span class=\"line\">                                db=mysql_db)</span><br><span class=\"line\"></span><br><span class=\"line\">            cursor = conn.cursor()</span><br><span class=\"line\">            cursor.execute(<span class=\"string\">&quot;select * from wp_statistics_visit where last_counter=\\&quot;&quot;</span> + time.strftime(<span class=\"string\">&quot;%Y-%m-%d&quot;</span>, time.localtime(time.time()))+<span class=\"string\">&quot;\\&quot;&quot;</span>)</span><br><span class=\"line\">            data = cursor.fetchall()</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> data:</span><br><span class=\"line\">                visit = row[<span class=\"number\">3</span>]</span><br><span class=\"line\">            cursor.execute(<span class=\"string\">&quot;select * from wp_statistics_visitor where last_counter=\\&quot;&quot;</span> + time.strftime(<span class=\"string\">&quot;%Y-%m-%d&quot;</span>, time.localtime(time.time()))+<span class=\"string\">&quot;\\&quot;&quot;</span>)</span><br><span class=\"line\">            data2 = cursor.fetchall()</span><br><span class=\"line\">            temp = <span class=\"number\">0</span></span><br><span class=\"line\">            last = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> data2:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> row[<span class=\"number\">0</span>]&gt;temp:</span><br><span class=\"line\">                    temp = row[<span class=\"number\">0</span>]</span><br><span class=\"line\">                    last = row[<span class=\"number\">7</span>]</span><br><span class=\"line\">            cursor.execute(<span class=\"string\">&quot;select * from wp_statistics_useronline&quot;</span>)</span><br><span class=\"line\">            data3 = cursor.fetchall()</span><br><span class=\"line\">            onlineNum = <span class=\"number\">0</span></span><br><span class=\"line\">            platform = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> data3 !=pymysql.NULL:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> data3:</span><br><span class=\"line\">                    onlineNum+=<span class=\"number\">1</span></span><br><span class=\"line\">                    platform=row[<span class=\"number\">7</span>]</span><br><span class=\"line\">            conn.commit()</span><br><span class=\"line\">            server.close()</span><br><span class=\"line\">            cursor.close()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> conn != pymysql.NULL:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;conn is connect&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> visit,last, onlineNum, platform</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    LCD.init_lcd()</span><br><span class=\"line\">    LCD.turn_light(<span class=\"number\">1</span>)</span><br><span class=\"line\">    LCD.print_lcd(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;    Hello&quot;</span>)</span><br><span class=\"line\">    LCD.print_lcd(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"string\">&quot;Raspberry Pi&quot;</span>)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        now = time.strftime(<span class=\"string\">&quot;%m-%d %H:%M&quot;</span>, time.localtime(time.time()))</span><br><span class=\"line\">        siteData = getVisit()</span><br><span class=\"line\">        LCD.clear_lcd()</span><br><span class=\"line\">        LCD.print_lcd(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"string\">&#x27;TIME:&#x27;</span>+now)<span class=\"comment\">#显示当前时间</span></span><br><span class=\"line\">        LCD.print_lcd(<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"string\">&#x27;ONLINE:&#x27;</span>+<span class=\"built_in\">str</span>(siteData[<span class=\"number\">2</span>])+<span class=\"string\">&quot; &quot;</span>+siteData[<span class=\"number\">3</span>])</span><br><span class=\"line\">        time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">        LCD.clear_lcd()</span><br><span class=\"line\">        LCD.print_lcd(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"string\">&#x27;VISIT:&#x27;</span>+<span class=\"built_in\">str</span>(siteData[<span class=\"number\">0</span>])+<span class=\"string\">&quot; LAST:&quot;</span>)</span><br><span class=\"line\">        LCD.print_lcd(<span class=\"number\">0</span>, <span class=\"number\">1</span>, siteData[<span class=\"number\">1</span>])</span><br><span class=\"line\">        time.sleep(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n\n<p>其中 LCD.print_lcd() 用来显示字符，前两个参数分别表示 X、Y 坐标（从 0 开始），后面的内容将从这个坐标的位置开始显示。第三个参数就是要显示的内容了。 LCD.turn_light(0) 表示关闭背光，LCD.turn_light(1) 表示打开背光。</p>\n<p>最后运行程序（LCD1602.py和main.py要在同一个模块）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo python3 main.py</span><br></pre></td></tr></table></figure>\n\n<p>[video width=”476” height=”1280” mp4=”<a href=\"https://wangwangyz.site/wp-content/uploads/2022/04/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%B5%8B%E8%AF%95%E8%A7%86%E9%A2%91.mp4&quot;/]/[/video/]\">https://wangwangyz.site/wp-content/uploads/2022/04/树莓派测试视频.mp4&quot;\\]\\[/video\\]</a></p>\n<h6 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h6><p><a href=\"https://shumeipai.nxez.com/2020/06/17/raspberry-pi-drives-lcd1602-screen-through-i2c.html\">树莓派通过 I2C 驱动 LCD1602 液晶屏 树莓派实验室 (nxez.com)</a></p>"},{"title":"Python学习笔记(一)","id":"253","date":"2022-03-01T14:58:11.000Z","_content":"\n### 1.Python缩进\n\n```python\nelements = [\"Tom\",\"Jack\",\"Anne\"]\nfor elem in elements:\n    print(\"Hello\",elem) #缩进表示一个代码块\n    print(\"I love you\",elem)\nprint(\"Bye My\",elements)#不缩进代表一个独立的语句，不在for循环体内\n```\n\n### 2.基本类型\n<!-- more -->\n*   整数\n    \n*   浮点数\n    \n    `1.23e9`可以表示很大的浮点数\n    \n*   字符串\n    \n    可以使用`\"`或者`'`括起来的，字符串内可用转义字符`\\`标识\n    \n*   布尔值\n    \n    `True`和 `False` 布尔值还可以用布尔运算，有三种：`and，or， not`与之对应的逻辑是数理逻辑上的与或非\n    \n*   空值\n    \n    是Python一个特殊值，用 `None`表示\n    \n*   列表、字典等\n    \n\n#### 2.1变量\n\n大小写英文、数字和`_`的组合，且不能用数字开头\n\n#### 2.2常量\n\nPython里通常用全大写变量名表示常量，但不强制\n\n#### 2.3字符串编码\n\n*   Python3采用Unicode编码，常见计算机系统内存统一采用Unicode编码，当需要保存到硬盘或者传输时，就转化为UTF-8编码，反之转化回Unicode。\n    \n*   Python对于 `bytes` 类型的数据用带 `b` 前缀的单引号或双引号表示：\n    \n    ```python\n    x = b'ABC'\n    ```\n    \n*   字符串可用encode( )方法可以编码为指定的bytes\n    \n    ```python\n    >>> 'ABC'.encode('ascii')\n    b'ABC'\n    >>> '中文'.encode('utf-8')\n    b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'\n    >>> '中文'.encode('ascii')\n    ```\n    \n*   len( )函数计算str字符数\n    \n    ```python\n    >>> print(len(\"你好\"))\n    2\n    >>> print(len(\"nihao\"))\n    5\n    ```\n    \n    如果是计算bytes，则是字节数\n    \n    ```python\n    >>> len(b'ABC')\n    3\n    >>> len(b'\\xe4\\xb8\\xad\\xe6\\x96\\x87')\n    6\n    >>> len('中文'.encode('utf-8'))\n    6\n    ```\n    \n    坚持使用UTF-8编码避免乱码问题\n    \n\n### 3.格式化\n\n```python\n>>> print(\"hello ,%s,I'm %d years old,my score is %f\"%(\"jack\",18,95.00))\nhello ,jack,I'm 18 years old,my score is 95.000000\n```\n\n另外一种是str.format( )方法，不推荐\n\n### 4.list 和tuple\n\n*   list是一种有序的集合，可以增删，\n    \n    ```python\n    elements = [\"A\",123,[\"C\",\"D\"],True]\n    elements.append(\"abcd\")\n    elements.insert(2,(\"2\",\"3\"))\n    elements.pop(0)\n    print(elements)\n    print(elements[-3][0])#如果是elements[-2][0]会报TypeErrorw\n    ###########输出结果自行理解\n    [123, ('2', '3'), ['C', 'D'], True, 'abcd']\n    C\n    ```\n    \n*   tuple一旦初始化不能修改，没有append( ), insert( )这种方法，能使用-1...表示索引\n    \n    tuple用 `()` 表示(注意和数学符号意义上的区别，通常用 `,` 如（ 1,）加以区分)\n    \n    tuple里面若有指向别的元素如list，指向的list不可改变，但是list指向的可以改变\n    \n    ```python\n    tuple = (\"A\", \"B\", [\"C\",\"D\"])#tuple里面的元素[\"C\",\"D\"]是一个list，list可以改变\n    ```\n    \n\n### 5.dict和set\n\n*   dict\n\n### 6.Python小结\n\n列表list \\[\\]、元组tuple ()、字典 dict {key: value}、无序不重复集合 set (list\\[\\])\n\n### 7.函数\n\n*   #### 参数\n    \n    *   位置参数\n    \n    平时常用的按照顺序进行传参的参数\n    \n    ```python\n    def power(x,n):\n        temp = 1\n        if n<0:\n            for t in range(n,0):#t表示n到-1的整数\n                temp = temp/x\n        elif n>0:\n            for t in range(0,n):#range(n,m)表示返回n到m-1的整数list\n                temp = temp*x\n        return temp\n    print(\"power(5,3):\",power(5,3))#power(5,3): 125\n    print(\"power(5,-2):\",power(5,-2))#power(5,-2): 0.04\n    ```\n    \n    *   默认参数\n    \n    默认参数在后面，默认参数必须指向不变对象，不然下次调用时默认参数内容就变了\n    \n    ```python\n    def enroll(name,age,city=\"北京\",sex=\"保密\"):\n        print(\"My name is \",name,\",I`m \",age)\n        print(\"I`m come from \",city,\",my sex is\",sex)\n    enroll(\"李华\",23,sex = \"女\")\n    #My name is  李华 ,I`m  23 \n    #I`m come from  北京 ,my sex is 女   \n    enroll(\"张三\",18)\n    #My name is  张三 ,I`m  18\n    #I`m come from  北京 ,my sex is 保密  \n    enroll(\"李四\",45,\"上海\",\"男\")\n    #My name is  李四 ,I`m  45\n    #I`m come from  上海 ,my sex is 男  \n    ```\n    \n    *   可变参数\n    \n    在参数前加一个 `*` ，参数接收到的可以是一个tuple，也可以是任意个参数包括0个\n    \n    对于已有的tuple和list，在前面加一个 `*` 就可变成可变参数传入函数\n    \n    ```python\n    def calc(*numbers):\n        sum = 0\n        for number in numbers:\n            sum = sum + number\n        return sum\n    nums1 = [1,3,5,7]\n    nums2 = (1,3,5,7)\n    print(calc(1,3,5,7)) #16\n    print(calc(*nums2))  #16\n    print(calc(*nums1))  #16\n    ```\n    \n    *   关键字参数\n    \n    允许传入0至多个参数，在函数内部自动组装为一个dict\n    \n    ```python\n    def info(name, age, **more):\n        print(name,\" \",age,\" \",more)\n        if \"city\" in more:\n            pass \n        if \"addr\" in more:\n            print(\"my city:\",more.get(\"addr\")) #more相当于一个字典\n    \n    info(\"李华\",12,addr=\"钦州市\",sex = \"男\")\n    #结果都为：李华   12   {'addr': '钦州市', 'sex': '男'} my city: 钦州市\n    extra = { \"addr\":\"钦州市\",\"sex\":\"男\"}\n    info(\"李华\",12,**extra)#这里相当于把extra的一份拷贝给函数info的关键字参数more\n    ```\n    \n    小结：对于任意函数，都可以通过类似`func(*args, **kw)`的形式调用它，无论它的参数是如何定义的。\n    \n*   #### 递归\n    \n*   #### 元信息\n    \n    ```python\n    #为函数添加元数据,描述函数的参数类型和返回类型\n    def add(x:int, y:int) -> int:\n      return x+y\n    ```\n    \n    元信息只是为了帮助源码阅读。python解释器不会对这些注解添加任何的语义。即使返回类型不一致，程序也不会出错，因为它们不会被类型检查。\n    \n\n### 8.高级特性\n\n*   #### 切片\n    \n    `:` 用来取list或tuple的部分元素\n    \n    ```python\n    L = list(range(100,200))\n    print(L[:3])#取list前三个元素\n    print(L[1:3])#取list中索引值为1到索引值为3的元素\n    print(L[-20:-10])#取倒数第十到倒数第二十也就是180-190（不包括190）之间的十个整数\n    print(L[:10:2])#前十个元素，每隔2个元素取一个，结果为100,102,104,106,108\n    print(L[::-1])#实现切片逆序\n    ```\n    \n*   #### 迭代\n    \n    1、 通过`for...in`来完成迭代，不仅可以在 `tuple` 、 `list` 和 `dict` 上进行迭代，还可以作用于可迭代对象（可通过`collections.abc` 模块的 `Iterable` 类型判断)\n    \n    ```python\n    >>>isinstance('abc',Iterable)#str是否能迭代\n    True\n    >>>isinstance(123,Iterable)#整数是否能迭代\n    False\n    ```\n    \n    2、实现Java下标循环\n    \n    ```python\n    >>>for i,x in enumerate(['A','B','C']):\n    >>>    print(i,x)\n    0 A\n    1 B\n    2 C\n    ```\n    \n*   #### 列表生成式\n    \n    1.  列表生成式可以嵌套一层至多层循环\n        \n        ```python\n        #列表生成式直接一行代码生成list\n        >>>print([x*x for x in range(1,5)])\n        [1,4,9,16]\n        #还可以使用像for循环那样的两个变量即以上\n        >>>dictItem = {'A':'a','B':'b','C':'c'}\n        >>>print([a+'='+b for a,b in dictItem.items])\n        ['A=a','B=b','C=c']\n        #for循环后还能添加if判断条件，注意！！这是筛选条件，和下面的if...else不一样\n        >>>print([x*x for x in range(1,10) if x%2==0])\n        [4, 16, 36, 64]\n        #还可以添加多层循环\n        >>>print([a+b for a in ['1','2','3'] for b in ['A','B','C']])\n        ['1A', '1B', '1C', '2A', '2B', '2C', '3A', '3B', '3C']\n        ```\n        \n    2.  `if...else`的使用(使用方法为在for循环前加上if...else)\n        \n        ```python\n        >>>dictItem = {'A':2,'B':'b','C':'c','D':3}\n        >>>print([a+'='+b if isinstance(b,str) else a+'='+str(b) for a,b in dictItem.items()])\n        ['A=2', 'B=b', 'C=c','D=3']\n        ```\n        \n*   #### 生成器(Generator)\n    \n    `next()`、`yelid`、`StopIteration`\n    \n    generator函数返回一个generator对象\n    \n\n### 9\\. 高阶函数\n\n*   #### `map()` 、 `reduce()` 和 `filter()`\n    \n    1.  `map()`\n        \n        接收一个函数和Iterator，将`函数作用到所有Iterator元素`上并将结果返回到新的Iterator，最终结果返回新的Iterator。\n        \n        ```python\n        >>> def f(x):\n             return x * x\n        >>> r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n        >>> list(r)#最后要用list函数将Iterator转换为list\n        [1, 4, 9, 16, 25, 36, 49, 64, 81]\n        ```\n        \n    2.  `reduce`\n        \n        接收一个函数和一个序列，该函数必须接收`两个参数`，`reduce` 负责将`函数结果`继续和 `序列下一个元素` 作为两个参数继续执行下一次函数，直到后序无元素，最终结果为`计算结果`\n        \n        ```python\n        >>>def add(x,y):\n        >>>    return x+y\n        >>>reduce(add,[1,3,5,7])\n        16\n        ```\n        \n    \n    思考题：利用`map`和`reduce`编写一个`str2float`函数，把字符串`'123.456'`转换成浮点数`123.456`\n    \n    3.  `filter`\n        \n        接收一个函数和一个序列，将 `函数作用于每个元素` ，然后根据返回值是 `True` 还是 `False` 决定保留或者丢弃元素。\n        \n        ```python\n        >>>def not_empty(s):\n        >>>    return s and s.strip()\n        >>>print(list(filter(not_empty,['A',None,'B','']))\n        ['A', 'B']\n        ```\n        \n*   #### `sorted()`\n    \n    `sorted()` 可以对list进行排序，也是一个高阶函数，可以接收一个 `key` 函数自定义排序顺序\n    \n    ```python\n    >>>sorted([9,-1,2,4,-5],key=abs)\n    [-1, 2, 4, -5, 9]\n    ```\n    \n    `sorted()`函数负责将key函数`返回的结果`进行排序，并按对应关系返回list中的元素\n    \n    此外，要实现反向排序还可以传入 `reverse` 的值为 `True`\n    \n    ```python\n    >>>print(sorted([9,-1,2,4,-5],key=abs,reverse=True))\n    [9, -5, 4, 2, -1]\n    ```\n    \n    `sorted()` 返回结果为list\n    \n\n### 10\\. 函数式编程\n\n*   #### 返回函数\n    \n    1.  一个函数可以返回值，也可以`返回函数`\n        \n        ```python\n        def  lazy_sum(L):\n          def sum(L):\n                 result = 0\n                 for x in L:\n                     result = result + x\n                 return result\n          return sum #注意返回sum和sum()的区别！！！\n        test = lazy_sum([1,2,3,4,5])\n        print(test())#返回的是sum，则需要调用test();如果返回的是sum(),则直接调用test\n        ```\n        \n        ​ 上述例子，如果函数内只是返回`函数名`而不是返回执行函数，则为 `闭包运算` ；此外，返回闭包时，要注意返回函数不能引用任何循环变量或者后续会发生变化的变量。\n        \n        ![](https://s3.bmp.ovh/imgs/2022/02/ed7aed0162d048c1.png)\n        \n    2.  `nonlocal`\n        \n        声明该变量不是当前函数的局部变量\n        \n*   匿名函数(lambda)\n    \n    关键字 `lambda` 参数 `x,y` : 函数返回值 `x+y`\n    \n    ```python\n    lambda x,y: x+y \n    ```\n    \n    多数时候配合高阶函数 `map()`、`filter()`、`reduce()`、`sorted()` 使用\n    \n*   装饰器(decorator)\n    \n    在代码运行期间动态增加功能的方式。(动态语言的函数和类的定义，是在运行时动态创建的。)\n    \n    要借助Python的 `@` 语法，把decorator放在函数 `定义处`：\n    \n    ```python\n    import time\n    \n    def log(func):\n      def wrapper(*args,**kw):\n          print('call %s()'%func.__name__)\n          return func(*args,**kw)\n      return wrapper\n    @log   #相当于执行 now = log(now)\n    def now():\n      print(time.strftime(\"%Y-%m-%d %H:%M:%S\"))\n    ```\n    \n*   偏函数\n    \n    当函数的参数个数太多，需要简化时，使用`functools.partial`可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单\n    \n    ```python\n    >>> import functools\n    >>> int2 = functools.partial(int, base=2)\n    >>> int2('1000000')\n    64\n    >>> int2('1010101')\n    85\n    ```\n    \n\n### 11\\. 模块\n\n*   作用域\n    \n    `_xxx` 或者 `_xxx_` 表示的 `函数` 或者 `变量` 一般为非公开的(private)，不应该被直接引用(但依然可以在其它模块强制引用)。\n    \n    ```python\n    #这是工具类.py模块\n    >>>import datetime\n    >>>import time\n    >>>def showtime():\n    >>>    print(time.strftime(\"%Y-%m-%d %H:%M:%S\"))\n    >>>__t = time.strftime(\"%Y\")\n    >>>def __showyear():\n    >>>    print(__t)\n    \n    #这是test.py模块\n    >>>from 工具类 import showtime,__showyear,__t\n    >>>showtime()\n    >>>print(__t)#不推荐直接使用其它模块的private变量或函数，即使可以正常使用\n    >>>__showyear()\n    2022-02-26 18:36:49\n    2022\n    2022\n    ```\n    \n    只有外部需要的函数或者变量才定义为public。\n    \n*   安装第三方模块\n    \n    包管理工具 `pip`\n    \n\n### 12.面向对象编程\n\n*   类和实例及其访问权限\n    \n    ```python\n    #新建Student类，并继承Object类\n    class Student(object):\n      #__init__方法初始化对象，相当于java的构造子\n      #定义类时，self代表\"实例的引用\"\n      def __init__(self, name, gender):\n      #__xxx习惯上设置访问权限为private，但还是可以强制访问\n          self.__name = name\n          self.__gender = gender\n      #设置对象里的方法\n      def get_gender(self):\n          return self.__gender\n    \n      def set_gender(self,s):\n          if s =='male'or'female':\n              print(self.__gender)\n              self.__gender = s\n              print(self.__gender)\n          else:\n              raise ValueError('值错啦')\n    # 测试:\n    bart = Student('Bart', 'male')\n    if bart.get_gender() != 'male':\n      print('测试失败!')\n    else:\n      bart.set_gender('female')\n      if bart.get_gender() != 'female':\n          print('测试失败!')\n      else:\n          print('测试成功!')\n    ```\n    \n*   方法\n    \n    Python中的方法分为三种：实例方法、类方法、静态方法。\n    \n    *   实例方法\n    \n    参数里面有 `self` ，如：\n    \n    ```python\n    def set_self(self,name):\n        self.__name = name\n    ```\n    \n    *   类方法\n    \n    前面带有装饰器 `@classmethod` ,且参数里面有 `cls` ，如：\n    \n    ```python\n    @classmethod\n    def class_func(cls):\n        cls.name = \"我是类名\"\n        print(\"my name is %s\"%(cls.name))\n    ```\n    \n    *   静态方法\n    \n    形参中没有 `cls` 和 `self`，甚至没有参数，如：\n    \n    ```python\n    import random\n    @staticmethod\n    def static_func():\n        #返回0-9的随机数\n        randomNum = random.randint(0,9)\n        return randomNum\n    ```\n    \n    类方法和静态方法都可以通过类名和实例名调用\n    \n*   获取对象信息\n    \n    1.  `type()方法`\n        \n        ```python\n        >>> type(123)==int\n        True\n        >>> type('abc')==type('123')\n        True\n        >>> type('abc')==str\n        True\n        ```\n        \n        该方法返回对应的Class类型\n        \n    2.  `id()方法`\n        \n        ```python\n        >>>str1 = 'test'\n        >>>str2 = \"test\"\n        >>>str3 = str1\n        >>>int1 = 123\n        >>>list1 = [1,2,'3']\n        >>>tuple1 = (1,2,3,[1,2,'3'])\n        >>>total =['test',str2,str3,int1,list1,tuple1]\n        >>>print(list(id(i) for i in total[:3] if >>>type(i)==str))\n        >>>print(list(id(i) for i in total))\n        [2408464217968, 2408464217968, 2408464217968]\n        [2408464217968, 2408464217968, 2408464217968, 2408455690416, 2408507421120, 2408507410448]\n        ```\n        \n        从输出结果可以看出程序运行时str1、str2、str3的id值是一样的\n        \n    3.  `isinstance()方法`\n        \n        如果有继承关系：Object ->Animal ->Dog ->Husky\n        \n        那么则\n        \n        ```python\n        a = Animal()\n        b = Dog()\n        h = Husky()\n        >>>isinstance(h,Husky)\n        True\n        >>>isinstance(h,Animal)\n        True\n        ```\n        \n        `isinstance()`还可以判断其类型及其子类,一般情况下优先使用`isinstance()`判断类型\n        \n        `isinstance()`还可以判断是否为某些变量其一\n        \n        ```python\n        >>> isinstance([1, 2, 3], (list, tuple))\n        True\n        >>> isinstance((1, 2, 3), (list, tuple))\n        True\n        ```\n        \n    4.  `__doc__属性`\n        \n        ```python\n        >>>print(len.__doc__)\n        Return the number of items in a container. \n        ```\n        \n        用于查看某对象支持的方法或属性清单\n        \n    \n    此外还有 `help()`方法，可以帮助显示方法或属性信息\n    \n*   类属性\n    \n    直接定义在类中，区别于实例属性self.xxx\n    \n*   动态绑定\n    \n    动态绑定允许我们在程序运行的过程中动态给class加上功能\n    \n    ```python\n    class Student(object):\n      def __init__(self,name):\n          self.__name__ = name\n    stu1 = Student('张三')\n    #动态绑定给实例绑定一个属性\n    stu1.sex = 'male'\n    print(stu1.sex)\n    # 动态绑定给实例绑定一个方法\n    def  set_name(self,name):\n      self.__name__ = name\n    from types import MethodType\n    stu1.set_name = MethodType(set_name, stu1) \n    stu1.set_name('李四')\n    print(stu1.__name__)\n    ```\n    \n    为了限制类外动态绑定属性或方法，可以定义在定义类时用`__slots__`变量，来限制该class实例能添加的属性。\n    \n    ```python\n    class Student(object):\n      __slots__ = ('name','__name__')\n      def __init__(self,name):\n          self.__name__ = name\n    ```\n    \n    此时如果向Student类添加sex属性则会报AttributeError![image-20220312211908812](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312211908812.png)\n    \n    **注意**：`__slots__`定义的属性仅对当前类实例起作用，对继承的子类是不起作用\n    \n    练习：利用`@property`给一个`Screen`对象加上`width`和`height`属性，以及一个只读属性`resolution`\n    \n    ```python\n    class Screen(object):\n      @property\n      def  width(self):\n          return self.__width__ \n      @width.setter\n      def width(self,size):\n          if isinstance(size,(int,float))==False:\n              raise TypeError('请输入正确的int或其它数值类型')\n          if size < 0 or size > 2048:\n              raise ValueError('请输入正确范围的数')\n          self.__width__ = size\n      @property\n      def  height(self):\n          return self.__height__\n      @height.setter\n      def height(self,size):\n          if isinstance(size,(int,float))==False:\n             raise TypeError('请输入正确的int或其它数值类型')\n          if size < 0 or size > 2048:\n             raise ValueError('请输入正确范围的数')\n          self.__height__ = size   \n      @property\n      def  resolution(self):\n          return self.__width__*self.__height__\n    ```\n    \n*   多重继承\n    \n    通过多重继承，一个子类就可以同时获得多个父类的所有功能\n    \n    ```python\n    class Dog(Mammal,Runnable):\n      def __init__():\n          pass\n    ```\n    \n    `MixIn` 用于分清主父类和额外功能(类似于Java的继承单一父类和多继承接口)\n    \n    ```python\n    class Dog(Mammal,RunnableMixIn):\n       def __init__():\n          pass\n    ```\n    \n*   `__str__`\n    \n    Python里面的 `__str__` 相当于Java 的 `toString()`方法\n    \n    ```python\n    class Student(object):\n      __slots__ = ('name','__name__')\n      def __init__(self,name):\n          self.__name__ = name\n      def __str__(self) -> str:\n          return 'my name is%s '%(self.__name__)\n    stu1 = Student('张三')\n    print(stu1)  #结果为：my name is 张三\n    ```\n    \n    同样的还有 `__getattr__`、 `__call__`、 `__iter__`、 `__getitem__` 等\n    \n    可根据需要前往[官网文档](https://docs.python.org/3/tutorial/index.html)查阅相关资料，不再赘述。\n    \n\n### 13\\. 异常、错误、调试\n\n*   错误与错误\n    \n    高级语言通常都内置了一套`try...except...finally...`的错误处理机制，Python也不例外\n    \n    ```python\n    try:\n      #可能发生异常的语句\n    except IOError as e :\n      #发生IOError异常时要执行的语句\n      print(\"An EOF error occurred.\")\n      raise e\n    except (Ex2,Ex3):\n      #发生异常Ex2或Ex3时要执行的语句\n    except Exception:\n      #发生其它异常时要执行的语句\n    else:\n      #无异常时要执行的语句\n    finally:\n      #无论有没有异常都要执行的语句\n      #如文件资源、数据库、图形句柄资源的释放\n    ```\n    \n*   调试\n    \n    有三种方式：`Python Debugger`、`%xmode`、`assert`\n    \n    [Python学习笔记(二)](https://wangwangyz.site/?p=766 \"Python学习笔记(二)\")","source":"_posts/测试markdown.md","raw":"---\ntitle: Python学习笔记(一)\ntags:\n  - Python\nid: '253'\ncategories:\n  - - 专业技术\n  - - 文章\ndate: 2022-03-01 22:58:11\n---\n\n### 1.Python缩进\n\n```python\nelements = [\"Tom\",\"Jack\",\"Anne\"]\nfor elem in elements:\n    print(\"Hello\",elem) #缩进表示一个代码块\n    print(\"I love you\",elem)\nprint(\"Bye My\",elements)#不缩进代表一个独立的语句，不在for循环体内\n```\n\n### 2.基本类型\n<!-- more -->\n*   整数\n    \n*   浮点数\n    \n    `1.23e9`可以表示很大的浮点数\n    \n*   字符串\n    \n    可以使用`\"`或者`'`括起来的，字符串内可用转义字符`\\`标识\n    \n*   布尔值\n    \n    `True`和 `False` 布尔值还可以用布尔运算，有三种：`and，or， not`与之对应的逻辑是数理逻辑上的与或非\n    \n*   空值\n    \n    是Python一个特殊值，用 `None`表示\n    \n*   列表、字典等\n    \n\n#### 2.1变量\n\n大小写英文、数字和`_`的组合，且不能用数字开头\n\n#### 2.2常量\n\nPython里通常用全大写变量名表示常量，但不强制\n\n#### 2.3字符串编码\n\n*   Python3采用Unicode编码，常见计算机系统内存统一采用Unicode编码，当需要保存到硬盘或者传输时，就转化为UTF-8编码，反之转化回Unicode。\n    \n*   Python对于 `bytes` 类型的数据用带 `b` 前缀的单引号或双引号表示：\n    \n    ```python\n    x = b'ABC'\n    ```\n    \n*   字符串可用encode( )方法可以编码为指定的bytes\n    \n    ```python\n    >>> 'ABC'.encode('ascii')\n    b'ABC'\n    >>> '中文'.encode('utf-8')\n    b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'\n    >>> '中文'.encode('ascii')\n    ```\n    \n*   len( )函数计算str字符数\n    \n    ```python\n    >>> print(len(\"你好\"))\n    2\n    >>> print(len(\"nihao\"))\n    5\n    ```\n    \n    如果是计算bytes，则是字节数\n    \n    ```python\n    >>> len(b'ABC')\n    3\n    >>> len(b'\\xe4\\xb8\\xad\\xe6\\x96\\x87')\n    6\n    >>> len('中文'.encode('utf-8'))\n    6\n    ```\n    \n    坚持使用UTF-8编码避免乱码问题\n    \n\n### 3.格式化\n\n```python\n>>> print(\"hello ,%s,I'm %d years old,my score is %f\"%(\"jack\",18,95.00))\nhello ,jack,I'm 18 years old,my score is 95.000000\n```\n\n另外一种是str.format( )方法，不推荐\n\n### 4.list 和tuple\n\n*   list是一种有序的集合，可以增删，\n    \n    ```python\n    elements = [\"A\",123,[\"C\",\"D\"],True]\n    elements.append(\"abcd\")\n    elements.insert(2,(\"2\",\"3\"))\n    elements.pop(0)\n    print(elements)\n    print(elements[-3][0])#如果是elements[-2][0]会报TypeErrorw\n    ###########输出结果自行理解\n    [123, ('2', '3'), ['C', 'D'], True, 'abcd']\n    C\n    ```\n    \n*   tuple一旦初始化不能修改，没有append( ), insert( )这种方法，能使用-1...表示索引\n    \n    tuple用 `()` 表示(注意和数学符号意义上的区别，通常用 `,` 如（ 1,）加以区分)\n    \n    tuple里面若有指向别的元素如list，指向的list不可改变，但是list指向的可以改变\n    \n    ```python\n    tuple = (\"A\", \"B\", [\"C\",\"D\"])#tuple里面的元素[\"C\",\"D\"]是一个list，list可以改变\n    ```\n    \n\n### 5.dict和set\n\n*   dict\n\n### 6.Python小结\n\n列表list \\[\\]、元组tuple ()、字典 dict {key: value}、无序不重复集合 set (list\\[\\])\n\n### 7.函数\n\n*   #### 参数\n    \n    *   位置参数\n    \n    平时常用的按照顺序进行传参的参数\n    \n    ```python\n    def power(x,n):\n        temp = 1\n        if n<0:\n            for t in range(n,0):#t表示n到-1的整数\n                temp = temp/x\n        elif n>0:\n            for t in range(0,n):#range(n,m)表示返回n到m-1的整数list\n                temp = temp*x\n        return temp\n    print(\"power(5,3):\",power(5,3))#power(5,3): 125\n    print(\"power(5,-2):\",power(5,-2))#power(5,-2): 0.04\n    ```\n    \n    *   默认参数\n    \n    默认参数在后面，默认参数必须指向不变对象，不然下次调用时默认参数内容就变了\n    \n    ```python\n    def enroll(name,age,city=\"北京\",sex=\"保密\"):\n        print(\"My name is \",name,\",I`m \",age)\n        print(\"I`m come from \",city,\",my sex is\",sex)\n    enroll(\"李华\",23,sex = \"女\")\n    #My name is  李华 ,I`m  23 \n    #I`m come from  北京 ,my sex is 女   \n    enroll(\"张三\",18)\n    #My name is  张三 ,I`m  18\n    #I`m come from  北京 ,my sex is 保密  \n    enroll(\"李四\",45,\"上海\",\"男\")\n    #My name is  李四 ,I`m  45\n    #I`m come from  上海 ,my sex is 男  \n    ```\n    \n    *   可变参数\n    \n    在参数前加一个 `*` ，参数接收到的可以是一个tuple，也可以是任意个参数包括0个\n    \n    对于已有的tuple和list，在前面加一个 `*` 就可变成可变参数传入函数\n    \n    ```python\n    def calc(*numbers):\n        sum = 0\n        for number in numbers:\n            sum = sum + number\n        return sum\n    nums1 = [1,3,5,7]\n    nums2 = (1,3,5,7)\n    print(calc(1,3,5,7)) #16\n    print(calc(*nums2))  #16\n    print(calc(*nums1))  #16\n    ```\n    \n    *   关键字参数\n    \n    允许传入0至多个参数，在函数内部自动组装为一个dict\n    \n    ```python\n    def info(name, age, **more):\n        print(name,\" \",age,\" \",more)\n        if \"city\" in more:\n            pass \n        if \"addr\" in more:\n            print(\"my city:\",more.get(\"addr\")) #more相当于一个字典\n    \n    info(\"李华\",12,addr=\"钦州市\",sex = \"男\")\n    #结果都为：李华   12   {'addr': '钦州市', 'sex': '男'} my city: 钦州市\n    extra = { \"addr\":\"钦州市\",\"sex\":\"男\"}\n    info(\"李华\",12,**extra)#这里相当于把extra的一份拷贝给函数info的关键字参数more\n    ```\n    \n    小结：对于任意函数，都可以通过类似`func(*args, **kw)`的形式调用它，无论它的参数是如何定义的。\n    \n*   #### 递归\n    \n*   #### 元信息\n    \n    ```python\n    #为函数添加元数据,描述函数的参数类型和返回类型\n    def add(x:int, y:int) -> int:\n      return x+y\n    ```\n    \n    元信息只是为了帮助源码阅读。python解释器不会对这些注解添加任何的语义。即使返回类型不一致，程序也不会出错，因为它们不会被类型检查。\n    \n\n### 8.高级特性\n\n*   #### 切片\n    \n    `:` 用来取list或tuple的部分元素\n    \n    ```python\n    L = list(range(100,200))\n    print(L[:3])#取list前三个元素\n    print(L[1:3])#取list中索引值为1到索引值为3的元素\n    print(L[-20:-10])#取倒数第十到倒数第二十也就是180-190（不包括190）之间的十个整数\n    print(L[:10:2])#前十个元素，每隔2个元素取一个，结果为100,102,104,106,108\n    print(L[::-1])#实现切片逆序\n    ```\n    \n*   #### 迭代\n    \n    1、 通过`for...in`来完成迭代，不仅可以在 `tuple` 、 `list` 和 `dict` 上进行迭代，还可以作用于可迭代对象（可通过`collections.abc` 模块的 `Iterable` 类型判断)\n    \n    ```python\n    >>>isinstance('abc',Iterable)#str是否能迭代\n    True\n    >>>isinstance(123,Iterable)#整数是否能迭代\n    False\n    ```\n    \n    2、实现Java下标循环\n    \n    ```python\n    >>>for i,x in enumerate(['A','B','C']):\n    >>>    print(i,x)\n    0 A\n    1 B\n    2 C\n    ```\n    \n*   #### 列表生成式\n    \n    1.  列表生成式可以嵌套一层至多层循环\n        \n        ```python\n        #列表生成式直接一行代码生成list\n        >>>print([x*x for x in range(1,5)])\n        [1,4,9,16]\n        #还可以使用像for循环那样的两个变量即以上\n        >>>dictItem = {'A':'a','B':'b','C':'c'}\n        >>>print([a+'='+b for a,b in dictItem.items])\n        ['A=a','B=b','C=c']\n        #for循环后还能添加if判断条件，注意！！这是筛选条件，和下面的if...else不一样\n        >>>print([x*x for x in range(1,10) if x%2==0])\n        [4, 16, 36, 64]\n        #还可以添加多层循环\n        >>>print([a+b for a in ['1','2','3'] for b in ['A','B','C']])\n        ['1A', '1B', '1C', '2A', '2B', '2C', '3A', '3B', '3C']\n        ```\n        \n    2.  `if...else`的使用(使用方法为在for循环前加上if...else)\n        \n        ```python\n        >>>dictItem = {'A':2,'B':'b','C':'c','D':3}\n        >>>print([a+'='+b if isinstance(b,str) else a+'='+str(b) for a,b in dictItem.items()])\n        ['A=2', 'B=b', 'C=c','D=3']\n        ```\n        \n*   #### 生成器(Generator)\n    \n    `next()`、`yelid`、`StopIteration`\n    \n    generator函数返回一个generator对象\n    \n\n### 9\\. 高阶函数\n\n*   #### `map()` 、 `reduce()` 和 `filter()`\n    \n    1.  `map()`\n        \n        接收一个函数和Iterator，将`函数作用到所有Iterator元素`上并将结果返回到新的Iterator，最终结果返回新的Iterator。\n        \n        ```python\n        >>> def f(x):\n             return x * x\n        >>> r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n        >>> list(r)#最后要用list函数将Iterator转换为list\n        [1, 4, 9, 16, 25, 36, 49, 64, 81]\n        ```\n        \n    2.  `reduce`\n        \n        接收一个函数和一个序列，该函数必须接收`两个参数`，`reduce` 负责将`函数结果`继续和 `序列下一个元素` 作为两个参数继续执行下一次函数，直到后序无元素，最终结果为`计算结果`\n        \n        ```python\n        >>>def add(x,y):\n        >>>    return x+y\n        >>>reduce(add,[1,3,5,7])\n        16\n        ```\n        \n    \n    思考题：利用`map`和`reduce`编写一个`str2float`函数，把字符串`'123.456'`转换成浮点数`123.456`\n    \n    3.  `filter`\n        \n        接收一个函数和一个序列，将 `函数作用于每个元素` ，然后根据返回值是 `True` 还是 `False` 决定保留或者丢弃元素。\n        \n        ```python\n        >>>def not_empty(s):\n        >>>    return s and s.strip()\n        >>>print(list(filter(not_empty,['A',None,'B','']))\n        ['A', 'B']\n        ```\n        \n*   #### `sorted()`\n    \n    `sorted()` 可以对list进行排序，也是一个高阶函数，可以接收一个 `key` 函数自定义排序顺序\n    \n    ```python\n    >>>sorted([9,-1,2,4,-5],key=abs)\n    [-1, 2, 4, -5, 9]\n    ```\n    \n    `sorted()`函数负责将key函数`返回的结果`进行排序，并按对应关系返回list中的元素\n    \n    此外，要实现反向排序还可以传入 `reverse` 的值为 `True`\n    \n    ```python\n    >>>print(sorted([9,-1,2,4,-5],key=abs,reverse=True))\n    [9, -5, 4, 2, -1]\n    ```\n    \n    `sorted()` 返回结果为list\n    \n\n### 10\\. 函数式编程\n\n*   #### 返回函数\n    \n    1.  一个函数可以返回值，也可以`返回函数`\n        \n        ```python\n        def  lazy_sum(L):\n          def sum(L):\n                 result = 0\n                 for x in L:\n                     result = result + x\n                 return result\n          return sum #注意返回sum和sum()的区别！！！\n        test = lazy_sum([1,2,3,4,5])\n        print(test())#返回的是sum，则需要调用test();如果返回的是sum(),则直接调用test\n        ```\n        \n        ​ 上述例子，如果函数内只是返回`函数名`而不是返回执行函数，则为 `闭包运算` ；此外，返回闭包时，要注意返回函数不能引用任何循环变量或者后续会发生变化的变量。\n        \n        ![](https://s3.bmp.ovh/imgs/2022/02/ed7aed0162d048c1.png)\n        \n    2.  `nonlocal`\n        \n        声明该变量不是当前函数的局部变量\n        \n*   匿名函数(lambda)\n    \n    关键字 `lambda` 参数 `x,y` : 函数返回值 `x+y`\n    \n    ```python\n    lambda x,y: x+y \n    ```\n    \n    多数时候配合高阶函数 `map()`、`filter()`、`reduce()`、`sorted()` 使用\n    \n*   装饰器(decorator)\n    \n    在代码运行期间动态增加功能的方式。(动态语言的函数和类的定义，是在运行时动态创建的。)\n    \n    要借助Python的 `@` 语法，把decorator放在函数 `定义处`：\n    \n    ```python\n    import time\n    \n    def log(func):\n      def wrapper(*args,**kw):\n          print('call %s()'%func.__name__)\n          return func(*args,**kw)\n      return wrapper\n    @log   #相当于执行 now = log(now)\n    def now():\n      print(time.strftime(\"%Y-%m-%d %H:%M:%S\"))\n    ```\n    \n*   偏函数\n    \n    当函数的参数个数太多，需要简化时，使用`functools.partial`可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单\n    \n    ```python\n    >>> import functools\n    >>> int2 = functools.partial(int, base=2)\n    >>> int2('1000000')\n    64\n    >>> int2('1010101')\n    85\n    ```\n    \n\n### 11\\. 模块\n\n*   作用域\n    \n    `_xxx` 或者 `_xxx_` 表示的 `函数` 或者 `变量` 一般为非公开的(private)，不应该被直接引用(但依然可以在其它模块强制引用)。\n    \n    ```python\n    #这是工具类.py模块\n    >>>import datetime\n    >>>import time\n    >>>def showtime():\n    >>>    print(time.strftime(\"%Y-%m-%d %H:%M:%S\"))\n    >>>__t = time.strftime(\"%Y\")\n    >>>def __showyear():\n    >>>    print(__t)\n    \n    #这是test.py模块\n    >>>from 工具类 import showtime,__showyear,__t\n    >>>showtime()\n    >>>print(__t)#不推荐直接使用其它模块的private变量或函数，即使可以正常使用\n    >>>__showyear()\n    2022-02-26 18:36:49\n    2022\n    2022\n    ```\n    \n    只有外部需要的函数或者变量才定义为public。\n    \n*   安装第三方模块\n    \n    包管理工具 `pip`\n    \n\n### 12.面向对象编程\n\n*   类和实例及其访问权限\n    \n    ```python\n    #新建Student类，并继承Object类\n    class Student(object):\n      #__init__方法初始化对象，相当于java的构造子\n      #定义类时，self代表\"实例的引用\"\n      def __init__(self, name, gender):\n      #__xxx习惯上设置访问权限为private，但还是可以强制访问\n          self.__name = name\n          self.__gender = gender\n      #设置对象里的方法\n      def get_gender(self):\n          return self.__gender\n    \n      def set_gender(self,s):\n          if s =='male'or'female':\n              print(self.__gender)\n              self.__gender = s\n              print(self.__gender)\n          else:\n              raise ValueError('值错啦')\n    # 测试:\n    bart = Student('Bart', 'male')\n    if bart.get_gender() != 'male':\n      print('测试失败!')\n    else:\n      bart.set_gender('female')\n      if bart.get_gender() != 'female':\n          print('测试失败!')\n      else:\n          print('测试成功!')\n    ```\n    \n*   方法\n    \n    Python中的方法分为三种：实例方法、类方法、静态方法。\n    \n    *   实例方法\n    \n    参数里面有 `self` ，如：\n    \n    ```python\n    def set_self(self,name):\n        self.__name = name\n    ```\n    \n    *   类方法\n    \n    前面带有装饰器 `@classmethod` ,且参数里面有 `cls` ，如：\n    \n    ```python\n    @classmethod\n    def class_func(cls):\n        cls.name = \"我是类名\"\n        print(\"my name is %s\"%(cls.name))\n    ```\n    \n    *   静态方法\n    \n    形参中没有 `cls` 和 `self`，甚至没有参数，如：\n    \n    ```python\n    import random\n    @staticmethod\n    def static_func():\n        #返回0-9的随机数\n        randomNum = random.randint(0,9)\n        return randomNum\n    ```\n    \n    类方法和静态方法都可以通过类名和实例名调用\n    \n*   获取对象信息\n    \n    1.  `type()方法`\n        \n        ```python\n        >>> type(123)==int\n        True\n        >>> type('abc')==type('123')\n        True\n        >>> type('abc')==str\n        True\n        ```\n        \n        该方法返回对应的Class类型\n        \n    2.  `id()方法`\n        \n        ```python\n        >>>str1 = 'test'\n        >>>str2 = \"test\"\n        >>>str3 = str1\n        >>>int1 = 123\n        >>>list1 = [1,2,'3']\n        >>>tuple1 = (1,2,3,[1,2,'3'])\n        >>>total =['test',str2,str3,int1,list1,tuple1]\n        >>>print(list(id(i) for i in total[:3] if >>>type(i)==str))\n        >>>print(list(id(i) for i in total))\n        [2408464217968, 2408464217968, 2408464217968]\n        [2408464217968, 2408464217968, 2408464217968, 2408455690416, 2408507421120, 2408507410448]\n        ```\n        \n        从输出结果可以看出程序运行时str1、str2、str3的id值是一样的\n        \n    3.  `isinstance()方法`\n        \n        如果有继承关系：Object ->Animal ->Dog ->Husky\n        \n        那么则\n        \n        ```python\n        a = Animal()\n        b = Dog()\n        h = Husky()\n        >>>isinstance(h,Husky)\n        True\n        >>>isinstance(h,Animal)\n        True\n        ```\n        \n        `isinstance()`还可以判断其类型及其子类,一般情况下优先使用`isinstance()`判断类型\n        \n        `isinstance()`还可以判断是否为某些变量其一\n        \n        ```python\n        >>> isinstance([1, 2, 3], (list, tuple))\n        True\n        >>> isinstance((1, 2, 3), (list, tuple))\n        True\n        ```\n        \n    4.  `__doc__属性`\n        \n        ```python\n        >>>print(len.__doc__)\n        Return the number of items in a container. \n        ```\n        \n        用于查看某对象支持的方法或属性清单\n        \n    \n    此外还有 `help()`方法，可以帮助显示方法或属性信息\n    \n*   类属性\n    \n    直接定义在类中，区别于实例属性self.xxx\n    \n*   动态绑定\n    \n    动态绑定允许我们在程序运行的过程中动态给class加上功能\n    \n    ```python\n    class Student(object):\n      def __init__(self,name):\n          self.__name__ = name\n    stu1 = Student('张三')\n    #动态绑定给实例绑定一个属性\n    stu1.sex = 'male'\n    print(stu1.sex)\n    # 动态绑定给实例绑定一个方法\n    def  set_name(self,name):\n      self.__name__ = name\n    from types import MethodType\n    stu1.set_name = MethodType(set_name, stu1) \n    stu1.set_name('李四')\n    print(stu1.__name__)\n    ```\n    \n    为了限制类外动态绑定属性或方法，可以定义在定义类时用`__slots__`变量，来限制该class实例能添加的属性。\n    \n    ```python\n    class Student(object):\n      __slots__ = ('name','__name__')\n      def __init__(self,name):\n          self.__name__ = name\n    ```\n    \n    此时如果向Student类添加sex属性则会报AttributeError![image-20220312211908812](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312211908812.png)\n    \n    **注意**：`__slots__`定义的属性仅对当前类实例起作用，对继承的子类是不起作用\n    \n    练习：利用`@property`给一个`Screen`对象加上`width`和`height`属性，以及一个只读属性`resolution`\n    \n    ```python\n    class Screen(object):\n      @property\n      def  width(self):\n          return self.__width__ \n      @width.setter\n      def width(self,size):\n          if isinstance(size,(int,float))==False:\n              raise TypeError('请输入正确的int或其它数值类型')\n          if size < 0 or size > 2048:\n              raise ValueError('请输入正确范围的数')\n          self.__width__ = size\n      @property\n      def  height(self):\n          return self.__height__\n      @height.setter\n      def height(self,size):\n          if isinstance(size,(int,float))==False:\n             raise TypeError('请输入正确的int或其它数值类型')\n          if size < 0 or size > 2048:\n             raise ValueError('请输入正确范围的数')\n          self.__height__ = size   \n      @property\n      def  resolution(self):\n          return self.__width__*self.__height__\n    ```\n    \n*   多重继承\n    \n    通过多重继承，一个子类就可以同时获得多个父类的所有功能\n    \n    ```python\n    class Dog(Mammal,Runnable):\n      def __init__():\n          pass\n    ```\n    \n    `MixIn` 用于分清主父类和额外功能(类似于Java的继承单一父类和多继承接口)\n    \n    ```python\n    class Dog(Mammal,RunnableMixIn):\n       def __init__():\n          pass\n    ```\n    \n*   `__str__`\n    \n    Python里面的 `__str__` 相当于Java 的 `toString()`方法\n    \n    ```python\n    class Student(object):\n      __slots__ = ('name','__name__')\n      def __init__(self,name):\n          self.__name__ = name\n      def __str__(self) -> str:\n          return 'my name is%s '%(self.__name__)\n    stu1 = Student('张三')\n    print(stu1)  #结果为：my name is 张三\n    ```\n    \n    同样的还有 `__getattr__`、 `__call__`、 `__iter__`、 `__getitem__` 等\n    \n    可根据需要前往[官网文档](https://docs.python.org/3/tutorial/index.html)查阅相关资料，不再赘述。\n    \n\n### 13\\. 异常、错误、调试\n\n*   错误与错误\n    \n    高级语言通常都内置了一套`try...except...finally...`的错误处理机制，Python也不例外\n    \n    ```python\n    try:\n      #可能发生异常的语句\n    except IOError as e :\n      #发生IOError异常时要执行的语句\n      print(\"An EOF error occurred.\")\n      raise e\n    except (Ex2,Ex3):\n      #发生异常Ex2或Ex3时要执行的语句\n    except Exception:\n      #发生其它异常时要执行的语句\n    else:\n      #无异常时要执行的语句\n    finally:\n      #无论有没有异常都要执行的语句\n      #如文件资源、数据库、图形句柄资源的释放\n    ```\n    \n*   调试\n    \n    有三种方式：`Python Debugger`、`%xmode`、`assert`\n    \n    [Python学习笔记(二)](https://wangwangyz.site/?p=766 \"Python学习笔记(二)\")","slug":"测试markdown","published":1,"updated":"2024-03-12T02:24:18.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltnrar58002kjry18t1ngbk3","content":"<h3 id=\"1-Python缩进\"><a href=\"#1-Python缩进\" class=\"headerlink\" title=\"1.Python缩进\"></a>1.Python缩进</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elements = [<span class=\"string\">&quot;Tom&quot;</span>,<span class=\"string\">&quot;Jack&quot;</span>,<span class=\"string\">&quot;Anne&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> elem <span class=\"keyword\">in</span> elements:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello&quot;</span>,elem) <span class=\"comment\">#缩进表示一个代码块</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;I love you&quot;</span>,elem)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Bye My&quot;</span>,elements)<span class=\"comment\">#不缩进代表一个独立的语句，不在for循环体内</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-基本类型\"><a href=\"#2-基本类型\" class=\"headerlink\" title=\"2.基本类型\"></a>2.基本类型</h3><span id=\"more\"></span>\n<ul>\n<li>整数</li>\n<li>浮点数  <code>1.23e9</code>可以表示很大的浮点数</li>\n<li>字符串  可以使用<code>&quot;</code>或者<code>&#39;</code>括起来的，字符串内可用转义字符<code>\\</code>标识</li>\n<li>布尔值  <code>True</code>和 <code>False</code> 布尔值还可以用布尔运算，有三种：<code>and，or， not</code>与之对应的逻辑是数理逻辑上的与或非</li>\n<li>空值  是Python一个特殊值，用 <code>None</code>表示</li>\n<li>列表、字典等</li>\n</ul>\n<h4 id=\"2-1变量\"><a href=\"#2-1变量\" class=\"headerlink\" title=\"2.1变量\"></a>2.1变量</h4><p>大小写英文、数字和<code>_</code>的组合，且不能用数字开头</p>\n<h4 id=\"2-2常量\"><a href=\"#2-2常量\" class=\"headerlink\" title=\"2.2常量\"></a>2.2常量</h4><p>Python里通常用全大写变量名表示常量，但不强制</p>\n<h4 id=\"2-3字符串编码\"><a href=\"#2-3字符串编码\" class=\"headerlink\" title=\"2.3字符串编码\"></a>2.3字符串编码</h4><ul>\n<li>Python3采用Unicode编码，常见计算机系统内存统一采用Unicode编码，当需要保存到硬盘或者传输时，就转化为UTF-8编码，反之转化回Unicode。</li>\n<li>Python对于 <code>bytes</code> 类型的数据用带 <code>b</code> 前缀的单引号或双引号表示：  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"string\">b&#x27;ABC&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>字符串可用encode( )方法可以编码为指定的bytes  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;ABC&#x27;</span>.encode(<span class=\"string\">&#x27;ascii&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;ABC&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;中文&#x27;</span>.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\xe4\\xb8\\xad\\xe6\\x96\\x87&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;中文&#x27;</span>.encode(<span class=\"string\">&#x27;ascii&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>len( )函数计算str字符数  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(<span class=\"string\">&quot;你好&quot;</span>))</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(<span class=\"string\">&quot;nihao&quot;</span>))</span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n  如果是计算bytes，则是字节数  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(<span class=\"string\">b&#x27;ABC&#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(<span class=\"string\">b&#x27;\\xe4\\xb8\\xad\\xe6\\x96\\x87&#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(<span class=\"string\">&#x27;中文&#x27;</span>.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n  坚持使用UTF-8编码避免乱码问题</li>\n</ul>\n<h3 id=\"3-格式化\"><a href=\"#3-格式化\" class=\"headerlink\" title=\"3.格式化\"></a>3.格式化</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello ,%s,I&#x27;m %d years old,my score is %f&quot;</span>%(<span class=\"string\">&quot;jack&quot;</span>,<span class=\"number\">18</span>,<span class=\"number\">95.00</span>))</span><br><span class=\"line\">hello ,jack,I<span class=\"string\">&#x27;m 18 years old,my score is 95.000000</span></span><br></pre></td></tr></table></figure>\n\n<p>另外一种是str.format( )方法，不推荐</p>\n<h3 id=\"4-list-和tuple\"><a href=\"#4-list-和tuple\" class=\"headerlink\" title=\"4.list 和tuple\"></a>4.list 和tuple</h3><ul>\n<li>list是一种有序的集合，可以增删，  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elements = [<span class=\"string\">&quot;A&quot;</span>,<span class=\"number\">123</span>,[<span class=\"string\">&quot;C&quot;</span>,<span class=\"string\">&quot;D&quot;</span>],<span class=\"literal\">True</span>]</span><br><span class=\"line\">elements.append(<span class=\"string\">&quot;abcd&quot;</span>)</span><br><span class=\"line\">elements.insert(<span class=\"number\">2</span>,(<span class=\"string\">&quot;2&quot;</span>,<span class=\"string\">&quot;3&quot;</span>))</span><br><span class=\"line\">elements.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(elements)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(elements[-<span class=\"number\">3</span>][<span class=\"number\">0</span>])<span class=\"comment\">#如果是elements[-2][0]会报TypeErrorw</span></span><br><span class=\"line\"><span class=\"comment\">###########输出结果自行理解</span></span><br><span class=\"line\">[<span class=\"number\">123</span>, (<span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>), [<span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>], <span class=\"literal\">True</span>, <span class=\"string\">&#x27;abcd&#x27;</span>]</span><br><span class=\"line\">C</span><br></pre></td></tr></table></figure>\n</li>\n<li>tuple一旦初始化不能修改，没有append( ), insert( )这种方法，能使用-1…表示索引  tuple用 <code>()</code> 表示(注意和数学符号意义上的区别，通常用 <code>,</code> 如（ 1,）加以区分)  tuple里面若有指向别的元素如list，指向的list不可改变，但是list指向的可以改变  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tuple</span> = (<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, [<span class=\"string\">&quot;C&quot;</span>,<span class=\"string\">&quot;D&quot;</span>])<span class=\"comment\">#tuple里面的元素[&quot;C&quot;,&quot;D&quot;]是一个list，list可以改变</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5-dict和set\"><a href=\"#5-dict和set\" class=\"headerlink\" title=\"5.dict和set\"></a>5.dict和set</h3><ul>\n<li>  dict</li>\n</ul>\n<h3 id=\"6-Python小结\"><a href=\"#6-Python小结\" class=\"headerlink\" title=\"6.Python小结\"></a>6.Python小结</h3><p>列表list []、元组tuple ()、字典 dict {key: value}、无序不重复集合 set (list[])</p>\n<h3 id=\"7-函数\"><a href=\"#7-函数\" class=\"headerlink\" title=\"7.函数\"></a>7.函数</h3><ul>\n<li><h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li>  位置参数</li>\n</ul>\n  平时常用的按照顺序进行传参的参数  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">power</span>(<span class=\"params\">x,n</span>):</span><br><span class=\"line\">    temp = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n&lt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n,<span class=\"number\">0</span>):<span class=\"comment\">#t表示n到-1的整数</span></span><br><span class=\"line\">            temp = temp/x</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> n&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,n):<span class=\"comment\">#range(n,m)表示返回n到m-1的整数list</span></span><br><span class=\"line\">            temp = temp*x</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;power(5,3):&quot;</span>,power(<span class=\"number\">5</span>,<span class=\"number\">3</span>))<span class=\"comment\">#power(5,3): 125</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;power(5,-2):&quot;</span>,power(<span class=\"number\">5</span>,-<span class=\"number\">2</span>))<span class=\"comment\">#power(5,-2): 0.04</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>  默认参数</li>\n</ul>\n  默认参数在后面，默认参数必须指向不变对象，不然下次调用时默认参数内容就变了  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">enroll</span>(<span class=\"params\">name,age,city=<span class=\"string\">&quot;北京&quot;</span>,sex=<span class=\"string\">&quot;保密&quot;</span></span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;My name is &quot;</span>,name,<span class=\"string\">&quot;,I`m &quot;</span>,age)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;I`m come from &quot;</span>,city,<span class=\"string\">&quot;,my sex is&quot;</span>,sex)</span><br><span class=\"line\">enroll(<span class=\"string\">&quot;李华&quot;</span>,<span class=\"number\">23</span>,sex = <span class=\"string\">&quot;女&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#My name is  李华 ,I`m  23 </span></span><br><span class=\"line\"><span class=\"comment\">#I`m come from  北京 ,my sex is 女   </span></span><br><span class=\"line\">enroll(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"comment\">#My name is  张三 ,I`m  18</span></span><br><span class=\"line\"><span class=\"comment\">#I`m come from  北京 ,my sex is 保密  </span></span><br><span class=\"line\">enroll(<span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">45</span>,<span class=\"string\">&quot;上海&quot;</span>,<span class=\"string\">&quot;男&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#My name is  李四 ,I`m  45</span></span><br><span class=\"line\"><span class=\"comment\">#I`m come from  上海 ,my sex is 男  </span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>  可变参数</li>\n</ul>\n  在参数前加一个 <code>*</code> ，参数接收到的可以是一个tuple，也可以是任意个参数包括0个  对于已有的tuple和list，在前面加一个 <code>*</code> 就可变成可变参数传入函数  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">calc</span>(<span class=\"params\">*numbers</span>):</span><br><span class=\"line\">    <span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">        <span class=\"built_in\">sum</span> = <span class=\"built_in\">sum</span> + number</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span></span><br><span class=\"line\">nums1 = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">nums2 = (<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(calc(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>)) <span class=\"comment\">#16</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(calc(*nums2))  <span class=\"comment\">#16</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(calc(*nums1))  <span class=\"comment\">#16</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>  关键字参数</li>\n</ul>\n  允许传入0至多个参数，在函数内部自动组装为一个dict  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">info</span>(<span class=\"params\">name, age, **more</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(name,<span class=\"string\">&quot; &quot;</span>,age,<span class=\"string\">&quot; &quot;</span>,more)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&quot;city&quot;</span> <span class=\"keyword\">in</span> more:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&quot;addr&quot;</span> <span class=\"keyword\">in</span> more:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;my city:&quot;</span>,more.get(<span class=\"string\">&quot;addr&quot;</span>)) <span class=\"comment\">#more相当于一个字典</span></span><br><span class=\"line\"></span><br><span class=\"line\">info(<span class=\"string\">&quot;李华&quot;</span>,<span class=\"number\">12</span>,addr=<span class=\"string\">&quot;钦州市&quot;</span>,sex = <span class=\"string\">&quot;男&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#结果都为：李华   12   &#123;&#x27;addr&#x27;: &#x27;钦州市&#x27;, &#x27;sex&#x27;: &#x27;男&#x27;&#125; my city: 钦州市</span></span><br><span class=\"line\">extra = &#123; <span class=\"string\">&quot;addr&quot;</span>:<span class=\"string\">&quot;钦州市&quot;</span>,<span class=\"string\">&quot;sex&quot;</span>:<span class=\"string\">&quot;男&quot;</span>&#125;</span><br><span class=\"line\">info(<span class=\"string\">&quot;李华&quot;</span>,<span class=\"number\">12</span>,**extra)<span class=\"comment\">#这里相当于把extra的一份拷贝给函数info的关键字参数more</span></span><br></pre></td></tr></table></figure>\n  小结：对于任意函数，都可以通过类似<code>func(*args, **kw)</code>的形式调用它，无论它的参数是如何定义的。</li>\n<li><h4 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h4></li>\n<li><h4 id=\"元信息\"><a href=\"#元信息\" class=\"headerlink\" title=\"元信息\"></a>元信息</h4>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#为函数添加元数据,描述函数的参数类型和返回类型</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">x:<span class=\"built_in\">int</span>, y:<span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x+y</span><br></pre></td></tr></table></figure>\n  元信息只是为了帮助源码阅读。python解释器不会对这些注解添加任何的语义。即使返回类型不一致，程序也不会出错，因为它们不会被类型检查。</li>\n</ul>\n<h3 id=\"8-高级特性\"><a href=\"#8-高级特性\" class=\"headerlink\" title=\"8.高级特性\"></a>8.高级特性</h3><ul>\n<li><h4 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h4>  <code>:</code> 用来取list或tuple的部分元素  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">100</span>,<span class=\"number\">200</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(L[:<span class=\"number\">3</span>])<span class=\"comment\">#取list前三个元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(L[<span class=\"number\">1</span>:<span class=\"number\">3</span>])<span class=\"comment\">#取list中索引值为1到索引值为3的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(L[-<span class=\"number\">20</span>:-<span class=\"number\">10</span>])<span class=\"comment\">#取倒数第十到倒数第二十也就是180-190（不包括190）之间的十个整数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(L[:<span class=\"number\">10</span>:<span class=\"number\">2</span>])<span class=\"comment\">#前十个元素，每隔2个元素取一个，结果为100,102,104,106,108</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(L[::-<span class=\"number\">1</span>])<span class=\"comment\">#实现切片逆序</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h4>  1、 通过<code>for...in</code>来完成迭代，不仅可以在 <code>tuple</code> 、 <code>list</code> 和 <code>dict</code> 上进行迭代，还可以作用于可迭代对象（可通过<code>collections.abc</code> 模块的 <code>Iterable</code> 类型判断)  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">isinstance</span>(<span class=\"string\">&#x27;abc&#x27;</span>,Iterable)<span class=\"comment\">#str是否能迭代</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">isinstance</span>(<span class=\"number\">123</span>,Iterable)<span class=\"comment\">#整数是否能迭代</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n  2、实现Java下标循环  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">for</span> i,x <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>([<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>]):</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>   <span class=\"built_in\">print</span>(i,x)</span><br><span class=\"line\"><span class=\"number\">0</span> A</span><br><span class=\"line\"><span class=\"number\">1</span> B</span><br><span class=\"line\"><span class=\"number\">2</span> C</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"列表生成式\"><a href=\"#列表生成式\" class=\"headerlink\" title=\"列表生成式\"></a>列表生成式</h4><ol>\n<li>列表生成式可以嵌套一层至多层循环 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#列表生成式直接一行代码生成list</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>([x*x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">5</span>)])</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>,<span class=\"number\">16</span>]</span><br><span class=\"line\"><span class=\"comment\">#还可以使用像for循环那样的两个变量即以上</span></span><br><span class=\"line\">&gt;&gt;&gt;dictItem = &#123;<span class=\"string\">&#x27;A&#x27;</span>:<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>:<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>:<span class=\"string\">&#x27;c&#x27;</span>&#125;</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>([a+<span class=\"string\">&#x27;=&#x27;</span>+b <span class=\"keyword\">for</span> a,b <span class=\"keyword\">in</span> dictItem.items])</span><br><span class=\"line\">[<span class=\"string\">&#x27;A=a&#x27;</span>,<span class=\"string\">&#x27;B=b&#x27;</span>,<span class=\"string\">&#x27;C=c&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#for循环后还能添加if判断条件，注意！！这是筛选条件，和下面的if...else不一样</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>([x*x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">10</span>) <span class=\"keyword\">if</span> x%<span class=\"number\">2</span>==<span class=\"number\">0</span>])</span><br><span class=\"line\">[<span class=\"number\">4</span>, <span class=\"number\">16</span>, <span class=\"number\">36</span>, <span class=\"number\">64</span>]</span><br><span class=\"line\"><span class=\"comment\">#还可以添加多层循环</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>([a+b <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>] <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>]])</span><br><span class=\"line\">[<span class=\"string\">&#x27;1A&#x27;</span>, <span class=\"string\">&#x27;1B&#x27;</span>, <span class=\"string\">&#x27;1C&#x27;</span>, <span class=\"string\">&#x27;2A&#x27;</span>, <span class=\"string\">&#x27;2B&#x27;</span>, <span class=\"string\">&#x27;2C&#x27;</span>, <span class=\"string\">&#x27;3A&#x27;</span>, <span class=\"string\">&#x27;3B&#x27;</span>, <span class=\"string\">&#x27;3C&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><code>if...else</code>的使用(使用方法为在for循环前加上if…else) <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;dictItem = &#123;<span class=\"string\">&#x27;A&#x27;</span>:<span class=\"number\">2</span>,<span class=\"string\">&#x27;B&#x27;</span>:<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>:<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;D&#x27;</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>([a+<span class=\"string\">&#x27;=&#x27;</span>+b <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(b,<span class=\"built_in\">str</span>) <span class=\"keyword\">else</span> a+<span class=\"string\">&#x27;=&#x27;</span>+<span class=\"built_in\">str</span>(b) <span class=\"keyword\">for</span> a,b <span class=\"keyword\">in</span> dictItem.items()])</span><br><span class=\"line\">[<span class=\"string\">&#x27;A=2&#x27;</span>, <span class=\"string\">&#x27;B=b&#x27;</span>, <span class=\"string\">&#x27;C=c&#x27;</span>,<span class=\"string\">&#x27;D=3&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><h4 id=\"生成器-Generator\"><a href=\"#生成器-Generator\" class=\"headerlink\" title=\"生成器(Generator)\"></a>生成器(Generator)</h4>  <code>next()</code>、<code>yelid</code>、<code>StopIteration</code>  generator函数返回一个generator对象</li>\n</ul>\n<h3 id=\"9-高阶函数\"><a href=\"#9-高阶函数\" class=\"headerlink\" title=\"9. 高阶函数\"></a>9. 高阶函数</h3><ul>\n<li><h4 id=\"map-、-reduce-和-filter\"><a href=\"#map-、-reduce-和-filter\" class=\"headerlink\" title=\"map() 、 reduce() 和 filter()\"></a><code>map()</code> 、 <code>reduce()</code> 和 <code>filter()</code></h4><ol>\n<li><code>map()</code> 接收一个函数和Iterator，将<code>函数作用到所有Iterator元素</code>上并将结果返回到新的Iterator，最终结果返回新的Iterator。 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">     <span class=\"keyword\">return</span> x * x</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = <span class=\"built_in\">map</span>(f, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(r)<span class=\"comment\">#最后要用list函数将Iterator转换为list</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><code>reduce</code> 接收一个函数和一个序列，该函数必须接收<code>两个参数</code>，<code>reduce</code> 负责将<code>函数结果</code>继续和 <code>序列下一个元素</code> 作为两个参数继续执行下一次函数，直到后序无元素，最终结果为<code>计算结果</code> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">x,y</span>):</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>   <span class=\"keyword\">return</span> x+y</span><br><span class=\"line\">&gt;&gt;&gt;reduce(add,[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>])</span><br><span class=\"line\"><span class=\"number\">16</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n  思考题：利用<code>map</code>和<code>reduce</code>编写一个<code>str2float</code>函数，把字符串<code>&#39;123.456&#39;</code>转换成浮点数<code>123.456</code><ol start=\"3\">\n<li><code>filter</code> 接收一个函数和一个序列，将 <code>函数作用于每个元素</code> ，然后根据返回值是 <code>True</code> 还是 <code>False</code> 决定保留或者丢弃元素。 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">def</span> <span class=\"title function_\">not_empty</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>   <span class=\"keyword\">return</span> s <span class=\"keyword\">and</span> s.strip()</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(<span class=\"built_in\">filter</span>(not_empty,[<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"literal\">None</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>]))</span><br><span class=\"line\">[<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><h4 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted()\"></a><code>sorted()</code></h4>  <code>sorted()</code> 可以对list进行排序，也是一个高阶函数，可以接收一个 <code>key</code> 函数自定义排序顺序  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">sorted</span>([<span class=\"number\">9</span>,-<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,-<span class=\"number\">5</span>],key=<span class=\"built_in\">abs</span>)</span><br><span class=\"line\">[-<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, -<span class=\"number\">5</span>, <span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n  <code>sorted()</code>函数负责将key函数<code>返回的结果</code>进行排序，并按对应关系返回list中的元素  此外，要实现反向排序还可以传入 <code>reverse</code> 的值为 <code>True</code>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>(<span class=\"built_in\">sorted</span>([<span class=\"number\">9</span>,-<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,-<span class=\"number\">5</span>],key=<span class=\"built_in\">abs</span>,reverse=<span class=\"literal\">True</span>))</span><br><span class=\"line\">[<span class=\"number\">9</span>, -<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, -<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n  <code>sorted()</code> 返回结果为list</li>\n</ul>\n<h3 id=\"10-函数式编程\"><a href=\"#10-函数式编程\" class=\"headerlink\" title=\"10. 函数式编程\"></a>10. 函数式编程</h3><ul>\n<li><h4 id=\"返回函数\"><a href=\"#返回函数\" class=\"headerlink\" title=\"返回函数\"></a>返回函数</h4><ol>\n<li>一个函数可以返回值，也可以<code>返回函数</code> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span>  <span class=\"title function_\">lazy_sum</span>(<span class=\"params\">L</span>):</span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">sum</span>(<span class=\"params\">L</span>):</span><br><span class=\"line\">         result = <span class=\"number\">0</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> L:</span><br><span class=\"line\">             result = result + x</span><br><span class=\"line\">         <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span> <span class=\"comment\">#注意返回sum和sum()的区别！！！</span></span><br><span class=\"line\">test = lazy_sum([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(test())<span class=\"comment\">#返回的是sum，则需要调用test();如果返回的是sum(),则直接调用test</span></span><br></pre></td></tr></table></figure>\n ​ 上述例子，如果函数内只是返回<code>函数名</code>而不是返回执行函数，则为 <code>闭包运算</code> ；此外，返回闭包时，要注意返回函数不能引用任何循环变量或者后续会发生变化的变量。 <img src=\"https://s3.bmp.ovh/imgs/2022/02/ed7aed0162d048c1.png\"></li>\n<li><code>nonlocal</code> 声明该变量不是当前函数的局部变量</li>\n</ol>\n</li>\n<li>匿名函数(lambda)  关键字 <code>lambda</code> 参数 <code>x,y</code> : 函数返回值 <code>x+y</code>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lambda</span> x,y: x+y </span><br></pre></td></tr></table></figure>\n  多数时候配合高阶函数 <code>map()</code>、<code>filter()</code>、<code>reduce()</code>、<code>sorted()</code> 使用</li>\n<li>装饰器(decorator)  在代码运行期间动态增加功能的方式。(动态语言的函数和类的定义，是在运行时动态创建的。)  要借助Python的 <code>@</code> 语法，把decorator放在函数 <code>定义处</code>：  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">log</span>(<span class=\"params\">func</span>):</span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">wrapper</span>(<span class=\"params\">*args,**kw</span>):</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;call %s()&#x27;</span>%func.__name__)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> func(*args,**kw)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"><span class=\"meta\">@log   </span><span class=\"comment\">#相当于执行 now = log(now)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">now</span>():</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(time.strftime(<span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li>偏函数  当函数的参数个数太多，需要简化时，使用<code>functools.partial</code>可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2 = functools.partial(<span class=\"built_in\">int</span>, base=<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2(<span class=\"string\">&#x27;1000000&#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2(<span class=\"string\">&#x27;1010101&#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">85</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"11-模块\"><a href=\"#11-模块\" class=\"headerlink\" title=\"11. 模块\"></a>11. 模块</h3><ul>\n<li>作用域  <code>_xxx</code> 或者 <code>_xxx_</code> 表示的 <code>函数</code> 或者 <code>变量</code> 一般为非公开的(private)，不应该被直接引用(但依然可以在其它模块强制引用)。  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#这是工具类.py模块</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">import</span> datetime</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">import</span> time</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">def</span> <span class=\"title function_\">showtime</span>():</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>   <span class=\"built_in\">print</span>(time.strftime(<span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>))</span><br><span class=\"line\">&gt;&gt;&gt;__t = time.strftime(<span class=\"string\">&quot;%Y&quot;</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">def</span> <span class=\"title function_\">__showyear</span>():</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>   <span class=\"built_in\">print</span>(__t)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#这是test.py模块</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">from</span> 工具类 <span class=\"keyword\">import</span> showtime,__showyear,__t</span><br><span class=\"line\">&gt;&gt;&gt;showtime()</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>(__t)<span class=\"comment\">#不推荐直接使用其它模块的private变量或函数，即使可以正常使用</span></span><br><span class=\"line\">&gt;&gt;&gt;__showyear()</span><br><span class=\"line\"><span class=\"number\">2022</span>-02-<span class=\"number\">26</span> <span class=\"number\">18</span>:<span class=\"number\">36</span>:<span class=\"number\">49</span></span><br><span class=\"line\"><span class=\"number\">2022</span></span><br><span class=\"line\"><span class=\"number\">2022</span></span><br></pre></td></tr></table></figure>\n  只有外部需要的函数或者变量才定义为public。</li>\n<li>安装第三方模块  包管理工具 <code>pip</code></li>\n</ul>\n<h3 id=\"12-面向对象编程\"><a href=\"#12-面向对象编程\" class=\"headerlink\" title=\"12.面向对象编程\"></a>12.面向对象编程</h3><ul>\n<li>类和实例及其访问权限  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#新建Student类，并继承Object类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">  <span class=\"comment\">#__init__方法初始化对象，相当于java的构造子</span></span><br><span class=\"line\">  <span class=\"comment\">#定义类时，self代表&quot;实例的引用&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, gender</span>):</span><br><span class=\"line\">  <span class=\"comment\">#__xxx习惯上设置访问权限为private，但还是可以强制访问</span></span><br><span class=\"line\">      self.__name = name</span><br><span class=\"line\">      self.__gender = gender</span><br><span class=\"line\">  <span class=\"comment\">#设置对象里的方法</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">get_gender</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.__gender</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">set_gender</span>(<span class=\"params\">self,s</span>):</span><br><span class=\"line\">      <span class=\"keyword\">if</span> s ==<span class=\"string\">&#x27;male&#x27;</span>o<span class=\"string\">r&#x27;female&#x27;</span>:</span><br><span class=\"line\">          <span class=\"built_in\">print</span>(self.__gender)</span><br><span class=\"line\">          self.__gender = s</span><br><span class=\"line\">          <span class=\"built_in\">print</span>(self.__gender)</span><br><span class=\"line\">      <span class=\"keyword\">else</span>:</span><br><span class=\"line\">          <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&#x27;值错啦&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 测试:</span></span><br><span class=\"line\">bart = Student(<span class=\"string\">&#x27;Bart&#x27;</span>, <span class=\"string\">&#x27;male&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> bart.get_gender() != <span class=\"string\">&#x27;male&#x27;</span>:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试失败!&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">  bart.set_gender(<span class=\"string\">&#x27;female&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> bart.get_gender() != <span class=\"string\">&#x27;female&#x27;</span>:</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试失败!&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试成功!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>方法  Python中的方法分为三种：实例方法、类方法、静态方法。<ul>\n<li>  实例方法</li>\n</ul>\n  参数里面有 <code>self</code> ，如：  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set_self</span>(<span class=\"params\">self,name</span>):</span><br><span class=\"line\">    self.__name = name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>  类方法</li>\n</ul>\n  前面带有装饰器 <code>@classmethod</code> ,且参数里面有 <code>cls</code> ，如：  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@classmethod</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">class_func</span>(<span class=\"params\">cls</span>):</span><br><span class=\"line\">    cls.name = <span class=\"string\">&quot;我是类名&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;my name is %s&quot;</span>%(cls.name))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>  静态方法</li>\n</ul>\n  形参中没有 <code>cls</code> 和 <code>self</code>，甚至没有参数，如：  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"meta\">@staticmethod</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">static_func</span>():</span><br><span class=\"line\">    <span class=\"comment\">#返回0-9的随机数</span></span><br><span class=\"line\">    randomNum = random.randint(<span class=\"number\">0</span>,<span class=\"number\">9</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> randomNum</span><br></pre></td></tr></table></figure>\n  类方法和静态方法都可以通过类名和实例名调用</li>\n<li>获取对象信息<ol>\n<li><code>type()方法</code> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"number\">123</span>)==<span class=\"built_in\">int</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"string\">&#x27;abc&#x27;</span>)==<span class=\"built_in\">type</span>(<span class=\"string\">&#x27;123&#x27;</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"string\">&#x27;abc&#x27;</span>)==<span class=\"built_in\">str</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n 该方法返回对应的Class类型</li>\n<li><code>id()方法</code> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;str1 = <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\">&gt;&gt;&gt;str2 = <span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\">&gt;&gt;&gt;str3 = str1</span><br><span class=\"line\">&gt;&gt;&gt;int1 = <span class=\"number\">123</span></span><br><span class=\"line\">&gt;&gt;&gt;list1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;3&#x27;</span>]</span><br><span class=\"line\">&gt;&gt;&gt;tuple1 = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;3&#x27;</span>])</span><br><span class=\"line\">&gt;&gt;&gt;total =[<span class=\"string\">&#x27;test&#x27;</span>,str2,str3,int1,list1,tuple1]</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(<span class=\"built_in\">id</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> total[:<span class=\"number\">3</span>] <span class=\"keyword\">if</span> &gt;&gt;&gt;<span class=\"built_in\">type</span>(i)==<span class=\"built_in\">str</span>))</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(<span class=\"built_in\">id</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> total))</span><br><span class=\"line\">[<span class=\"number\">2408464217968</span>, <span class=\"number\">2408464217968</span>, <span class=\"number\">2408464217968</span>]</span><br><span class=\"line\">[<span class=\"number\">2408464217968</span>, <span class=\"number\">2408464217968</span>, <span class=\"number\">2408464217968</span>, <span class=\"number\">2408455690416</span>, <span class=\"number\">2408507421120</span>, <span class=\"number\">2408507410448</span>]</span><br></pre></td></tr></table></figure>\n 从输出结果可以看出程序运行时str1、str2、str3的id值是一样的</li>\n<li><code>isinstance()方法</code> 如果有继承关系：Object -&gt;Animal -&gt;Dog -&gt;Husky 那么则 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = Animal()</span><br><span class=\"line\">b = Dog()</span><br><span class=\"line\">h = Husky()</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">isinstance</span>(h,Husky)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">isinstance</span>(h,Animal)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n <code>isinstance()</code>还可以判断其类型及其子类,一般情况下优先使用<code>isinstance()</code>判断类型 <code>isinstance()</code>还可以判断是否为某些变量其一 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">isinstance</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], (<span class=\"built_in\">list</span>, <span class=\"built_in\">tuple</span>))</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">isinstance</span>((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>), (<span class=\"built_in\">list</span>, <span class=\"built_in\">tuple</span>))</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><code>__doc__属性</code> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>.__doc__)</span><br><span class=\"line\">Return the number of items <span class=\"keyword\">in</span> a container. </span><br></pre></td></tr></table></figure>\n 用于查看某对象支持的方法或属性清单</li>\n</ol>\n  此外还有 <code>help()</code>方法，可以帮助显示方法或属性信息</li>\n<li>类属性  直接定义在类中，区别于实例属性self.xxx</li>\n<li>动态绑定  动态绑定允许我们在程序运行的过程中动态给class加上功能  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,name</span>):</span><br><span class=\"line\">      self.__name__ = name</span><br><span class=\"line\">stu1 = Student(<span class=\"string\">&#x27;张三&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#动态绑定给实例绑定一个属性</span></span><br><span class=\"line\">stu1.sex = <span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(stu1.sex)</span><br><span class=\"line\"><span class=\"comment\"># 动态绑定给实例绑定一个方法</span></span><br><span class=\"line\"><span class=\"keyword\">def</span>  <span class=\"title function_\">set_name</span>(<span class=\"params\">self,name</span>):</span><br><span class=\"line\">  self.__name__ = name</span><br><span class=\"line\"><span class=\"keyword\">from</span> types <span class=\"keyword\">import</span> MethodType</span><br><span class=\"line\">stu1.set_name = MethodType(set_name, stu1) </span><br><span class=\"line\">stu1.set_name(<span class=\"string\">&#x27;李四&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stu1.__name__)</span><br></pre></td></tr></table></figure>\n  为了限制类外动态绑定属性或方法，可以定义在定义类时用<code>__slots__</code>变量，来限制该class实例能添加的属性。  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">  __slots__ = (<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;__name__&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,name</span>):</span><br><span class=\"line\">      self.__name__ = name</span><br></pre></td></tr></table></figure>\n  此时如果向Student类添加sex属性则会报AttributeError<img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312211908812.png\" alt=\"image-20220312211908812\">  <strong>注意</strong>：<code>__slots__</code>定义的属性仅对当前类实例起作用，对继承的子类是不起作用  练习：利用<code>@property</code>给一个<code>Screen</code>对象加上<code>width</code>和<code>height</code>属性，以及一个只读属性<code>resolution</code>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Screen</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"><span class=\"meta\">  @property</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span>  <span class=\"title function_\">width</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.__width__ </span><br><span class=\"line\"><span class=\"meta\">  @width.setter</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">width</span>(<span class=\"params\">self,size</span>):</span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(size,(<span class=\"built_in\">int</span>,<span class=\"built_in\">float</span>))==<span class=\"literal\">False</span>:</span><br><span class=\"line\">          <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">&#x27;请输入正确的int或其它数值类型&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> size &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> size &gt; <span class=\"number\">2048</span>:</span><br><span class=\"line\">          <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&#x27;请输入正确范围的数&#x27;</span>)</span><br><span class=\"line\">      self.__width__ = size</span><br><span class=\"line\"><span class=\"meta\">  @property</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span>  <span class=\"title function_\">height</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.__height__</span><br><span class=\"line\"><span class=\"meta\">  @height.setter</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">height</span>(<span class=\"params\">self,size</span>):</span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(size,(<span class=\"built_in\">int</span>,<span class=\"built_in\">float</span>))==<span class=\"literal\">False</span>:</span><br><span class=\"line\">         <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">&#x27;请输入正确的int或其它数值类型&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> size &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> size &gt; <span class=\"number\">2048</span>:</span><br><span class=\"line\">         <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&#x27;请输入正确范围的数&#x27;</span>)</span><br><span class=\"line\">      self.__height__ = size   </span><br><span class=\"line\"><span class=\"meta\">  @property</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span>  <span class=\"title function_\">resolution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.__width__*self.__height__</span><br></pre></td></tr></table></figure>\n</li>\n<li>多重继承  通过多重继承，一个子类就可以同时获得多个父类的所有功能  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>(Mammal,Runnable):</span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>():</span><br><span class=\"line\">      <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n  <code>MixIn</code> 用于分清主父类和额外功能(类似于Java的继承单一父类和多继承接口)  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>(Mammal,RunnableMixIn):</span><br><span class=\"line\">   <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>():</span><br><span class=\"line\">      <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><code>__str__</code>  Python里面的 <code>__str__</code> 相当于Java 的 <code>toString()</code>方法  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">  __slots__ = (<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;__name__&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,name</span>):</span><br><span class=\"line\">      self.__name__ = name</span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;my name is%s &#x27;</span>%(self.__name__)</span><br><span class=\"line\">stu1 = Student(<span class=\"string\">&#x27;张三&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stu1)  <span class=\"comment\">#结果为：my name is 张三</span></span><br></pre></td></tr></table></figure>\n  同样的还有 <code>__getattr__</code>、 <code>__call__</code>、 <code>__iter__</code>、 <code>__getitem__</code> 等  可根据需要前往<a href=\"https://docs.python.org/3/tutorial/index.html\">官网文档</a>查阅相关资料，不再赘述。</li>\n</ul>\n<h3 id=\"13-异常、错误、调试\"><a href=\"#13-异常、错误、调试\" class=\"headerlink\" title=\"13. 异常、错误、调试\"></a>13. 异常、错误、调试</h3><ul>\n<li>错误与错误  高级语言通常都内置了一套<code>try...except...finally...</code>的错误处理机制，Python也不例外  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">  <span class=\"comment\">#可能发生异常的语句</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> e :</span><br><span class=\"line\">  <span class=\"comment\">#发生IOError异常时要执行的语句</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An EOF error occurred.&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">raise</span> e</span><br><span class=\"line\"><span class=\"keyword\">except</span> (Ex2,Ex3):</span><br><span class=\"line\">  <span class=\"comment\">#发生异常Ex2或Ex3时要执行的语句</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">  <span class=\"comment\">#发生其它异常时要执行的语句</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">  <span class=\"comment\">#无异常时要执行的语句</span></span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">  <span class=\"comment\">#无论有没有异常都要执行的语句</span></span><br><span class=\"line\">  <span class=\"comment\">#如文件资源、数据库、图形句柄资源的释放</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>调试  有三种方式：<code>Python Debugger</code>、<code>%xmode</code>、<code>assert</code>  <a href=\"https://wangwangyz.site/?p=766\" title=\"Python学习笔记(二)\">Python学习笔记(二)</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-Python缩进\"><a href=\"#1-Python缩进\" class=\"headerlink\" title=\"1.Python缩进\"></a>1.Python缩进</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elements = [<span class=\"string\">&quot;Tom&quot;</span>,<span class=\"string\">&quot;Jack&quot;</span>,<span class=\"string\">&quot;Anne&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> elem <span class=\"keyword\">in</span> elements:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Hello&quot;</span>,elem) <span class=\"comment\">#缩进表示一个代码块</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;I love you&quot;</span>,elem)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;Bye My&quot;</span>,elements)<span class=\"comment\">#不缩进代表一个独立的语句，不在for循环体内</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-基本类型\"><a href=\"#2-基本类型\" class=\"headerlink\" title=\"2.基本类型\"></a>2.基本类型</h3>","more":"<ul>\n<li>整数</li>\n<li>浮点数  <code>1.23e9</code>可以表示很大的浮点数</li>\n<li>字符串  可以使用<code>&quot;</code>或者<code>&#39;</code>括起来的，字符串内可用转义字符<code>\\</code>标识</li>\n<li>布尔值  <code>True</code>和 <code>False</code> 布尔值还可以用布尔运算，有三种：<code>and，or， not</code>与之对应的逻辑是数理逻辑上的与或非</li>\n<li>空值  是Python一个特殊值，用 <code>None</code>表示</li>\n<li>列表、字典等</li>\n</ul>\n<h4 id=\"2-1变量\"><a href=\"#2-1变量\" class=\"headerlink\" title=\"2.1变量\"></a>2.1变量</h4><p>大小写英文、数字和<code>_</code>的组合，且不能用数字开头</p>\n<h4 id=\"2-2常量\"><a href=\"#2-2常量\" class=\"headerlink\" title=\"2.2常量\"></a>2.2常量</h4><p>Python里通常用全大写变量名表示常量，但不强制</p>\n<h4 id=\"2-3字符串编码\"><a href=\"#2-3字符串编码\" class=\"headerlink\" title=\"2.3字符串编码\"></a>2.3字符串编码</h4><ul>\n<li>Python3采用Unicode编码，常见计算机系统内存统一采用Unicode编码，当需要保存到硬盘或者传输时，就转化为UTF-8编码，反之转化回Unicode。</li>\n<li>Python对于 <code>bytes</code> 类型的数据用带 <code>b</code> 前缀的单引号或双引号表示：  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"string\">b&#x27;ABC&#x27;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>字符串可用encode( )方法可以编码为指定的bytes  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;ABC&#x27;</span>.encode(<span class=\"string\">&#x27;ascii&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;ABC&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;中文&#x27;</span>.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">b&#x27;\\xe4\\xb8\\xad\\xe6\\x96\\x87&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">&#x27;中文&#x27;</span>.encode(<span class=\"string\">&#x27;ascii&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>len( )函数计算str字符数  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(<span class=\"string\">&quot;你好&quot;</span>))</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>(<span class=\"string\">&quot;nihao&quot;</span>))</span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n  如果是计算bytes，则是字节数  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(<span class=\"string\">b&#x27;ABC&#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(<span class=\"string\">b&#x27;\\xe4\\xb8\\xad\\xe6\\x96\\x87&#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">len</span>(<span class=\"string\">&#x27;中文&#x27;</span>.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\"><span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n  坚持使用UTF-8编码避免乱码问题</li>\n</ul>\n<h3 id=\"3-格式化\"><a href=\"#3-格式化\" class=\"headerlink\" title=\"3.格式化\"></a>3.格式化</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&quot;hello ,%s,I&#x27;m %d years old,my score is %f&quot;</span>%(<span class=\"string\">&quot;jack&quot;</span>,<span class=\"number\">18</span>,<span class=\"number\">95.00</span>))</span><br><span class=\"line\">hello ,jack,I<span class=\"string\">&#x27;m 18 years old,my score is 95.000000</span></span><br></pre></td></tr></table></figure>\n\n<p>另外一种是str.format( )方法，不推荐</p>\n<h3 id=\"4-list-和tuple\"><a href=\"#4-list-和tuple\" class=\"headerlink\" title=\"4.list 和tuple\"></a>4.list 和tuple</h3><ul>\n<li>list是一种有序的集合，可以增删，  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elements = [<span class=\"string\">&quot;A&quot;</span>,<span class=\"number\">123</span>,[<span class=\"string\">&quot;C&quot;</span>,<span class=\"string\">&quot;D&quot;</span>],<span class=\"literal\">True</span>]</span><br><span class=\"line\">elements.append(<span class=\"string\">&quot;abcd&quot;</span>)</span><br><span class=\"line\">elements.insert(<span class=\"number\">2</span>,(<span class=\"string\">&quot;2&quot;</span>,<span class=\"string\">&quot;3&quot;</span>))</span><br><span class=\"line\">elements.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(elements)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(elements[-<span class=\"number\">3</span>][<span class=\"number\">0</span>])<span class=\"comment\">#如果是elements[-2][0]会报TypeErrorw</span></span><br><span class=\"line\"><span class=\"comment\">###########输出结果自行理解</span></span><br><span class=\"line\">[<span class=\"number\">123</span>, (<span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&#x27;3&#x27;</span>), [<span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;D&#x27;</span>], <span class=\"literal\">True</span>, <span class=\"string\">&#x27;abcd&#x27;</span>]</span><br><span class=\"line\">C</span><br></pre></td></tr></table></figure>\n</li>\n<li>tuple一旦初始化不能修改，没有append( ), insert( )这种方法，能使用-1…表示索引  tuple用 <code>()</code> 表示(注意和数学符号意义上的区别，通常用 <code>,</code> 如（ 1,）加以区分)  tuple里面若有指向别的元素如list，指向的list不可改变，但是list指向的可以改变  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tuple</span> = (<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, [<span class=\"string\">&quot;C&quot;</span>,<span class=\"string\">&quot;D&quot;</span>])<span class=\"comment\">#tuple里面的元素[&quot;C&quot;,&quot;D&quot;]是一个list，list可以改变</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5-dict和set\"><a href=\"#5-dict和set\" class=\"headerlink\" title=\"5.dict和set\"></a>5.dict和set</h3><ul>\n<li>  dict</li>\n</ul>\n<h3 id=\"6-Python小结\"><a href=\"#6-Python小结\" class=\"headerlink\" title=\"6.Python小结\"></a>6.Python小结</h3><p>列表list []、元组tuple ()、字典 dict {key: value}、无序不重复集合 set (list[])</p>\n<h3 id=\"7-函数\"><a href=\"#7-函数\" class=\"headerlink\" title=\"7.函数\"></a>7.函数</h3><ul>\n<li><h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li>  位置参数</li>\n</ul>\n  平时常用的按照顺序进行传参的参数  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">power</span>(<span class=\"params\">x,n</span>):</span><br><span class=\"line\">    temp = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n&lt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n,<span class=\"number\">0</span>):<span class=\"comment\">#t表示n到-1的整数</span></span><br><span class=\"line\">            temp = temp/x</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> n&gt;<span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,n):<span class=\"comment\">#range(n,m)表示返回n到m-1的整数list</span></span><br><span class=\"line\">            temp = temp*x</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;power(5,3):&quot;</span>,power(<span class=\"number\">5</span>,<span class=\"number\">3</span>))<span class=\"comment\">#power(5,3): 125</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;power(5,-2):&quot;</span>,power(<span class=\"number\">5</span>,-<span class=\"number\">2</span>))<span class=\"comment\">#power(5,-2): 0.04</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>  默认参数</li>\n</ul>\n  默认参数在后面，默认参数必须指向不变对象，不然下次调用时默认参数内容就变了  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">enroll</span>(<span class=\"params\">name,age,city=<span class=\"string\">&quot;北京&quot;</span>,sex=<span class=\"string\">&quot;保密&quot;</span></span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;My name is &quot;</span>,name,<span class=\"string\">&quot;,I`m &quot;</span>,age)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;I`m come from &quot;</span>,city,<span class=\"string\">&quot;,my sex is&quot;</span>,sex)</span><br><span class=\"line\">enroll(<span class=\"string\">&quot;李华&quot;</span>,<span class=\"number\">23</span>,sex = <span class=\"string\">&quot;女&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#My name is  李华 ,I`m  23 </span></span><br><span class=\"line\"><span class=\"comment\">#I`m come from  北京 ,my sex is 女   </span></span><br><span class=\"line\">enroll(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">18</span>)</span><br><span class=\"line\"><span class=\"comment\">#My name is  张三 ,I`m  18</span></span><br><span class=\"line\"><span class=\"comment\">#I`m come from  北京 ,my sex is 保密  </span></span><br><span class=\"line\">enroll(<span class=\"string\">&quot;李四&quot;</span>,<span class=\"number\">45</span>,<span class=\"string\">&quot;上海&quot;</span>,<span class=\"string\">&quot;男&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#My name is  李四 ,I`m  45</span></span><br><span class=\"line\"><span class=\"comment\">#I`m come from  上海 ,my sex is 男  </span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>  可变参数</li>\n</ul>\n  在参数前加一个 <code>*</code> ，参数接收到的可以是一个tuple，也可以是任意个参数包括0个  对于已有的tuple和list，在前面加一个 <code>*</code> 就可变成可变参数传入函数  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">calc</span>(<span class=\"params\">*numbers</span>):</span><br><span class=\"line\">    <span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers:</span><br><span class=\"line\">        <span class=\"built_in\">sum</span> = <span class=\"built_in\">sum</span> + number</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span></span><br><span class=\"line\">nums1 = [<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\">nums2 = (<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(calc(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>)) <span class=\"comment\">#16</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(calc(*nums2))  <span class=\"comment\">#16</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(calc(*nums1))  <span class=\"comment\">#16</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>  关键字参数</li>\n</ul>\n  允许传入0至多个参数，在函数内部自动组装为一个dict  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">info</span>(<span class=\"params\">name, age, **more</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(name,<span class=\"string\">&quot; &quot;</span>,age,<span class=\"string\">&quot; &quot;</span>,more)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&quot;city&quot;</span> <span class=\"keyword\">in</span> more:</span><br><span class=\"line\">        <span class=\"keyword\">pass</span> </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&quot;addr&quot;</span> <span class=\"keyword\">in</span> more:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;my city:&quot;</span>,more.get(<span class=\"string\">&quot;addr&quot;</span>)) <span class=\"comment\">#more相当于一个字典</span></span><br><span class=\"line\"></span><br><span class=\"line\">info(<span class=\"string\">&quot;李华&quot;</span>,<span class=\"number\">12</span>,addr=<span class=\"string\">&quot;钦州市&quot;</span>,sex = <span class=\"string\">&quot;男&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#结果都为：李华   12   &#123;&#x27;addr&#x27;: &#x27;钦州市&#x27;, &#x27;sex&#x27;: &#x27;男&#x27;&#125; my city: 钦州市</span></span><br><span class=\"line\">extra = &#123; <span class=\"string\">&quot;addr&quot;</span>:<span class=\"string\">&quot;钦州市&quot;</span>,<span class=\"string\">&quot;sex&quot;</span>:<span class=\"string\">&quot;男&quot;</span>&#125;</span><br><span class=\"line\">info(<span class=\"string\">&quot;李华&quot;</span>,<span class=\"number\">12</span>,**extra)<span class=\"comment\">#这里相当于把extra的一份拷贝给函数info的关键字参数more</span></span><br></pre></td></tr></table></figure>\n  小结：对于任意函数，都可以通过类似<code>func(*args, **kw)</code>的形式调用它，无论它的参数是如何定义的。</li>\n<li><h4 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h4></li>\n<li><h4 id=\"元信息\"><a href=\"#元信息\" class=\"headerlink\" title=\"元信息\"></a>元信息</h4>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#为函数添加元数据,描述函数的参数类型和返回类型</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">x:<span class=\"built_in\">int</span>, y:<span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x+y</span><br></pre></td></tr></table></figure>\n  元信息只是为了帮助源码阅读。python解释器不会对这些注解添加任何的语义。即使返回类型不一致，程序也不会出错，因为它们不会被类型检查。</li>\n</ul>\n<h3 id=\"8-高级特性\"><a href=\"#8-高级特性\" class=\"headerlink\" title=\"8.高级特性\"></a>8.高级特性</h3><ul>\n<li><h4 id=\"切片\"><a href=\"#切片\" class=\"headerlink\" title=\"切片\"></a>切片</h4>  <code>:</code> 用来取list或tuple的部分元素  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">L = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">100</span>,<span class=\"number\">200</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(L[:<span class=\"number\">3</span>])<span class=\"comment\">#取list前三个元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(L[<span class=\"number\">1</span>:<span class=\"number\">3</span>])<span class=\"comment\">#取list中索引值为1到索引值为3的元素</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(L[-<span class=\"number\">20</span>:-<span class=\"number\">10</span>])<span class=\"comment\">#取倒数第十到倒数第二十也就是180-190（不包括190）之间的十个整数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(L[:<span class=\"number\">10</span>:<span class=\"number\">2</span>])<span class=\"comment\">#前十个元素，每隔2个元素取一个，结果为100,102,104,106,108</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(L[::-<span class=\"number\">1</span>])<span class=\"comment\">#实现切片逆序</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h4>  1、 通过<code>for...in</code>来完成迭代，不仅可以在 <code>tuple</code> 、 <code>list</code> 和 <code>dict</code> 上进行迭代，还可以作用于可迭代对象（可通过<code>collections.abc</code> 模块的 <code>Iterable</code> 类型判断)  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">isinstance</span>(<span class=\"string\">&#x27;abc&#x27;</span>,Iterable)<span class=\"comment\">#str是否能迭代</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">isinstance</span>(<span class=\"number\">123</span>,Iterable)<span class=\"comment\">#整数是否能迭代</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n  2、实现Java下标循环  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">for</span> i,x <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>([<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>]):</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>   <span class=\"built_in\">print</span>(i,x)</span><br><span class=\"line\"><span class=\"number\">0</span> A</span><br><span class=\"line\"><span class=\"number\">1</span> B</span><br><span class=\"line\"><span class=\"number\">2</span> C</span><br></pre></td></tr></table></figure>\n</li>\n<li><h4 id=\"列表生成式\"><a href=\"#列表生成式\" class=\"headerlink\" title=\"列表生成式\"></a>列表生成式</h4><ol>\n<li>列表生成式可以嵌套一层至多层循环 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#列表生成式直接一行代码生成list</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>([x*x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">5</span>)])</span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">4</span>,<span class=\"number\">9</span>,<span class=\"number\">16</span>]</span><br><span class=\"line\"><span class=\"comment\">#还可以使用像for循环那样的两个变量即以上</span></span><br><span class=\"line\">&gt;&gt;&gt;dictItem = &#123;<span class=\"string\">&#x27;A&#x27;</span>:<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>:<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>:<span class=\"string\">&#x27;c&#x27;</span>&#125;</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>([a+<span class=\"string\">&#x27;=&#x27;</span>+b <span class=\"keyword\">for</span> a,b <span class=\"keyword\">in</span> dictItem.items])</span><br><span class=\"line\">[<span class=\"string\">&#x27;A=a&#x27;</span>,<span class=\"string\">&#x27;B=b&#x27;</span>,<span class=\"string\">&#x27;C=c&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#for循环后还能添加if判断条件，注意！！这是筛选条件，和下面的if...else不一样</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>([x*x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">10</span>) <span class=\"keyword\">if</span> x%<span class=\"number\">2</span>==<span class=\"number\">0</span>])</span><br><span class=\"line\">[<span class=\"number\">4</span>, <span class=\"number\">16</span>, <span class=\"number\">36</span>, <span class=\"number\">64</span>]</span><br><span class=\"line\"><span class=\"comment\">#还可以添加多层循环</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>([a+b <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>] <span class=\"keyword\">for</span> b <span class=\"keyword\">in</span> [<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>]])</span><br><span class=\"line\">[<span class=\"string\">&#x27;1A&#x27;</span>, <span class=\"string\">&#x27;1B&#x27;</span>, <span class=\"string\">&#x27;1C&#x27;</span>, <span class=\"string\">&#x27;2A&#x27;</span>, <span class=\"string\">&#x27;2B&#x27;</span>, <span class=\"string\">&#x27;2C&#x27;</span>, <span class=\"string\">&#x27;3A&#x27;</span>, <span class=\"string\">&#x27;3B&#x27;</span>, <span class=\"string\">&#x27;3C&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><code>if...else</code>的使用(使用方法为在for循环前加上if…else) <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;dictItem = &#123;<span class=\"string\">&#x27;A&#x27;</span>:<span class=\"number\">2</span>,<span class=\"string\">&#x27;B&#x27;</span>:<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;C&#x27;</span>:<span class=\"string\">&#x27;c&#x27;</span>,<span class=\"string\">&#x27;D&#x27;</span>:<span class=\"number\">3</span>&#125;</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>([a+<span class=\"string\">&#x27;=&#x27;</span>+b <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(b,<span class=\"built_in\">str</span>) <span class=\"keyword\">else</span> a+<span class=\"string\">&#x27;=&#x27;</span>+<span class=\"built_in\">str</span>(b) <span class=\"keyword\">for</span> a,b <span class=\"keyword\">in</span> dictItem.items()])</span><br><span class=\"line\">[<span class=\"string\">&#x27;A=2&#x27;</span>, <span class=\"string\">&#x27;B=b&#x27;</span>, <span class=\"string\">&#x27;C=c&#x27;</span>,<span class=\"string\">&#x27;D=3&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><h4 id=\"生成器-Generator\"><a href=\"#生成器-Generator\" class=\"headerlink\" title=\"生成器(Generator)\"></a>生成器(Generator)</h4>  <code>next()</code>、<code>yelid</code>、<code>StopIteration</code>  generator函数返回一个generator对象</li>\n</ul>\n<h3 id=\"9-高阶函数\"><a href=\"#9-高阶函数\" class=\"headerlink\" title=\"9. 高阶函数\"></a>9. 高阶函数</h3><ul>\n<li><h4 id=\"map-、-reduce-和-filter\"><a href=\"#map-、-reduce-和-filter\" class=\"headerlink\" title=\"map() 、 reduce() 和 filter()\"></a><code>map()</code> 、 <code>reduce()</code> 和 <code>filter()</code></h4><ol>\n<li><code>map()</code> 接收一个函数和Iterator，将<code>函数作用到所有Iterator元素</code>上并将结果返回到新的Iterator，最终结果返回新的Iterator。 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">def</span> <span class=\"title function_\">f</span>(<span class=\"params\">x</span>):</span><br><span class=\"line\">     <span class=\"keyword\">return</span> x * x</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>r = <span class=\"built_in\">map</span>(f, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(r)<span class=\"comment\">#最后要用list函数将Iterator转换为list</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>]</span><br></pre></td></tr></table></figure>\n</li>\n<li><code>reduce</code> 接收一个函数和一个序列，该函数必须接收<code>两个参数</code>，<code>reduce</code> 负责将<code>函数结果</code>继续和 <code>序列下一个元素</code> 作为两个参数继续执行下一次函数，直到后序无元素，最终结果为<code>计算结果</code> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">def</span> <span class=\"title function_\">add</span>(<span class=\"params\">x,y</span>):</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>   <span class=\"keyword\">return</span> x+y</span><br><span class=\"line\">&gt;&gt;&gt;reduce(add,[<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">7</span>])</span><br><span class=\"line\"><span class=\"number\">16</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n  思考题：利用<code>map</code>和<code>reduce</code>编写一个<code>str2float</code>函数，把字符串<code>&#39;123.456&#39;</code>转换成浮点数<code>123.456</code><ol start=\"3\">\n<li><code>filter</code> 接收一个函数和一个序列，将 <code>函数作用于每个元素</code> ，然后根据返回值是 <code>True</code> 还是 <code>False</code> 决定保留或者丢弃元素。 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">def</span> <span class=\"title function_\">not_empty</span>(<span class=\"params\">s</span>):</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>   <span class=\"keyword\">return</span> s <span class=\"keyword\">and</span> s.strip()</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(<span class=\"built_in\">filter</span>(not_empty,[<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"literal\">None</span>,<span class=\"string\">&#x27;B&#x27;</span>,<span class=\"string\">&#x27;&#x27;</span>]))</span><br><span class=\"line\">[<span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li><h4 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted()\"></a><code>sorted()</code></h4>  <code>sorted()</code> 可以对list进行排序，也是一个高阶函数，可以接收一个 <code>key</code> 函数自定义排序顺序  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">sorted</span>([<span class=\"number\">9</span>,-<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,-<span class=\"number\">5</span>],key=<span class=\"built_in\">abs</span>)</span><br><span class=\"line\">[-<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, -<span class=\"number\">5</span>, <span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n  <code>sorted()</code>函数负责将key函数<code>返回的结果</code>进行排序，并按对应关系返回list中的元素  此外，要实现反向排序还可以传入 <code>reverse</code> 的值为 <code>True</code>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>(<span class=\"built_in\">sorted</span>([<span class=\"number\">9</span>,-<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,-<span class=\"number\">5</span>],key=<span class=\"built_in\">abs</span>,reverse=<span class=\"literal\">True</span>))</span><br><span class=\"line\">[<span class=\"number\">9</span>, -<span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, -<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n  <code>sorted()</code> 返回结果为list</li>\n</ul>\n<h3 id=\"10-函数式编程\"><a href=\"#10-函数式编程\" class=\"headerlink\" title=\"10. 函数式编程\"></a>10. 函数式编程</h3><ul>\n<li><h4 id=\"返回函数\"><a href=\"#返回函数\" class=\"headerlink\" title=\"返回函数\"></a>返回函数</h4><ol>\n<li>一个函数可以返回值，也可以<code>返回函数</code> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span>  <span class=\"title function_\">lazy_sum</span>(<span class=\"params\">L</span>):</span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">sum</span>(<span class=\"params\">L</span>):</span><br><span class=\"line\">         result = <span class=\"number\">0</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> L:</span><br><span class=\"line\">             result = result + x</span><br><span class=\"line\">         <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span> <span class=\"comment\">#注意返回sum和sum()的区别！！！</span></span><br><span class=\"line\">test = lazy_sum([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(test())<span class=\"comment\">#返回的是sum，则需要调用test();如果返回的是sum(),则直接调用test</span></span><br></pre></td></tr></table></figure>\n ​ 上述例子，如果函数内只是返回<code>函数名</code>而不是返回执行函数，则为 <code>闭包运算</code> ；此外，返回闭包时，要注意返回函数不能引用任何循环变量或者后续会发生变化的变量。 <img src=\"https://s3.bmp.ovh/imgs/2022/02/ed7aed0162d048c1.png\"></li>\n<li><code>nonlocal</code> 声明该变量不是当前函数的局部变量</li>\n</ol>\n</li>\n<li>匿名函数(lambda)  关键字 <code>lambda</code> 参数 <code>x,y</code> : 函数返回值 <code>x+y</code>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lambda</span> x,y: x+y </span><br></pre></td></tr></table></figure>\n  多数时候配合高阶函数 <code>map()</code>、<code>filter()</code>、<code>reduce()</code>、<code>sorted()</code> 使用</li>\n<li>装饰器(decorator)  在代码运行期间动态增加功能的方式。(动态语言的函数和类的定义，是在运行时动态创建的。)  要借助Python的 <code>@</code> 语法，把decorator放在函数 <code>定义处</code>：  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">log</span>(<span class=\"params\">func</span>):</span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">wrapper</span>(<span class=\"params\">*args,**kw</span>):</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;call %s()&#x27;</span>%func.__name__)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> func(*args,**kw)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"><span class=\"meta\">@log   </span><span class=\"comment\">#相当于执行 now = log(now)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">now</span>():</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(time.strftime(<span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>))</span><br></pre></td></tr></table></figure>\n</li>\n<li>偏函数  当函数的参数个数太多，需要简化时，使用<code>functools.partial</code>可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2 = functools.partial(<span class=\"built_in\">int</span>, base=<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2(<span class=\"string\">&#x27;1000000&#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2(<span class=\"string\">&#x27;1010101&#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">85</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"11-模块\"><a href=\"#11-模块\" class=\"headerlink\" title=\"11. 模块\"></a>11. 模块</h3><ul>\n<li>作用域  <code>_xxx</code> 或者 <code>_xxx_</code> 表示的 <code>函数</code> 或者 <code>变量</code> 一般为非公开的(private)，不应该被直接引用(但依然可以在其它模块强制引用)。  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#这是工具类.py模块</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">import</span> datetime</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">import</span> time</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">def</span> <span class=\"title function_\">showtime</span>():</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>   <span class=\"built_in\">print</span>(time.strftime(<span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>))</span><br><span class=\"line\">&gt;&gt;&gt;__t = time.strftime(<span class=\"string\">&quot;%Y&quot;</span>)</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">def</span> <span class=\"title function_\">__showyear</span>():</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>   <span class=\"built_in\">print</span>(__t)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#这是test.py模块</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">from</span> 工具类 <span class=\"keyword\">import</span> showtime,__showyear,__t</span><br><span class=\"line\">&gt;&gt;&gt;showtime()</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>(__t)<span class=\"comment\">#不推荐直接使用其它模块的private变量或函数，即使可以正常使用</span></span><br><span class=\"line\">&gt;&gt;&gt;__showyear()</span><br><span class=\"line\"><span class=\"number\">2022</span>-02-<span class=\"number\">26</span> <span class=\"number\">18</span>:<span class=\"number\">36</span>:<span class=\"number\">49</span></span><br><span class=\"line\"><span class=\"number\">2022</span></span><br><span class=\"line\"><span class=\"number\">2022</span></span><br></pre></td></tr></table></figure>\n  只有外部需要的函数或者变量才定义为public。</li>\n<li>安装第三方模块  包管理工具 <code>pip</code></li>\n</ul>\n<h3 id=\"12-面向对象编程\"><a href=\"#12-面向对象编程\" class=\"headerlink\" title=\"12.面向对象编程\"></a>12.面向对象编程</h3><ul>\n<li>类和实例及其访问权限  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#新建Student类，并继承Object类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">  <span class=\"comment\">#__init__方法初始化对象，相当于java的构造子</span></span><br><span class=\"line\">  <span class=\"comment\">#定义类时，self代表&quot;实例的引用&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self, name, gender</span>):</span><br><span class=\"line\">  <span class=\"comment\">#__xxx习惯上设置访问权限为private，但还是可以强制访问</span></span><br><span class=\"line\">      self.__name = name</span><br><span class=\"line\">      self.__gender = gender</span><br><span class=\"line\">  <span class=\"comment\">#设置对象里的方法</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">get_gender</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.__gender</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">set_gender</span>(<span class=\"params\">self,s</span>):</span><br><span class=\"line\">      <span class=\"keyword\">if</span> s ==<span class=\"string\">&#x27;male&#x27;</span>o<span class=\"string\">r&#x27;female&#x27;</span>:</span><br><span class=\"line\">          <span class=\"built_in\">print</span>(self.__gender)</span><br><span class=\"line\">          self.__gender = s</span><br><span class=\"line\">          <span class=\"built_in\">print</span>(self.__gender)</span><br><span class=\"line\">      <span class=\"keyword\">else</span>:</span><br><span class=\"line\">          <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&#x27;值错啦&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># 测试:</span></span><br><span class=\"line\">bart = Student(<span class=\"string\">&#x27;Bart&#x27;</span>, <span class=\"string\">&#x27;male&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> bart.get_gender() != <span class=\"string\">&#x27;male&#x27;</span>:</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试失败!&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">  bart.set_gender(<span class=\"string\">&#x27;female&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> bart.get_gender() != <span class=\"string\">&#x27;female&#x27;</span>:</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试失败!&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;测试成功!&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>方法  Python中的方法分为三种：实例方法、类方法、静态方法。<ul>\n<li>  实例方法</li>\n</ul>\n  参数里面有 <code>self</code> ，如：  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set_self</span>(<span class=\"params\">self,name</span>):</span><br><span class=\"line\">    self.__name = name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>  类方法</li>\n</ul>\n  前面带有装饰器 <code>@classmethod</code> ,且参数里面有 <code>cls</code> ，如：  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@classmethod</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">class_func</span>(<span class=\"params\">cls</span>):</span><br><span class=\"line\">    cls.name = <span class=\"string\">&quot;我是类名&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;my name is %s&quot;</span>%(cls.name))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>  静态方法</li>\n</ul>\n  形参中没有 <code>cls</code> 和 <code>self</code>，甚至没有参数，如：  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"meta\">@staticmethod</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">static_func</span>():</span><br><span class=\"line\">    <span class=\"comment\">#返回0-9的随机数</span></span><br><span class=\"line\">    randomNum = random.randint(<span class=\"number\">0</span>,<span class=\"number\">9</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> randomNum</span><br></pre></td></tr></table></figure>\n  类方法和静态方法都可以通过类名和实例名调用</li>\n<li>获取对象信息<ol>\n<li><code>type()方法</code> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"number\">123</span>)==<span class=\"built_in\">int</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"string\">&#x27;abc&#x27;</span>)==<span class=\"built_in\">type</span>(<span class=\"string\">&#x27;123&#x27;</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"string\">&#x27;abc&#x27;</span>)==<span class=\"built_in\">str</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n 该方法返回对应的Class类型</li>\n<li><code>id()方法</code> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;str1 = <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\">&gt;&gt;&gt;str2 = <span class=\"string\">&quot;test&quot;</span></span><br><span class=\"line\">&gt;&gt;&gt;str3 = str1</span><br><span class=\"line\">&gt;&gt;&gt;int1 = <span class=\"number\">123</span></span><br><span class=\"line\">&gt;&gt;&gt;list1 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;3&#x27;</span>]</span><br><span class=\"line\">&gt;&gt;&gt;tuple1 = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;3&#x27;</span>])</span><br><span class=\"line\">&gt;&gt;&gt;total =[<span class=\"string\">&#x27;test&#x27;</span>,str2,str3,int1,list1,tuple1]</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(<span class=\"built_in\">id</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> total[:<span class=\"number\">3</span>] <span class=\"keyword\">if</span> &gt;&gt;&gt;<span class=\"built_in\">type</span>(i)==<span class=\"built_in\">str</span>))</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(<span class=\"built_in\">id</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> total))</span><br><span class=\"line\">[<span class=\"number\">2408464217968</span>, <span class=\"number\">2408464217968</span>, <span class=\"number\">2408464217968</span>]</span><br><span class=\"line\">[<span class=\"number\">2408464217968</span>, <span class=\"number\">2408464217968</span>, <span class=\"number\">2408464217968</span>, <span class=\"number\">2408455690416</span>, <span class=\"number\">2408507421120</span>, <span class=\"number\">2408507410448</span>]</span><br></pre></td></tr></table></figure>\n 从输出结果可以看出程序运行时str1、str2、str3的id值是一样的</li>\n<li><code>isinstance()方法</code> 如果有继承关系：Object -&gt;Animal -&gt;Dog -&gt;Husky 那么则 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = Animal()</span><br><span class=\"line\">b = Dog()</span><br><span class=\"line\">h = Husky()</span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">isinstance</span>(h,Husky)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">isinstance</span>(h,Animal)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n <code>isinstance()</code>还可以判断其类型及其子类,一般情况下优先使用<code>isinstance()</code>判断类型 <code>isinstance()</code>还可以判断是否为某些变量其一 <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">isinstance</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], (<span class=\"built_in\">list</span>, <span class=\"built_in\">tuple</span>))</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">isinstance</span>((<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>), (<span class=\"built_in\">list</span>, <span class=\"built_in\">tuple</span>))</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><code>__doc__属性</code> <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span>(<span class=\"built_in\">len</span>.__doc__)</span><br><span class=\"line\">Return the number of items <span class=\"keyword\">in</span> a container. </span><br></pre></td></tr></table></figure>\n 用于查看某对象支持的方法或属性清单</li>\n</ol>\n  此外还有 <code>help()</code>方法，可以帮助显示方法或属性信息</li>\n<li>类属性  直接定义在类中，区别于实例属性self.xxx</li>\n<li>动态绑定  动态绑定允许我们在程序运行的过程中动态给class加上功能  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,name</span>):</span><br><span class=\"line\">      self.__name__ = name</span><br><span class=\"line\">stu1 = Student(<span class=\"string\">&#x27;张三&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#动态绑定给实例绑定一个属性</span></span><br><span class=\"line\">stu1.sex = <span class=\"string\">&#x27;male&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(stu1.sex)</span><br><span class=\"line\"><span class=\"comment\"># 动态绑定给实例绑定一个方法</span></span><br><span class=\"line\"><span class=\"keyword\">def</span>  <span class=\"title function_\">set_name</span>(<span class=\"params\">self,name</span>):</span><br><span class=\"line\">  self.__name__ = name</span><br><span class=\"line\"><span class=\"keyword\">from</span> types <span class=\"keyword\">import</span> MethodType</span><br><span class=\"line\">stu1.set_name = MethodType(set_name, stu1) </span><br><span class=\"line\">stu1.set_name(<span class=\"string\">&#x27;李四&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stu1.__name__)</span><br></pre></td></tr></table></figure>\n  为了限制类外动态绑定属性或方法，可以定义在定义类时用<code>__slots__</code>变量，来限制该class实例能添加的属性。  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">  __slots__ = (<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;__name__&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,name</span>):</span><br><span class=\"line\">      self.__name__ = name</span><br></pre></td></tr></table></figure>\n  此时如果向Student类添加sex属性则会报AttributeError<img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312211908812.png\" alt=\"image-20220312211908812\">  <strong>注意</strong>：<code>__slots__</code>定义的属性仅对当前类实例起作用，对继承的子类是不起作用  练习：利用<code>@property</code>给一个<code>Screen</code>对象加上<code>width</code>和<code>height</code>属性，以及一个只读属性<code>resolution</code>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Screen</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\"><span class=\"meta\">  @property</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span>  <span class=\"title function_\">width</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.__width__ </span><br><span class=\"line\"><span class=\"meta\">  @width.setter</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">width</span>(<span class=\"params\">self,size</span>):</span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(size,(<span class=\"built_in\">int</span>,<span class=\"built_in\">float</span>))==<span class=\"literal\">False</span>:</span><br><span class=\"line\">          <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">&#x27;请输入正确的int或其它数值类型&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> size &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> size &gt; <span class=\"number\">2048</span>:</span><br><span class=\"line\">          <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&#x27;请输入正确范围的数&#x27;</span>)</span><br><span class=\"line\">      self.__width__ = size</span><br><span class=\"line\"><span class=\"meta\">  @property</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span>  <span class=\"title function_\">height</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.__height__</span><br><span class=\"line\"><span class=\"meta\">  @height.setter</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">height</span>(<span class=\"params\">self,size</span>):</span><br><span class=\"line\">      <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(size,(<span class=\"built_in\">int</span>,<span class=\"built_in\">float</span>))==<span class=\"literal\">False</span>:</span><br><span class=\"line\">         <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">&#x27;请输入正确的int或其它数值类型&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> size &lt; <span class=\"number\">0</span> <span class=\"keyword\">or</span> size &gt; <span class=\"number\">2048</span>:</span><br><span class=\"line\">         <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">&#x27;请输入正确范围的数&#x27;</span>)</span><br><span class=\"line\">      self.__height__ = size   </span><br><span class=\"line\"><span class=\"meta\">  @property</span></span><br><span class=\"line\">  <span class=\"keyword\">def</span>  <span class=\"title function_\">resolution</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">      <span class=\"keyword\">return</span> self.__width__*self.__height__</span><br></pre></td></tr></table></figure>\n</li>\n<li>多重继承  通过多重继承，一个子类就可以同时获得多个父类的所有功能  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>(Mammal,Runnable):</span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>():</span><br><span class=\"line\">      <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n  <code>MixIn</code> 用于分清主父类和额外功能(类似于Java的继承单一父类和多继承接口)  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>(Mammal,RunnableMixIn):</span><br><span class=\"line\">   <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>():</span><br><span class=\"line\">      <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><code>__str__</code>  Python里面的 <code>__str__</code> 相当于Java 的 <code>toString()</code>方法  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">  __slots__ = (<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;__name__&#x27;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self,name</span>):</span><br><span class=\"line\">      self.__name__ = name</span><br><span class=\"line\">  <span class=\"keyword\">def</span> <span class=\"title function_\">__str__</span>(<span class=\"params\">self</span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;my name is%s &#x27;</span>%(self.__name__)</span><br><span class=\"line\">stu1 = Student(<span class=\"string\">&#x27;张三&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(stu1)  <span class=\"comment\">#结果为：my name is 张三</span></span><br></pre></td></tr></table></figure>\n  同样的还有 <code>__getattr__</code>、 <code>__call__</code>、 <code>__iter__</code>、 <code>__getitem__</code> 等  可根据需要前往<a href=\"https://docs.python.org/3/tutorial/index.html\">官网文档</a>查阅相关资料，不再赘述。</li>\n</ul>\n<h3 id=\"13-异常、错误、调试\"><a href=\"#13-异常、错误、调试\" class=\"headerlink\" title=\"13. 异常、错误、调试\"></a>13. 异常、错误、调试</h3><ul>\n<li>错误与错误  高级语言通常都内置了一套<code>try...except...finally...</code>的错误处理机制，Python也不例外  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">  <span class=\"comment\">#可能发生异常的语句</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> e :</span><br><span class=\"line\">  <span class=\"comment\">#发生IOError异常时要执行的语句</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;An EOF error occurred.&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">raise</span> e</span><br><span class=\"line\"><span class=\"keyword\">except</span> (Ex2,Ex3):</span><br><span class=\"line\">  <span class=\"comment\">#发生异常Ex2或Ex3时要执行的语句</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">  <span class=\"comment\">#发生其它异常时要执行的语句</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">  <span class=\"comment\">#无异常时要执行的语句</span></span><br><span class=\"line\"><span class=\"keyword\">finally</span>:</span><br><span class=\"line\">  <span class=\"comment\">#无论有没有异常都要执行的语句</span></span><br><span class=\"line\">  <span class=\"comment\">#如文件资源、数据库、图形句柄资源的释放</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>调试  有三种方式：<code>Python Debugger</code>、<code>%xmode</code>、<code>assert</code>  <a href=\"https://wangwangyz.site/?p=766\" title=\"Python学习笔记(二)\">Python学习笔记(二)</a></li>\n</ul>"},{"title":"给网站增加输入效果","id":"1059","date":"2022-05-07T13:46:50.000Z","_content":"\n效果图： ![msedge_Q0bNhsbKDi](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/msedge_Q0bNhsbKDi.gif)\n\n![msedge_sO60f822SY](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/msedge_sO60f822SY.gif)\n\n源码：\n<!-- more -->\n```javascript\n<script>\n(function webpackUniversalModuleDefinition(a, b) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = b()\n    } else {\n        if (typeof define === \"function\" && define.amd) {\n            define([], b)\n        } else {\n            if (typeof exports === \"object\") {\n                exports[\"POWERMODE\"] = b()\n            } else {\n                a[\"POWERMODE\"] = b()\n            }\n        }\n    }\n})(this, function() {\n    return (function(a) {\n        var b = {};\n\n        function c(e) {\n            if (b[e]) {\n                return b[e].exports\n            }\n            var d = b[e] = {\n                exports: {},\n                id: e,\n                loaded: false\n            };\n            a[e].call(d.exports, d, d.exports, c);\n            d.loaded = true;\n            return d.exports\n        }\n        c.m = a;\n        c.c = b;\n        c.p = \"\";\n        return c(0)\n    })([function(c, g, b) {\n        var d = document.createElement(\"canvas\");\n        d.width = window.innerWidth;\n        d.height = window.innerHeight;\n        d.style.cssText = \"position:fixed;top:0;left:0;pointer-events:none;z-index:999999\";\n        window.addEventListener(\"resize\", function() {\n            d.width = window.innerWidth;\n            d.height = window.innerHeight\n        });\n        document.body.appendChild(d);\n        var a = d.getContext(\"2d\");\n        var n = [];\n        var j = 0;\n        var k = 120;\n        var f = k;\n        var p = false;\n        o.shake = true;\n\n        function l(r, q) {\n            return Math.random() * (q - r) + r\n        }\n        function m(r) {\n            if (o.colorful) {\n                var q = l(0, 360);\n                return \"hsla(\" + l(q - 10, q + 10) + \", 100%, \" + l(50, 80) + \"%, \" + 1 + \")\"\n            } else {\n                return window.getComputedStyle(r).color\n            }\n        }\n        function e() {\n            var t = document.activeElement;\n            var v;\n            if (t.tagName === \"TEXTAREA\"  (t.tagName === \"INPUT\" && t.getAttribute(\"type\") === \"text\")) {\n                var u = b(1)(t, t.selectionStart);\n                v = t.getBoundingClientRect();\n                return {\n                    x: u.left + v.left,\n                    y: u.top + v.top,\n                    color: m(t)\n                }\n            }\n            var s = window.getSelection();\n            if (s.rangeCount) {\n                var q = s.getRangeAt(0);\n                var r = q.startContainer;\n                if (r.nodeType === document.TEXT_NODE) {\n                    r = r.parentNode\n                }\n                v = q.getBoundingClientRect();\n                return {\n                    x: v.left,\n                    y: v.top,\n                    color: m(r)\n                }\n            }\n            return {\n                x: 0,\n                y: 0,\n                color: \"transparent\"\n            }\n        }\n        function h(q, s, r) {\n            return {\n                x: q,\n                y: s,\n                alpha: 1,\n                color: r,\n                velocity: {\n                    x: -1 + Math.random() * 2,\n                    y: -3.5 + Math.random() * 2\n                }\n            }\n        }\n        function o() {\n            var t = e();\n            var s = 5 + Math.round(Math.random() * 10);\n            while (s--) {\n                n[j] = h(t.x, t.y, t.color);\n                j = (j + 1) % 500\n            }\n            f = k;\n            if (!p) {\n                requestAnimationFrame(i)\n            }\n            if (o.shake) {\n                var r = 1 + 2 * Math.random();\n                var q = r * (Math.random() > 0.5 ? -1 : 1);\n                var u = r * (Math.random() > 0.5 ? -1 : 1);\n                document.body.style.marginLeft = q + \"px\";\n                document.body.style.marginTop = u + \"px\";\n                setTimeout(function() {\n                    document.body.style.marginLeft = \"\";\n                    document.body.style.marginTop = \"\"\n                }, 75)\n            }\n        }\n        o.colorful = false;\n\n        function i() {\n            if (f > 0) {\n                requestAnimationFrame(i);\n                f--;\n                p = true\n            } else {\n                p = false\n            }\n            a.clearRect(0, 0, d.width, d.height);\n            for (var q = 0; q < n.length; ++q) {\n                var r = n[q];\n                if (r.alpha <= 0.1) {\n                    continue\n                }\n                r.velocity.y += 0.075;\n                r.x += r.velocity.x;\n                r.y += r.velocity.y;\n                r.alpha *= 0.96;\n                a.globalAlpha = r.alpha;\n                a.fillStyle = r.color;\n                a.fillRect(Math.round(r.x - 1.5), Math.round(r.y - 1.5), 3, 3)\n            }\n        }\n        requestAnimationFrame(i);\n        c.exports = o\n    }, function(b, a) {\n        (function() {\n            var d = [\"direction\", \"boxSizing\", \"width\", \"height\", \"overflowX\", \"overflowY\", \"borderTopWidth\", \"borderRightWidth\", \"borderBottomWidth\", \"borderLeftWidth\", \"borderStyle\", \"paddingTop\", \"paddingRight\", \"paddingBottom\", \"paddingLeft\", \"fontStyle\", \"fontVariant\", \"fontWeight\", \"fontStretch\", \"fontSize\", \"fontSizeAdjust\", \"lineHeight\", \"fontFamily\", \"textAlign\", \"textTransform\", \"textIndent\", \"textDecoration\", \"letterSpacing\", \"wordSpacing\", \"tabSize\", \"MozTabSize\"];\n            var e = window.mozInnerScreenX != null;\n\n            function c(k, l, o) {\n                var h = o && o.debug  false;\n                if (h) {\n                    var i = document.querySelector(\"#input-textarea-caret-position-mirror-div\");\n                    if (i) {\n                        i.parentNode.removeChild(i)\n                    }\n                }\n                var f = document.createElement(\"div\");\n                f.id = \"input-textarea-caret-position-mirror-div\";\n                document.body.appendChild(f);\n                var g = f.style;\n                var j = window.getComputedStyle ? getComputedStyle(k) : k.currentStyle;\n                g.whiteSpace = \"pre-wrap\";\n                if (k.nodeName !== \"INPUT\") {\n                    g.wordWrap = \"break-word\"\n                }\n                g.position = \"absolute\";\n                if (!h) {\n                    g.visibility = \"hidden\"\n                }\n                d.forEach(function(p) {\n                    g[p] = j[p]\n                });\n                if (e) {\n                    if (k.scrollHeight > parseInt(j.height)) {\n                        g.overflowY = \"scroll\"\n                    }\n                } else {\n                    g.overflow = \"hidden\"\n                }\n                f.textContent = k.value.substring(0, l);\n                if (k.nodeName === \"INPUT\") {\n                    f.textContent = f.textContent.replace(/\\s/g, \"\\u00a0\")\n                }\n                var n = document.createElement(\"span\");\n                n.textContent = k.value.substring(l)  \".\";\n                f.appendChild(n);\n                var m = {\n                    top: n.offsetTop + parseInt(j[\"borderTopWidth\"]),\n                    left: n.offsetLeft + parseInt(j[\"borderLeftWidth\"])\n                };\n                if (h) {\n                    n.style.backgroundColor = \"#aaa\"\n                } else {\n                    document.body.removeChild(f)\n                }\n                return m\n            }\n            if (typeof b != \"undefined\" && typeof b.exports != \"undefined\") {\n                b.exports = c\n            } else {\n                window.getCaretCoordinates = c\n            }\n        }())\n    }])\n});\nPOWERMODE.colorful = true;\nPOWERMODE.shake = false;\ndocument.body.addEventListener(\"input\", POWERMODE);\n</script>\n```\n\n粘贴到页面的 `页尾脚本` 即可生效。","source":"_posts/给网站增加输入效果.md","raw":"---\ntitle: 给网站增加输入效果\ntags:\n  - Javascript\nid: '1059'\ncategories:\n  - - 学习笔记\ndate: 2022-05-07 21:46:50\n---\n\n效果图： ![msedge_Q0bNhsbKDi](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/msedge_Q0bNhsbKDi.gif)\n\n![msedge_sO60f822SY](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/msedge_sO60f822SY.gif)\n\n源码：\n<!-- more -->\n```javascript\n<script>\n(function webpackUniversalModuleDefinition(a, b) {\n    if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = b()\n    } else {\n        if (typeof define === \"function\" && define.amd) {\n            define([], b)\n        } else {\n            if (typeof exports === \"object\") {\n                exports[\"POWERMODE\"] = b()\n            } else {\n                a[\"POWERMODE\"] = b()\n            }\n        }\n    }\n})(this, function() {\n    return (function(a) {\n        var b = {};\n\n        function c(e) {\n            if (b[e]) {\n                return b[e].exports\n            }\n            var d = b[e] = {\n                exports: {},\n                id: e,\n                loaded: false\n            };\n            a[e].call(d.exports, d, d.exports, c);\n            d.loaded = true;\n            return d.exports\n        }\n        c.m = a;\n        c.c = b;\n        c.p = \"\";\n        return c(0)\n    })([function(c, g, b) {\n        var d = document.createElement(\"canvas\");\n        d.width = window.innerWidth;\n        d.height = window.innerHeight;\n        d.style.cssText = \"position:fixed;top:0;left:0;pointer-events:none;z-index:999999\";\n        window.addEventListener(\"resize\", function() {\n            d.width = window.innerWidth;\n            d.height = window.innerHeight\n        });\n        document.body.appendChild(d);\n        var a = d.getContext(\"2d\");\n        var n = [];\n        var j = 0;\n        var k = 120;\n        var f = k;\n        var p = false;\n        o.shake = true;\n\n        function l(r, q) {\n            return Math.random() * (q - r) + r\n        }\n        function m(r) {\n            if (o.colorful) {\n                var q = l(0, 360);\n                return \"hsla(\" + l(q - 10, q + 10) + \", 100%, \" + l(50, 80) + \"%, \" + 1 + \")\"\n            } else {\n                return window.getComputedStyle(r).color\n            }\n        }\n        function e() {\n            var t = document.activeElement;\n            var v;\n            if (t.tagName === \"TEXTAREA\"  (t.tagName === \"INPUT\" && t.getAttribute(\"type\") === \"text\")) {\n                var u = b(1)(t, t.selectionStart);\n                v = t.getBoundingClientRect();\n                return {\n                    x: u.left + v.left,\n                    y: u.top + v.top,\n                    color: m(t)\n                }\n            }\n            var s = window.getSelection();\n            if (s.rangeCount) {\n                var q = s.getRangeAt(0);\n                var r = q.startContainer;\n                if (r.nodeType === document.TEXT_NODE) {\n                    r = r.parentNode\n                }\n                v = q.getBoundingClientRect();\n                return {\n                    x: v.left,\n                    y: v.top,\n                    color: m(r)\n                }\n            }\n            return {\n                x: 0,\n                y: 0,\n                color: \"transparent\"\n            }\n        }\n        function h(q, s, r) {\n            return {\n                x: q,\n                y: s,\n                alpha: 1,\n                color: r,\n                velocity: {\n                    x: -1 + Math.random() * 2,\n                    y: -3.5 + Math.random() * 2\n                }\n            }\n        }\n        function o() {\n            var t = e();\n            var s = 5 + Math.round(Math.random() * 10);\n            while (s--) {\n                n[j] = h(t.x, t.y, t.color);\n                j = (j + 1) % 500\n            }\n            f = k;\n            if (!p) {\n                requestAnimationFrame(i)\n            }\n            if (o.shake) {\n                var r = 1 + 2 * Math.random();\n                var q = r * (Math.random() > 0.5 ? -1 : 1);\n                var u = r * (Math.random() > 0.5 ? -1 : 1);\n                document.body.style.marginLeft = q + \"px\";\n                document.body.style.marginTop = u + \"px\";\n                setTimeout(function() {\n                    document.body.style.marginLeft = \"\";\n                    document.body.style.marginTop = \"\"\n                }, 75)\n            }\n        }\n        o.colorful = false;\n\n        function i() {\n            if (f > 0) {\n                requestAnimationFrame(i);\n                f--;\n                p = true\n            } else {\n                p = false\n            }\n            a.clearRect(0, 0, d.width, d.height);\n            for (var q = 0; q < n.length; ++q) {\n                var r = n[q];\n                if (r.alpha <= 0.1) {\n                    continue\n                }\n                r.velocity.y += 0.075;\n                r.x += r.velocity.x;\n                r.y += r.velocity.y;\n                r.alpha *= 0.96;\n                a.globalAlpha = r.alpha;\n                a.fillStyle = r.color;\n                a.fillRect(Math.round(r.x - 1.5), Math.round(r.y - 1.5), 3, 3)\n            }\n        }\n        requestAnimationFrame(i);\n        c.exports = o\n    }, function(b, a) {\n        (function() {\n            var d = [\"direction\", \"boxSizing\", \"width\", \"height\", \"overflowX\", \"overflowY\", \"borderTopWidth\", \"borderRightWidth\", \"borderBottomWidth\", \"borderLeftWidth\", \"borderStyle\", \"paddingTop\", \"paddingRight\", \"paddingBottom\", \"paddingLeft\", \"fontStyle\", \"fontVariant\", \"fontWeight\", \"fontStretch\", \"fontSize\", \"fontSizeAdjust\", \"lineHeight\", \"fontFamily\", \"textAlign\", \"textTransform\", \"textIndent\", \"textDecoration\", \"letterSpacing\", \"wordSpacing\", \"tabSize\", \"MozTabSize\"];\n            var e = window.mozInnerScreenX != null;\n\n            function c(k, l, o) {\n                var h = o && o.debug  false;\n                if (h) {\n                    var i = document.querySelector(\"#input-textarea-caret-position-mirror-div\");\n                    if (i) {\n                        i.parentNode.removeChild(i)\n                    }\n                }\n                var f = document.createElement(\"div\");\n                f.id = \"input-textarea-caret-position-mirror-div\";\n                document.body.appendChild(f);\n                var g = f.style;\n                var j = window.getComputedStyle ? getComputedStyle(k) : k.currentStyle;\n                g.whiteSpace = \"pre-wrap\";\n                if (k.nodeName !== \"INPUT\") {\n                    g.wordWrap = \"break-word\"\n                }\n                g.position = \"absolute\";\n                if (!h) {\n                    g.visibility = \"hidden\"\n                }\n                d.forEach(function(p) {\n                    g[p] = j[p]\n                });\n                if (e) {\n                    if (k.scrollHeight > parseInt(j.height)) {\n                        g.overflowY = \"scroll\"\n                    }\n                } else {\n                    g.overflow = \"hidden\"\n                }\n                f.textContent = k.value.substring(0, l);\n                if (k.nodeName === \"INPUT\") {\n                    f.textContent = f.textContent.replace(/\\s/g, \"\\u00a0\")\n                }\n                var n = document.createElement(\"span\");\n                n.textContent = k.value.substring(l)  \".\";\n                f.appendChild(n);\n                var m = {\n                    top: n.offsetTop + parseInt(j[\"borderTopWidth\"]),\n                    left: n.offsetLeft + parseInt(j[\"borderLeftWidth\"])\n                };\n                if (h) {\n                    n.style.backgroundColor = \"#aaa\"\n                } else {\n                    document.body.removeChild(f)\n                }\n                return m\n            }\n            if (typeof b != \"undefined\" && typeof b.exports != \"undefined\") {\n                b.exports = c\n            } else {\n                window.getCaretCoordinates = c\n            }\n        }())\n    }])\n});\nPOWERMODE.colorful = true;\nPOWERMODE.shake = false;\ndocument.body.addEventListener(\"input\", POWERMODE);\n</script>\n```\n\n粘贴到页面的 `页尾脚本` 即可生效。","slug":"给网站增加输入效果","published":1,"updated":"2024-03-12T10:42:38.812Z","_id":"cltnrar59002ojry166hgducj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>效果图： <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/msedge_Q0bNhsbKDi.gif\" alt=\"msedge_Q0bNhsbKDi\"></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/msedge_sO60f822SY.gif\" alt=\"msedge_sO60f822SY\"></p>\n<p>源码：</p>\n<span id=\"more\"></span>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">(<span class=\"keyword\">function</span> <span class=\"title function_\">webpackUniversalModuleDefinition</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">exports</span> === <span class=\"string\">&quot;object&quot;</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"variable language_\">module</span> === <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">b</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">&quot;function&quot;</span> &amp;&amp; define.<span class=\"property\">amd</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">define</span>([], b)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">exports</span> === <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">exports</span>[<span class=\"string\">&quot;POWERMODE&quot;</span>] = <span class=\"title function_\">b</span>()</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                a[<span class=\"string\">&quot;POWERMODE&quot;</span>] = <span class=\"title function_\">b</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">this</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">function</span>(<span class=\"params\">a</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b[e]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> b[e].<span class=\"property\">exports</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> d = b[e] = &#123;</span><br><span class=\"line\">                <span class=\"attr\">exports</span>: &#123;&#125;,</span><br><span class=\"line\">                <span class=\"attr\">id</span>: e,</span><br><span class=\"line\">                <span class=\"attr\">loaded</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            a[e].<span class=\"title function_\">call</span>(d.<span class=\"property\">exports</span>, d, d.<span class=\"property\">exports</span>, c);</span><br><span class=\"line\">            d.<span class=\"property\">loaded</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> d.<span class=\"property\">exports</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c.<span class=\"property\">m</span> = a;</span><br><span class=\"line\">        c.<span class=\"property\">c</span> = b;</span><br><span class=\"line\">        c.<span class=\"property\">p</span> = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">c</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;)([<span class=\"keyword\">function</span>(<span class=\"params\">c, g, b</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> d = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;canvas&quot;</span>);</span><br><span class=\"line\">        d.<span class=\"property\">width</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>;</span><br><span class=\"line\">        d.<span class=\"property\">height</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>;</span><br><span class=\"line\">        d.<span class=\"property\">style</span>.<span class=\"property\">cssText</span> = <span class=\"string\">&quot;position:fixed;top:0;left:0;pointer-events:none;z-index:999999&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;resize&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            d.<span class=\"property\">width</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>;</span><br><span class=\"line\">            d.<span class=\"property\">height</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(d);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = d.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = [];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> k = <span class=\"number\">120</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> f = k;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> p = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        o.<span class=\"property\">shake</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">l</span>(<span class=\"params\">r, q</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * (q - r) + r</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">m</span>(<span class=\"params\">r</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o.<span class=\"property\">colorful</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> q = <span class=\"title function_\">l</span>(<span class=\"number\">0</span>, <span class=\"number\">360</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;hsla(&quot;</span> + <span class=\"title function_\">l</span>(q - <span class=\"number\">10</span>, q + <span class=\"number\">10</span>) + <span class=\"string\">&quot;, 100%, &quot;</span> + <span class=\"title function_\">l</span>(<span class=\"number\">50</span>, <span class=\"number\">80</span>) + <span class=\"string\">&quot;%, &quot;</span> + <span class=\"number\">1</span> + <span class=\"string\">&quot;)&quot;</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"variable language_\">window</span>.<span class=\"title function_\">getComputedStyle</span>(r).<span class=\"property\">color</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">e</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> t = <span class=\"variable language_\">document</span>.<span class=\"property\">activeElement</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> v;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t.<span class=\"property\">tagName</span> === <span class=\"string\">&quot;TEXTAREA&quot;</span>  (t.<span class=\"property\">tagName</span> === <span class=\"string\">&quot;INPUT&quot;</span> &amp;&amp; t.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&quot;type&quot;</span>) === <span class=\"string\">&quot;text&quot;</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> u = <span class=\"title function_\">b</span>(<span class=\"number\">1</span>)(t, t.<span class=\"property\">selectionStart</span>);</span><br><span class=\"line\">                v = t.<span class=\"title function_\">getBoundingClientRect</span>();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                    <span class=\"attr\">x</span>: u.<span class=\"property\">left</span> + v.<span class=\"property\">left</span>,</span><br><span class=\"line\">                    <span class=\"attr\">y</span>: u.<span class=\"property\">top</span> + v.<span class=\"property\">top</span>,</span><br><span class=\"line\">                    <span class=\"attr\">color</span>: <span class=\"title function_\">m</span>(t)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> s = <span class=\"variable language_\">window</span>.<span class=\"title function_\">getSelection</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.<span class=\"property\">rangeCount</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> q = s.<span class=\"title function_\">getRangeAt</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> r = q.<span class=\"property\">startContainer</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (r.<span class=\"property\">nodeType</span> === <span class=\"variable language_\">document</span>.<span class=\"property\">TEXT_NODE</span>) &#123;</span><br><span class=\"line\">                    r = r.<span class=\"property\">parentNode</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                v = q.<span class=\"title function_\">getBoundingClientRect</span>();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                    <span class=\"attr\">x</span>: v.<span class=\"property\">left</span>,</span><br><span class=\"line\">                    <span class=\"attr\">y</span>: v.<span class=\"property\">top</span>,</span><br><span class=\"line\">                    <span class=\"attr\">color</span>: <span class=\"title function_\">m</span>(r)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">x</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"attr\">y</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"attr\">color</span>: <span class=\"string\">&quot;transparent&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">h</span>(<span class=\"params\">q, s, r</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">x</span>: q,</span><br><span class=\"line\">                <span class=\"attr\">y</span>: s,</span><br><span class=\"line\">                <span class=\"attr\">alpha</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">color</span>: r,</span><br><span class=\"line\">                <span class=\"attr\">velocity</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">x</span>: -<span class=\"number\">1</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">2</span>,</span><br><span class=\"line\">                    <span class=\"attr\">y</span>: -<span class=\"number\">3.5</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">2</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">o</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> t = <span class=\"title function_\">e</span>();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> s = <span class=\"number\">5</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">10</span>);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (s--) &#123;</span><br><span class=\"line\">                n[j] = <span class=\"title function_\">h</span>(t.<span class=\"property\">x</span>, t.<span class=\"property\">y</span>, t.<span class=\"property\">color</span>);</span><br><span class=\"line\">                j = (j + <span class=\"number\">1</span>) % <span class=\"number\">500</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            f = k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!p) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">requestAnimationFrame</span>(i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o.<span class=\"property\">shake</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> r = <span class=\"number\">1</span> + <span class=\"number\">2</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> q = r * (<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() &gt; <span class=\"number\">0.5</span> ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> u = r * (<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() &gt; <span class=\"number\">0.5</span> ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">style</span>.<span class=\"property\">marginLeft</span> = q + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">                <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">style</span>.<span class=\"property\">marginTop</span> = u + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">                <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">style</span>.<span class=\"property\">marginLeft</span> = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">style</span>.<span class=\"property\">marginTop</span> = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">                &#125;, <span class=\"number\">75</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        o.<span class=\"property\">colorful</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">i</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">requestAnimationFrame</span>(i);</span><br><span class=\"line\">                f--;</span><br><span class=\"line\">                p = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                p = <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            a.<span class=\"title function_\">clearRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, d.<span class=\"property\">width</span>, d.<span class=\"property\">height</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> q = <span class=\"number\">0</span>; q &lt; n.<span class=\"property\">length</span>; ++q) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> r = n[q];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (r.<span class=\"property\">alpha</span> &lt;= <span class=\"number\">0.1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                r.<span class=\"property\">velocity</span>.<span class=\"property\">y</span> += <span class=\"number\">0.075</span>;</span><br><span class=\"line\">                r.<span class=\"property\">x</span> += r.<span class=\"property\">velocity</span>.<span class=\"property\">x</span>;</span><br><span class=\"line\">                r.<span class=\"property\">y</span> += r.<span class=\"property\">velocity</span>.<span class=\"property\">y</span>;</span><br><span class=\"line\">                r.<span class=\"property\">alpha</span> *= <span class=\"number\">0.96</span>;</span><br><span class=\"line\">                a.<span class=\"property\">globalAlpha</span> = r.<span class=\"property\">alpha</span>;</span><br><span class=\"line\">                a.<span class=\"property\">fillStyle</span> = r.<span class=\"property\">color</span>;</span><br><span class=\"line\">                a.<span class=\"title function_\">fillRect</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(r.<span class=\"property\">x</span> - <span class=\"number\">1.5</span>), <span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(r.<span class=\"property\">y</span> - <span class=\"number\">1.5</span>), <span class=\"number\">3</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">requestAnimationFrame</span>(i);</span><br><span class=\"line\">        c.<span class=\"property\">exports</span> = o</span><br><span class=\"line\">    &#125;, <span class=\"keyword\">function</span>(<span class=\"params\">b, a</span>) &#123;</span><br><span class=\"line\">        (<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> d = [<span class=\"string\">&quot;direction&quot;</span>, <span class=\"string\">&quot;boxSizing&quot;</span>, <span class=\"string\">&quot;width&quot;</span>, <span class=\"string\">&quot;height&quot;</span>, <span class=\"string\">&quot;overflowX&quot;</span>, <span class=\"string\">&quot;overflowY&quot;</span>, <span class=\"string\">&quot;borderTopWidth&quot;</span>, <span class=\"string\">&quot;borderRightWidth&quot;</span>, <span class=\"string\">&quot;borderBottomWidth&quot;</span>, <span class=\"string\">&quot;borderLeftWidth&quot;</span>, <span class=\"string\">&quot;borderStyle&quot;</span>, <span class=\"string\">&quot;paddingTop&quot;</span>, <span class=\"string\">&quot;paddingRight&quot;</span>, <span class=\"string\">&quot;paddingBottom&quot;</span>, <span class=\"string\">&quot;paddingLeft&quot;</span>, <span class=\"string\">&quot;fontStyle&quot;</span>, <span class=\"string\">&quot;fontVariant&quot;</span>, <span class=\"string\">&quot;fontWeight&quot;</span>, <span class=\"string\">&quot;fontStretch&quot;</span>, <span class=\"string\">&quot;fontSize&quot;</span>, <span class=\"string\">&quot;fontSizeAdjust&quot;</span>, <span class=\"string\">&quot;lineHeight&quot;</span>, <span class=\"string\">&quot;fontFamily&quot;</span>, <span class=\"string\">&quot;textAlign&quot;</span>, <span class=\"string\">&quot;textTransform&quot;</span>, <span class=\"string\">&quot;textIndent&quot;</span>, <span class=\"string\">&quot;textDecoration&quot;</span>, <span class=\"string\">&quot;letterSpacing&quot;</span>, <span class=\"string\">&quot;wordSpacing&quot;</span>, <span class=\"string\">&quot;tabSize&quot;</span>, <span class=\"string\">&quot;MozTabSize&quot;</span>];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> e = <span class=\"variable language_\">window</span>.<span class=\"property\">mozInnerScreenX</span> != <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\">k, l, o</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> h = o &amp;&amp; o.<span class=\"property\">debug</span>  <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (h) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> i = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#input-textarea-caret-position-mirror-div&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (i) &#123;</span><br><span class=\"line\">                        i.<span class=\"property\">parentNode</span>.<span class=\"title function_\">removeChild</span>(i)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> f = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">                f.<span class=\"property\">id</span> = <span class=\"string\">&quot;input-textarea-caret-position-mirror-div&quot;</span>;</span><br><span class=\"line\">                <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(f);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> g = f.<span class=\"property\">style</span>;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> j = <span class=\"variable language_\">window</span>.<span class=\"property\">getComputedStyle</span> ? <span class=\"title function_\">getComputedStyle</span>(k) : k.<span class=\"property\">currentStyle</span>;</span><br><span class=\"line\">                g.<span class=\"property\">whiteSpace</span> = <span class=\"string\">&quot;pre-wrap&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (k.<span class=\"property\">nodeName</span> !== <span class=\"string\">&quot;INPUT&quot;</span>) &#123;</span><br><span class=\"line\">                    g.<span class=\"property\">wordWrap</span> = <span class=\"string\">&quot;break-word&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                g.<span class=\"property\">position</span> = <span class=\"string\">&quot;absolute&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!h) &#123;</span><br><span class=\"line\">                    g.<span class=\"property\">visibility</span> = <span class=\"string\">&quot;hidden&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                d.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">p</span>) &#123;</span><br><span class=\"line\">                    g[p] = j[p]</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (k.<span class=\"property\">scrollHeight</span> &gt; <span class=\"built_in\">parseInt</span>(j.<span class=\"property\">height</span>)) &#123;</span><br><span class=\"line\">                        g.<span class=\"property\">overflowY</span> = <span class=\"string\">&quot;scroll&quot;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    g.<span class=\"property\">overflow</span> = <span class=\"string\">&quot;hidden&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                f.<span class=\"property\">textContent</span> = k.<span class=\"property\">value</span>.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, l);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (k.<span class=\"property\">nodeName</span> === <span class=\"string\">&quot;INPUT&quot;</span>) &#123;</span><br><span class=\"line\">                    f.<span class=\"property\">textContent</span> = f.<span class=\"property\">textContent</span>.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\s/g</span>, <span class=\"string\">&quot;\\u00a0&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> n = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;span&quot;</span>);</span><br><span class=\"line\">                n.<span class=\"property\">textContent</span> = k.<span class=\"property\">value</span>.<span class=\"title function_\">substring</span>(l)  <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">                f.<span class=\"title function_\">appendChild</span>(n);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> m = &#123;</span><br><span class=\"line\">                    <span class=\"attr\">top</span>: n.<span class=\"property\">offsetTop</span> + <span class=\"built_in\">parseInt</span>(j[<span class=\"string\">&quot;borderTopWidth&quot;</span>]),</span><br><span class=\"line\">                    <span class=\"attr\">left</span>: n.<span class=\"property\">offsetLeft</span> + <span class=\"built_in\">parseInt</span>(j[<span class=\"string\">&quot;borderLeftWidth&quot;</span>])</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (h) &#123;</span><br><span class=\"line\">                    n.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = <span class=\"string\">&quot;#aaa&quot;</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(f)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> m</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> b != <span class=\"string\">&quot;undefined&quot;</span> &amp;&amp; <span class=\"keyword\">typeof</span> b.<span class=\"property\">exports</span> != <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">                b.<span class=\"property\">exports</span> = c</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">window</span>.<span class=\"property\">getCaretCoordinates</span> = c</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;())</span><br><span class=\"line\">    &#125;])</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable constant_\">POWERMODE</span>.<span class=\"property\">colorful</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable constant_\">POWERMODE</span>.<span class=\"property\">shake</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;input&quot;</span>, <span class=\"variable constant_\">POWERMODE</span>);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>粘贴到页面的 <code>页尾脚本</code> 即可生效。</p>\n","site":{"data":{}},"excerpt":"<p>效果图： <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/msedge_Q0bNhsbKDi.gif\" alt=\"msedge_Q0bNhsbKDi\"></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/msedge_sO60f822SY.gif\" alt=\"msedge_sO60f822SY\"></p>\n<p>源码：</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">(<span class=\"keyword\">function</span> <span class=\"title function_\">webpackUniversalModuleDefinition</span>(<span class=\"params\">a, b</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">exports</span> === <span class=\"string\">&quot;object&quot;</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"variable language_\">module</span> === <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">b</span>()</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">&quot;function&quot;</span> &amp;&amp; define.<span class=\"property\">amd</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">define</span>([], b)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">exports</span> === <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">exports</span>[<span class=\"string\">&quot;POWERMODE&quot;</span>] = <span class=\"title function_\">b</span>()</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                a[<span class=\"string\">&quot;POWERMODE&quot;</span>] = <span class=\"title function_\">b</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)(<span class=\"variable language_\">this</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">function</span>(<span class=\"params\">a</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> b = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\">e</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b[e]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> b[e].<span class=\"property\">exports</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> d = b[e] = &#123;</span><br><span class=\"line\">                <span class=\"attr\">exports</span>: &#123;&#125;,</span><br><span class=\"line\">                <span class=\"attr\">id</span>: e,</span><br><span class=\"line\">                <span class=\"attr\">loaded</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            a[e].<span class=\"title function_\">call</span>(d.<span class=\"property\">exports</span>, d, d.<span class=\"property\">exports</span>, c);</span><br><span class=\"line\">            d.<span class=\"property\">loaded</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> d.<span class=\"property\">exports</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c.<span class=\"property\">m</span> = a;</span><br><span class=\"line\">        c.<span class=\"property\">c</span> = b;</span><br><span class=\"line\">        c.<span class=\"property\">p</span> = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">c</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;)([<span class=\"keyword\">function</span>(<span class=\"params\">c, g, b</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> d = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;canvas&quot;</span>);</span><br><span class=\"line\">        d.<span class=\"property\">width</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>;</span><br><span class=\"line\">        d.<span class=\"property\">height</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span>;</span><br><span class=\"line\">        d.<span class=\"property\">style</span>.<span class=\"property\">cssText</span> = <span class=\"string\">&quot;position:fixed;top:0;left:0;pointer-events:none;z-index:999999&quot;</span>;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;resize&quot;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            d.<span class=\"property\">width</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">innerWidth</span>;</span><br><span class=\"line\">            d.<span class=\"property\">height</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">innerHeight</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(d);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = d.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> n = [];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> k = <span class=\"number\">120</span>;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> f = k;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> p = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        o.<span class=\"property\">shake</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">l</span>(<span class=\"params\">r, q</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * (q - r) + r</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">m</span>(<span class=\"params\">r</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o.<span class=\"property\">colorful</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> q = <span class=\"title function_\">l</span>(<span class=\"number\">0</span>, <span class=\"number\">360</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"string\">&quot;hsla(&quot;</span> + <span class=\"title function_\">l</span>(q - <span class=\"number\">10</span>, q + <span class=\"number\">10</span>) + <span class=\"string\">&quot;, 100%, &quot;</span> + <span class=\"title function_\">l</span>(<span class=\"number\">50</span>, <span class=\"number\">80</span>) + <span class=\"string\">&quot;%, &quot;</span> + <span class=\"number\">1</span> + <span class=\"string\">&quot;)&quot;</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"variable language_\">window</span>.<span class=\"title function_\">getComputedStyle</span>(r).<span class=\"property\">color</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">e</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> t = <span class=\"variable language_\">document</span>.<span class=\"property\">activeElement</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> v;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (t.<span class=\"property\">tagName</span> === <span class=\"string\">&quot;TEXTAREA&quot;</span>  (t.<span class=\"property\">tagName</span> === <span class=\"string\">&quot;INPUT&quot;</span> &amp;&amp; t.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&quot;type&quot;</span>) === <span class=\"string\">&quot;text&quot;</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> u = <span class=\"title function_\">b</span>(<span class=\"number\">1</span>)(t, t.<span class=\"property\">selectionStart</span>);</span><br><span class=\"line\">                v = t.<span class=\"title function_\">getBoundingClientRect</span>();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                    <span class=\"attr\">x</span>: u.<span class=\"property\">left</span> + v.<span class=\"property\">left</span>,</span><br><span class=\"line\">                    <span class=\"attr\">y</span>: u.<span class=\"property\">top</span> + v.<span class=\"property\">top</span>,</span><br><span class=\"line\">                    <span class=\"attr\">color</span>: <span class=\"title function_\">m</span>(t)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> s = <span class=\"variable language_\">window</span>.<span class=\"title function_\">getSelection</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s.<span class=\"property\">rangeCount</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> q = s.<span class=\"title function_\">getRangeAt</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> r = q.<span class=\"property\">startContainer</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (r.<span class=\"property\">nodeType</span> === <span class=\"variable language_\">document</span>.<span class=\"property\">TEXT_NODE</span>) &#123;</span><br><span class=\"line\">                    r = r.<span class=\"property\">parentNode</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                v = q.<span class=\"title function_\">getBoundingClientRect</span>();</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                    <span class=\"attr\">x</span>: v.<span class=\"property\">left</span>,</span><br><span class=\"line\">                    <span class=\"attr\">y</span>: v.<span class=\"property\">top</span>,</span><br><span class=\"line\">                    <span class=\"attr\">color</span>: <span class=\"title function_\">m</span>(r)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">x</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"attr\">y</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">                <span class=\"attr\">color</span>: <span class=\"string\">&quot;transparent&quot;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">h</span>(<span class=\"params\">q, s, r</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">                <span class=\"attr\">x</span>: q,</span><br><span class=\"line\">                <span class=\"attr\">y</span>: s,</span><br><span class=\"line\">                <span class=\"attr\">alpha</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">                <span class=\"attr\">color</span>: r,</span><br><span class=\"line\">                <span class=\"attr\">velocity</span>: &#123;</span><br><span class=\"line\">                    <span class=\"attr\">x</span>: -<span class=\"number\">1</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">2</span>,</span><br><span class=\"line\">                    <span class=\"attr\">y</span>: -<span class=\"number\">3.5</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">2</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">o</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> t = <span class=\"title function_\">e</span>();</span><br><span class=\"line\">            <span class=\"keyword\">var</span> s = <span class=\"number\">5</span> + <span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() * <span class=\"number\">10</span>);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (s--) &#123;</span><br><span class=\"line\">                n[j] = <span class=\"title function_\">h</span>(t.<span class=\"property\">x</span>, t.<span class=\"property\">y</span>, t.<span class=\"property\">color</span>);</span><br><span class=\"line\">                j = (j + <span class=\"number\">1</span>) % <span class=\"number\">500</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            f = k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!p) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">requestAnimationFrame</span>(i)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (o.<span class=\"property\">shake</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> r = <span class=\"number\">1</span> + <span class=\"number\">2</span> * <span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>();</span><br><span class=\"line\">                <span class=\"keyword\">var</span> q = r * (<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() &gt; <span class=\"number\">0.5</span> ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> u = r * (<span class=\"title class_\">Math</span>.<span class=\"title function_\">random</span>() &gt; <span class=\"number\">0.5</span> ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">style</span>.<span class=\"property\">marginLeft</span> = q + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">                <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">style</span>.<span class=\"property\">marginTop</span> = u + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">                <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">style</span>.<span class=\"property\">marginLeft</span> = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">                    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">style</span>.<span class=\"property\">marginTop</span> = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">                &#125;, <span class=\"number\">75</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        o.<span class=\"property\">colorful</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">i</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (f &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">requestAnimationFrame</span>(i);</span><br><span class=\"line\">                f--;</span><br><span class=\"line\">                p = <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                p = <span class=\"literal\">false</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            a.<span class=\"title function_\">clearRect</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, d.<span class=\"property\">width</span>, d.<span class=\"property\">height</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> q = <span class=\"number\">0</span>; q &lt; n.<span class=\"property\">length</span>; ++q) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> r = n[q];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (r.<span class=\"property\">alpha</span> &lt;= <span class=\"number\">0.1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                r.<span class=\"property\">velocity</span>.<span class=\"property\">y</span> += <span class=\"number\">0.075</span>;</span><br><span class=\"line\">                r.<span class=\"property\">x</span> += r.<span class=\"property\">velocity</span>.<span class=\"property\">x</span>;</span><br><span class=\"line\">                r.<span class=\"property\">y</span> += r.<span class=\"property\">velocity</span>.<span class=\"property\">y</span>;</span><br><span class=\"line\">                r.<span class=\"property\">alpha</span> *= <span class=\"number\">0.96</span>;</span><br><span class=\"line\">                a.<span class=\"property\">globalAlpha</span> = r.<span class=\"property\">alpha</span>;</span><br><span class=\"line\">                a.<span class=\"property\">fillStyle</span> = r.<span class=\"property\">color</span>;</span><br><span class=\"line\">                a.<span class=\"title function_\">fillRect</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(r.<span class=\"property\">x</span> - <span class=\"number\">1.5</span>), <span class=\"title class_\">Math</span>.<span class=\"title function_\">round</span>(r.<span class=\"property\">y</span> - <span class=\"number\">1.5</span>), <span class=\"number\">3</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">requestAnimationFrame</span>(i);</span><br><span class=\"line\">        c.<span class=\"property\">exports</span> = o</span><br><span class=\"line\">    &#125;, <span class=\"keyword\">function</span>(<span class=\"params\">b, a</span>) &#123;</span><br><span class=\"line\">        (<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> d = [<span class=\"string\">&quot;direction&quot;</span>, <span class=\"string\">&quot;boxSizing&quot;</span>, <span class=\"string\">&quot;width&quot;</span>, <span class=\"string\">&quot;height&quot;</span>, <span class=\"string\">&quot;overflowX&quot;</span>, <span class=\"string\">&quot;overflowY&quot;</span>, <span class=\"string\">&quot;borderTopWidth&quot;</span>, <span class=\"string\">&quot;borderRightWidth&quot;</span>, <span class=\"string\">&quot;borderBottomWidth&quot;</span>, <span class=\"string\">&quot;borderLeftWidth&quot;</span>, <span class=\"string\">&quot;borderStyle&quot;</span>, <span class=\"string\">&quot;paddingTop&quot;</span>, <span class=\"string\">&quot;paddingRight&quot;</span>, <span class=\"string\">&quot;paddingBottom&quot;</span>, <span class=\"string\">&quot;paddingLeft&quot;</span>, <span class=\"string\">&quot;fontStyle&quot;</span>, <span class=\"string\">&quot;fontVariant&quot;</span>, <span class=\"string\">&quot;fontWeight&quot;</span>, <span class=\"string\">&quot;fontStretch&quot;</span>, <span class=\"string\">&quot;fontSize&quot;</span>, <span class=\"string\">&quot;fontSizeAdjust&quot;</span>, <span class=\"string\">&quot;lineHeight&quot;</span>, <span class=\"string\">&quot;fontFamily&quot;</span>, <span class=\"string\">&quot;textAlign&quot;</span>, <span class=\"string\">&quot;textTransform&quot;</span>, <span class=\"string\">&quot;textIndent&quot;</span>, <span class=\"string\">&quot;textDecoration&quot;</span>, <span class=\"string\">&quot;letterSpacing&quot;</span>, <span class=\"string\">&quot;wordSpacing&quot;</span>, <span class=\"string\">&quot;tabSize&quot;</span>, <span class=\"string\">&quot;MozTabSize&quot;</span>];</span><br><span class=\"line\">            <span class=\"keyword\">var</span> e = <span class=\"variable language_\">window</span>.<span class=\"property\">mozInnerScreenX</span> != <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">function</span> <span class=\"title function_\">c</span>(<span class=\"params\">k, l, o</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> h = o &amp;&amp; o.<span class=\"property\">debug</span>  <span class=\"literal\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (h) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> i = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&quot;#input-textarea-caret-position-mirror-div&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (i) &#123;</span><br><span class=\"line\">                        i.<span class=\"property\">parentNode</span>.<span class=\"title function_\">removeChild</span>(i)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> f = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">                f.<span class=\"property\">id</span> = <span class=\"string\">&quot;input-textarea-caret-position-mirror-div&quot;</span>;</span><br><span class=\"line\">                <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">appendChild</span>(f);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> g = f.<span class=\"property\">style</span>;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> j = <span class=\"variable language_\">window</span>.<span class=\"property\">getComputedStyle</span> ? <span class=\"title function_\">getComputedStyle</span>(k) : k.<span class=\"property\">currentStyle</span>;</span><br><span class=\"line\">                g.<span class=\"property\">whiteSpace</span> = <span class=\"string\">&quot;pre-wrap&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (k.<span class=\"property\">nodeName</span> !== <span class=\"string\">&quot;INPUT&quot;</span>) &#123;</span><br><span class=\"line\">                    g.<span class=\"property\">wordWrap</span> = <span class=\"string\">&quot;break-word&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                g.<span class=\"property\">position</span> = <span class=\"string\">&quot;absolute&quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!h) &#123;</span><br><span class=\"line\">                    g.<span class=\"property\">visibility</span> = <span class=\"string\">&quot;hidden&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                d.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span>(<span class=\"params\">p</span>) &#123;</span><br><span class=\"line\">                    g[p] = j[p]</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (k.<span class=\"property\">scrollHeight</span> &gt; <span class=\"built_in\">parseInt</span>(j.<span class=\"property\">height</span>)) &#123;</span><br><span class=\"line\">                        g.<span class=\"property\">overflowY</span> = <span class=\"string\">&quot;scroll&quot;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    g.<span class=\"property\">overflow</span> = <span class=\"string\">&quot;hidden&quot;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                f.<span class=\"property\">textContent</span> = k.<span class=\"property\">value</span>.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, l);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (k.<span class=\"property\">nodeName</span> === <span class=\"string\">&quot;INPUT&quot;</span>) &#123;</span><br><span class=\"line\">                    f.<span class=\"property\">textContent</span> = f.<span class=\"property\">textContent</span>.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/\\s/g</span>, <span class=\"string\">&quot;\\u00a0&quot;</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> n = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;span&quot;</span>);</span><br><span class=\"line\">                n.<span class=\"property\">textContent</span> = k.<span class=\"property\">value</span>.<span class=\"title function_\">substring</span>(l)  <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">                f.<span class=\"title function_\">appendChild</span>(n);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> m = &#123;</span><br><span class=\"line\">                    <span class=\"attr\">top</span>: n.<span class=\"property\">offsetTop</span> + <span class=\"built_in\">parseInt</span>(j[<span class=\"string\">&quot;borderTopWidth&quot;</span>]),</span><br><span class=\"line\">                    <span class=\"attr\">left</span>: n.<span class=\"property\">offsetLeft</span> + <span class=\"built_in\">parseInt</span>(j[<span class=\"string\">&quot;borderLeftWidth&quot;</span>])</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (h) &#123;</span><br><span class=\"line\">                    n.<span class=\"property\">style</span>.<span class=\"property\">backgroundColor</span> = <span class=\"string\">&quot;#aaa&quot;</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">removeChild</span>(f)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> m</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> b != <span class=\"string\">&quot;undefined&quot;</span> &amp;&amp; <span class=\"keyword\">typeof</span> b.<span class=\"property\">exports</span> != <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">                b.<span class=\"property\">exports</span> = c</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">window</span>.<span class=\"property\">getCaretCoordinates</span> = c</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;())</span><br><span class=\"line\">    &#125;])</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable constant_\">POWERMODE</span>.<span class=\"property\">colorful</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable constant_\">POWERMODE</span>.<span class=\"property\">shake</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;input&quot;</span>, <span class=\"variable constant_\">POWERMODE</span>);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>粘贴到页面的 <code>页尾脚本</code> 即可生效。</p>"},{"title":"网站性能测试","id":"598","date":"2022-03-12T06:26:38.000Z","_content":"\n## 使用webbench测试网站，结果网站被自己搞挂了\n\n这几天一直想测试自己的网站性能，网上搜了一下教程，发现linux下有个webbench可以用来简单测试，挺好用的，就是我的破站承受不了...\n\n首先按照教程 👉[参考](https://www.cnblogs.com/fightformylife/p/4140329.html)\n\n先是测试150个客户，60秒内完成。结果看样子我的网站还不错？能承受150个并发访问✌\n\n![image-20220312141625684](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141625684.png)\n<!-- more -->\n我觉得七百个应该小破站受不了了,然后......居然???还可以???\n\n![image-20220312141525635](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141525635.png)\n\n然后是模拟客户 1000个 ，时间 60秒，开始有failed了\n\n![image-20220312141414456](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141414456.png)\n\n这时候我再网页上访问我的主页,出问题了...\n\n![image-20220312141258954](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141258954.png)\n\n上服务器上面看我的数据库\n\n![image-20220312141959324](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141959324.png)\n\n果然数据库被搞挂了....\n\n最后，重启一下mysql服务器就好了\n\n### 总结：\n\n其实我的小破站还是小破站，各位大佬别拿我的小破站进行测试，千万别搞什么DDos、SQL注入之类的啊，球球了🙏🙏🙏\n<!-- more -->\n不过有个缺点就是不支持HTTPS","source":"_posts/网站性能测试.md","raw":"---\ntitle: 网站性能测试\ntags:\n  - C\n  - Linux\n  - MySQL\nid: '598'\ncategories:\n  - - 专业技术\ndate: 2022-03-12 14:26:38\n---\n\n## 使用webbench测试网站，结果网站被自己搞挂了\n\n这几天一直想测试自己的网站性能，网上搜了一下教程，发现linux下有个webbench可以用来简单测试，挺好用的，就是我的破站承受不了...\n\n首先按照教程 👉[参考](https://www.cnblogs.com/fightformylife/p/4140329.html)\n\n先是测试150个客户，60秒内完成。结果看样子我的网站还不错？能承受150个并发访问✌\n\n![image-20220312141625684](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141625684.png)\n<!-- more -->\n我觉得七百个应该小破站受不了了,然后......居然???还可以???\n\n![image-20220312141525635](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141525635.png)\n\n然后是模拟客户 1000个 ，时间 60秒，开始有failed了\n\n![image-20220312141414456](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141414456.png)\n\n这时候我再网页上访问我的主页,出问题了...\n\n![image-20220312141258954](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141258954.png)\n\n上服务器上面看我的数据库\n\n![image-20220312141959324](https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141959324.png)\n\n果然数据库被搞挂了....\n\n最后，重启一下mysql服务器就好了\n\n### 总结：\n\n其实我的小破站还是小破站，各位大佬别拿我的小破站进行测试，千万别搞什么DDos、SQL注入之类的啊，球球了🙏🙏🙏\n<!-- more -->\n不过有个缺点就是不支持HTTPS","slug":"网站性能测试","published":1,"updated":"2024-03-12T02:24:18.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltnrar5a002rjry15mhg8ti1","content":"<h2 id=\"使用webbench测试网站，结果网站被自己搞挂了\"><a href=\"#使用webbench测试网站，结果网站被自己搞挂了\" class=\"headerlink\" title=\"使用webbench测试网站，结果网站被自己搞挂了\"></a>使用webbench测试网站，结果网站被自己搞挂了</h2><p>这几天一直想测试自己的网站性能，网上搜了一下教程，发现linux下有个webbench可以用来简单测试，挺好用的，就是我的破站承受不了…</p>\n<p>首先按照教程 👉<a href=\"https://www.cnblogs.com/fightformylife/p/4140329.html\">参考</a></p>\n<p>先是测试150个客户，60秒内完成。结果看样子我的网站还不错？能承受150个并发访问✌</p>\n<p><img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141625684.png\" alt=\"image-20220312141625684\"></p>\n<span id=\"more\"></span>\n<p>我觉得七百个应该小破站受不了了,然后……居然???还可以???</p>\n<p><img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141525635.png\" alt=\"image-20220312141525635\"></p>\n<p>然后是模拟客户 1000个 ，时间 60秒，开始有failed了</p>\n<p><img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141414456.png\" alt=\"image-20220312141414456\"></p>\n<p>这时候我再网页上访问我的主页,出问题了…</p>\n<p><img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141258954.png\" alt=\"image-20220312141258954\"></p>\n<p>上服务器上面看我的数据库</p>\n<p><img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141959324.png\" alt=\"image-20220312141959324\"></p>\n<p>果然数据库被搞挂了….</p>\n<p>最后，重启一下mysql服务器就好了</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>其实我的小破站还是小破站，各位大佬别拿我的小破站进行测试，千万别搞什么DDos、SQL注入之类的啊，球球了🙏🙏🙏</p>\n<!-- more -->\n<p>不过有个缺点就是不支持HTTPS</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"使用webbench测试网站，结果网站被自己搞挂了\"><a href=\"#使用webbench测试网站，结果网站被自己搞挂了\" class=\"headerlink\" title=\"使用webbench测试网站，结果网站被自己搞挂了\"></a>使用webbench测试网站，结果网站被自己搞挂了</h2><p>这几天一直想测试自己的网站性能，网上搜了一下教程，发现linux下有个webbench可以用来简单测试，挺好用的，就是我的破站承受不了…</p>\n<p>首先按照教程 👉<a href=\"https://www.cnblogs.com/fightformylife/p/4140329.html\">参考</a></p>\n<p>先是测试150个客户，60秒内完成。结果看样子我的网站还不错？能承受150个并发访问✌</p>\n<p><img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141625684.png\" alt=\"image-20220312141625684\"></p>","more":"<p>我觉得七百个应该小破站受不了了,然后……居然???还可以???</p>\n<p><img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141525635.png\" alt=\"image-20220312141525635\"></p>\n<p>然后是模拟客户 1000个 ，时间 60秒，开始有failed了</p>\n<p><img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141414456.png\" alt=\"image-20220312141414456\"></p>\n<p>这时候我再网页上访问我的主页,出问题了…</p>\n<p><img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141258954.png\" alt=\"image-20220312141258954\"></p>\n<p>上服务器上面看我的数据库</p>\n<p><img src=\"https://gitee.com/wang-yuanzhao/personal-drawing-bed/raw/master/images/image-20220312141959324.png\" alt=\"image-20220312141959324\"></p>\n<p>果然数据库被搞挂了….</p>\n<p>最后，重启一下mysql服务器就好了</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>其实我的小破站还是小破站，各位大佬别拿我的小破站进行测试，千万别搞什么DDos、SQL注入之类的啊，球球了🙏🙏🙏</p>\n<!-- more -->\n<p>不过有个缺点就是不支持HTTPS</p>"},{"title":"解决Argon主题预览时只能点击标题进入文章","id":"835","date":"2022-04-04T10:20:46.000Z","_content":"\n###### 找到自己相对应文章列表卡片布局。比如我的为布局1\n\n![image-20220404181846323](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404181846323.png)\n\n###### 进入不同的preview.php文件。\n\n![image-20220404181432492](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404181432492.png)\n\n###### 找到 class=\"post-content\", 在后面添加：\n\n```js\nonclick=\"window.location.href='<?php the_permalink(); ?>'\" style=\"cursor: pointer\"\n```","source":"_posts/解决argon主题预览时只能点击标题进入文章.md","raw":"---\ntitle: 解决Argon主题预览时只能点击标题进入文章\ntags:\n  - Argon\n  - html\nid: '835'\ncategories:\n  - - 学习笔记\n  - - 文章\ndate: 2022-04-04 18:20:46\n---\n\n###### 找到自己相对应文章列表卡片布局。比如我的为布局1\n\n![image-20220404181846323](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404181846323.png)\n\n###### 进入不同的preview.php文件。\n\n![image-20220404181432492](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404181432492.png)\n\n###### 找到 class=\"post-content\", 在后面添加：\n\n```js\nonclick=\"window.location.href='<?php the_permalink(); ?>'\" style=\"cursor: pointer\"\n```","slug":"解决argon主题预览时只能点击标题进入文章","published":1,"updated":"2024-03-12T10:42:53.944Z","_id":"cltnrar5b002vjry1dzce8dw2","comments":1,"layout":"post","photos":[],"link":"","content":"<h6 id=\"找到自己相对应文章列表卡片布局。比如我的为布局1\"><a href=\"#找到自己相对应文章列表卡片布局。比如我的为布局1\" class=\"headerlink\" title=\"找到自己相对应文章列表卡片布局。比如我的为布局1\"></a>找到自己相对应文章列表卡片布局。比如我的为布局1</h6><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404181846323.png\" alt=\"image-20220404181846323\"></p>\n<h6 id=\"进入不同的preview-php文件。\"><a href=\"#进入不同的preview-php文件。\" class=\"headerlink\" title=\"进入不同的preview.php文件。\"></a>进入不同的preview.php文件。</h6><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404181432492.png\" alt=\"image-20220404181432492\"></p>\n<h6 id=\"找到-class-”post-content”-在后面添加：\"><a href=\"#找到-class-”post-content”-在后面添加：\" class=\"headerlink\" title=\"找到 class=”post-content”, 在后面添加：\"></a>找到 class=”post-content”, 在后面添加：</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onclick=<span class=\"string\">&quot;window.location.href=&#x27;&lt;?php the_permalink(); ?&gt;&#x27;&quot;</span> style=<span class=\"string\">&quot;cursor: pointer&quot;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h6 id=\"找到自己相对应文章列表卡片布局。比如我的为布局1\"><a href=\"#找到自己相对应文章列表卡片布局。比如我的为布局1\" class=\"headerlink\" title=\"找到自己相对应文章列表卡片布局。比如我的为布局1\"></a>找到自己相对应文章列表卡片布局。比如我的为布局1</h6><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404181846323.png\" alt=\"image-20220404181846323\"></p>\n<h6 id=\"进入不同的preview-php文件。\"><a href=\"#进入不同的preview-php文件。\" class=\"headerlink\" title=\"进入不同的preview.php文件。\"></a>进入不同的preview.php文件。</h6><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404181432492.png\" alt=\"image-20220404181432492\"></p>\n<h6 id=\"找到-class-”post-content”-在后面添加：\"><a href=\"#找到-class-”post-content”-在后面添加：\" class=\"headerlink\" title=\"找到 class=”post-content”, 在后面添加：\"></a>找到 class=”post-content”, 在后面添加：</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onclick=<span class=\"string\">&quot;window.location.href=&#x27;&lt;?php the_permalink(); ?&gt;&#x27;&quot;</span> style=<span class=\"string\">&quot;cursor: pointer&quot;</span></span><br></pre></td></tr></table></figure>"},{"title":"解决Wordpress博客头像显示问题","id":"837","date":"2022-04-04T13:00:05.000Z","_content":"\n每次给别人回复的时候头像只能是邮箱的哈希值颜色以及昵称第一个字。这是由于WordPress 用的是 Gravatar 头像，在国内访问慢甚至访问不了。比如这个瑶瑶（狗头保命）\n\n![国内访问慢甚至访问不了](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%9B%BD%E5%86%85%E8%AE%BF%E9%97%AE%E6%85%A2%E7%94%9A%E8%87%B3%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86%E3%80%82%E6%AF%94%E5%A6%82%E8%BF%99%E4%B8%AA%E7%91%B6%E7%91%B6%EF%BC%88%E7%8B%97%E5%A4%B4%E4%BF%9D%E5%91%BD%EF%BC%89.png)\n\n所以这时候我们就需要Gravatar CDN服务。但是Argon主题给的Gravatar CDN都不太行，没事那就自己配置。这里我用的gravatar.loli.net(亲测有效)\n<!-- more -->\n打开 WordPress 目录 wp-includes/link-template.php。\n\n![image-20220404202254281](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/wp-includeslink-templatephp.png)\n\n查找 secure.gravatar.com 替换 gravatar.loli.net, 保存即可\n\n![image-20220404202254281](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E6%9B%BF%E6%8D%A2%20gravatar.loli.net,%20%E4%BF%9D%E5%AD%98%E5%8D%B3%E5%8F%AF.png)\n\n查看效果，发现这时候已经可以访问到Gravatar了, 速度很快\n\n![image-20220404201950118](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/GGGGGGGGGG.png)\n\n###### 分割线1\n\n* * *\n\n此外，如果我们没有在Gravatar上配置我们的站点头像，我们也还是使用不了评论头像。如果我们希望我们站点的头像使用的是自己的QQ头像或者别的图片，则可以这样配置（以配置qq头像为例）:\n\n打开Argon主题选项的评论者QQ头像。\n\n打开主题文件functions.php,在最后添加自己的qq邮箱头像。\n\n```\n// //修改默认头像\nadd_filter('avatar_defaults', 'default_avatar');\nfunction default_avatar($avatar_defaults) {\n$myavatar = 'https://q1.qlogo.cn/g?b=qq&nk=你的QQ号&s=640';//图文url路径，也可以更换为其他的\n$avatar_defaults[$myavatar] = \"图片描述\";//图片的描述名称\nreturn $avatar_defaults;\n}\n```\n\n![image-20220404204026091](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404204026091.png)\n\n保存，来到设置的讨论这里，发现添加上了。然后选择自定义的那个默认头像，保存（这里没显示，但是讨论页面是正常访问）\n\n![image-20220404204445953](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404204445953.png)\n\n效果, 可以看到头像链接已经指向QQ头像链接了。\n\n![image-20220404204755330](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404204755330.png)\n\n###### 分割线2\n\n* * *\n\nArgon主题输入QQ邮箱后依然不能访问QQ头像问题 继续打开主题文件functions.php，按住CTRL + F 查找 `$_POST['qq']`\n\n把目光转移到这里。\n\n![image-20220405005630268](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220405005630268.png)\n\n在`$_POST['qq']`后面我们给他替换为`$_POST['email']`。\n\n![image-20220405005707169](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220405005707169.png) 无论用户输入的邮箱是qq还是gmail或者是189等邮箱，在这里都会强制使用QQ号作为头像。（看个人需求配置） 此时，当用户在评论页面输入QQ邮箱就能正确获取QQ头像了","source":"_posts/解决博客头像无法显示问题.md","raw":"---\ntitle: 解决Wordpress博客头像显示问题\ntags:\n  - Argon\n  - WordPress\nid: '837'\ncategories:\n  - - 学习笔记\n  - - 文章\ndate: 2022-04-04 21:00:05\n---\n\n每次给别人回复的时候头像只能是邮箱的哈希值颜色以及昵称第一个字。这是由于WordPress 用的是 Gravatar 头像，在国内访问慢甚至访问不了。比如这个瑶瑶（狗头保命）\n\n![国内访问慢甚至访问不了](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%9B%BD%E5%86%85%E8%AE%BF%E9%97%AE%E6%85%A2%E7%94%9A%E8%87%B3%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86%E3%80%82%E6%AF%94%E5%A6%82%E8%BF%99%E4%B8%AA%E7%91%B6%E7%91%B6%EF%BC%88%E7%8B%97%E5%A4%B4%E4%BF%9D%E5%91%BD%EF%BC%89.png)\n\n所以这时候我们就需要Gravatar CDN服务。但是Argon主题给的Gravatar CDN都不太行，没事那就自己配置。这里我用的gravatar.loli.net(亲测有效)\n<!-- more -->\n打开 WordPress 目录 wp-includes/link-template.php。\n\n![image-20220404202254281](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/wp-includeslink-templatephp.png)\n\n查找 secure.gravatar.com 替换 gravatar.loli.net, 保存即可\n\n![image-20220404202254281](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E6%9B%BF%E6%8D%A2%20gravatar.loli.net,%20%E4%BF%9D%E5%AD%98%E5%8D%B3%E5%8F%AF.png)\n\n查看效果，发现这时候已经可以访问到Gravatar了, 速度很快\n\n![image-20220404201950118](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/GGGGGGGGGG.png)\n\n###### 分割线1\n\n* * *\n\n此外，如果我们没有在Gravatar上配置我们的站点头像，我们也还是使用不了评论头像。如果我们希望我们站点的头像使用的是自己的QQ头像或者别的图片，则可以这样配置（以配置qq头像为例）:\n\n打开Argon主题选项的评论者QQ头像。\n\n打开主题文件functions.php,在最后添加自己的qq邮箱头像。\n\n```\n// //修改默认头像\nadd_filter('avatar_defaults', 'default_avatar');\nfunction default_avatar($avatar_defaults) {\n$myavatar = 'https://q1.qlogo.cn/g?b=qq&nk=你的QQ号&s=640';//图文url路径，也可以更换为其他的\n$avatar_defaults[$myavatar] = \"图片描述\";//图片的描述名称\nreturn $avatar_defaults;\n}\n```\n\n![image-20220404204026091](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404204026091.png)\n\n保存，来到设置的讨论这里，发现添加上了。然后选择自定义的那个默认头像，保存（这里没显示，但是讨论页面是正常访问）\n\n![image-20220404204445953](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404204445953.png)\n\n效果, 可以看到头像链接已经指向QQ头像链接了。\n\n![image-20220404204755330](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404204755330.png)\n\n###### 分割线2\n\n* * *\n\nArgon主题输入QQ邮箱后依然不能访问QQ头像问题 继续打开主题文件functions.php，按住CTRL + F 查找 `$_POST['qq']`\n\n把目光转移到这里。\n\n![image-20220405005630268](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220405005630268.png)\n\n在`$_POST['qq']`后面我们给他替换为`$_POST['email']`。\n\n![image-20220405005707169](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220405005707169.png) 无论用户输入的邮箱是qq还是gmail或者是189等邮箱，在这里都会强制使用QQ号作为头像。（看个人需求配置） 此时，当用户在评论页面输入QQ邮箱就能正确获取QQ头像了","slug":"解决博客头像无法显示问题","published":1,"updated":"2024-03-12T10:42:49.484Z","_id":"cltnrar5c002yjry1653q7l20","comments":1,"layout":"post","photos":[],"link":"","content":"<p>每次给别人回复的时候头像只能是邮箱的哈希值颜色以及昵称第一个字。这是由于WordPress 用的是 Gravatar 头像，在国内访问慢甚至访问不了。比如这个瑶瑶（狗头保命）</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%9B%BD%E5%86%85%E8%AE%BF%E9%97%AE%E6%85%A2%E7%94%9A%E8%87%B3%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86%E3%80%82%E6%AF%94%E5%A6%82%E8%BF%99%E4%B8%AA%E7%91%B6%E7%91%B6%EF%BC%88%E7%8B%97%E5%A4%B4%E4%BF%9D%E5%91%BD%EF%BC%89.png\" alt=\"国内访问慢甚至访问不了\"></p>\n<p>所以这时候我们就需要Gravatar CDN服务。但是Argon主题给的Gravatar CDN都不太行，没事那就自己配置。这里我用的gravatar.loli.net(亲测有效)</p>\n<span id=\"more\"></span>\n<p>打开 WordPress 目录 wp-includes/link-template.php。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/wp-includeslink-templatephp.png\" alt=\"image-20220404202254281\"></p>\n<p>查找 secure.gravatar.com 替换 gravatar.loli.net, 保存即可</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E6%9B%BF%E6%8D%A2%20gravatar.loli.net,%20%E4%BF%9D%E5%AD%98%E5%8D%B3%E5%8F%AF.png\" alt=\"image-20220404202254281\"></p>\n<p>查看效果，发现这时候已经可以访问到Gravatar了, 速度很快</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/GGGGGGGGGG.png\" alt=\"image-20220404201950118\"></p>\n<h6 id=\"分割线1\"><a href=\"#分割线1\" class=\"headerlink\" title=\"分割线1\"></a>分割线1</h6><hr>\n<p>此外，如果我们没有在Gravatar上配置我们的站点头像，我们也还是使用不了评论头像。如果我们希望我们站点的头像使用的是自己的QQ头像或者别的图片，则可以这样配置（以配置qq头像为例）:</p>\n<p>打开Argon主题选项的评论者QQ头像。</p>\n<p>打开主题文件functions.php,在最后添加自己的qq邮箱头像。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// //修改默认头像</span><br><span class=\"line\">add_filter(&#x27;avatar_defaults&#x27;, &#x27;default_avatar&#x27;);</span><br><span class=\"line\">function default_avatar($avatar_defaults) &#123;</span><br><span class=\"line\">$myavatar = &#x27;https://q1.qlogo.cn/g?b=qq&amp;nk=你的QQ号&amp;s=640&#x27;;//图文url路径，也可以更换为其他的</span><br><span class=\"line\">$avatar_defaults[$myavatar] = &quot;图片描述&quot;;//图片的描述名称</span><br><span class=\"line\">return $avatar_defaults;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404204026091.png\" alt=\"image-20220404204026091\"></p>\n<p>保存，来到设置的讨论这里，发现添加上了。然后选择自定义的那个默认头像，保存（这里没显示，但是讨论页面是正常访问）</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404204445953.png\" alt=\"image-20220404204445953\"></p>\n<p>效果, 可以看到头像链接已经指向QQ头像链接了。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404204755330.png\" alt=\"image-20220404204755330\"></p>\n<h6 id=\"分割线2\"><a href=\"#分割线2\" class=\"headerlink\" title=\"分割线2\"></a>分割线2</h6><hr>\n<p>Argon主题输入QQ邮箱后依然不能访问QQ头像问题 继续打开主题文件functions.php，按住CTRL + F 查找 <code>$_POST[&#39;qq&#39;]</code></p>\n<p>把目光转移到这里。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220405005630268.png\" alt=\"image-20220405005630268\"></p>\n<p>在<code>$_POST[&#39;qq&#39;]</code>后面我们给他替换为<code>$_POST[&#39;email&#39;]</code>。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220405005707169.png\" alt=\"image-20220405005707169\"> 无论用户输入的邮箱是qq还是gmail或者是189等邮箱，在这里都会强制使用QQ号作为头像。（看个人需求配置） 此时，当用户在评论页面输入QQ邮箱就能正确获取QQ头像了</p>\n","site":{"data":{}},"excerpt":"<p>每次给别人回复的时候头像只能是邮箱的哈希值颜色以及昵称第一个字。这是由于WordPress 用的是 Gravatar 头像，在国内访问慢甚至访问不了。比如这个瑶瑶（狗头保命）</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E5%9B%BD%E5%86%85%E8%AE%BF%E9%97%AE%E6%85%A2%E7%94%9A%E8%87%B3%E8%AE%BF%E9%97%AE%E4%B8%8D%E4%BA%86%E3%80%82%E6%AF%94%E5%A6%82%E8%BF%99%E4%B8%AA%E7%91%B6%E7%91%B6%EF%BC%88%E7%8B%97%E5%A4%B4%E4%BF%9D%E5%91%BD%EF%BC%89.png\" alt=\"国内访问慢甚至访问不了\"></p>\n<p>所以这时候我们就需要Gravatar CDN服务。但是Argon主题给的Gravatar CDN都不太行，没事那就自己配置。这里我用的gravatar.loli.net(亲测有效)</p>","more":"<p>打开 WordPress 目录 wp-includes/link-template.php。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/wp-includeslink-templatephp.png\" alt=\"image-20220404202254281\"></p>\n<p>查找 secure.gravatar.com 替换 gravatar.loli.net, 保存即可</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/%E6%9B%BF%E6%8D%A2%20gravatar.loli.net,%20%E4%BF%9D%E5%AD%98%E5%8D%B3%E5%8F%AF.png\" alt=\"image-20220404202254281\"></p>\n<p>查看效果，发现这时候已经可以访问到Gravatar了, 速度很快</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/GGGGGGGGGG.png\" alt=\"image-20220404201950118\"></p>\n<h6 id=\"分割线1\"><a href=\"#分割线1\" class=\"headerlink\" title=\"分割线1\"></a>分割线1</h6><hr>\n<p>此外，如果我们没有在Gravatar上配置我们的站点头像，我们也还是使用不了评论头像。如果我们希望我们站点的头像使用的是自己的QQ头像或者别的图片，则可以这样配置（以配置qq头像为例）:</p>\n<p>打开Argon主题选项的评论者QQ头像。</p>\n<p>打开主题文件functions.php,在最后添加自己的qq邮箱头像。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// //修改默认头像</span><br><span class=\"line\">add_filter(&#x27;avatar_defaults&#x27;, &#x27;default_avatar&#x27;);</span><br><span class=\"line\">function default_avatar($avatar_defaults) &#123;</span><br><span class=\"line\">$myavatar = &#x27;https://q1.qlogo.cn/g?b=qq&amp;nk=你的QQ号&amp;s=640&#x27;;//图文url路径，也可以更换为其他的</span><br><span class=\"line\">$avatar_defaults[$myavatar] = &quot;图片描述&quot;;//图片的描述名称</span><br><span class=\"line\">return $avatar_defaults;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404204026091.png\" alt=\"image-20220404204026091\"></p>\n<p>保存，来到设置的讨论这里，发现添加上了。然后选择自定义的那个默认头像，保存（这里没显示，但是讨论页面是正常访问）</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404204445953.png\" alt=\"image-20220404204445953\"></p>\n<p>效果, 可以看到头像链接已经指向QQ头像链接了。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220404204755330.png\" alt=\"image-20220404204755330\"></p>\n<h6 id=\"分割线2\"><a href=\"#分割线2\" class=\"headerlink\" title=\"分割线2\"></a>分割线2</h6><hr>\n<p>Argon主题输入QQ邮箱后依然不能访问QQ头像问题 继续打开主题文件functions.php，按住CTRL + F 查找 <code>$_POST[&#39;qq&#39;]</code></p>\n<p>把目光转移到这里。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220405005630268.png\" alt=\"image-20220405005630268\"></p>\n<p>在<code>$_POST[&#39;qq&#39;]</code>后面我们给他替换为<code>$_POST[&#39;email&#39;]</code>。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220405005707169.png\" alt=\"image-20220405005707169\"> 无论用户输入的邮箱是qq还是gmail或者是189等邮箱，在这里都会强制使用QQ号作为头像。（看个人需求配置） 此时，当用户在评论页面输入QQ邮箱就能正确获取QQ头像了</p>"},{"title":"计算机网络大作业","id":"1242","date":"2023-05-15T16:13:04.000Z","_content":"\n## 实验要求\n\n1.  wireshark的深入学习与掌握，如过滤器的使用，归纳方法\n2.  通过实验阐述ARP的工作原理\n3.  利用实验结果分析 ICMP 协议的报文结构字段定义\n4.  基于实验数据深入分析 TCP 协议的连接过程原理，报文的分片等功能\n5.  从校园网发起向外网中某 Web 服务器的访问，记录并分析从 MAC 层协议、IP 协议、TCP 协议一直到 HTTP 协议的过程\n<!-- more -->\n## 1\\. Wireshark学习\n\n### 1.1 什么是Wireshark？\n\nWireshark 是一个网络数据包分析器。以下是 Wireshark 提供的众多功能中的一部分：\n\n*   适用于_UNIX_和_Windows_。\n*   从网络接口 _捕获实时数据包数据。_\n*   显示包含_非常详细协议信息的_数据包。\n*   _保存_捕获的数据包数据。\n*   以多种捕获文件格式 _导出部分或全部数据包。_\n*   根据许多标准 _过滤数据包。_\n*   根据许多条件 _搜索数据包。_\n*   根据过滤器对数据包显示 _进行着色。_\n*   创建各种_统计数据_。\n*   ....等等\n\n### 1.2 Wireshark支持的网络类型\n\nWireshark使用 **libpcap/WinPcap** 捕获库，其捕获机制不支持在所有平台上捕获所有网络类型。各平台支持的网络类型如下：\n\nInterface\n\nLinux\n\nmacOS\n\nWindows\n\n蓝牙\n\n✅\n\n❌\n\n❌\n\n以太网\n\n✅\n\n✅\n\n✅\n\nUSB\n\n✅\n\n❌\n\n❌\n\n无线局域网\n\n✅\n\n✅\n\n✅\n\nPPP链路\n\n✅\n\n✅\n\n✅\n\n*   **蓝牙 -** 捕获蓝牙流量 - 目前仅限于在 linux 上附加堆栈。\n*   **以太网 -** 在不同的以太网拓扑上捕获，包括交换网络。\n*   **USB -** 捕获原始 USB 流量。\n*   **WLAN -** 在 802.11（WLAN、Wi-Fi）接口上捕获，包括“监控模式”、原始 802.11 标头和无线电信息。\n*   **PPP链接 -** 在拨号线路、ISDN 连接和 PPP-over-Ethernet（PPPoe，例如 ADSL）上捕获。\n\n### 1.3 Wireshark过滤器\n\n#### 1.3.1 实验环境\n\n系统\n\n信息\n\n操作系统名称\n\nMicrosoft Windows 11 家庭中文版\n\n版本\n\n10.0.22621 版本 22621\n\n处理器\n\nIntel(R) Core(TM) i5-10210U CPU @ 1.60GHz，2112 Mhz，4 个内核，8 个逻辑处理器\n\n系统类型\n\n基于 x64 的电脑\n\n网卡类型\n\nIntel(R) Wireless-AC 9462\n\nWireshark版本\n\n4.0.5-64bit\n\n#### 1.3.2 界面\n\n![image-20230513151954191](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513151954191.png)\n\nWireshark首页主要分为以下几个界面：\n\n1.  菜单栏（包括文件、编辑、视图、捕获等功能）\n2.  工具栏（开始/停止捕获、查找分组等）\n3.  过滤栏（用于设置过滤条件进行数据包列表过滤）\n4.  数据列表区（显示捕获到的数据包，每个数据包包含编号，时间戳，源地址，目标地址，协议，长度，以及数据包信息。）\n5.  数据详细区（显示数据包的所有详细信息内容）\n6.  数据字节区（显示数据包原始字节流信息）\n7.  数据统计区（统计捕获到的分组数）\n\n#### 1.3.3 过滤器的使用\n\nWireshark的过滤器可以分为两种主要类型：**捕获过滤器** 和 **显示过滤器**。\n\n1.  捕获过滤器：使用Wireshark的捕获过滤器，用户可以过滤捕获的数据包以匹配用户指定的条件。这些过滤器可以根据协议、源/目标IP地址、端口、协议标志等条件进行设置。捕获过滤器可以手动输入或通过菜单选择，也可以从过滤器面板中选择预定义的过滤器。\n2.  显示过滤器：使用Wireshark的显示过滤器，用户可以将已捕获的数据包按照指定的条件进行过滤，并只显示与这些条件匹配的数据包。这些条件可以基于协议、源/目标IP地址、端口、时间戳等。显示过滤器可以通过在过滤器面板中手动输入或选择预定义的过滤器来创建。显示过滤器可以帮助用户快速查找感兴趣的数据包，也可以节省屏幕空间和处理时间。\n\n##### 1.3.3.1 捕获过滤器\n\n捕获过滤器位于菜单栏的 **捕获--> 捕获过滤器**。用于捕获数据包前设置捕获条件。\n\n![image-20230513154122675](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513154122675.png)\n\n##### 1.3.3.2显示过滤器\n\n显示过滤器位于首页的 **工具栏下方** 的输入框。\n\n当我们在终端输入 `ping www.baidu.com` 时，在捕获时未设置抓包过滤规则直接通过网卡进行抓取所有数据包，如下\n\n![image-20230513154600207](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513154600207.png)\n\n![image-20230513155302679](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513155302679.png)\n\n此时数据包内容较多，为了筛选我们想要的信息，则需要在显示过滤器中添加我们想要的过滤条件\n\n如：`ip.addr == 39.156.66.14` ，得到如下结果\n\n![image-20230513155458878](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513155458878.png)\n\n即可得到我们想要的 Ping 之后的 ICMP 报文。这基本上满足了我们的需求！\n\n##### 1.3.3.3 过滤规则总结\n\n当使用Wireshark时，可以使用过滤规则来筛选和查看感兴趣的数据包。以下是一些常用的Wireshark过滤规则：\n\n1.  过滤特定IP地址：可以使用以下过滤器来查看特定IP地址的数据包：\n\n```c\nip.addr == x.x.x.x  //x.x.x.x为特定IP地址\n```\n\n2.  过滤特定IP地址和端口号：可以使用以下过滤器来查看特定IP地址和端口号的数据包：\n\n```c\n(ip.addr == x.x.x.x) && (tcp.port == n)  //x.x.x.x为特定IP地址，n为端口号\n```\n\n3.  过滤特定协议：可以使用以下过滤器来查看特定协议的数据包：\n\n```c\ntcp  //只显示TCP协议的数据包\nudp  //只显示UDP协议的数据包\nicmp  //只显示ICMP协议的数据包\n```\n\n4.  过滤特定的数据包大小：可以使用以下过滤器来查看特定大小的数据包：\n\n```c\nframe.len == n  //只显示大小为n的数据包\nframe.len > n  //只显示大小大于n的数据包\nframe.len < n  //只显示大小小于n的数据包\n```\n\n5.  过滤特定的数据包类型：可以使用以下过滤器来查看特定类型的数据包：\n\n```c\ndns  //只显示DNS数据包\nhttp  //只显示HTTP数据包\nssl  //只显示SSL数据包\n```\n\n6.  过滤特定的数据包内容：可以使用以下过滤器来查看特定内容的数据包：\n\n```c\nhttp.request.method == \"POST\"  //只显示HTTP POST请求\nhttp.response.code == 200  //只显示HTTP 200响应\ndns.qry.name == \"www.example.com\"  //只显示请求www.example.com的DNS数据包\n```\n\n这些是常用的Wireshark过滤规则示例。还有很多其他过滤规则，可以根据具体情况进行选择和设置。\n\n> 官网显示过滤器参考：[https://www.wireshark.org/docs/dfref/](https://www.wireshark.org/docs/dfref/)\n\n## 2\\. ARP 原理探究\n\nARP（Address Resolution Protocol，地址解析协议）是一种用于将IP地址映射到物理MAC地址的协议。ARP是在本地网络中运行的协议，其目的是为了在不同网络层之间建立映射关系，使得数据包能够正确地被传送到其目的地。\n\n### 2\\. 1 实验准备\n\n两台主机A、B，且连接同一个局域网。\n\n#### 2.1.1 查看主机IP地址和MAC地址\n\nWindows 下打开命令提示符，输入`ipconfig/all`：\n\n![image-20230513165731283](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165731283.png)\n\n得到当前A主机的MAC地址为 **A4-B1-C1-9B-28-\\*\\***，校园网下IP地址为：**192.168.1.101**\n\nB主机的MAC地址为 **D8-12-65-6E-D3-\\*\\***，校园网下IP地址为 **192.168.1.100**\n\n主机\n\nIP地址\n\nMAC地址\n\nA\n\n192.168.1.101\n\nA4-B1-C1-9B-28-\\*\\*\n\nB（实验机）\n\n192.168.1.100\n\nD8-12-65-6E-D3-\\*\\*\n\n### 2.2 查看ARP表\n\n在 A 主机下查看当前 ARP 表，输入 `arp -a`，结果如下:\n\n![image-20230513162621231](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513162621231.png)\n\n此时并未有 B 主机的 ARP表项。\n\n### 2.3 Wireshark捕获\n\n后台打开相应网卡开始捕获，此时 A 主机命令提示符输入`ping 192.168.1.100`，向B发送 ICMP 报文以及 A主机发送ARP广播。\n\n![image-20230513162734153](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513162734153.png)\n\n此时在重新输入 `arp -a`，发现得到 B 主机的相应MAC地址，实验成功！\n\n![image-20230513162856471](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513162856471.png)\n\n### 2.4 Wireshark分析ARP原理\n\n1.  首先，假设主机A需要向主机B发送一个数据包，但是不知道主机B的物理地址（MAC地址），只知道主机B的IP地址，主机A将一个ARP请求广播到本地网络中的所有设备，请求包含目标IP地址和发送者MAC地址（通常是广播地址）。\n    \n    ![image-20230513165133299](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165133299.png)\n    \n2.  交换机S接收到ARP请求，并将其转发到本地网络中的所有设备。由于这是一个广播消息，因此每个设备都会接收到此请求。主机B接收到ARP请求，检查其中的IP地址是否匹配自己的IP地址。如果是，主机B会向主机A发送一个ARP响应，该响应包含其MAC地址。\n    \n    ![image-20230513165143618](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165143618.png)\n    \n3.  ARP响应被广播到本地网络中的所有设备，主机A接收到响应并保存主机B的MAC地址到其ARP缓存中，以备将来使用。\n    \n    ![image-20230513165153279](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165153279.png)\n    \n    ![image-20230513165200438](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165200438.png)\n    \n\n通过上述实验，我们可以看出ARP的工作原理是通过广播的方式，在本地网络中进行的。ARP请求和响应都是广播消息，这意味着所有的网络设备都能够接收到并处理它们。ARP缓存记录了IP地址和对应的MAC地址，这可以避免重复的ARP请求并加速数据包的传输。\n\n**总结：ARP是一种在本地网络中工作的协议，它允许主机在不知道目标MAC地址的情况下查找目标设备的物理地址，从而实现数据包的正确传输。**\n\n## 3\\. ICMP 协议的报文结构定义\n\n### 3.1 获取ICMP报文\n\n由于 Ping 工作在应用层且直接使用网络层的 ICMP 协议，根据这个原理，在命令提示符输入 `ping 192.168.1.100` 即可在 Wireshark 捕获到 ICMP 报文，在显示过滤器里面输入 `icmp` 即可得到相应的 ICMP 报文数据。\n\n![image-20230513211214962](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513211214962.png)\n\n### 3.2 ICMP结构分析\n\n#### 3.2.1 IP数据报\n\n查看IP数据报，观察IP数据报的首部字段及其内容，其报文结构如下：\n\n![image-20230513211831188](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513211831188.png)\n\n#### 3.2.2 ICMP 数据报\n\n点击**Internet Control Message Protocol**展开，查看 ICMP报文，如下分别为ICMP询问报文的回送请求报文和回答报文的首部字段。\n\n![image-20230513213004979](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513213004979.png)\n\n由此我们可以得到的 ICMP报文结构定义如下：\n\n![image-20230513213440346](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513213440346.png)\n\n*   类型（8 bits）：表示ICMP报文的类型，共有14种类型（例如回显请求、回显响应、目标不可达等）。Type的值在1~255之间，不同的类型有不同的Code值。\n*   代码（8 bits）：表示ICMP报文的代码，用于更精确地描述ICMP报文的目的。Code的值在0~255之间，不同的Code值对应不同的类型。\n*   校验和（16 bits）：是ICMP报文的校验和，用于检测数据是否传输过程中发生了错误。\n*   数据（可变长度）：是ICMP报文的数据部分，其长度取决于ICMP报文的类型和代码。\n\n## 4\\. TCP 原理探究\n\n### 4.1 实验准备\n\n1.  获取 `www.baidu.com` 的实际IP地址，在命令提示符输入：\n    \n    ```shell\n    ping www.baidu.com\n    ```\n    \n    ![image-20230514181536098](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514181536098.png)\n    \n    得到当前 `www.baidu.com` 的 IP 地址为：**39.156.66.14**\n    \n2.  打开 Wireshark 捕获，开始抓取数据包，并在显示过滤器加入过滤条件：\n    \n    ```c\n    ip.addr == 39.156.66.14 \n    ```\n    \n\n### 4.2 TCP 三次握手原理\n\n此时在主机的浏览器搜索栏输入 `www.baidu.com` 进入百度网站，在 Wireshark 中观察TCP报文的捕获情况，如下：\n\n![image-20230514181922252](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514181922252.png)\n\n可以看到浏览器打开百度网站时，本主机与百度服务器进行了 **TCP三次握手** ，根据这三次握手，分析 TCP连接管理的原理。\n\n![img](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/v2-8ce8c897b4d5e7397b25eb4d4b31d7fc_r.jpg)\n\n#### 4.2.1 第一次握手阶段\n\n由于 TCP协议是负责主机 **端到端** 的连接，因此本主机操作系统随机选取其中一个 **动态端口号（49152~65535）**，本例中选取了 `54617` 作为源端口号，目的端口号是百度服务器提供的 HTTPS端口 `443`，由于此报文是 TCP同步报文，因此此时 ACK 位为 0（Not set），SYN 位为 1，随机序列号为 `948123796`。此时为客户端请求建立链接阶段，客户端进入 **同步已发送** 状态，等待服务器端确认，如图所示，TCP报文如下：\n\n![image-20230514184206965](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514184206965.png)\n\n#### 4.2.2 第二次握手阶段\n\n此时源端口为百度服务器提供的 HTTPS端口 `443`，目的端口为本主机的 `54617`，确认号为 `948123796+1`，即表示已成功收到 第一次握手阶段 的请求建立连接报文！此时第二次握手阶段的TCP报文随机选取一个序列号为 `3375721040`，同步位和确认位均为 1。百度服务器将该数据包发送给客户端以表示确认连接请求，服务器端进入**同步已接收** 状态。TCP报文如下所示：\n\n![image-20230514184918940](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514184918940.png)\n\n#### 4.2.3 第三次握手阶段\n\n本主机收到第二次握手阶段的TCP报文后，向百度服务器发送一个确认报文，表示收到了确认信息。该报文中的ACK字段值为收到的 `3375721040+1`，并且序列号为收到的ACK值 `948123796+1`。客户端和服务器端进入 **连接已建立** 状态，完成三次握手，此时 TCP 报文如下：\n\n![image-20230514185901730](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514185901730.png)\n\n**至此本主机和百度服务器成功建立可靠的TCP连接！随后客户端与服务器端之间可以开始传输数据。**\n\n### 4.3 报文的分片\n\n#### 4.3.1 不分片报文传输\n\n1.  较短 IP 报文\n    \n    观察不分片标志对于较短的 IP 报文传输的影响，在 命令提示符中输入 `ping -l 1472 -f 192.168.1.102`，意思是向 192.168.1.102 主机发送长度为 1472字节的数据包，**但是此 IP报文 不进行分片**，结果如图所示：![image-20230515134923956](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515134923956.png)![image-20230515135317906](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515135317906.png)\n    \n    可见以太网帧总长度为 **IP首部 20 + ICMP首部 8 + 数据长度1472 ＝1500**（小于等于 **MTU** 的 1500），不分片标志的片位移为 0，由此可知：**不分片标志对较小的 IP 报文传输没有影响**。\n    \n2.  较大 IP 报文\n    \n    观察不分片标志对较大 IP 报文传输的影响，在 命令提示符中输入 `ping -l 1473 -f 192.168.1.102`，结果如图所示：\n    \n    ![image-20230515140248049](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515140248049.png)\n    \n    ![image-20230515135911764](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515135911764.png)\n    \n    可见：**由于IP报文的长度（IP首部 20 + ICMP首部 8 + 数据长度1473 ＝1501 ）过大（超过了 MTU 的 1500 长度），不分片标志会导致超过 MTU 的长报文无法传输**。\n    \n\n#### 4.3.2 分片报文传输\n\n打开命令提示符，输入`ping -l 3000 -n 1 192.168.1.102`，意思为只发送一个大小为3000的数据包。结果如下：\n\n![image-20230515141248724](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515141248724.png)\n\n![image-20230515141534981](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515141534981.png)\n\n需要封装在 IP数据包里面发送的数据大小为 **8（ICMP首部）+3000（数据包）= 3008**。\n\n第一个分片不能超过 MTU，所以为 **20（IP首部）+ 1480（数据分片）= 1500**；第二个分片不能超过 MTU，所以也为 **20（IP首部）+ 1480（数据分片）= 1500**；由于 **3008（数据总长度）- 1480 - 1480 = 48**，因此第三个分片大小为 **20（IP首部） + 48（剩余数据）=68**。分析结果与实验数据一致！\n\n## 5\\. Web服务器连接过程\n\n> 要求：从校园网发起向外网中某 Web 服务器的访问，记录并分析从 MAC 层协议、IP 协议、TCP 协议一直到 HTTP 协议的过程。\n\n### 5.1 访问云 Web服务器\n\n以个人网站 `http://47.94.12.50` 为例，后台打开 Wireshark嗅探，显示过滤器输入 `ip.addr == 47.94.12.50`。\n\n![image-20230515142423242](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515142423242.png)\n\n### 5.2 收到的数据报文\n\n在Wireshark嗅探到的数据报文如下所示：\n\n![image-20230515222714737](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515222714737.png)\n\n首先 主机先与云服务器进行第一次 TCP 连接，完成三次握手，然后应用层使用 HTTP 协议进行传输，最后传输层使用 TCP四次挥手释放第一次 TCP 连接。下面根据自下而上地分析从 MAC 层协议、IP 协议、TCP 协议一直到 HTTP 协议的过程。\n\n### 5.3 MAC 协议\n\n以**首次收到的 HTTP 报文**为例，其收到的以太网帧数据如下：\n\n![image-20230515223837966](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515223837966.png)\n\n由 以太网Ⅱ 帧的格式可知，此以太网帧的目的地址为 ca:9e:6b:d1:d7:\\*\\*，源地址为 a4:b1:c1:9b:28:\\*\\* ，类型为 0x0800。由于在我们抓到的包中，前八个字节的前导码和帧开始符已经被网卡过滤掉了所以我们抓不到。\n\n![image-20230515224231338](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515224231338.png)\n\n常见的类型对应值如下：\n\n值\n\n协议\n\n0x0800\n\nIPv4\n\n0x0806\n\nARP\n\n0x86DD\n\nIPv6\n\n0x88CC\n\nLLDP\n\n0x8035\n\nRARP\n\n我们的帧类型为`0x0800` 是一个 IPv4 的封装帧，后面的冗余校验也和前导码一样，已经被网卡删掉了，所以捕获不到，以太网的头部就已经全部抽离了，我们继续分析下一层协议：IPv4。\n\n### 5.4 IPv4 协议\n\n由此 IP报文 可知：\n\n![image-20230515224700109](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515224700109.png)\n\n*   **版本**：`4`（即 IPv4，0x0100 = 4）；\n*   **首部长度**：`20`（即 5 \\* 4B = 20B）；\n*   **ECN**：`Not-ECT`（显式拥塞通知**Explicit Congestion Notification**，简称**ECN**，`00`代表不支持 ECN）；\n*   **DF**：`1`（不分片）；\n*   **MF**：`0`（没有分片）；\n*   **Offset**：`0`（没有偏移）；\n\n由于以太网有 MTU 的包大小限制，IPv4 选择了通过分片重组的方式来向上层的传输层协议提供传输任意包大小的能力，DF、MF、Offset位就是用来进行**分片控制**的。\n\n*   TTL：`0x40 = 64`，代表了这个包的存活时间，还剩 64 s；\n    \n*   上层协议：`0x06 = 6`，代表 TCP， 常见取值如下：\n    \n\n取值\n\n协议\n\n1\n\nICMP\n\n6\n\nTCP\n\n17\n\nUDP\n\n*   **源 IP 地址**：192.168.93.86\n*   **目的 IP 地址**：47.94.12.50\n\n### 5.5 TCP协议\n\nIP 数据部分就是 TCP报文，其数据如下：\n\n![image-20230515232020133](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515232020133.png)\n\n*   源端口： `c0 8a -> 49290`。\n*   目的端口：`00 50 -> 80` 。\n\n最大端口值为 **2^16-1 = 65535**，端口号划分成了三段：\n\n端口范围\n\n用途\n\n0-1023\n\n公认端口。常见的公认端口有：ftp(21)、ssh(22 )、smtp(25)、http(80 )、https(443) 等。\n\n1024-49151\n\n用户自用。一般操作系统会随机在其中选择可用端口。\n\n49152-65535\n\n保留端口。一般不推荐使用，因为用户端口也很够用了。\n\n*   **序列号**：`2288663079`。\n*   **确认号**：`2099426961`。\n\n之后紧接着是九个启用中的标志位，下面我们来逐位分析。\n\n*   **NS**: ECN-nonce，显式拥塞通知（Explicit Congestion Notification），这个是和 IP 层的 ECN 一样，主动表示发生了网络拥塞的信号。\n*   **CWR**: Congestion Window Reduced，这个是配合 ECN 标志位使用的，用来通知发送者拥塞窗口已经调小。\n*   **ECE**：ECN-Echo，这个标志位主要是用 TCP 连接在握手的时候用来协商两端是否都支持显示拥塞控制。\n*   **URG**: Urgent Pointer field significant，代表存在于选项中的紧急指针字段已经启用，需要尽快处理这些数据，不过使用的范围不广。\n*   **ACK**: Acknowledgment field significant，代表 ACK 字段有效。\n*   **PSH**: Push Function，用于将缓冲区内的所有数据全部发送，不再等待，同时对端在收到 PSH 标志时，应立即将数据全部递交给上层应用处理，不用再等待数据合并提交。PSH 标志位和 TCP\\_NoDelay 选项的区别在于，PSH 是 TCP 报文中的字段，对端也会做出对应的响应，而 TCP\\_NoDelay 只是内核的一个参数，用于在当前应用中关闭 Nagle 算法。\n*   **RST**: Reset，用于重置当前连接，一般用于拒绝连接，或者出现错误时指示重建连接。\n*   **SYN**: Synchronize sequence numbers，同步序列号，用于建立连接并同步序列号。\n*   **FIN**: Finish, 用于关闭连接，表明没有数据要发送了。\n\n在我们的包中，这九个标志位分别是：000011000，ACK = 1，PSH = 1，代表 ACK 字段是生效的，\n\n*   窗口大小：`259`，单位是字节。\n    \n*   校验和：`5c 05` ，这个校验和在计算时不仅包括头部，也包括了传输内容。\n    \n*   紧急指针：我们这里 URG 标志位是 0，所以也就不存在紧急指针，这 16 位全是 `0`。\n    \n*   TCP 的选项字段：TCP 选项是不定长的。\n    \n\n### 5.6 HTTP 协议\n\n![image-20230515233827525](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515233827525.png)\n\n由此 HTTP报文可知主机通过 HTTP/1.1 协议使用 GET 的请求方法向 服务器 资源发起请求。\n\n*   Host ：`47.94.12.50`，代表了请求资源所属的主机。\n*   User-Agent：`Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36`，代表主机使用的 HTTP 协议的客户端类型。\n*   Accept: `text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7`， 代表客户端这边支持任何类型的资源。\n\n### 5.7 总结\n\n计算机网络的组成可以自底向上地总结为以下几个层次，每个层次负责不同的功能和任务：\n\n1.  物理层\n    \n    *   物理层是计算机网络的最底层，负责传输原始的比特流。\n    *   它定义了电气、光学和机械接口的规范，以及传输介质的特性和传输速率等。\n    *   主要任务是将比特流从发送端传输到接收端，没有对数据进行处理或分析。\n2.  数据链路层\n    \n    *   数据链路层建立在物理层之上，负责在直接相连的节点之间可靠地传输数据。\n    *   它将比特流划分为帧，处理错误检测和纠正，以及帧的传输控制。\n    *   主要任务是提供可靠的数据传输，并处理节点之间的通信错误。\n3.  网络层\n    \n    *   网络层是在数据链路层之上，处理不同网络之间的数据包转发和路由选择。\n    *   它负责将数据包从源主机传输到目标主机，通过路由选择算法确定数据包的最佳路径。\n    *   主要任务是实现逻辑上的主机到主机的通信，以及网络互联和互操作性。\n4.  传输层\n    \n    *   传输层建立在网络层之上，提供端到端的数据传输和服务质量控制。\n    *   它为应用程序提供可靠的数据传输和错误恢复，并进行流量控制和拥塞控制。\n    *   主要任务是确保数据在源主机和目标主机之间的可靠传输，以及提供端到端的连接和通信服务。\n5.  应用层\n    \n    *   应用层是网络的最高层，提供特定应用程序和用户之间的接口。\n    *   它包括各种应用层协议和服务，例如电子邮件、文件传输、Web浏览等。\n    *   主要任务是为用户提供各种应用程序和服务，以满足特定的通信需求。\n\n通过这次Wireshark抓包实验帮助了我更深层次地理解每一层的功能和责任，以及它们如何协同工作来实现可靠的数据通信和应用服务！","source":"_posts/计算机网络大作业.md","raw":"---\ntitle: 计算机网络大作业\ntags:\n  - 计算机网络\nid: '1242'\ncategories:\n  - - 专业技术\n  - - 学习笔记\ndate: 2023-05-16 00:13:04\n---\n\n## 实验要求\n\n1.  wireshark的深入学习与掌握，如过滤器的使用，归纳方法\n2.  通过实验阐述ARP的工作原理\n3.  利用实验结果分析 ICMP 协议的报文结构字段定义\n4.  基于实验数据深入分析 TCP 协议的连接过程原理，报文的分片等功能\n5.  从校园网发起向外网中某 Web 服务器的访问，记录并分析从 MAC 层协议、IP 协议、TCP 协议一直到 HTTP 协议的过程\n<!-- more -->\n## 1\\. Wireshark学习\n\n### 1.1 什么是Wireshark？\n\nWireshark 是一个网络数据包分析器。以下是 Wireshark 提供的众多功能中的一部分：\n\n*   适用于_UNIX_和_Windows_。\n*   从网络接口 _捕获实时数据包数据。_\n*   显示包含_非常详细协议信息的_数据包。\n*   _保存_捕获的数据包数据。\n*   以多种捕获文件格式 _导出部分或全部数据包。_\n*   根据许多标准 _过滤数据包。_\n*   根据许多条件 _搜索数据包。_\n*   根据过滤器对数据包显示 _进行着色。_\n*   创建各种_统计数据_。\n*   ....等等\n\n### 1.2 Wireshark支持的网络类型\n\nWireshark使用 **libpcap/WinPcap** 捕获库，其捕获机制不支持在所有平台上捕获所有网络类型。各平台支持的网络类型如下：\n\nInterface\n\nLinux\n\nmacOS\n\nWindows\n\n蓝牙\n\n✅\n\n❌\n\n❌\n\n以太网\n\n✅\n\n✅\n\n✅\n\nUSB\n\n✅\n\n❌\n\n❌\n\n无线局域网\n\n✅\n\n✅\n\n✅\n\nPPP链路\n\n✅\n\n✅\n\n✅\n\n*   **蓝牙 -** 捕获蓝牙流量 - 目前仅限于在 linux 上附加堆栈。\n*   **以太网 -** 在不同的以太网拓扑上捕获，包括交换网络。\n*   **USB -** 捕获原始 USB 流量。\n*   **WLAN -** 在 802.11（WLAN、Wi-Fi）接口上捕获，包括“监控模式”、原始 802.11 标头和无线电信息。\n*   **PPP链接 -** 在拨号线路、ISDN 连接和 PPP-over-Ethernet（PPPoe，例如 ADSL）上捕获。\n\n### 1.3 Wireshark过滤器\n\n#### 1.3.1 实验环境\n\n系统\n\n信息\n\n操作系统名称\n\nMicrosoft Windows 11 家庭中文版\n\n版本\n\n10.0.22621 版本 22621\n\n处理器\n\nIntel(R) Core(TM) i5-10210U CPU @ 1.60GHz，2112 Mhz，4 个内核，8 个逻辑处理器\n\n系统类型\n\n基于 x64 的电脑\n\n网卡类型\n\nIntel(R) Wireless-AC 9462\n\nWireshark版本\n\n4.0.5-64bit\n\n#### 1.3.2 界面\n\n![image-20230513151954191](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513151954191.png)\n\nWireshark首页主要分为以下几个界面：\n\n1.  菜单栏（包括文件、编辑、视图、捕获等功能）\n2.  工具栏（开始/停止捕获、查找分组等）\n3.  过滤栏（用于设置过滤条件进行数据包列表过滤）\n4.  数据列表区（显示捕获到的数据包，每个数据包包含编号，时间戳，源地址，目标地址，协议，长度，以及数据包信息。）\n5.  数据详细区（显示数据包的所有详细信息内容）\n6.  数据字节区（显示数据包原始字节流信息）\n7.  数据统计区（统计捕获到的分组数）\n\n#### 1.3.3 过滤器的使用\n\nWireshark的过滤器可以分为两种主要类型：**捕获过滤器** 和 **显示过滤器**。\n\n1.  捕获过滤器：使用Wireshark的捕获过滤器，用户可以过滤捕获的数据包以匹配用户指定的条件。这些过滤器可以根据协议、源/目标IP地址、端口、协议标志等条件进行设置。捕获过滤器可以手动输入或通过菜单选择，也可以从过滤器面板中选择预定义的过滤器。\n2.  显示过滤器：使用Wireshark的显示过滤器，用户可以将已捕获的数据包按照指定的条件进行过滤，并只显示与这些条件匹配的数据包。这些条件可以基于协议、源/目标IP地址、端口、时间戳等。显示过滤器可以通过在过滤器面板中手动输入或选择预定义的过滤器来创建。显示过滤器可以帮助用户快速查找感兴趣的数据包，也可以节省屏幕空间和处理时间。\n\n##### 1.3.3.1 捕获过滤器\n\n捕获过滤器位于菜单栏的 **捕获--> 捕获过滤器**。用于捕获数据包前设置捕获条件。\n\n![image-20230513154122675](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513154122675.png)\n\n##### 1.3.3.2显示过滤器\n\n显示过滤器位于首页的 **工具栏下方** 的输入框。\n\n当我们在终端输入 `ping www.baidu.com` 时，在捕获时未设置抓包过滤规则直接通过网卡进行抓取所有数据包，如下\n\n![image-20230513154600207](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513154600207.png)\n\n![image-20230513155302679](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513155302679.png)\n\n此时数据包内容较多，为了筛选我们想要的信息，则需要在显示过滤器中添加我们想要的过滤条件\n\n如：`ip.addr == 39.156.66.14` ，得到如下结果\n\n![image-20230513155458878](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513155458878.png)\n\n即可得到我们想要的 Ping 之后的 ICMP 报文。这基本上满足了我们的需求！\n\n##### 1.3.3.3 过滤规则总结\n\n当使用Wireshark时，可以使用过滤规则来筛选和查看感兴趣的数据包。以下是一些常用的Wireshark过滤规则：\n\n1.  过滤特定IP地址：可以使用以下过滤器来查看特定IP地址的数据包：\n\n```c\nip.addr == x.x.x.x  //x.x.x.x为特定IP地址\n```\n\n2.  过滤特定IP地址和端口号：可以使用以下过滤器来查看特定IP地址和端口号的数据包：\n\n```c\n(ip.addr == x.x.x.x) && (tcp.port == n)  //x.x.x.x为特定IP地址，n为端口号\n```\n\n3.  过滤特定协议：可以使用以下过滤器来查看特定协议的数据包：\n\n```c\ntcp  //只显示TCP协议的数据包\nudp  //只显示UDP协议的数据包\nicmp  //只显示ICMP协议的数据包\n```\n\n4.  过滤特定的数据包大小：可以使用以下过滤器来查看特定大小的数据包：\n\n```c\nframe.len == n  //只显示大小为n的数据包\nframe.len > n  //只显示大小大于n的数据包\nframe.len < n  //只显示大小小于n的数据包\n```\n\n5.  过滤特定的数据包类型：可以使用以下过滤器来查看特定类型的数据包：\n\n```c\ndns  //只显示DNS数据包\nhttp  //只显示HTTP数据包\nssl  //只显示SSL数据包\n```\n\n6.  过滤特定的数据包内容：可以使用以下过滤器来查看特定内容的数据包：\n\n```c\nhttp.request.method == \"POST\"  //只显示HTTP POST请求\nhttp.response.code == 200  //只显示HTTP 200响应\ndns.qry.name == \"www.example.com\"  //只显示请求www.example.com的DNS数据包\n```\n\n这些是常用的Wireshark过滤规则示例。还有很多其他过滤规则，可以根据具体情况进行选择和设置。\n\n> 官网显示过滤器参考：[https://www.wireshark.org/docs/dfref/](https://www.wireshark.org/docs/dfref/)\n\n## 2\\. ARP 原理探究\n\nARP（Address Resolution Protocol，地址解析协议）是一种用于将IP地址映射到物理MAC地址的协议。ARP是在本地网络中运行的协议，其目的是为了在不同网络层之间建立映射关系，使得数据包能够正确地被传送到其目的地。\n\n### 2\\. 1 实验准备\n\n两台主机A、B，且连接同一个局域网。\n\n#### 2.1.1 查看主机IP地址和MAC地址\n\nWindows 下打开命令提示符，输入`ipconfig/all`：\n\n![image-20230513165731283](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165731283.png)\n\n得到当前A主机的MAC地址为 **A4-B1-C1-9B-28-\\*\\***，校园网下IP地址为：**192.168.1.101**\n\nB主机的MAC地址为 **D8-12-65-6E-D3-\\*\\***，校园网下IP地址为 **192.168.1.100**\n\n主机\n\nIP地址\n\nMAC地址\n\nA\n\n192.168.1.101\n\nA4-B1-C1-9B-28-\\*\\*\n\nB（实验机）\n\n192.168.1.100\n\nD8-12-65-6E-D3-\\*\\*\n\n### 2.2 查看ARP表\n\n在 A 主机下查看当前 ARP 表，输入 `arp -a`，结果如下:\n\n![image-20230513162621231](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513162621231.png)\n\n此时并未有 B 主机的 ARP表项。\n\n### 2.3 Wireshark捕获\n\n后台打开相应网卡开始捕获，此时 A 主机命令提示符输入`ping 192.168.1.100`，向B发送 ICMP 报文以及 A主机发送ARP广播。\n\n![image-20230513162734153](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513162734153.png)\n\n此时在重新输入 `arp -a`，发现得到 B 主机的相应MAC地址，实验成功！\n\n![image-20230513162856471](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513162856471.png)\n\n### 2.4 Wireshark分析ARP原理\n\n1.  首先，假设主机A需要向主机B发送一个数据包，但是不知道主机B的物理地址（MAC地址），只知道主机B的IP地址，主机A将一个ARP请求广播到本地网络中的所有设备，请求包含目标IP地址和发送者MAC地址（通常是广播地址）。\n    \n    ![image-20230513165133299](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165133299.png)\n    \n2.  交换机S接收到ARP请求，并将其转发到本地网络中的所有设备。由于这是一个广播消息，因此每个设备都会接收到此请求。主机B接收到ARP请求，检查其中的IP地址是否匹配自己的IP地址。如果是，主机B会向主机A发送一个ARP响应，该响应包含其MAC地址。\n    \n    ![image-20230513165143618](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165143618.png)\n    \n3.  ARP响应被广播到本地网络中的所有设备，主机A接收到响应并保存主机B的MAC地址到其ARP缓存中，以备将来使用。\n    \n    ![image-20230513165153279](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165153279.png)\n    \n    ![image-20230513165200438](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165200438.png)\n    \n\n通过上述实验，我们可以看出ARP的工作原理是通过广播的方式，在本地网络中进行的。ARP请求和响应都是广播消息，这意味着所有的网络设备都能够接收到并处理它们。ARP缓存记录了IP地址和对应的MAC地址，这可以避免重复的ARP请求并加速数据包的传输。\n\n**总结：ARP是一种在本地网络中工作的协议，它允许主机在不知道目标MAC地址的情况下查找目标设备的物理地址，从而实现数据包的正确传输。**\n\n## 3\\. ICMP 协议的报文结构定义\n\n### 3.1 获取ICMP报文\n\n由于 Ping 工作在应用层且直接使用网络层的 ICMP 协议，根据这个原理，在命令提示符输入 `ping 192.168.1.100` 即可在 Wireshark 捕获到 ICMP 报文，在显示过滤器里面输入 `icmp` 即可得到相应的 ICMP 报文数据。\n\n![image-20230513211214962](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513211214962.png)\n\n### 3.2 ICMP结构分析\n\n#### 3.2.1 IP数据报\n\n查看IP数据报，观察IP数据报的首部字段及其内容，其报文结构如下：\n\n![image-20230513211831188](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513211831188.png)\n\n#### 3.2.2 ICMP 数据报\n\n点击**Internet Control Message Protocol**展开，查看 ICMP报文，如下分别为ICMP询问报文的回送请求报文和回答报文的首部字段。\n\n![image-20230513213004979](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513213004979.png)\n\n由此我们可以得到的 ICMP报文结构定义如下：\n\n![image-20230513213440346](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513213440346.png)\n\n*   类型（8 bits）：表示ICMP报文的类型，共有14种类型（例如回显请求、回显响应、目标不可达等）。Type的值在1~255之间，不同的类型有不同的Code值。\n*   代码（8 bits）：表示ICMP报文的代码，用于更精确地描述ICMP报文的目的。Code的值在0~255之间，不同的Code值对应不同的类型。\n*   校验和（16 bits）：是ICMP报文的校验和，用于检测数据是否传输过程中发生了错误。\n*   数据（可变长度）：是ICMP报文的数据部分，其长度取决于ICMP报文的类型和代码。\n\n## 4\\. TCP 原理探究\n\n### 4.1 实验准备\n\n1.  获取 `www.baidu.com` 的实际IP地址，在命令提示符输入：\n    \n    ```shell\n    ping www.baidu.com\n    ```\n    \n    ![image-20230514181536098](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514181536098.png)\n    \n    得到当前 `www.baidu.com` 的 IP 地址为：**39.156.66.14**\n    \n2.  打开 Wireshark 捕获，开始抓取数据包，并在显示过滤器加入过滤条件：\n    \n    ```c\n    ip.addr == 39.156.66.14 \n    ```\n    \n\n### 4.2 TCP 三次握手原理\n\n此时在主机的浏览器搜索栏输入 `www.baidu.com` 进入百度网站，在 Wireshark 中观察TCP报文的捕获情况，如下：\n\n![image-20230514181922252](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514181922252.png)\n\n可以看到浏览器打开百度网站时，本主机与百度服务器进行了 **TCP三次握手** ，根据这三次握手，分析 TCP连接管理的原理。\n\n![img](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/v2-8ce8c897b4d5e7397b25eb4d4b31d7fc_r.jpg)\n\n#### 4.2.1 第一次握手阶段\n\n由于 TCP协议是负责主机 **端到端** 的连接，因此本主机操作系统随机选取其中一个 **动态端口号（49152~65535）**，本例中选取了 `54617` 作为源端口号，目的端口号是百度服务器提供的 HTTPS端口 `443`，由于此报文是 TCP同步报文，因此此时 ACK 位为 0（Not set），SYN 位为 1，随机序列号为 `948123796`。此时为客户端请求建立链接阶段，客户端进入 **同步已发送** 状态，等待服务器端确认，如图所示，TCP报文如下：\n\n![image-20230514184206965](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514184206965.png)\n\n#### 4.2.2 第二次握手阶段\n\n此时源端口为百度服务器提供的 HTTPS端口 `443`，目的端口为本主机的 `54617`，确认号为 `948123796+1`，即表示已成功收到 第一次握手阶段 的请求建立连接报文！此时第二次握手阶段的TCP报文随机选取一个序列号为 `3375721040`，同步位和确认位均为 1。百度服务器将该数据包发送给客户端以表示确认连接请求，服务器端进入**同步已接收** 状态。TCP报文如下所示：\n\n![image-20230514184918940](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514184918940.png)\n\n#### 4.2.3 第三次握手阶段\n\n本主机收到第二次握手阶段的TCP报文后，向百度服务器发送一个确认报文，表示收到了确认信息。该报文中的ACK字段值为收到的 `3375721040+1`，并且序列号为收到的ACK值 `948123796+1`。客户端和服务器端进入 **连接已建立** 状态，完成三次握手，此时 TCP 报文如下：\n\n![image-20230514185901730](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514185901730.png)\n\n**至此本主机和百度服务器成功建立可靠的TCP连接！随后客户端与服务器端之间可以开始传输数据。**\n\n### 4.3 报文的分片\n\n#### 4.3.1 不分片报文传输\n\n1.  较短 IP 报文\n    \n    观察不分片标志对于较短的 IP 报文传输的影响，在 命令提示符中输入 `ping -l 1472 -f 192.168.1.102`，意思是向 192.168.1.102 主机发送长度为 1472字节的数据包，**但是此 IP报文 不进行分片**，结果如图所示：![image-20230515134923956](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515134923956.png)![image-20230515135317906](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515135317906.png)\n    \n    可见以太网帧总长度为 **IP首部 20 + ICMP首部 8 + 数据长度1472 ＝1500**（小于等于 **MTU** 的 1500），不分片标志的片位移为 0，由此可知：**不分片标志对较小的 IP 报文传输没有影响**。\n    \n2.  较大 IP 报文\n    \n    观察不分片标志对较大 IP 报文传输的影响，在 命令提示符中输入 `ping -l 1473 -f 192.168.1.102`，结果如图所示：\n    \n    ![image-20230515140248049](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515140248049.png)\n    \n    ![image-20230515135911764](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515135911764.png)\n    \n    可见：**由于IP报文的长度（IP首部 20 + ICMP首部 8 + 数据长度1473 ＝1501 ）过大（超过了 MTU 的 1500 长度），不分片标志会导致超过 MTU 的长报文无法传输**。\n    \n\n#### 4.3.2 分片报文传输\n\n打开命令提示符，输入`ping -l 3000 -n 1 192.168.1.102`，意思为只发送一个大小为3000的数据包。结果如下：\n\n![image-20230515141248724](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515141248724.png)\n\n![image-20230515141534981](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515141534981.png)\n\n需要封装在 IP数据包里面发送的数据大小为 **8（ICMP首部）+3000（数据包）= 3008**。\n\n第一个分片不能超过 MTU，所以为 **20（IP首部）+ 1480（数据分片）= 1500**；第二个分片不能超过 MTU，所以也为 **20（IP首部）+ 1480（数据分片）= 1500**；由于 **3008（数据总长度）- 1480 - 1480 = 48**，因此第三个分片大小为 **20（IP首部） + 48（剩余数据）=68**。分析结果与实验数据一致！\n\n## 5\\. Web服务器连接过程\n\n> 要求：从校园网发起向外网中某 Web 服务器的访问，记录并分析从 MAC 层协议、IP 协议、TCP 协议一直到 HTTP 协议的过程。\n\n### 5.1 访问云 Web服务器\n\n以个人网站 `http://47.94.12.50` 为例，后台打开 Wireshark嗅探，显示过滤器输入 `ip.addr == 47.94.12.50`。\n\n![image-20230515142423242](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515142423242.png)\n\n### 5.2 收到的数据报文\n\n在Wireshark嗅探到的数据报文如下所示：\n\n![image-20230515222714737](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515222714737.png)\n\n首先 主机先与云服务器进行第一次 TCP 连接，完成三次握手，然后应用层使用 HTTP 协议进行传输，最后传输层使用 TCP四次挥手释放第一次 TCP 连接。下面根据自下而上地分析从 MAC 层协议、IP 协议、TCP 协议一直到 HTTP 协议的过程。\n\n### 5.3 MAC 协议\n\n以**首次收到的 HTTP 报文**为例，其收到的以太网帧数据如下：\n\n![image-20230515223837966](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515223837966.png)\n\n由 以太网Ⅱ 帧的格式可知，此以太网帧的目的地址为 ca:9e:6b:d1:d7:\\*\\*，源地址为 a4:b1:c1:9b:28:\\*\\* ，类型为 0x0800。由于在我们抓到的包中，前八个字节的前导码和帧开始符已经被网卡过滤掉了所以我们抓不到。\n\n![image-20230515224231338](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515224231338.png)\n\n常见的类型对应值如下：\n\n值\n\n协议\n\n0x0800\n\nIPv4\n\n0x0806\n\nARP\n\n0x86DD\n\nIPv6\n\n0x88CC\n\nLLDP\n\n0x8035\n\nRARP\n\n我们的帧类型为`0x0800` 是一个 IPv4 的封装帧，后面的冗余校验也和前导码一样，已经被网卡删掉了，所以捕获不到，以太网的头部就已经全部抽离了，我们继续分析下一层协议：IPv4。\n\n### 5.4 IPv4 协议\n\n由此 IP报文 可知：\n\n![image-20230515224700109](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515224700109.png)\n\n*   **版本**：`4`（即 IPv4，0x0100 = 4）；\n*   **首部长度**：`20`（即 5 \\* 4B = 20B）；\n*   **ECN**：`Not-ECT`（显式拥塞通知**Explicit Congestion Notification**，简称**ECN**，`00`代表不支持 ECN）；\n*   **DF**：`1`（不分片）；\n*   **MF**：`0`（没有分片）；\n*   **Offset**：`0`（没有偏移）；\n\n由于以太网有 MTU 的包大小限制，IPv4 选择了通过分片重组的方式来向上层的传输层协议提供传输任意包大小的能力，DF、MF、Offset位就是用来进行**分片控制**的。\n\n*   TTL：`0x40 = 64`，代表了这个包的存活时间，还剩 64 s；\n    \n*   上层协议：`0x06 = 6`，代表 TCP， 常见取值如下：\n    \n\n取值\n\n协议\n\n1\n\nICMP\n\n6\n\nTCP\n\n17\n\nUDP\n\n*   **源 IP 地址**：192.168.93.86\n*   **目的 IP 地址**：47.94.12.50\n\n### 5.5 TCP协议\n\nIP 数据部分就是 TCP报文，其数据如下：\n\n![image-20230515232020133](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515232020133.png)\n\n*   源端口： `c0 8a -> 49290`。\n*   目的端口：`00 50 -> 80` 。\n\n最大端口值为 **2^16-1 = 65535**，端口号划分成了三段：\n\n端口范围\n\n用途\n\n0-1023\n\n公认端口。常见的公认端口有：ftp(21)、ssh(22 )、smtp(25)、http(80 )、https(443) 等。\n\n1024-49151\n\n用户自用。一般操作系统会随机在其中选择可用端口。\n\n49152-65535\n\n保留端口。一般不推荐使用，因为用户端口也很够用了。\n\n*   **序列号**：`2288663079`。\n*   **确认号**：`2099426961`。\n\n之后紧接着是九个启用中的标志位，下面我们来逐位分析。\n\n*   **NS**: ECN-nonce，显式拥塞通知（Explicit Congestion Notification），这个是和 IP 层的 ECN 一样，主动表示发生了网络拥塞的信号。\n*   **CWR**: Congestion Window Reduced，这个是配合 ECN 标志位使用的，用来通知发送者拥塞窗口已经调小。\n*   **ECE**：ECN-Echo，这个标志位主要是用 TCP 连接在握手的时候用来协商两端是否都支持显示拥塞控制。\n*   **URG**: Urgent Pointer field significant，代表存在于选项中的紧急指针字段已经启用，需要尽快处理这些数据，不过使用的范围不广。\n*   **ACK**: Acknowledgment field significant，代表 ACK 字段有效。\n*   **PSH**: Push Function，用于将缓冲区内的所有数据全部发送，不再等待，同时对端在收到 PSH 标志时，应立即将数据全部递交给上层应用处理，不用再等待数据合并提交。PSH 标志位和 TCP\\_NoDelay 选项的区别在于，PSH 是 TCP 报文中的字段，对端也会做出对应的响应，而 TCP\\_NoDelay 只是内核的一个参数，用于在当前应用中关闭 Nagle 算法。\n*   **RST**: Reset，用于重置当前连接，一般用于拒绝连接，或者出现错误时指示重建连接。\n*   **SYN**: Synchronize sequence numbers，同步序列号，用于建立连接并同步序列号。\n*   **FIN**: Finish, 用于关闭连接，表明没有数据要发送了。\n\n在我们的包中，这九个标志位分别是：000011000，ACK = 1，PSH = 1，代表 ACK 字段是生效的，\n\n*   窗口大小：`259`，单位是字节。\n    \n*   校验和：`5c 05` ，这个校验和在计算时不仅包括头部，也包括了传输内容。\n    \n*   紧急指针：我们这里 URG 标志位是 0，所以也就不存在紧急指针，这 16 位全是 `0`。\n    \n*   TCP 的选项字段：TCP 选项是不定长的。\n    \n\n### 5.6 HTTP 协议\n\n![image-20230515233827525](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515233827525.png)\n\n由此 HTTP报文可知主机通过 HTTP/1.1 协议使用 GET 的请求方法向 服务器 资源发起请求。\n\n*   Host ：`47.94.12.50`，代表了请求资源所属的主机。\n*   User-Agent：`Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36`，代表主机使用的 HTTP 协议的客户端类型。\n*   Accept: `text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7`， 代表客户端这边支持任何类型的资源。\n\n### 5.7 总结\n\n计算机网络的组成可以自底向上地总结为以下几个层次，每个层次负责不同的功能和任务：\n\n1.  物理层\n    \n    *   物理层是计算机网络的最底层，负责传输原始的比特流。\n    *   它定义了电气、光学和机械接口的规范，以及传输介质的特性和传输速率等。\n    *   主要任务是将比特流从发送端传输到接收端，没有对数据进行处理或分析。\n2.  数据链路层\n    \n    *   数据链路层建立在物理层之上，负责在直接相连的节点之间可靠地传输数据。\n    *   它将比特流划分为帧，处理错误检测和纠正，以及帧的传输控制。\n    *   主要任务是提供可靠的数据传输，并处理节点之间的通信错误。\n3.  网络层\n    \n    *   网络层是在数据链路层之上，处理不同网络之间的数据包转发和路由选择。\n    *   它负责将数据包从源主机传输到目标主机，通过路由选择算法确定数据包的最佳路径。\n    *   主要任务是实现逻辑上的主机到主机的通信，以及网络互联和互操作性。\n4.  传输层\n    \n    *   传输层建立在网络层之上，提供端到端的数据传输和服务质量控制。\n    *   它为应用程序提供可靠的数据传输和错误恢复，并进行流量控制和拥塞控制。\n    *   主要任务是确保数据在源主机和目标主机之间的可靠传输，以及提供端到端的连接和通信服务。\n5.  应用层\n    \n    *   应用层是网络的最高层，提供特定应用程序和用户之间的接口。\n    *   它包括各种应用层协议和服务，例如电子邮件、文件传输、Web浏览等。\n    *   主要任务是为用户提供各种应用程序和服务，以满足特定的通信需求。\n\n通过这次Wireshark抓包实验帮助了我更深层次地理解每一层的功能和责任，以及它们如何协同工作来实现可靠的数据通信和应用服务！","slug":"计算机网络大作业","published":1,"updated":"2024-03-12T10:41:45.392Z","_id":"cltnrar5d0032jry1a6jadlzs","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"实验要求\"><a href=\"#实验要求\" class=\"headerlink\" title=\"实验要求\"></a>实验要求</h2><ol>\n<li> wireshark的深入学习与掌握，如过滤器的使用，归纳方法</li>\n<li> 通过实验阐述ARP的工作原理</li>\n<li> 利用实验结果分析 ICMP 协议的报文结构字段定义</li>\n<li> 基于实验数据深入分析 TCP 协议的连接过程原理，报文的分片等功能</li>\n<li> 从校园网发起向外网中某 Web 服务器的访问，记录并分析从 MAC 层协议、IP 协议、TCP 协议一直到 HTTP 协议的过程<span id=\"more\"></span>\n<h2 id=\"1-Wireshark学习\"><a href=\"#1-Wireshark学习\" class=\"headerlink\" title=\"1. Wireshark学习\"></a>1. Wireshark学习</h2></li>\n</ol>\n<h3 id=\"1-1-什么是Wireshark？\"><a href=\"#1-1-什么是Wireshark？\" class=\"headerlink\" title=\"1.1 什么是Wireshark？\"></a>1.1 什么是Wireshark？</h3><p>Wireshark 是一个网络数据包分析器。以下是 Wireshark 提供的众多功能中的一部分：</p>\n<ul>\n<li>  适用于_UNIX_和_Windows_。</li>\n<li>  从网络接口 <em>捕获实时数据包数据。</em></li>\n<li>  显示包含_非常详细协议信息的_数据包。</li>\n<li>  _保存_捕获的数据包数据。</li>\n<li>  以多种捕获文件格式 <em>导出部分或全部数据包。</em></li>\n<li>  根据许多标准 <em>过滤数据包。</em></li>\n<li>  根据许多条件 <em>搜索数据包。</em></li>\n<li>  根据过滤器对数据包显示 <em>进行着色。</em></li>\n<li>  创建各种_统计数据_。</li>\n<li>  ….等等</li>\n</ul>\n<h3 id=\"1-2-Wireshark支持的网络类型\"><a href=\"#1-2-Wireshark支持的网络类型\" class=\"headerlink\" title=\"1.2 Wireshark支持的网络类型\"></a>1.2 Wireshark支持的网络类型</h3><p>Wireshark使用 <strong>libpcap/WinPcap</strong> 捕获库，其捕获机制不支持在所有平台上捕获所有网络类型。各平台支持的网络类型如下：</p>\n<p>Interface</p>\n<p>Linux</p>\n<p>macOS</p>\n<p>Windows</p>\n<p>蓝牙</p>\n<p>✅</p>\n<p>❌</p>\n<p>❌</p>\n<p>以太网</p>\n<p>✅</p>\n<p>✅</p>\n<p>✅</p>\n<p>USB</p>\n<p>✅</p>\n<p>❌</p>\n<p>❌</p>\n<p>无线局域网</p>\n<p>✅</p>\n<p>✅</p>\n<p>✅</p>\n<p>PPP链路</p>\n<p>✅</p>\n<p>✅</p>\n<p>✅</p>\n<ul>\n<li>  <strong>蓝牙 -</strong> 捕获蓝牙流量 - 目前仅限于在 linux 上附加堆栈。</li>\n<li>  <strong>以太网 -</strong> 在不同的以太网拓扑上捕获，包括交换网络。</li>\n<li>  <strong>USB -</strong> 捕获原始 USB 流量。</li>\n<li>  <strong>WLAN -</strong> 在 802.11（WLAN、Wi-Fi）接口上捕获，包括“监控模式”、原始 802.11 标头和无线电信息。</li>\n<li>  <strong>PPP链接 -</strong> 在拨号线路、ISDN 连接和 PPP-over-Ethernet（PPPoe，例如 ADSL）上捕获。</li>\n</ul>\n<h3 id=\"1-3-Wireshark过滤器\"><a href=\"#1-3-Wireshark过滤器\" class=\"headerlink\" title=\"1.3 Wireshark过滤器\"></a>1.3 Wireshark过滤器</h3><h4 id=\"1-3-1-实验环境\"><a href=\"#1-3-1-实验环境\" class=\"headerlink\" title=\"1.3.1 实验环境\"></a>1.3.1 实验环境</h4><p>系统</p>\n<p>信息</p>\n<p>操作系统名称</p>\n<p>Microsoft Windows 11 家庭中文版</p>\n<p>版本</p>\n<p>10.0.22621 版本 22621</p>\n<p>处理器</p>\n<p>Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz，2112 Mhz，4 个内核，8 个逻辑处理器</p>\n<p>系统类型</p>\n<p>基于 x64 的电脑</p>\n<p>网卡类型</p>\n<p>Intel(R) Wireless-AC 9462</p>\n<p>Wireshark版本</p>\n<p>4.0.5-64bit</p>\n<h4 id=\"1-3-2-界面\"><a href=\"#1-3-2-界面\" class=\"headerlink\" title=\"1.3.2 界面\"></a>1.3.2 界面</h4><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513151954191.png\" alt=\"image-20230513151954191\"></p>\n<p>Wireshark首页主要分为以下几个界面：</p>\n<ol>\n<li> 菜单栏（包括文件、编辑、视图、捕获等功能）</li>\n<li> 工具栏（开始/停止捕获、查找分组等）</li>\n<li> 过滤栏（用于设置过滤条件进行数据包列表过滤）</li>\n<li> 数据列表区（显示捕获到的数据包，每个数据包包含编号，时间戳，源地址，目标地址，协议，长度，以及数据包信息。）</li>\n<li> 数据详细区（显示数据包的所有详细信息内容）</li>\n<li> 数据字节区（显示数据包原始字节流信息）</li>\n<li> 数据统计区（统计捕获到的分组数）</li>\n</ol>\n<h4 id=\"1-3-3-过滤器的使用\"><a href=\"#1-3-3-过滤器的使用\" class=\"headerlink\" title=\"1.3.3 过滤器的使用\"></a>1.3.3 过滤器的使用</h4><p>Wireshark的过滤器可以分为两种主要类型：<strong>捕获过滤器</strong> 和 <strong>显示过滤器</strong>。</p>\n<ol>\n<li> 捕获过滤器：使用Wireshark的捕获过滤器，用户可以过滤捕获的数据包以匹配用户指定的条件。这些过滤器可以根据协议、源/目标IP地址、端口、协议标志等条件进行设置。捕获过滤器可以手动输入或通过菜单选择，也可以从过滤器面板中选择预定义的过滤器。</li>\n<li> 显示过滤器：使用Wireshark的显示过滤器，用户可以将已捕获的数据包按照指定的条件进行过滤，并只显示与这些条件匹配的数据包。这些条件可以基于协议、源/目标IP地址、端口、时间戳等。显示过滤器可以通过在过滤器面板中手动输入或选择预定义的过滤器来创建。显示过滤器可以帮助用户快速查找感兴趣的数据包，也可以节省屏幕空间和处理时间。</li>\n</ol>\n<h5 id=\"1-3-3-1-捕获过滤器\"><a href=\"#1-3-3-1-捕获过滤器\" class=\"headerlink\" title=\"1.3.3.1 捕获过滤器\"></a>1.3.3.1 捕获过滤器</h5><p>捕获过滤器位于菜单栏的 <strong>捕获–&gt; 捕获过滤器</strong>。用于捕获数据包前设置捕获条件。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513154122675.png\" alt=\"image-20230513154122675\"></p>\n<h5 id=\"1-3-3-2显示过滤器\"><a href=\"#1-3-3-2显示过滤器\" class=\"headerlink\" title=\"1.3.3.2显示过滤器\"></a>1.3.3.2显示过滤器</h5><p>显示过滤器位于首页的 <strong>工具栏下方</strong> 的输入框。</p>\n<p>当我们在终端输入 <code>ping www.baidu.com</code> 时，在捕获时未设置抓包过滤规则直接通过网卡进行抓取所有数据包，如下</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513154600207.png\" alt=\"image-20230513154600207\"></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513155302679.png\" alt=\"image-20230513155302679\"></p>\n<p>此时数据包内容较多，为了筛选我们想要的信息，则需要在显示过滤器中添加我们想要的过滤条件</p>\n<p>如：<code>ip.addr == 39.156.66.14</code> ，得到如下结果</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513155458878.png\" alt=\"image-20230513155458878\"></p>\n<p>即可得到我们想要的 Ping 之后的 ICMP 报文。这基本上满足了我们的需求！</p>\n<h5 id=\"1-3-3-3-过滤规则总结\"><a href=\"#1-3-3-3-过滤规则总结\" class=\"headerlink\" title=\"1.3.3.3 过滤规则总结\"></a>1.3.3.3 过滤规则总结</h5><p>当使用Wireshark时，可以使用过滤规则来筛选和查看感兴趣的数据包。以下是一些常用的Wireshark过滤规则：</p>\n<ol>\n<li> 过滤特定IP地址：可以使用以下过滤器来查看特定IP地址的数据包：</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip.addr == x.x.x.x  <span class=\"comment\">//x.x.x.x为特定IP地址</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li> 过滤特定IP地址和端口号：可以使用以下过滤器来查看特定IP地址和端口号的数据包：</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(ip.addr == x.x.x.x) &amp;&amp; (tcp.port == n)  <span class=\"comment\">//x.x.x.x为特定IP地址，n为端口号</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li> 过滤特定协议：可以使用以下过滤器来查看特定协议的数据包：</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp  <span class=\"comment\">//只显示TCP协议的数据包</span></span><br><span class=\"line\">udp  <span class=\"comment\">//只显示UDP协议的数据包</span></span><br><span class=\"line\">icmp  <span class=\"comment\">//只显示ICMP协议的数据包</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li> 过滤特定的数据包大小：可以使用以下过滤器来查看特定大小的数据包：</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame.len == n  <span class=\"comment\">//只显示大小为n的数据包</span></span><br><span class=\"line\">frame.len &gt; n  <span class=\"comment\">//只显示大小大于n的数据包</span></span><br><span class=\"line\">frame.len &lt; n  <span class=\"comment\">//只显示大小小于n的数据包</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li> 过滤特定的数据包类型：可以使用以下过滤器来查看特定类型的数据包：</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dns  <span class=\"comment\">//只显示DNS数据包</span></span><br><span class=\"line\">http  <span class=\"comment\">//只显示HTTP数据包</span></span><br><span class=\"line\">ssl  <span class=\"comment\">//只显示SSL数据包</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li> 过滤特定的数据包内容：可以使用以下过滤器来查看特定内容的数据包：</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.request.method == <span class=\"string\">&quot;POST&quot;</span>  <span class=\"comment\">//只显示HTTP POST请求</span></span><br><span class=\"line\">http.response.code == <span class=\"number\">200</span>  <span class=\"comment\">//只显示HTTP 200响应</span></span><br><span class=\"line\">dns.qry.name == <span class=\"string\">&quot;www.example.com&quot;</span>  <span class=\"comment\">//只显示请求www.example.com的DNS数据包</span></span><br></pre></td></tr></table></figure>\n\n<p>这些是常用的Wireshark过滤规则示例。还有很多其他过滤规则，可以根据具体情况进行选择和设置。</p>\n<blockquote>\n<p>官网显示过滤器参考：<a href=\"https://www.wireshark.org/docs/dfref/\">https://www.wireshark.org/docs/dfref/</a></p>\n</blockquote>\n<h2 id=\"2-ARP-原理探究\"><a href=\"#2-ARP-原理探究\" class=\"headerlink\" title=\"2. ARP 原理探究\"></a>2. ARP 原理探究</h2><p>ARP（Address Resolution Protocol，地址解析协议）是一种用于将IP地址映射到物理MAC地址的协议。ARP是在本地网络中运行的协议，其目的是为了在不同网络层之间建立映射关系，使得数据包能够正确地被传送到其目的地。</p>\n<h3 id=\"2-1-实验准备\"><a href=\"#2-1-实验准备\" class=\"headerlink\" title=\"2. 1 实验准备\"></a>2. 1 实验准备</h3><p>两台主机A、B，且连接同一个局域网。</p>\n<h4 id=\"2-1-1-查看主机IP地址和MAC地址\"><a href=\"#2-1-1-查看主机IP地址和MAC地址\" class=\"headerlink\" title=\"2.1.1 查看主机IP地址和MAC地址\"></a>2.1.1 查看主机IP地址和MAC地址</h4><p>Windows 下打开命令提示符，输入<code>ipconfig/all</code>：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165731283.png\" alt=\"image-20230513165731283\"></p>\n<p>得到当前A主机的MAC地址为 <strong>A4-B1-C1-9B-28-**<strong>，校园网下IP地址为：</strong>192.168.1.101</strong></p>\n<p>B主机的MAC地址为 **D8-12-65-6E-D3-****，校园网下IP地址为 <strong>192.168.1.100</strong></p>\n<p>主机</p>\n<p>IP地址</p>\n<p>MAC地址</p>\n<p>A</p>\n<p>192.168.1.101</p>\n<p>A4-B1-C1-9B-28-**</p>\n<p>B（实验机）</p>\n<p>192.168.1.100</p>\n<p>D8-12-65-6E-D3-**</p>\n<h3 id=\"2-2-查看ARP表\"><a href=\"#2-2-查看ARP表\" class=\"headerlink\" title=\"2.2 查看ARP表\"></a>2.2 查看ARP表</h3><p>在 A 主机下查看当前 ARP 表，输入 <code>arp -a</code>，结果如下:</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513162621231.png\" alt=\"image-20230513162621231\"></p>\n<p>此时并未有 B 主机的 ARP表项。</p>\n<h3 id=\"2-3-Wireshark捕获\"><a href=\"#2-3-Wireshark捕获\" class=\"headerlink\" title=\"2.3 Wireshark捕获\"></a>2.3 Wireshark捕获</h3><p>后台打开相应网卡开始捕获，此时 A 主机命令提示符输入<code>ping 192.168.1.100</code>，向B发送 ICMP 报文以及 A主机发送ARP广播。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513162734153.png\" alt=\"image-20230513162734153\"></p>\n<p>此时在重新输入 <code>arp -a</code>，发现得到 B 主机的相应MAC地址，实验成功！</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513162856471.png\" alt=\"image-20230513162856471\"></p>\n<h3 id=\"2-4-Wireshark分析ARP原理\"><a href=\"#2-4-Wireshark分析ARP原理\" class=\"headerlink\" title=\"2.4 Wireshark分析ARP原理\"></a>2.4 Wireshark分析ARP原理</h3><ol>\n<li>首先，假设主机A需要向主机B发送一个数据包，但是不知道主机B的物理地址（MAC地址），只知道主机B的IP地址，主机A将一个ARP请求广播到本地网络中的所有设备，请求包含目标IP地址和发送者MAC地址（通常是广播地址）。 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165133299.png\" alt=\"image-20230513165133299\"></li>\n<li>交换机S接收到ARP请求，并将其转发到本地网络中的所有设备。由于这是一个广播消息，因此每个设备都会接收到此请求。主机B接收到ARP请求，检查其中的IP地址是否匹配自己的IP地址。如果是，主机B会向主机A发送一个ARP响应，该响应包含其MAC地址。 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165143618.png\" alt=\"image-20230513165143618\"></li>\n<li>ARP响应被广播到本地网络中的所有设备，主机A接收到响应并保存主机B的MAC地址到其ARP缓存中，以备将来使用。 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165153279.png\" alt=\"image-20230513165153279\"> <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165200438.png\" alt=\"image-20230513165200438\"></li>\n</ol>\n<p>通过上述实验，我们可以看出ARP的工作原理是通过广播的方式，在本地网络中进行的。ARP请求和响应都是广播消息，这意味着所有的网络设备都能够接收到并处理它们。ARP缓存记录了IP地址和对应的MAC地址，这可以避免重复的ARP请求并加速数据包的传输。</p>\n<p><strong>总结：ARP是一种在本地网络中工作的协议，它允许主机在不知道目标MAC地址的情况下查找目标设备的物理地址，从而实现数据包的正确传输。</strong></p>\n<h2 id=\"3-ICMP-协议的报文结构定义\"><a href=\"#3-ICMP-协议的报文结构定义\" class=\"headerlink\" title=\"3. ICMP 协议的报文结构定义\"></a>3. ICMP 协议的报文结构定义</h2><h3 id=\"3-1-获取ICMP报文\"><a href=\"#3-1-获取ICMP报文\" class=\"headerlink\" title=\"3.1 获取ICMP报文\"></a>3.1 获取ICMP报文</h3><p>由于 Ping 工作在应用层且直接使用网络层的 ICMP 协议，根据这个原理，在命令提示符输入 <code>ping 192.168.1.100</code> 即可在 Wireshark 捕获到 ICMP 报文，在显示过滤器里面输入 <code>icmp</code> 即可得到相应的 ICMP 报文数据。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513211214962.png\" alt=\"image-20230513211214962\"></p>\n<h3 id=\"3-2-ICMP结构分析\"><a href=\"#3-2-ICMP结构分析\" class=\"headerlink\" title=\"3.2 ICMP结构分析\"></a>3.2 ICMP结构分析</h3><h4 id=\"3-2-1-IP数据报\"><a href=\"#3-2-1-IP数据报\" class=\"headerlink\" title=\"3.2.1 IP数据报\"></a>3.2.1 IP数据报</h4><p>查看IP数据报，观察IP数据报的首部字段及其内容，其报文结构如下：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513211831188.png\" alt=\"image-20230513211831188\"></p>\n<h4 id=\"3-2-2-ICMP-数据报\"><a href=\"#3-2-2-ICMP-数据报\" class=\"headerlink\" title=\"3.2.2 ICMP 数据报\"></a>3.2.2 ICMP 数据报</h4><p>点击<strong>Internet Control Message Protocol</strong>展开，查看 ICMP报文，如下分别为ICMP询问报文的回送请求报文和回答报文的首部字段。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513213004979.png\" alt=\"image-20230513213004979\"></p>\n<p>由此我们可以得到的 ICMP报文结构定义如下：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513213440346.png\" alt=\"image-20230513213440346\"></p>\n<ul>\n<li>  类型（8 bits）：表示ICMP报文的类型，共有14种类型（例如回显请求、回显响应、目标不可达等）。Type的值在1~255之间，不同的类型有不同的Code值。</li>\n<li>  代码（8 bits）：表示ICMP报文的代码，用于更精确地描述ICMP报文的目的。Code的值在0~255之间，不同的Code值对应不同的类型。</li>\n<li>  校验和（16 bits）：是ICMP报文的校验和，用于检测数据是否传输过程中发生了错误。</li>\n<li>  数据（可变长度）：是ICMP报文的数据部分，其长度取决于ICMP报文的类型和代码。</li>\n</ul>\n<h2 id=\"4-TCP-原理探究\"><a href=\"#4-TCP-原理探究\" class=\"headerlink\" title=\"4. TCP 原理探究\"></a>4. TCP 原理探究</h2><h3 id=\"4-1-实验准备\"><a href=\"#4-1-实验准备\" class=\"headerlink\" title=\"4.1 实验准备\"></a>4.1 实验准备</h3><ol>\n<li>获取 <code>www.baidu.com</code> 的实际IP地址，在命令提示符输入： <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping www.baidu.com</span><br></pre></td></tr></table></figure>\n <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514181536098.png\" alt=\"image-20230514181536098\"> 得到当前 <code>www.baidu.com</code> 的 IP 地址为：<strong>39.156.66.14</strong></li>\n<li>打开 Wireshark 捕获，开始抓取数据包，并在显示过滤器加入过滤条件： <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip.addr == <span class=\"number\">39.156</span><span class=\"number\">.66</span><span class=\"number\">.14</span> </span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"4-2-TCP-三次握手原理\"><a href=\"#4-2-TCP-三次握手原理\" class=\"headerlink\" title=\"4.2 TCP 三次握手原理\"></a>4.2 TCP 三次握手原理</h3><p>此时在主机的浏览器搜索栏输入 <code>www.baidu.com</code> 进入百度网站，在 Wireshark 中观察TCP报文的捕获情况，如下：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514181922252.png\" alt=\"image-20230514181922252\"></p>\n<p>可以看到浏览器打开百度网站时，本主机与百度服务器进行了 <strong>TCP三次握手</strong> ，根据这三次握手，分析 TCP连接管理的原理。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/v2-8ce8c897b4d5e7397b25eb4d4b31d7fc_r.jpg\" alt=\"img\"></p>\n<h4 id=\"4-2-1-第一次握手阶段\"><a href=\"#4-2-1-第一次握手阶段\" class=\"headerlink\" title=\"4.2.1 第一次握手阶段\"></a>4.2.1 第一次握手阶段</h4><p>由于 TCP协议是负责主机 <strong>端到端</strong> 的连接，因此本主机操作系统随机选取其中一个 <strong>动态端口号（49152~65535）</strong>，本例中选取了 <code>54617</code> 作为源端口号，目的端口号是百度服务器提供的 HTTPS端口 <code>443</code>，由于此报文是 TCP同步报文，因此此时 ACK 位为 0（Not set），SYN 位为 1，随机序列号为 <code>948123796</code>。此时为客户端请求建立链接阶段，客户端进入 <strong>同步已发送</strong> 状态，等待服务器端确认，如图所示，TCP报文如下：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514184206965.png\" alt=\"image-20230514184206965\"></p>\n<h4 id=\"4-2-2-第二次握手阶段\"><a href=\"#4-2-2-第二次握手阶段\" class=\"headerlink\" title=\"4.2.2 第二次握手阶段\"></a>4.2.2 第二次握手阶段</h4><p>此时源端口为百度服务器提供的 HTTPS端口 <code>443</code>，目的端口为本主机的 <code>54617</code>，确认号为 <code>948123796+1</code>，即表示已成功收到 第一次握手阶段 的请求建立连接报文！此时第二次握手阶段的TCP报文随机选取一个序列号为 <code>3375721040</code>，同步位和确认位均为 1。百度服务器将该数据包发送给客户端以表示确认连接请求，服务器端进入<strong>同步已接收</strong> 状态。TCP报文如下所示：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514184918940.png\" alt=\"image-20230514184918940\"></p>\n<h4 id=\"4-2-3-第三次握手阶段\"><a href=\"#4-2-3-第三次握手阶段\" class=\"headerlink\" title=\"4.2.3 第三次握手阶段\"></a>4.2.3 第三次握手阶段</h4><p>本主机收到第二次握手阶段的TCP报文后，向百度服务器发送一个确认报文，表示收到了确认信息。该报文中的ACK字段值为收到的 <code>3375721040+1</code>，并且序列号为收到的ACK值 <code>948123796+1</code>。客户端和服务器端进入 <strong>连接已建立</strong> 状态，完成三次握手，此时 TCP 报文如下：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514185901730.png\" alt=\"image-20230514185901730\"></p>\n<p><strong>至此本主机和百度服务器成功建立可靠的TCP连接！随后客户端与服务器端之间可以开始传输数据。</strong></p>\n<h3 id=\"4-3-报文的分片\"><a href=\"#4-3-报文的分片\" class=\"headerlink\" title=\"4.3 报文的分片\"></a>4.3 报文的分片</h3><h4 id=\"4-3-1-不分片报文传输\"><a href=\"#4-3-1-不分片报文传输\" class=\"headerlink\" title=\"4.3.1 不分片报文传输\"></a>4.3.1 不分片报文传输</h4><ol>\n<li>较短 IP 报文 观察不分片标志对于较短的 IP 报文传输的影响，在 命令提示符中输入 <code>ping -l 1472 -f 192.168.1.102</code>，意思是向 192.168.1.102 主机发送长度为 1472字节的数据包，<strong>但是此 IP报文 不进行分片</strong>，结果如图所示：<img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515134923956.png\" alt=\"image-20230515134923956\"><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515135317906.png\" alt=\"image-20230515135317906\"> 可见以太网帧总长度为 <strong>IP首部 20 + ICMP首部 8 + 数据长度1472 ＝1500</strong>（小于等于 <strong>MTU</strong> 的 1500），不分片标志的片位移为 0，由此可知：<strong>不分片标志对较小的 IP 报文传输没有影响</strong>。</li>\n<li>较大 IP 报文 观察不分片标志对较大 IP 报文传输的影响，在 命令提示符中输入 <code>ping -l 1473 -f 192.168.1.102</code>，结果如图所示： <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515140248049.png\" alt=\"image-20230515140248049\"> <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515135911764.png\" alt=\"image-20230515135911764\"> 可见：<strong>由于IP报文的长度（IP首部 20 + ICMP首部 8 + 数据长度1473 ＝1501 ）过大（超过了 MTU 的 1500 长度），不分片标志会导致超过 MTU 的长报文无法传输</strong>。</li>\n</ol>\n<h4 id=\"4-3-2-分片报文传输\"><a href=\"#4-3-2-分片报文传输\" class=\"headerlink\" title=\"4.3.2 分片报文传输\"></a>4.3.2 分片报文传输</h4><p>打开命令提示符，输入<code>ping -l 3000 -n 1 192.168.1.102</code>，意思为只发送一个大小为3000的数据包。结果如下：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515141248724.png\" alt=\"image-20230515141248724\"></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515141534981.png\" alt=\"image-20230515141534981\"></p>\n<p>需要封装在 IP数据包里面发送的数据大小为 <strong>8（ICMP首部）+3000（数据包）= 3008</strong>。</p>\n<p>第一个分片不能超过 MTU，所以为 <strong>20（IP首部）+ 1480（数据分片）= 1500</strong>；第二个分片不能超过 MTU，所以也为 <strong>20（IP首部）+ 1480（数据分片）= 1500</strong>；由于 <strong>3008（数据总长度）- 1480 - 1480 = 48</strong>，因此第三个分片大小为 <strong>20（IP首部） + 48（剩余数据）=68</strong>。分析结果与实验数据一致！</p>\n<h2 id=\"5-Web服务器连接过程\"><a href=\"#5-Web服务器连接过程\" class=\"headerlink\" title=\"5. Web服务器连接过程\"></a>5. Web服务器连接过程</h2><blockquote>\n<p>要求：从校园网发起向外网中某 Web 服务器的访问，记录并分析从 MAC 层协议、IP 协议、TCP 协议一直到 HTTP 协议的过程。</p>\n</blockquote>\n<h3 id=\"5-1-访问云-Web服务器\"><a href=\"#5-1-访问云-Web服务器\" class=\"headerlink\" title=\"5.1 访问云 Web服务器\"></a>5.1 访问云 Web服务器</h3><p>以个人网站 <code>http://47.94.12.50</code> 为例，后台打开 Wireshark嗅探，显示过滤器输入 <code>ip.addr == 47.94.12.50</code>。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515142423242.png\" alt=\"image-20230515142423242\"></p>\n<h3 id=\"5-2-收到的数据报文\"><a href=\"#5-2-收到的数据报文\" class=\"headerlink\" title=\"5.2 收到的数据报文\"></a>5.2 收到的数据报文</h3><p>在Wireshark嗅探到的数据报文如下所示：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515222714737.png\" alt=\"image-20230515222714737\"></p>\n<p>首先 主机先与云服务器进行第一次 TCP 连接，完成三次握手，然后应用层使用 HTTP 协议进行传输，最后传输层使用 TCP四次挥手释放第一次 TCP 连接。下面根据自下而上地分析从 MAC 层协议、IP 协议、TCP 协议一直到 HTTP 协议的过程。</p>\n<h3 id=\"5-3-MAC-协议\"><a href=\"#5-3-MAC-协议\" class=\"headerlink\" title=\"5.3 MAC 协议\"></a>5.3 MAC 协议</h3><p>以<strong>首次收到的 HTTP 报文</strong>为例，其收到的以太网帧数据如下：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515223837966.png\" alt=\"image-20230515223837966\"></p>\n<p>由 以太网Ⅱ 帧的格式可知，此以太网帧的目的地址为 ca:9e:6b:d1:d7:**，源地址为 a4:b1:c1:9b:28:** ，类型为 0x0800。由于在我们抓到的包中，前八个字节的前导码和帧开始符已经被网卡过滤掉了所以我们抓不到。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515224231338.png\" alt=\"image-20230515224231338\"></p>\n<p>常见的类型对应值如下：</p>\n<p>值</p>\n<p>协议</p>\n<p>0x0800</p>\n<p>IPv4</p>\n<p>0x0806</p>\n<p>ARP</p>\n<p>0x86DD</p>\n<p>IPv6</p>\n<p>0x88CC</p>\n<p>LLDP</p>\n<p>0x8035</p>\n<p>RARP</p>\n<p>我们的帧类型为<code>0x0800</code> 是一个 IPv4 的封装帧，后面的冗余校验也和前导码一样，已经被网卡删掉了，所以捕获不到，以太网的头部就已经全部抽离了，我们继续分析下一层协议：IPv4。</p>\n<h3 id=\"5-4-IPv4-协议\"><a href=\"#5-4-IPv4-协议\" class=\"headerlink\" title=\"5.4 IPv4 协议\"></a>5.4 IPv4 协议</h3><p>由此 IP报文 可知：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515224700109.png\" alt=\"image-20230515224700109\"></p>\n<ul>\n<li>  <strong>版本</strong>：<code>4</code>（即 IPv4，0x0100 = 4）；</li>\n<li>  <strong>首部长度</strong>：<code>20</code>（即 5 * 4B = 20B）；</li>\n<li>  <strong>ECN</strong>：<code>Not-ECT</code>（显式拥塞通知<strong>Explicit Congestion Notification</strong>，简称<strong>ECN</strong>，<code>00</code>代表不支持 ECN）；</li>\n<li>  <strong>DF</strong>：<code>1</code>（不分片）；</li>\n<li>  <strong>MF</strong>：<code>0</code>（没有分片）；</li>\n<li>  <strong>Offset</strong>：<code>0</code>（没有偏移）；</li>\n</ul>\n<p>由于以太网有 MTU 的包大小限制，IPv4 选择了通过分片重组的方式来向上层的传输层协议提供传输任意包大小的能力，DF、MF、Offset位就是用来进行<strong>分片控制</strong>的。</p>\n<ul>\n<li>TTL：<code>0x40 = 64</code>，代表了这个包的存活时间，还剩 64 s；</li>\n<li>上层协议：<code>0x06 = 6</code>，代表 TCP， 常见取值如下：</li>\n</ul>\n<p>取值</p>\n<p>协议</p>\n<p>1</p>\n<p>ICMP</p>\n<p>6</p>\n<p>TCP</p>\n<p>17</p>\n<p>UDP</p>\n<ul>\n<li>  <strong>源 IP 地址</strong>：192.168.93.86</li>\n<li>  <strong>目的 IP 地址</strong>：47.94.12.50</li>\n</ul>\n<h3 id=\"5-5-TCP协议\"><a href=\"#5-5-TCP协议\" class=\"headerlink\" title=\"5.5 TCP协议\"></a>5.5 TCP协议</h3><p>IP 数据部分就是 TCP报文，其数据如下：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515232020133.png\" alt=\"image-20230515232020133\"></p>\n<ul>\n<li>  源端口： <code>c0 8a -&gt; 49290</code>。</li>\n<li>  目的端口：<code>00 50 -&gt; 80</code> 。</li>\n</ul>\n<p>最大端口值为 <strong>2^16-1 = 65535</strong>，端口号划分成了三段：</p>\n<p>端口范围</p>\n<p>用途</p>\n<p>0-1023</p>\n<p>公认端口。常见的公认端口有：ftp(21)、ssh(22 )、smtp(25)、http(80 )、https(443) 等。</p>\n<p>1024-49151</p>\n<p>用户自用。一般操作系统会随机在其中选择可用端口。</p>\n<p>49152-65535</p>\n<p>保留端口。一般不推荐使用，因为用户端口也很够用了。</p>\n<ul>\n<li>  <strong>序列号</strong>：<code>2288663079</code>。</li>\n<li>  <strong>确认号</strong>：<code>2099426961</code>。</li>\n</ul>\n<p>之后紧接着是九个启用中的标志位，下面我们来逐位分析。</p>\n<ul>\n<li>  <strong>NS</strong>: ECN-nonce，显式拥塞通知（Explicit Congestion Notification），这个是和 IP 层的 ECN 一样，主动表示发生了网络拥塞的信号。</li>\n<li>  <strong>CWR</strong>: Congestion Window Reduced，这个是配合 ECN 标志位使用的，用来通知发送者拥塞窗口已经调小。</li>\n<li>  <strong>ECE</strong>：ECN-Echo，这个标志位主要是用 TCP 连接在握手的时候用来协商两端是否都支持显示拥塞控制。</li>\n<li>  <strong>URG</strong>: Urgent Pointer field significant，代表存在于选项中的紧急指针字段已经启用，需要尽快处理这些数据，不过使用的范围不广。</li>\n<li>  <strong>ACK</strong>: Acknowledgment field significant，代表 ACK 字段有效。</li>\n<li>  <strong>PSH</strong>: Push Function，用于将缓冲区内的所有数据全部发送，不再等待，同时对端在收到 PSH 标志时，应立即将数据全部递交给上层应用处理，不用再等待数据合并提交。PSH 标志位和 TCP_NoDelay 选项的区别在于，PSH 是 TCP 报文中的字段，对端也会做出对应的响应，而 TCP_NoDelay 只是内核的一个参数，用于在当前应用中关闭 Nagle 算法。</li>\n<li>  <strong>RST</strong>: Reset，用于重置当前连接，一般用于拒绝连接，或者出现错误时指示重建连接。</li>\n<li>  <strong>SYN</strong>: Synchronize sequence numbers，同步序列号，用于建立连接并同步序列号。</li>\n<li>  <strong>FIN</strong>: Finish, 用于关闭连接，表明没有数据要发送了。</li>\n</ul>\n<p>在我们的包中，这九个标志位分别是：000011000，ACK = 1，PSH = 1，代表 ACK 字段是生效的，</p>\n<ul>\n<li>窗口大小：<code>259</code>，单位是字节。</li>\n<li>校验和：<code>5c 05</code> ，这个校验和在计算时不仅包括头部，也包括了传输内容。</li>\n<li>紧急指针：我们这里 URG 标志位是 0，所以也就不存在紧急指针，这 16 位全是 <code>0</code>。</li>\n<li>TCP 的选项字段：TCP 选项是不定长的。</li>\n</ul>\n<h3 id=\"5-6-HTTP-协议\"><a href=\"#5-6-HTTP-协议\" class=\"headerlink\" title=\"5.6 HTTP 协议\"></a>5.6 HTTP 协议</h3><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515233827525.png\" alt=\"image-20230515233827525\"></p>\n<p>由此 HTTP报文可知主机通过 HTTP/1.1 协议使用 GET 的请求方法向 服务器 资源发起请求。</p>\n<ul>\n<li>  Host ：<code>47.94.12.50</code>，代表了请求资源所属的主机。</li>\n<li>  User-Agent：<code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36</code>，代表主机使用的 HTTP 协议的客户端类型。</li>\n<li>  Accept: <code>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</code>， 代表客户端这边支持任何类型的资源。</li>\n</ul>\n<h3 id=\"5-7-总结\"><a href=\"#5-7-总结\" class=\"headerlink\" title=\"5.7 总结\"></a>5.7 总结</h3><p>计算机网络的组成可以自底向上地总结为以下几个层次，每个层次负责不同的功能和任务：</p>\n<ol>\n<li>物理层<ul>\n<li>  物理层是计算机网络的最底层，负责传输原始的比特流。</li>\n<li>  它定义了电气、光学和机械接口的规范，以及传输介质的特性和传输速率等。</li>\n<li>  主要任务是将比特流从发送端传输到接收端，没有对数据进行处理或分析。</li>\n</ul>\n</li>\n<li>数据链路层<ul>\n<li>  数据链路层建立在物理层之上，负责在直接相连的节点之间可靠地传输数据。</li>\n<li>  它将比特流划分为帧，处理错误检测和纠正，以及帧的传输控制。</li>\n<li>  主要任务是提供可靠的数据传输，并处理节点之间的通信错误。</li>\n</ul>\n</li>\n<li>网络层<ul>\n<li>  网络层是在数据链路层之上，处理不同网络之间的数据包转发和路由选择。</li>\n<li>  它负责将数据包从源主机传输到目标主机，通过路由选择算法确定数据包的最佳路径。</li>\n<li>  主要任务是实现逻辑上的主机到主机的通信，以及网络互联和互操作性。</li>\n</ul>\n</li>\n<li>传输层<ul>\n<li>  传输层建立在网络层之上，提供端到端的数据传输和服务质量控制。</li>\n<li>  它为应用程序提供可靠的数据传输和错误恢复，并进行流量控制和拥塞控制。</li>\n<li>  主要任务是确保数据在源主机和目标主机之间的可靠传输，以及提供端到端的连接和通信服务。</li>\n</ul>\n</li>\n<li>应用层<ul>\n<li>  应用层是网络的最高层，提供特定应用程序和用户之间的接口。</li>\n<li>  它包括各种应用层协议和服务，例如电子邮件、文件传输、Web浏览等。</li>\n<li>  主要任务是为用户提供各种应用程序和服务，以满足特定的通信需求。</li>\n</ul>\n</li>\n</ol>\n<p>通过这次Wireshark抓包实验帮助了我更深层次地理解每一层的功能和责任，以及它们如何协同工作来实现可靠的数据通信和应用服务！</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"实验要求\"><a href=\"#实验要求\" class=\"headerlink\" title=\"实验要求\"></a>实验要求</h2><ol>\n<li> wireshark的深入学习与掌握，如过滤器的使用，归纳方法</li>\n<li> 通过实验阐述ARP的工作原理</li>\n<li> 利用实验结果分析 ICMP 协议的报文结构字段定义</li>\n<li> 基于实验数据深入分析 TCP 协议的连接过程原理，报文的分片等功能</li>\n<li> 从校园网发起向外网中某 Web 服务器的访问，记录并分析从 MAC 层协议、IP 协议、TCP 协议一直到 HTTP 协议的过程","more":"<h2 id=\"1-Wireshark学习\"><a href=\"#1-Wireshark学习\" class=\"headerlink\" title=\"1. Wireshark学习\"></a>1. Wireshark学习</h2></li>\n</ol>\n<h3 id=\"1-1-什么是Wireshark？\"><a href=\"#1-1-什么是Wireshark？\" class=\"headerlink\" title=\"1.1 什么是Wireshark？\"></a>1.1 什么是Wireshark？</h3><p>Wireshark 是一个网络数据包分析器。以下是 Wireshark 提供的众多功能中的一部分：</p>\n<ul>\n<li>  适用于_UNIX_和_Windows_。</li>\n<li>  从网络接口 <em>捕获实时数据包数据。</em></li>\n<li>  显示包含_非常详细协议信息的_数据包。</li>\n<li>  _保存_捕获的数据包数据。</li>\n<li>  以多种捕获文件格式 <em>导出部分或全部数据包。</em></li>\n<li>  根据许多标准 <em>过滤数据包。</em></li>\n<li>  根据许多条件 <em>搜索数据包。</em></li>\n<li>  根据过滤器对数据包显示 <em>进行着色。</em></li>\n<li>  创建各种_统计数据_。</li>\n<li>  ….等等</li>\n</ul>\n<h3 id=\"1-2-Wireshark支持的网络类型\"><a href=\"#1-2-Wireshark支持的网络类型\" class=\"headerlink\" title=\"1.2 Wireshark支持的网络类型\"></a>1.2 Wireshark支持的网络类型</h3><p>Wireshark使用 <strong>libpcap/WinPcap</strong> 捕获库，其捕获机制不支持在所有平台上捕获所有网络类型。各平台支持的网络类型如下：</p>\n<p>Interface</p>\n<p>Linux</p>\n<p>macOS</p>\n<p>Windows</p>\n<p>蓝牙</p>\n<p>✅</p>\n<p>❌</p>\n<p>❌</p>\n<p>以太网</p>\n<p>✅</p>\n<p>✅</p>\n<p>✅</p>\n<p>USB</p>\n<p>✅</p>\n<p>❌</p>\n<p>❌</p>\n<p>无线局域网</p>\n<p>✅</p>\n<p>✅</p>\n<p>✅</p>\n<p>PPP链路</p>\n<p>✅</p>\n<p>✅</p>\n<p>✅</p>\n<ul>\n<li>  <strong>蓝牙 -</strong> 捕获蓝牙流量 - 目前仅限于在 linux 上附加堆栈。</li>\n<li>  <strong>以太网 -</strong> 在不同的以太网拓扑上捕获，包括交换网络。</li>\n<li>  <strong>USB -</strong> 捕获原始 USB 流量。</li>\n<li>  <strong>WLAN -</strong> 在 802.11（WLAN、Wi-Fi）接口上捕获，包括“监控模式”、原始 802.11 标头和无线电信息。</li>\n<li>  <strong>PPP链接 -</strong> 在拨号线路、ISDN 连接和 PPP-over-Ethernet（PPPoe，例如 ADSL）上捕获。</li>\n</ul>\n<h3 id=\"1-3-Wireshark过滤器\"><a href=\"#1-3-Wireshark过滤器\" class=\"headerlink\" title=\"1.3 Wireshark过滤器\"></a>1.3 Wireshark过滤器</h3><h4 id=\"1-3-1-实验环境\"><a href=\"#1-3-1-实验环境\" class=\"headerlink\" title=\"1.3.1 实验环境\"></a>1.3.1 实验环境</h4><p>系统</p>\n<p>信息</p>\n<p>操作系统名称</p>\n<p>Microsoft Windows 11 家庭中文版</p>\n<p>版本</p>\n<p>10.0.22621 版本 22621</p>\n<p>处理器</p>\n<p>Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz，2112 Mhz，4 个内核，8 个逻辑处理器</p>\n<p>系统类型</p>\n<p>基于 x64 的电脑</p>\n<p>网卡类型</p>\n<p>Intel(R) Wireless-AC 9462</p>\n<p>Wireshark版本</p>\n<p>4.0.5-64bit</p>\n<h4 id=\"1-3-2-界面\"><a href=\"#1-3-2-界面\" class=\"headerlink\" title=\"1.3.2 界面\"></a>1.3.2 界面</h4><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513151954191.png\" alt=\"image-20230513151954191\"></p>\n<p>Wireshark首页主要分为以下几个界面：</p>\n<ol>\n<li> 菜单栏（包括文件、编辑、视图、捕获等功能）</li>\n<li> 工具栏（开始/停止捕获、查找分组等）</li>\n<li> 过滤栏（用于设置过滤条件进行数据包列表过滤）</li>\n<li> 数据列表区（显示捕获到的数据包，每个数据包包含编号，时间戳，源地址，目标地址，协议，长度，以及数据包信息。）</li>\n<li> 数据详细区（显示数据包的所有详细信息内容）</li>\n<li> 数据字节区（显示数据包原始字节流信息）</li>\n<li> 数据统计区（统计捕获到的分组数）</li>\n</ol>\n<h4 id=\"1-3-3-过滤器的使用\"><a href=\"#1-3-3-过滤器的使用\" class=\"headerlink\" title=\"1.3.3 过滤器的使用\"></a>1.3.3 过滤器的使用</h4><p>Wireshark的过滤器可以分为两种主要类型：<strong>捕获过滤器</strong> 和 <strong>显示过滤器</strong>。</p>\n<ol>\n<li> 捕获过滤器：使用Wireshark的捕获过滤器，用户可以过滤捕获的数据包以匹配用户指定的条件。这些过滤器可以根据协议、源/目标IP地址、端口、协议标志等条件进行设置。捕获过滤器可以手动输入或通过菜单选择，也可以从过滤器面板中选择预定义的过滤器。</li>\n<li> 显示过滤器：使用Wireshark的显示过滤器，用户可以将已捕获的数据包按照指定的条件进行过滤，并只显示与这些条件匹配的数据包。这些条件可以基于协议、源/目标IP地址、端口、时间戳等。显示过滤器可以通过在过滤器面板中手动输入或选择预定义的过滤器来创建。显示过滤器可以帮助用户快速查找感兴趣的数据包，也可以节省屏幕空间和处理时间。</li>\n</ol>\n<h5 id=\"1-3-3-1-捕获过滤器\"><a href=\"#1-3-3-1-捕获过滤器\" class=\"headerlink\" title=\"1.3.3.1 捕获过滤器\"></a>1.3.3.1 捕获过滤器</h5><p>捕获过滤器位于菜单栏的 <strong>捕获–&gt; 捕获过滤器</strong>。用于捕获数据包前设置捕获条件。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513154122675.png\" alt=\"image-20230513154122675\"></p>\n<h5 id=\"1-3-3-2显示过滤器\"><a href=\"#1-3-3-2显示过滤器\" class=\"headerlink\" title=\"1.3.3.2显示过滤器\"></a>1.3.3.2显示过滤器</h5><p>显示过滤器位于首页的 <strong>工具栏下方</strong> 的输入框。</p>\n<p>当我们在终端输入 <code>ping www.baidu.com</code> 时，在捕获时未设置抓包过滤规则直接通过网卡进行抓取所有数据包，如下</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513154600207.png\" alt=\"image-20230513154600207\"></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513155302679.png\" alt=\"image-20230513155302679\"></p>\n<p>此时数据包内容较多，为了筛选我们想要的信息，则需要在显示过滤器中添加我们想要的过滤条件</p>\n<p>如：<code>ip.addr == 39.156.66.14</code> ，得到如下结果</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513155458878.png\" alt=\"image-20230513155458878\"></p>\n<p>即可得到我们想要的 Ping 之后的 ICMP 报文。这基本上满足了我们的需求！</p>\n<h5 id=\"1-3-3-3-过滤规则总结\"><a href=\"#1-3-3-3-过滤规则总结\" class=\"headerlink\" title=\"1.3.3.3 过滤规则总结\"></a>1.3.3.3 过滤规则总结</h5><p>当使用Wireshark时，可以使用过滤规则来筛选和查看感兴趣的数据包。以下是一些常用的Wireshark过滤规则：</p>\n<ol>\n<li> 过滤特定IP地址：可以使用以下过滤器来查看特定IP地址的数据包：</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip.addr == x.x.x.x  <span class=\"comment\">//x.x.x.x为特定IP地址</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li> 过滤特定IP地址和端口号：可以使用以下过滤器来查看特定IP地址和端口号的数据包：</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(ip.addr == x.x.x.x) &amp;&amp; (tcp.port == n)  <span class=\"comment\">//x.x.x.x为特定IP地址，n为端口号</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li> 过滤特定协议：可以使用以下过滤器来查看特定协议的数据包：</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tcp  <span class=\"comment\">//只显示TCP协议的数据包</span></span><br><span class=\"line\">udp  <span class=\"comment\">//只显示UDP协议的数据包</span></span><br><span class=\"line\">icmp  <span class=\"comment\">//只显示ICMP协议的数据包</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li> 过滤特定的数据包大小：可以使用以下过滤器来查看特定大小的数据包：</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">frame.len == n  <span class=\"comment\">//只显示大小为n的数据包</span></span><br><span class=\"line\">frame.len &gt; n  <span class=\"comment\">//只显示大小大于n的数据包</span></span><br><span class=\"line\">frame.len &lt; n  <span class=\"comment\">//只显示大小小于n的数据包</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li> 过滤特定的数据包类型：可以使用以下过滤器来查看特定类型的数据包：</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dns  <span class=\"comment\">//只显示DNS数据包</span></span><br><span class=\"line\">http  <span class=\"comment\">//只显示HTTP数据包</span></span><br><span class=\"line\">ssl  <span class=\"comment\">//只显示SSL数据包</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li> 过滤特定的数据包内容：可以使用以下过滤器来查看特定内容的数据包：</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http.request.method == <span class=\"string\">&quot;POST&quot;</span>  <span class=\"comment\">//只显示HTTP POST请求</span></span><br><span class=\"line\">http.response.code == <span class=\"number\">200</span>  <span class=\"comment\">//只显示HTTP 200响应</span></span><br><span class=\"line\">dns.qry.name == <span class=\"string\">&quot;www.example.com&quot;</span>  <span class=\"comment\">//只显示请求www.example.com的DNS数据包</span></span><br></pre></td></tr></table></figure>\n\n<p>这些是常用的Wireshark过滤规则示例。还有很多其他过滤规则，可以根据具体情况进行选择和设置。</p>\n<blockquote>\n<p>官网显示过滤器参考：<a href=\"https://www.wireshark.org/docs/dfref/\">https://www.wireshark.org/docs/dfref/</a></p>\n</blockquote>\n<h2 id=\"2-ARP-原理探究\"><a href=\"#2-ARP-原理探究\" class=\"headerlink\" title=\"2. ARP 原理探究\"></a>2. ARP 原理探究</h2><p>ARP（Address Resolution Protocol，地址解析协议）是一种用于将IP地址映射到物理MAC地址的协议。ARP是在本地网络中运行的协议，其目的是为了在不同网络层之间建立映射关系，使得数据包能够正确地被传送到其目的地。</p>\n<h3 id=\"2-1-实验准备\"><a href=\"#2-1-实验准备\" class=\"headerlink\" title=\"2. 1 实验准备\"></a>2. 1 实验准备</h3><p>两台主机A、B，且连接同一个局域网。</p>\n<h4 id=\"2-1-1-查看主机IP地址和MAC地址\"><a href=\"#2-1-1-查看主机IP地址和MAC地址\" class=\"headerlink\" title=\"2.1.1 查看主机IP地址和MAC地址\"></a>2.1.1 查看主机IP地址和MAC地址</h4><p>Windows 下打开命令提示符，输入<code>ipconfig/all</code>：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165731283.png\" alt=\"image-20230513165731283\"></p>\n<p>得到当前A主机的MAC地址为 <strong>A4-B1-C1-9B-28-**<strong>，校园网下IP地址为：</strong>192.168.1.101</strong></p>\n<p>B主机的MAC地址为 **D8-12-65-6E-D3-****，校园网下IP地址为 <strong>192.168.1.100</strong></p>\n<p>主机</p>\n<p>IP地址</p>\n<p>MAC地址</p>\n<p>A</p>\n<p>192.168.1.101</p>\n<p>A4-B1-C1-9B-28-**</p>\n<p>B（实验机）</p>\n<p>192.168.1.100</p>\n<p>D8-12-65-6E-D3-**</p>\n<h3 id=\"2-2-查看ARP表\"><a href=\"#2-2-查看ARP表\" class=\"headerlink\" title=\"2.2 查看ARP表\"></a>2.2 查看ARP表</h3><p>在 A 主机下查看当前 ARP 表，输入 <code>arp -a</code>，结果如下:</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513162621231.png\" alt=\"image-20230513162621231\"></p>\n<p>此时并未有 B 主机的 ARP表项。</p>\n<h3 id=\"2-3-Wireshark捕获\"><a href=\"#2-3-Wireshark捕获\" class=\"headerlink\" title=\"2.3 Wireshark捕获\"></a>2.3 Wireshark捕获</h3><p>后台打开相应网卡开始捕获，此时 A 主机命令提示符输入<code>ping 192.168.1.100</code>，向B发送 ICMP 报文以及 A主机发送ARP广播。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513162734153.png\" alt=\"image-20230513162734153\"></p>\n<p>此时在重新输入 <code>arp -a</code>，发现得到 B 主机的相应MAC地址，实验成功！</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513162856471.png\" alt=\"image-20230513162856471\"></p>\n<h3 id=\"2-4-Wireshark分析ARP原理\"><a href=\"#2-4-Wireshark分析ARP原理\" class=\"headerlink\" title=\"2.4 Wireshark分析ARP原理\"></a>2.4 Wireshark分析ARP原理</h3><ol>\n<li>首先，假设主机A需要向主机B发送一个数据包，但是不知道主机B的物理地址（MAC地址），只知道主机B的IP地址，主机A将一个ARP请求广播到本地网络中的所有设备，请求包含目标IP地址和发送者MAC地址（通常是广播地址）。 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165133299.png\" alt=\"image-20230513165133299\"></li>\n<li>交换机S接收到ARP请求，并将其转发到本地网络中的所有设备。由于这是一个广播消息，因此每个设备都会接收到此请求。主机B接收到ARP请求，检查其中的IP地址是否匹配自己的IP地址。如果是，主机B会向主机A发送一个ARP响应，该响应包含其MAC地址。 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165143618.png\" alt=\"image-20230513165143618\"></li>\n<li>ARP响应被广播到本地网络中的所有设备，主机A接收到响应并保存主机B的MAC地址到其ARP缓存中，以备将来使用。 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165153279.png\" alt=\"image-20230513165153279\"> <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513165200438.png\" alt=\"image-20230513165200438\"></li>\n</ol>\n<p>通过上述实验，我们可以看出ARP的工作原理是通过广播的方式，在本地网络中进行的。ARP请求和响应都是广播消息，这意味着所有的网络设备都能够接收到并处理它们。ARP缓存记录了IP地址和对应的MAC地址，这可以避免重复的ARP请求并加速数据包的传输。</p>\n<p><strong>总结：ARP是一种在本地网络中工作的协议，它允许主机在不知道目标MAC地址的情况下查找目标设备的物理地址，从而实现数据包的正确传输。</strong></p>\n<h2 id=\"3-ICMP-协议的报文结构定义\"><a href=\"#3-ICMP-协议的报文结构定义\" class=\"headerlink\" title=\"3. ICMP 协议的报文结构定义\"></a>3. ICMP 协议的报文结构定义</h2><h3 id=\"3-1-获取ICMP报文\"><a href=\"#3-1-获取ICMP报文\" class=\"headerlink\" title=\"3.1 获取ICMP报文\"></a>3.1 获取ICMP报文</h3><p>由于 Ping 工作在应用层且直接使用网络层的 ICMP 协议，根据这个原理，在命令提示符输入 <code>ping 192.168.1.100</code> 即可在 Wireshark 捕获到 ICMP 报文，在显示过滤器里面输入 <code>icmp</code> 即可得到相应的 ICMP 报文数据。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513211214962.png\" alt=\"image-20230513211214962\"></p>\n<h3 id=\"3-2-ICMP结构分析\"><a href=\"#3-2-ICMP结构分析\" class=\"headerlink\" title=\"3.2 ICMP结构分析\"></a>3.2 ICMP结构分析</h3><h4 id=\"3-2-1-IP数据报\"><a href=\"#3-2-1-IP数据报\" class=\"headerlink\" title=\"3.2.1 IP数据报\"></a>3.2.1 IP数据报</h4><p>查看IP数据报，观察IP数据报的首部字段及其内容，其报文结构如下：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513211831188.png\" alt=\"image-20230513211831188\"></p>\n<h4 id=\"3-2-2-ICMP-数据报\"><a href=\"#3-2-2-ICMP-数据报\" class=\"headerlink\" title=\"3.2.2 ICMP 数据报\"></a>3.2.2 ICMP 数据报</h4><p>点击<strong>Internet Control Message Protocol</strong>展开，查看 ICMP报文，如下分别为ICMP询问报文的回送请求报文和回答报文的首部字段。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513213004979.png\" alt=\"image-20230513213004979\"></p>\n<p>由此我们可以得到的 ICMP报文结构定义如下：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230513213440346.png\" alt=\"image-20230513213440346\"></p>\n<ul>\n<li>  类型（8 bits）：表示ICMP报文的类型，共有14种类型（例如回显请求、回显响应、目标不可达等）。Type的值在1~255之间，不同的类型有不同的Code值。</li>\n<li>  代码（8 bits）：表示ICMP报文的代码，用于更精确地描述ICMP报文的目的。Code的值在0~255之间，不同的Code值对应不同的类型。</li>\n<li>  校验和（16 bits）：是ICMP报文的校验和，用于检测数据是否传输过程中发生了错误。</li>\n<li>  数据（可变长度）：是ICMP报文的数据部分，其长度取决于ICMP报文的类型和代码。</li>\n</ul>\n<h2 id=\"4-TCP-原理探究\"><a href=\"#4-TCP-原理探究\" class=\"headerlink\" title=\"4. TCP 原理探究\"></a>4. TCP 原理探究</h2><h3 id=\"4-1-实验准备\"><a href=\"#4-1-实验准备\" class=\"headerlink\" title=\"4.1 实验准备\"></a>4.1 实验准备</h3><ol>\n<li>获取 <code>www.baidu.com</code> 的实际IP地址，在命令提示符输入： <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping www.baidu.com</span><br></pre></td></tr></table></figure>\n <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514181536098.png\" alt=\"image-20230514181536098\"> 得到当前 <code>www.baidu.com</code> 的 IP 地址为：<strong>39.156.66.14</strong></li>\n<li>打开 Wireshark 捕获，开始抓取数据包，并在显示过滤器加入过滤条件： <figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip.addr == <span class=\"number\">39.156</span><span class=\"number\">.66</span><span class=\"number\">.14</span> </span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"4-2-TCP-三次握手原理\"><a href=\"#4-2-TCP-三次握手原理\" class=\"headerlink\" title=\"4.2 TCP 三次握手原理\"></a>4.2 TCP 三次握手原理</h3><p>此时在主机的浏览器搜索栏输入 <code>www.baidu.com</code> 进入百度网站，在 Wireshark 中观察TCP报文的捕获情况，如下：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514181922252.png\" alt=\"image-20230514181922252\"></p>\n<p>可以看到浏览器打开百度网站时，本主机与百度服务器进行了 <strong>TCP三次握手</strong> ，根据这三次握手，分析 TCP连接管理的原理。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/v2-8ce8c897b4d5e7397b25eb4d4b31d7fc_r.jpg\" alt=\"img\"></p>\n<h4 id=\"4-2-1-第一次握手阶段\"><a href=\"#4-2-1-第一次握手阶段\" class=\"headerlink\" title=\"4.2.1 第一次握手阶段\"></a>4.2.1 第一次握手阶段</h4><p>由于 TCP协议是负责主机 <strong>端到端</strong> 的连接，因此本主机操作系统随机选取其中一个 <strong>动态端口号（49152~65535）</strong>，本例中选取了 <code>54617</code> 作为源端口号，目的端口号是百度服务器提供的 HTTPS端口 <code>443</code>，由于此报文是 TCP同步报文，因此此时 ACK 位为 0（Not set），SYN 位为 1，随机序列号为 <code>948123796</code>。此时为客户端请求建立链接阶段，客户端进入 <strong>同步已发送</strong> 状态，等待服务器端确认，如图所示，TCP报文如下：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514184206965.png\" alt=\"image-20230514184206965\"></p>\n<h4 id=\"4-2-2-第二次握手阶段\"><a href=\"#4-2-2-第二次握手阶段\" class=\"headerlink\" title=\"4.2.2 第二次握手阶段\"></a>4.2.2 第二次握手阶段</h4><p>此时源端口为百度服务器提供的 HTTPS端口 <code>443</code>，目的端口为本主机的 <code>54617</code>，确认号为 <code>948123796+1</code>，即表示已成功收到 第一次握手阶段 的请求建立连接报文！此时第二次握手阶段的TCP报文随机选取一个序列号为 <code>3375721040</code>，同步位和确认位均为 1。百度服务器将该数据包发送给客户端以表示确认连接请求，服务器端进入<strong>同步已接收</strong> 状态。TCP报文如下所示：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514184918940.png\" alt=\"image-20230514184918940\"></p>\n<h4 id=\"4-2-3-第三次握手阶段\"><a href=\"#4-2-3-第三次握手阶段\" class=\"headerlink\" title=\"4.2.3 第三次握手阶段\"></a>4.2.3 第三次握手阶段</h4><p>本主机收到第二次握手阶段的TCP报文后，向百度服务器发送一个确认报文，表示收到了确认信息。该报文中的ACK字段值为收到的 <code>3375721040+1</code>，并且序列号为收到的ACK值 <code>948123796+1</code>。客户端和服务器端进入 <strong>连接已建立</strong> 状态，完成三次握手，此时 TCP 报文如下：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230514185901730.png\" alt=\"image-20230514185901730\"></p>\n<p><strong>至此本主机和百度服务器成功建立可靠的TCP连接！随后客户端与服务器端之间可以开始传输数据。</strong></p>\n<h3 id=\"4-3-报文的分片\"><a href=\"#4-3-报文的分片\" class=\"headerlink\" title=\"4.3 报文的分片\"></a>4.3 报文的分片</h3><h4 id=\"4-3-1-不分片报文传输\"><a href=\"#4-3-1-不分片报文传输\" class=\"headerlink\" title=\"4.3.1 不分片报文传输\"></a>4.3.1 不分片报文传输</h4><ol>\n<li>较短 IP 报文 观察不分片标志对于较短的 IP 报文传输的影响，在 命令提示符中输入 <code>ping -l 1472 -f 192.168.1.102</code>，意思是向 192.168.1.102 主机发送长度为 1472字节的数据包，<strong>但是此 IP报文 不进行分片</strong>，结果如图所示：<img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515134923956.png\" alt=\"image-20230515134923956\"><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515135317906.png\" alt=\"image-20230515135317906\"> 可见以太网帧总长度为 <strong>IP首部 20 + ICMP首部 8 + 数据长度1472 ＝1500</strong>（小于等于 <strong>MTU</strong> 的 1500），不分片标志的片位移为 0，由此可知：<strong>不分片标志对较小的 IP 报文传输没有影响</strong>。</li>\n<li>较大 IP 报文 观察不分片标志对较大 IP 报文传输的影响，在 命令提示符中输入 <code>ping -l 1473 -f 192.168.1.102</code>，结果如图所示： <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515140248049.png\" alt=\"image-20230515140248049\"> <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515135911764.png\" alt=\"image-20230515135911764\"> 可见：<strong>由于IP报文的长度（IP首部 20 + ICMP首部 8 + 数据长度1473 ＝1501 ）过大（超过了 MTU 的 1500 长度），不分片标志会导致超过 MTU 的长报文无法传输</strong>。</li>\n</ol>\n<h4 id=\"4-3-2-分片报文传输\"><a href=\"#4-3-2-分片报文传输\" class=\"headerlink\" title=\"4.3.2 分片报文传输\"></a>4.3.2 分片报文传输</h4><p>打开命令提示符，输入<code>ping -l 3000 -n 1 192.168.1.102</code>，意思为只发送一个大小为3000的数据包。结果如下：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515141248724.png\" alt=\"image-20230515141248724\"></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515141534981.png\" alt=\"image-20230515141534981\"></p>\n<p>需要封装在 IP数据包里面发送的数据大小为 <strong>8（ICMP首部）+3000（数据包）= 3008</strong>。</p>\n<p>第一个分片不能超过 MTU，所以为 <strong>20（IP首部）+ 1480（数据分片）= 1500</strong>；第二个分片不能超过 MTU，所以也为 <strong>20（IP首部）+ 1480（数据分片）= 1500</strong>；由于 <strong>3008（数据总长度）- 1480 - 1480 = 48</strong>，因此第三个分片大小为 <strong>20（IP首部） + 48（剩余数据）=68</strong>。分析结果与实验数据一致！</p>\n<h2 id=\"5-Web服务器连接过程\"><a href=\"#5-Web服务器连接过程\" class=\"headerlink\" title=\"5. Web服务器连接过程\"></a>5. Web服务器连接过程</h2><blockquote>\n<p>要求：从校园网发起向外网中某 Web 服务器的访问，记录并分析从 MAC 层协议、IP 协议、TCP 协议一直到 HTTP 协议的过程。</p>\n</blockquote>\n<h3 id=\"5-1-访问云-Web服务器\"><a href=\"#5-1-访问云-Web服务器\" class=\"headerlink\" title=\"5.1 访问云 Web服务器\"></a>5.1 访问云 Web服务器</h3><p>以个人网站 <code>http://47.94.12.50</code> 为例，后台打开 Wireshark嗅探，显示过滤器输入 <code>ip.addr == 47.94.12.50</code>。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515142423242.png\" alt=\"image-20230515142423242\"></p>\n<h3 id=\"5-2-收到的数据报文\"><a href=\"#5-2-收到的数据报文\" class=\"headerlink\" title=\"5.2 收到的数据报文\"></a>5.2 收到的数据报文</h3><p>在Wireshark嗅探到的数据报文如下所示：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515222714737.png\" alt=\"image-20230515222714737\"></p>\n<p>首先 主机先与云服务器进行第一次 TCP 连接，完成三次握手，然后应用层使用 HTTP 协议进行传输，最后传输层使用 TCP四次挥手释放第一次 TCP 连接。下面根据自下而上地分析从 MAC 层协议、IP 协议、TCP 协议一直到 HTTP 协议的过程。</p>\n<h3 id=\"5-3-MAC-协议\"><a href=\"#5-3-MAC-协议\" class=\"headerlink\" title=\"5.3 MAC 协议\"></a>5.3 MAC 协议</h3><p>以<strong>首次收到的 HTTP 报文</strong>为例，其收到的以太网帧数据如下：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515223837966.png\" alt=\"image-20230515223837966\"></p>\n<p>由 以太网Ⅱ 帧的格式可知，此以太网帧的目的地址为 ca:9e:6b:d1:d7:**，源地址为 a4:b1:c1:9b:28:** ，类型为 0x0800。由于在我们抓到的包中，前八个字节的前导码和帧开始符已经被网卡过滤掉了所以我们抓不到。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515224231338.png\" alt=\"image-20230515224231338\"></p>\n<p>常见的类型对应值如下：</p>\n<p>值</p>\n<p>协议</p>\n<p>0x0800</p>\n<p>IPv4</p>\n<p>0x0806</p>\n<p>ARP</p>\n<p>0x86DD</p>\n<p>IPv6</p>\n<p>0x88CC</p>\n<p>LLDP</p>\n<p>0x8035</p>\n<p>RARP</p>\n<p>我们的帧类型为<code>0x0800</code> 是一个 IPv4 的封装帧，后面的冗余校验也和前导码一样，已经被网卡删掉了，所以捕获不到，以太网的头部就已经全部抽离了，我们继续分析下一层协议：IPv4。</p>\n<h3 id=\"5-4-IPv4-协议\"><a href=\"#5-4-IPv4-协议\" class=\"headerlink\" title=\"5.4 IPv4 协议\"></a>5.4 IPv4 协议</h3><p>由此 IP报文 可知：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515224700109.png\" alt=\"image-20230515224700109\"></p>\n<ul>\n<li>  <strong>版本</strong>：<code>4</code>（即 IPv4，0x0100 = 4）；</li>\n<li>  <strong>首部长度</strong>：<code>20</code>（即 5 * 4B = 20B）；</li>\n<li>  <strong>ECN</strong>：<code>Not-ECT</code>（显式拥塞通知<strong>Explicit Congestion Notification</strong>，简称<strong>ECN</strong>，<code>00</code>代表不支持 ECN）；</li>\n<li>  <strong>DF</strong>：<code>1</code>（不分片）；</li>\n<li>  <strong>MF</strong>：<code>0</code>（没有分片）；</li>\n<li>  <strong>Offset</strong>：<code>0</code>（没有偏移）；</li>\n</ul>\n<p>由于以太网有 MTU 的包大小限制，IPv4 选择了通过分片重组的方式来向上层的传输层协议提供传输任意包大小的能力，DF、MF、Offset位就是用来进行<strong>分片控制</strong>的。</p>\n<ul>\n<li>TTL：<code>0x40 = 64</code>，代表了这个包的存活时间，还剩 64 s；</li>\n<li>上层协议：<code>0x06 = 6</code>，代表 TCP， 常见取值如下：</li>\n</ul>\n<p>取值</p>\n<p>协议</p>\n<p>1</p>\n<p>ICMP</p>\n<p>6</p>\n<p>TCP</p>\n<p>17</p>\n<p>UDP</p>\n<ul>\n<li>  <strong>源 IP 地址</strong>：192.168.93.86</li>\n<li>  <strong>目的 IP 地址</strong>：47.94.12.50</li>\n</ul>\n<h3 id=\"5-5-TCP协议\"><a href=\"#5-5-TCP协议\" class=\"headerlink\" title=\"5.5 TCP协议\"></a>5.5 TCP协议</h3><p>IP 数据部分就是 TCP报文，其数据如下：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515232020133.png\" alt=\"image-20230515232020133\"></p>\n<ul>\n<li>  源端口： <code>c0 8a -&gt; 49290</code>。</li>\n<li>  目的端口：<code>00 50 -&gt; 80</code> 。</li>\n</ul>\n<p>最大端口值为 <strong>2^16-1 = 65535</strong>，端口号划分成了三段：</p>\n<p>端口范围</p>\n<p>用途</p>\n<p>0-1023</p>\n<p>公认端口。常见的公认端口有：ftp(21)、ssh(22 )、smtp(25)、http(80 )、https(443) 等。</p>\n<p>1024-49151</p>\n<p>用户自用。一般操作系统会随机在其中选择可用端口。</p>\n<p>49152-65535</p>\n<p>保留端口。一般不推荐使用，因为用户端口也很够用了。</p>\n<ul>\n<li>  <strong>序列号</strong>：<code>2288663079</code>。</li>\n<li>  <strong>确认号</strong>：<code>2099426961</code>。</li>\n</ul>\n<p>之后紧接着是九个启用中的标志位，下面我们来逐位分析。</p>\n<ul>\n<li>  <strong>NS</strong>: ECN-nonce，显式拥塞通知（Explicit Congestion Notification），这个是和 IP 层的 ECN 一样，主动表示发生了网络拥塞的信号。</li>\n<li>  <strong>CWR</strong>: Congestion Window Reduced，这个是配合 ECN 标志位使用的，用来通知发送者拥塞窗口已经调小。</li>\n<li>  <strong>ECE</strong>：ECN-Echo，这个标志位主要是用 TCP 连接在握手的时候用来协商两端是否都支持显示拥塞控制。</li>\n<li>  <strong>URG</strong>: Urgent Pointer field significant，代表存在于选项中的紧急指针字段已经启用，需要尽快处理这些数据，不过使用的范围不广。</li>\n<li>  <strong>ACK</strong>: Acknowledgment field significant，代表 ACK 字段有效。</li>\n<li>  <strong>PSH</strong>: Push Function，用于将缓冲区内的所有数据全部发送，不再等待，同时对端在收到 PSH 标志时，应立即将数据全部递交给上层应用处理，不用再等待数据合并提交。PSH 标志位和 TCP_NoDelay 选项的区别在于，PSH 是 TCP 报文中的字段，对端也会做出对应的响应，而 TCP_NoDelay 只是内核的一个参数，用于在当前应用中关闭 Nagle 算法。</li>\n<li>  <strong>RST</strong>: Reset，用于重置当前连接，一般用于拒绝连接，或者出现错误时指示重建连接。</li>\n<li>  <strong>SYN</strong>: Synchronize sequence numbers，同步序列号，用于建立连接并同步序列号。</li>\n<li>  <strong>FIN</strong>: Finish, 用于关闭连接，表明没有数据要发送了。</li>\n</ul>\n<p>在我们的包中，这九个标志位分别是：000011000，ACK = 1，PSH = 1，代表 ACK 字段是生效的，</p>\n<ul>\n<li>窗口大小：<code>259</code>，单位是字节。</li>\n<li>校验和：<code>5c 05</code> ，这个校验和在计算时不仅包括头部，也包括了传输内容。</li>\n<li>紧急指针：我们这里 URG 标志位是 0，所以也就不存在紧急指针，这 16 位全是 <code>0</code>。</li>\n<li>TCP 的选项字段：TCP 选项是不定长的。</li>\n</ul>\n<h3 id=\"5-6-HTTP-协议\"><a href=\"#5-6-HTTP-协议\" class=\"headerlink\" title=\"5.6 HTTP 协议\"></a>5.6 HTTP 协议</h3><p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20230515233827525.png\" alt=\"image-20230515233827525\"></p>\n<p>由此 HTTP报文可知主机通过 HTTP/1.1 协议使用 GET 的请求方法向 服务器 资源发起请求。</p>\n<ul>\n<li>  Host ：<code>47.94.12.50</code>，代表了请求资源所属的主机。</li>\n<li>  User-Agent：<code>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36</code>，代表主机使用的 HTTP 协议的客户端类型。</li>\n<li>  Accept: <code>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</code>， 代表客户端这边支持任何类型的资源。</li>\n</ul>\n<h3 id=\"5-7-总结\"><a href=\"#5-7-总结\" class=\"headerlink\" title=\"5.7 总结\"></a>5.7 总结</h3><p>计算机网络的组成可以自底向上地总结为以下几个层次，每个层次负责不同的功能和任务：</p>\n<ol>\n<li>物理层<ul>\n<li>  物理层是计算机网络的最底层，负责传输原始的比特流。</li>\n<li>  它定义了电气、光学和机械接口的规范，以及传输介质的特性和传输速率等。</li>\n<li>  主要任务是将比特流从发送端传输到接收端，没有对数据进行处理或分析。</li>\n</ul>\n</li>\n<li>数据链路层<ul>\n<li>  数据链路层建立在物理层之上，负责在直接相连的节点之间可靠地传输数据。</li>\n<li>  它将比特流划分为帧，处理错误检测和纠正，以及帧的传输控制。</li>\n<li>  主要任务是提供可靠的数据传输，并处理节点之间的通信错误。</li>\n</ul>\n</li>\n<li>网络层<ul>\n<li>  网络层是在数据链路层之上，处理不同网络之间的数据包转发和路由选择。</li>\n<li>  它负责将数据包从源主机传输到目标主机，通过路由选择算法确定数据包的最佳路径。</li>\n<li>  主要任务是实现逻辑上的主机到主机的通信，以及网络互联和互操作性。</li>\n</ul>\n</li>\n<li>传输层<ul>\n<li>  传输层建立在网络层之上，提供端到端的数据传输和服务质量控制。</li>\n<li>  它为应用程序提供可靠的数据传输和错误恢复，并进行流量控制和拥塞控制。</li>\n<li>  主要任务是确保数据在源主机和目标主机之间的可靠传输，以及提供端到端的连接和通信服务。</li>\n</ul>\n</li>\n<li>应用层<ul>\n<li>  应用层是网络的最高层，提供特定应用程序和用户之间的接口。</li>\n<li>  它包括各种应用层协议和服务，例如电子邮件、文件传输、Web浏览等。</li>\n<li>  主要任务是为用户提供各种应用程序和服务，以满足特定的通信需求。</li>\n</ul>\n</li>\n</ol>\n<p>通过这次Wireshark抓包实验帮助了我更深层次地理解每一层的功能和责任，以及它们如何协同工作来实现可靠的数据通信和应用服务！</p>"},{"title":"遗传算法","id":"1145","date":"2022-10-03T15:18:36.000Z","_content":"\n数学公式完整版：[https://blog.csdn.net/weixin\\_51245887/article/details/126918727](https://blog.csdn.net/weixin_51245887/article/details/126918727)\n\n# 遗传算法概述\n\n## 背景知识\n\n生物遗传概念\n\n遗传算法中的作用\n\n适应度（Fitness）\n<!-- more -->\n适应函数值。度量某个物种对于生存环境的适应程度\n\n选择（Selection）\n\n决定以一定的概率从种群中选择若干个个体的操作\n\n交叉（Crossover）\n\n通过交配原则产生一组新解的过程\n\n变异（Mutation）\n\n编码的某一个分量发生变化的过程\n\n编码（Coding）\n\n表现型到基因型的映射\n\n解码（Decoding）\n\n基因型到表现型的映射\n\n群体（population）\n\n选定的一组解\n\n种群（reproduction）\n\n根据适应函数值选取的一组解\n\n适者生存\n\n算法停止时，最优目标值的解有最大的可能被保留\n\n个体\n\n解\n\n染色体（chromosome）\n\n解的编码（字符串、向量等）\n\n基因（gene）\n\n解中每一分量的特征（如各分量的值）\n\n## 遗传算法（GA）\n\n#### 概要\n\n*   枚举法\n*   启发式算法\n*   搜索算法\n\n#### 原理\n\n1.  是模拟生物在自然环境下的进化和遗传过程而形成的一种 **自适应全局优化概率方法**\n2.  其采纳了 **自然进化模型**，从代表问题可能潜在解集的一个 **种群** 开始\n3.  **适者生存、优胜劣汰**\n\n#### 算法过程\n\n1.  初始化。设置进化代数计数器t⭠0；设置最大进化代数T；随机生成M个个体作为初始群体P(0)。\n    \n2.  个体评价。计算群体P(t)中各个个体的适应度。\n    \n3.  选择运算。将选择算子作用于群体。\n    \n4.  交叉运算。将交叉算子作用于群体。\n    \n5.  变异运算。将变异算子作用于群体。群体P(t)经过选择、交叉、变异运算之后得到下一代群体P(t+1)。\n    \n6.  终止条件判断。若t≤T，则：t⭠t+1，转到步骤二；若t>T，则以进化过程中所得到的具有最大适应度的个体作为最优解输出，终止计算。\n    \n7.  示意图\n    \n    ![image-20220917173131637](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220917173131637.png)\n    \n\n#### 特点\n\n*   **遗传算法以 决策变量的编码 作为运算对象**\n    \n*   **遗传算法直接以 目标函数值 作为搜索信息**\n    \n*   **遗传算法同时使用 多个搜索点 的搜索信息**\n    \n*   **遗传算法使用 概率搜索技术**\n    \n\n## 基本遗传算法\n\n由 Holland 提出，简称 SGA（Simple Genetic Algorithm）。\n\n#### 构成要素\n\n1.  染色体编码方法\n    \n    使用 **固定长度的二进制符号串** 来表示群体中的个体\n    \n2.  个体适应度评价\n    \n3.  基本遗传算子\n    \n4.  算法的运行参数\n    \n\n#### 伪代码描述\n\n```c\nProcedure SGA\nbegin\n// 初始值，M为个体总数，t为代数，T为最大进化数 \nM=PopulationSize, t=0, T=maxGeneration;\ninit P(t); // 初始化群体P，一开始为第0代\nwhile(t<=T):\n    for i=1 to M do:\n        Evaluate Fitness of P(t);\n    for i=1 to M do:\n        Selection Operation to P(t);\n    for i=1 to M/2 do:\n        Crossover Operation to P(t);\n    for i=1 to M do:\n        Mutation operation to P(t);\n    for i=1 to M do:\n        P(t+1)=P(t)\n     t=t+1\nend\n```\n\n算法图解参考上图\n\n## 个体适应度评价\n\n> 所有个体适应度必须为正数或零，不能为负数。\n\n#### 适应度函数变换常用方法\n\n但实际优化问题中的目标函数值有正也有负，优化目标有求函数最大 值，也有求函数最小值，显然上面两式保证不了所有情况下个体的适应度 都是非负数这个要求，需要进行适应度函数尺度转换，将 **目标函数值 f(x) 变换为个体的适应度F(x) 。**\n\n![image-20221012213710525](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221012213710525.png)\n\n![image-20221012213726845](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221012213726845.png)\n\n比例选择又称为轮盘赌选择（Roulette Wheel ）\n\n## 遗传算法的应用步骤\n\n1.  确定决策变量及其各种约束条件，即确定出个体的表现型 X 和问题的解空间。\n2.  建立优化模型，即确定出目标函数的类型及其数学描述形式或量化方法。\n3.  确定表示可行解的染色体编码方法，也即确定个体的基因型 X 及遗传算法的搜索空间。\n4.  确定解码方法，即确定出由个体基因型 X 到个体表现型 X 的对应关系或转换方法。\n5.  确定个体适应度的量化评价方法，即确定由目标函数值 $f(x)$ 到个体适应度 $F(x)$ 的转换规则。\n6.  设计遗传算子，即确定选择运算、交叉运算和变异运算等遗传算子的操作方法。\n7.  确定遗传算法的有关运行参数，即确定出遗传算法的 $M,T,p_{c},p_{m}$ 等参数。\n\n![image-20221012221848724](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221012221848724.png)\n\n## 模式定理\n\n**模式**\n\n模式（schema）表示一些相似的模块。他描述了在某些位置上的具有相似结构特征的个体编码串的一个子集。\n\n例如：模式 $H = 1\\*\\*11$，模式 $H = 00\\*\\*_$ ，“$_$”代表通配符。\n\n**模式阶**\n\n在模式H中具有确定基因值的位置数目称该模式的模式阶（schema order），记为 $ o(H)$。\n\n例如：$o(100_01_)=5，o(\\***\\*\\***0)=1$\n\n**模式定义长度**\n\n模式 H 中第一个确定基因值的位置和最后一个确定基因值的位置之间的距离称为该模式的模式定义长度（Schema Defining Length），记为 $δ(H)$。\n\n例如：$δ(11\\*0**_) = 3，δ(0_**1) = 4，δ(\\*\\*0\\*\\*\\*) = 1$\n\n#### 在选择算子的作用下\n\n$$ \\\\frac{m(H,t)}{m(H,t+1)}=\\\\frac{\\\\bar{F}(t)}{f(H,t)}\\\\ \\\\Longleftrightarrow m(H,t+1)=m(H,t)\\\\frac{f(H,t)}{ \\\\bar{F}(t)}\\\\ let \\\\quad \\\\frac{f(H,t)}{\\\\bar{F}(t)}=1+C \\\\ \\\\Longrightarrow m(H,t+1)=m(H,t)(1+C)\\\\ \\\\Longrightarrow m(H,t)=m(H,O)·(1+C)^{t} $$\n\n其中\n\n符号\n\n含义\n\n$t$\n\n在进化过程中的第 $t$ 代\n\n$H$\n\n模式 $H$\n\n$m(H, t)$\n\n当前群体 $P(t)$ 中与 $H$ 匹配的个体数\n\n$\\\\bar F(t)$\n\n第 t 代群体的平均适应度\n\n$f(H,t)$\n\n群体中 H 隐含的总个体的平均适应度\n\n**结论**：在选择算子作用下，对于平均适应度高于群体平均适应度的模式，其样本数将呈指数级增长：而对于平均适应度低于群体平均适应度的模式，其样本数将呈指数级减少。\n\n#### 在交叉算子的作用下\n\n$$ m(H,t+1)≥m(H,t)·(1+C)·\\[1-p\\_{c}·\\\\frac{δ(H)}{l-1}\\] $$\n\n$δ(H)$越小，则$m(H,t)$越容易呈指数级增长；\n\n$δ(H)$越大，则$m(H,t)$越不容易呈指数级增长。\n\n#### 在变异算子的作用下\n\n某一模式被破坏的概率： $$ 1-(1-p_{m})^{o(H)} $$ 当 $p_{m}<<1$ 时： $$ 1-(1-p_{m})^{o(H)}≈o(H)·p_{m} $$ 在变异算子的作用下，模式 H 的生存概率： $$ p_{s}≈1-o(H)·p_{m} $$ $o(H)$越小，模式 H 越易于生存；\n\n$o(H)$越大，模式 H 越易于被破坏。\n\n#### 在算子总作用下\n\n$$ m(H,t+1)≥m(H,t)·\\\\frac{f(H,t)}{\\\\bar F(t)}·\\[1-p_{c}·\\\\frac{δ(H)}{l-1}-o(H)·p_{m}\\] $$\n\n⭐总结：**遗传算法中，在选择、交叉和变异算子的作用下，具有低阶、短的定义长度，并且平均适应度高于群体平均适应度的模式将按指数级增长。**\n\n> 【积木块假设】\n> \n> 个体的基因块通过选择、交叉、变异等遗传算子的作用，能够相互拼接在一起，形成适应度更高的个体编码串。\n\n# 遗传算法基本实现技术\n\n## 编码\n\n编码方法很大程度上决定了如何进行群体的遗传进化运算以及遗传进化运算的效率。\n\n常见的编码分类：**二进制编码、浮点编码、符号编码**。\n\n#### 二进制编码\n\n**编码**\n\n假设某一参数的取值范围 \\[$U_{min},U_{max}$ \\] , 我们用长度为 n 的二进制编码符号串来表示参数，共产生 $2^{n}$ 种不同的编码，δ为二进制编码的编码精度。则： $$ δ = \\\\frac{U_{max}-U_{min}}{2^{n}-1} $$ **解码**\n\n假设某一个体的编码是： $$ X:b_{i}b_{i-1}b_{i-2}····b_{2}b_{1} $$ 则解码公式为： $$ x = U_{min}+(\\\\sum_{i=1}^{n}b·2^{i-1})· \\\\frac{U_{max}-U\\_{min}}{2^{n}-1} $$\n\n**\\[例\\]** 设 -3.0 ≤ x ≤ 12.1 , 精度要求 δ = 1/10000\n\n由编码公式\n\n![image-20220928234410284](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220928234410284.png)\n\n> **格雷码编码**\n> \n> 格雷码特点：两个相邻的编码串之间只有一位编码值不同。\n> \n> 解码和编码过程：决策变量 ↔二进制↔格雷码\n\n#### 浮点数编码\n\n个体的每个基因值用_某一范围内_的一个浮点数来表示，个体的编码长度等于其决策变量的个数。\n\n**编码方法**\n\n某一个优化问题含有5个变量 $x_{i}(i=1,2, ... ,5)$，每个变量都有其对应的上下限$\\[U_{min}^{i}, U\\_{max}^{i}\\]$，则：\n\n![image-20220929083709177](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220929083709177.png)\n\n就表示一个个体的基因型，其对应的表现型是： $x = \\[5.80,6.90,3.50,3.80,5.00\\]^{T}$\n\n#### 符号编码\n\n个体染色体编码串中基因值取自一个无数值含义、只有代码含义的符号集。\n\n#### 多参数级联编码\n\n将各个参数分别以某种编码方法进行编码，然后再将它们的编码按一 定顺序联接在一起就组成了表示全部参数的个体编码。这种编码方法 称为多参数级联编码方法。 $$ \\\\underbrace{b_{11}b_{12}···b_{1l_{1}}}_{x_{1}}\\\\underbrace{b_{21}b_{22}···b_{2l_{2 }}}_{x_{2}}····\\\\underbrace{b_{n1}b_{n2}···b_{nl_{1}}}_{x_{n}} $$\n\n#### 多参数交叉编码方法\n\n将各个参数中起主要作用的码位集中在一起。\n\n**编码方法**\n\n1.  先对各个参数进行分组编码\n2.  取各个参数编码串中的最高位联接在一起作为前n位编码；再取次高位同上......\n\n参数编码： $$ \\\\overbrace{b_{11}b_{12}b_{13}···b_{1m}}^{x_{1}}\\\\overbrace{b_{21}b_{22}b_{23}···b_{2m}}^{x_{2}}····\\\\overbrace{b_{n1}b_{n2}b_{n3}···b_{nm}}^{x_{n}} $$ 个体编码串： $$ b_{11}b_{21}b_{31}···b_{n1} b_{12}b_{22}b_{32}···b_{n2} ··· b_{1m}b_{2m}b_{3m}···b\\_{nm} $$\n\n## 适应度函数\n\n度量个体适应度的函数称为适应度函数。\n\n#### 目标函数\n\n是指所关心的目标 (某一变量y) 与相关的因素 ( 某些变量$x\\_{i}$ ) 的函数关系。\n\n#### 适应度尺度变换\n\n对个体适应度所做的扩大或者缩小变换\n\n常见变换方法：\n\n*   线性尺度变换\n    \n    $F^{'}=aF+b$\n    \n*   乘幂尺度变换\n    \n    $F^{'}=F^{k}$\n    \n*   指数尺度变换\n    \n    $F^{'}=exp(-βF)$\n    \n\n**（$F$：原适应度，$F'$：尺度变换后的新适应度）**\n\n## 选择算子\n\n遗传算法使用选择算子（或称复制算子， Reproduction Operator）来对群体中的个体进行优胜劣汰操作；适应度 较高的个体被遗传到下一代群体中的概率较大；适应度较 低的个体被遗传到下一代群体中的概率较小.\n\n#### 比例选择\n\n各个个体被选中的概率与其适应度大小成正比。设群体大小为M，个体 i 的适应度为$F_{i}$，则个体i被选中的概率$p_{is}$为: $$ p_{is}=F_{i}/\\\\sum_{i=1}^{M}F_{i} \\\\quad\\\\quad (i=1,2,3,...,M) $$\n\n#### 最优保存策略\n\n1.  找出当前群体中适应度最高的个体和适应度最低的个体。\n2.  若当前群体中最佳个体的适应度比总的迄今为止的最好个体的适应度还要高，则以当前种群中的最佳个体作为新的迄今为止的最好个体。\n3.  用迄今为止的最好个体替换掉当前群体中的最差个体\n\n#### 确定式采样选择\n\n1.  计算群体中各个个体在下一代群体中的期望生存数目$N_{i}$: $$ N_{i} = M · F_{i}/\\\\sum^{M}_{i=1}F\\_{i}\\\\quad\\\\quad (i=1,2,3,...,M) $$\n    \n2.  用$N\\_{i}$的整数部分确定各个对应个体在下一代群体中的生存数目。\n    \n3.  按照$N_{i}$的小数部分对个体进行降序排序，顺序取前 $M-\\\\sum ^{M}_{i=1}\\[N\\_{i}\\]$ 个个体加入到下一代群体中。\n    \n\n#### 无回放随机选择\n\n亦称期望值选择方法(Expected Value Model)。\n\n1.  计算群体中各个个体在下一代群体中的期望生存数目$N_{i}$: $$ N_{i} = M · F_{i}/\\\\sum^{M}_{i=1}F\\_{i}\\\\quad\\\\quad (i=1,2,3,...,M) $$\n    \n2.  若某一个体被选中参与交叉运算，则它在下一代中的生存期望数目减去0.5，若未参与交叉运算，则它在下一代中的生存期望数目减去1.0。\n    \n3.  随着选择过程的进行，若某一个个体的生存期望数目小于0时，则该个体就不在有机会被选中。\n    \n\n#### 无回放余数随机选择\n\n1.  计算群体中各个个体在下一代群体中的期望生存数目$N_{i}$: $$ N_{i} = M · F_{i}/\\\\sum^{M}_{i=1}F\\_{i}\\\\quad\\\\quad (i=1,2,3,...,M) $$\n    \n2.  用$N_{i}$的整数部分$N_{i}$确定各个对应个体在下一代群体中的生存数目。\n    \n3.  以$F_{i}-N_{i}·\\\\sum^{M}_{i=1}F/M$ 为各个个体的新的适应度，用比例选择方法来确定下一代群体中还未确定的 $M-\\\\sum ^{M}_{i=1}N\\_{i}$ 个体。\n    \n\n#### 排序选择\n\n对群体中各个个体按其适应度大小来进行排序，基于这个排序来分配各个个体被选中的概率。\n\n1.  对群体中的所有个体按其适应度大小进行降序排序。\n2.  **根据具体求解问题，设计一个概率分配表，将各个概率值按上述排列次序分配给各个个体**。\n3.  以各个个体所分配到的概率值作为其能够被遗传到下一代的概率，基于这些概率值用比例选择的方法来产生下一代群体。\n\n#### 随机联赛选择\n\n每次选取几个个体之中适应值最高的一个个体遗传到下一代群体。\n\n1.  从群体中随机选取N个个体进行适应度大小的比较，将其中适应度最高的个体遗传到下一代群体中。\n2.  将上述过程重复M次，就可得到下一代群体中的M个个体。\n\n## 交叉算子\n\n交叉算子是指对两个相互配对的染色体按某种方式相互交换其部分基因，从而形成两个新的个体\n\n#### 单点交叉\n\n在个体编码串中**只随机设置一个交叉点**，然后在该点相互交换两个配对的部分染色体。\n\n特点：若邻接基因座之间的关系能提供较好的个体性状和较高的个体适应度的话，则这种单点交叉操作破坏这种个体性状和降低个体适应度的可能性最小。\n\n#### 双点交叉\n\n在个体编码串中**随机设置两个交叉点**，然后再进行部分基因交换。\n\n1.  在相互配对的两个个体编码串中随机设置两个交叉点\n    \n2.  交换两个个体在所设定的两个交叉点之间的部分染色体\n    \n    ![image-20221003172723469](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221003172723469.png)\n    \n\n#### 多点交叉\n\n在个体编码串中 **随机设置两个交叉点**，然后进行基因交换。\n\n![image-20221003172903979](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221003172903979.png)\n\n#### 均匀交叉\n\n两个配对个体的每一个基因座上的基因都以相同的交叉概率进行交换。\n\n1.  随机产生一个与个体编码串长度等长的屏蔽字 $W=w_{1}w_{2}...w_{i}...w_{l}$，其中 $l$ 为个体编码串长度。\n    \n2.  由下述规则从 A 和 B 两个父代个体中产生出两个新的子代个体 A’ 和 B'。\n    \n    *   若 $w\\_{i}=0$，则 A' 在第 i 个基因座上的基因值继承 A 的对应基因值，B' 在第 i 个基因座上的基因值继承 B 的对应基因值。\n    *   若 $w\\_{i} =1$，则 A' 在第 i 个基因座上的基因值继承 B 的对应基因值，B' 在第 i 个基因座上的基因值继承 A 的对应基因值。\n    \n    ![image-20221003173710535](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221003173710535.png)\n    \n\n#### 算术交叉\n\n由两个个体的线性组合而产生出两个新的个体。\n\n假设有两个个体$X_{A}$和$X_{B}$之间进行算术交叉，则交叉运算后所产生的两个新个体是: $$ \\\\left{\\\\begin{matrix}\n\nX_{A}^{t+1} = \\\\alpha X_{B}^{t} + (1 - \\\\alpha )X_{A}^{t} \\\\ X_{B}^{t+1} = \\\\alpha X_{A}^{t} + (1 - \\\\alpha )X_{B}^{t} \\\\end{matrix}\\\\right. $$ 其中 α 是一参数，如果 α (0< α <1)是一个常数，则为 **均匀算术交叉**；如果 α 是一个由进化代数所决定的变量，则称为非均匀算术交叉。\n\n1.  确定两个个体进行线性组合的系数 α。\n2.  依据上式生成新的两个个体。\n\n## 变异算子\n\n变异算子是指将个体染色体编码串中的某些基因座上的基因值用该基因座的其它等位基因来替换，从而形成一个新的个体。\n\n#### 基本位变异\n\n个体编码串中以变异概率 $P\\_{c}$ 随机指定的某一位或某几位基因座上的基因值作变异运算。\n\n#### 均匀变异\n\n分别用符合某一范围内均匀分布的随机数，以某一较小的概率来替换个体编码串中各个基因座上的原有基因值。\n\n假设有一个个体为$X = x_{1}x_{2}...x_{k}...x_{l}$，若$x_{k}$为变异点，其取值范围为$\\[U^{k}_{min}, U^{k}_{max}\\]$，在该点对个体 X 进行均匀变异操作后，可得到一个新的个体 $X’= x_{1}x_{2}...x’_{k}...x_{l}$，其变异的新基因值是： $$ x'_{k} = U^{k}_{min}+r·(U_{max}^{k}-U\\_{min}^{k}) $$ 其中，r 为 \\[0,1\\] 范围内符合均匀分布的一个随机数。\n\n1.  依次指定个体编码串中的没个基因座为变异点。\n2.  对每一个变异点，以变异概率 $P\\_{m}$ 从对应基因的取值范围内取一随机数来替代原有基因值。\n\n#### 边界变异\n\n随机地取基因座的两个对应边界基因值之一去替代原有基因值。(是均匀变异操作的一个变形)\n\n在进由$X = x_{1}x_{2}...x_{k}...x_{l}$向$X’= x_{1}x_{2}...x’_{k}...x_{l}$的边界变异操作时，若变异点xk的基因取值范围为$\\[U^{k}_{min}, U^k_{max}\\]$，则新的$x’_{k}$由下式确定： $$ x'_{k}=\\\\left{\\\\begin{matrix} U^{k}_{min} \\\\quad ,\\\\quad if \\\\quad random(0,1) =0 \\\\ U^{k}_{max} \\\\quad ,\\\\quad if \\\\quad random(0,1) =1 \\\\end{matrix}\\\\right. $$ 式中，random(0，1) 表示以均等的概率从0、1中任取其一。\n\n#### 非均匀变异\n\n不是取均匀分布的随机数去替换原有的基因值，而是对原有基因作一**随机扰动**，以扰动后的结果作为变异后的新基因值。\n\n在进由$X = x_{1}x_{2}...x_{k}...x_{l}$向$X’= x_{1}x_{2}...x’_{k}...x_{l}$的边界变异操作时，若变异点xk的基因取值范围为$\\[U^{k}_{min}, U^k_{max}\\]$，则新的$x’_{k}$由下式确定： $$ x'_{k}=\\\\left{\\\\begin{matrix} x_{k}+ \\\\Delta (t,U^{k}_{max}-x_{k}) \\\\quad ,\\\\quad if \\\\quad random(0,1) =0 \\\\ x_{k}- \\\\Delta (t,x_{k}-U^{k}_{min}) \\\\quad ,\\\\quad if \\\\quad random(0,1) =1 \\\\end{matrix}\\\\right. $$ △(t, y)表示 \\[0,y\\] 范围内符合非均匀分布的一个随机数，**要求随着进化代数t的增加，△(t, y)接近于0的概率也逐渐增加。** 例如，△(t, y)可按下式定义： $$ \\\\Delta (t, y) = y·(1-r^{(1-t/T)b}) $$ 其中，r为 \\[0,1\\] 范围内符合均匀分布的一个随机数，T是最大进化代数，b是一个系统参数。它决定了随机扰动对进化代数t的依赖程度。\n\n#### 高斯变异\n\n进行变异操作时，用符合**均值为μ、方差为$σ^{2}$的正态分布**的一个随机数来替换原有基因值。\n\n假定有12个在\\[0,1\\]范围内均匀分布的随机数$r_{i}(i=1,2,..,12)$，则符合$N(μ,σ^{2})$正态分布的一个随机数Q可由下式求得: $$ Q=μ+σ(\\\\sum_{i=1}^{12}r\\_{i}-6) $$\n\n# 遗传算法高级实现技术\n\n## 倒位算子\n\n倒位算子是颠倒个体编码中随机指定的两个基因座之间的基因排列顺序，从而形成一个新的染色体。\n\n过程：\n\n1.  在个体编码串中随机指定两个基因座之后的位置为倒位点。\n2.  以倒位概率 $P\\_{i}$ 颠倒这两个倒位点之间的基因排列顺序。\n\n![image-20221007234228946](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221007234228946.png)\n\n## 二倍体\n\n> 生物学中，二倍体是指含有两个同源基因组的个体。\n> \n> **重要特性**\n> \n> 1.  二倍体的记忆能力\n>     \n>     能够记忆以前经历过的环境及变化。\n>     \n> 2.  显性操作的鲁棒性\n>     \n>     在显性操作的作用下，能够用其另一同源染色体对其进行校正。\n>     \n\n#### 双基因座显性映射\n\n由 Hollstien 提出，每个二进制基因用两个基因来描述，一个称为 **函数基因**，取通常含义的 1 或 0；另一个称为 **修饰基因**，取值为 M（显性） 或 m（隐形）。当两个同源染色体中至少有一个修饰基因是M时，呈显性，否则为隐性。\n\n之后 Hollstien 简化为 单基因座显性映射 ，描述基 因的字符集为${0, 1, 1_{0}}$，其中 $1_{0}$ 为隐性的 1，1 为显性的 1。\n\n![image-20221008143428436](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221008143428436.png)\n\n#### 与GA不同\n\n1.  显性形状也能进化，同源染色体之间需进行交叉操作\n2.  变异操作需考虑隐性性状\n3.  对个体进行交叉、变异运算后，需进行显性操作\n\n#### DiploidyGA算法\n\n1.  初始化，并设置进化代数计数器初值：t=1 。\n    \n2.  随机产生具有二倍体结构的初始群体 P(0)。\n    \n3.  对初始群体 P(0) 进行显性操作。\n    \n4.  评价初始群体P(0)中各个个体的适应度。\n    \n5.  交叉操作：$P'(t)⬅Crossover\\[p(t)\\]$。由每两个随机配对的二倍体个体进行交叉操作时，共可产生四个单倍体个体。\n    \n6.  变异操作：$P''(t)⬅Mutation\\[p'(t)\\]$ 。在对群体中各个个体进行变异操作时，需要考虑隐性基因的作用。\n    \n7.  对群体$P''(t)$进行显性操作。\n    \n8.  评价群体$P''(t)$中各个个体的适应度。\n    \n9.  个体选择、复制操作。\n    \n10.  终止条件判断。若不满足终止条件，则：ｔ⬅ｔ＋１，转到第３步，继续进行进化操作过程；若满足终止条件，则输出当前最优个体，结束。\n    \n\n#### 变长度染色体遗传算法\n\n*   编码 $$ X^{m}:(i_{1},v_{i})(i_{2},v_{2})···(i_{k},v_{k})···(i_{n},v_{n}) $$ $i_{k}$是所描述的基因在原常规染色体中的 **基因座编号**，$v_{k}$为对应的基因值。\n    \n    例：\n    \n    ![image-20221008152328932](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221008152328932.png)\n    \n*   解码\n    \n    这能有什么用？？？？这么能扯\n    \n\n#### 算法步骤(MessyGA)\n\n1.  初始化。随机产生M个染色体，长度全部为 k的个体，以它们作为变长度遗传算法的初始个体集合P(0)，其中k为根据问题的不同而设定的一个参数，并且 $k ≤ l $。\n2.  适应度评价。\n3.  基本处理阶段。对群体P(t)施加选择算子，以保留适应度较高的个体。\n4.  并列处理阶段。对群体P(t)世家变异算子、切断算子和拼接算子，以生成新的个体。\n5.  重复2-4步，直到满足终止条件为止。\n\n> **切断算子**\n> \n> 切断算子以某一预先指定的概率，在变长度染色 体中随机选择一个基因座，在该处将个体的基因型 切断，使之成为二个个体的基因型 。\n> \n> **拼接算子**\n> \n> 拼接算子以某一预先指定的概率，将二个个体的 基因型连接在一起，使它们合并为一个个体的基因型。\n\n## 遗传算法的运行参数\n\n*   编码串的长度 l\n    \n*   群体大小M（一般建议取值20~100）\n    \n*   交叉概率$P\\_{c}$（一般建议取值0.4~0.99）\n    \n*   变异概率$P\\_{m}$（一般建议取值0.0001~0.1）\n    \n*   终止代数T（一般建议取值100~1000）\n    \n    *   规定最大迭代次数T\n    *   规定最小的偏差\n    *   观察适应度的变化趋势\n*   代沟G\n    \n    *   表示每一代群体中被替换掉的个体在全部个体中所占的百分比。\n        \n    *   G=1.0表示群体中的全部个体都是新产生的。\n        \n\n## 约束条件的处理方法\n\n#### 搜索空间限定法\n\n**对遗传算法的搜索空间的大小加以限制**，使得搜索空间中表示一个个体的点与解空间中表示一个可行解的点有一一对应关系。\n\n实现方法：1、用编码方法来保证总是能够产生出在解空间中有对应可行解的染色体。\n\n2、用程序来保证直到产生出在解空间中有对应可行解的染色体之前，一直进行交叉运算和变异运算。\n\n#### 可行解变换法\n\n寻找出一种个体基因型个个体表现型之间的**多对一的变换关系**，使进化过程中所产生的个体总能够通过这个变化而转化成解空间中满足约束条件的一个可行解。\n\n#### 罚函数法\n\n对在解空间中无对应的可行解的个体，计算其适应度时，处以一个罚函数，从而降低个体适应度，使该个体被遗传到下一代群体中的机会减少。\n\n下式对个体适应度进行调整： $$ F'(X)=\\\\left{\\\\begin{matrix} F(X) \\\\quad \\\\quad \\\\qquad X 满足约束条件\\\\ F(X)-P(X) \\\\quad X不满足约束条件 \\\\end{matrix}\\\\right. $$ F(X)为原适应度，F’(X)为新适应度，P(X)为罚函数。\n\n## 小生境遗传算法\n\n在生物学上，**小生境(Niche)**是指特定环境下的一种生存环境。\n\n> 生物在 其进化过程中，一般总是与自己相同的物种生活在一起，共同繁衍后 代；它们也都是在某一特定的地理区域中生存。\n\n### 实现方法\n\n1.  [基于预选择的小生境———（Cavicchio，1970）](#基于预选择的小生境算法)\n2.  [基于排挤的小生境————（De Jong，1975）](#基于排挤的小生境算法)\n3.  [基于共享函数的小生境——（Goldberg和Richardson，1987）](#基于共享函数的小生境算法)\n\n#### 基于预选择的小生境算法\n\n仅当新产生的子代个体的适应度 **超过其父代个体的适应度** 时，所产生出的子代个体才能替换其父代个体而遗传到下 一代群体中，否则父代个体仍保留在下一代群体中。\n\n#### 基于排挤的小生境算法\n\n算法步骤：\n\n1.  初始化。建立初始群体，确定遗传参数，设定排挤银子CF。\n2.  计算个体适应度。\n3.  遗传操作（选择、交叉和变异）\n4.  从当前群体中随机选取群体规模的1/CF个个体组成**排挤因子成员**。\n5.  比较新产生的个体与排挤因子成员中最相似的个体，形成新的当前群体。\n6.  重复2-6步，直到满足终止条件。\n\n**特点**：随着排挤过程的进行，群体中的个体逐渐被分类，从而形成各个小的生存环 境，并维持了群体的多样性。\n\n#### 基于共享函数的小生境算法\n\n> **共享函数**(sharing function)：用来确定每个个体在群体中的 **共享度**。一个个体的共享度等于该个体与群体内的 各个其它个体之间的共享函数值的总和。\n> \n> 设 $d_{ij}$ 表示个体 i 和个体 j 之间的关系密切程度，S为共享函数，$S_{i}$ 表示个体 i 在群体中的共享度: $$ S_{i}=\\\\sum_{j=1}^{n}S(d_{ij}) $$ 个体适应度$f(i)$: $$ f_{s}(i)=f(i)/S\\_{i} $$\n\n通过反映个体之间相似程度的 **共享函数** 来调整群体中各个个体的适应度，从而在这以后的群体进化过程中，算法能够依据这个调整后的新适应度来进行选择运算，以维护群体的多样性，创造出小生境的进化环境。\n\n### 应用\n\n#### 多峰值函数全局最优化\n\n在多峰值函数全局最优化中的应用：（没啥用。。。）\n\n*   首先两两比较群体中各个个体之间的距离，若这个距离在 预先指定的距离L之内的话，再比较两者之间的适应度大 小，并对其中适应度较低的个体施加一个较强的罚函数， 极大地降低其适应度，这样，对于在预先指定的某一距离 L之内的两个个体，其中较差的个体经处理后其适应度变 得更差，它在后面的进化过程中被淘汰掉的概率就极大。\n*   也就是说，在距离L之内将只存在一个优良的个体，从而 既维护了群体的多样性，又使得各个个体之间保持一定的 距离，并使得个体能够在整个约束空间中分散开来，这样就实现了一种小生境遗传算法。\n\n#### 算法过程\n\n1.  设置进化代数计数器t⬅1；随机生成M个初始个体组成初始群体P(t)，并求出各个个体的适应度$F\\_{i}\\\\quad(i=1,2,···,M)$。\n    \n2.  依据各个个体的适应度对其进行降序排序，记忆前N个个体(N<M)。\n    \n3.  遗传运算（选择算子、交叉算子和变异算子）\n    \n4.  小生境淘汰。将变异算子得到的 M 个个体和②中所记忆的N个个体合并在一起，得到一个含有M+N个个体的新群体；对这M+N个个体，求出每两个个体$X_{i}$和$X_{j}$之间的[海明距离](https://baike.baidu.com/item/海明距离)。当 $X_{i}-X_{j}<L$ 时，比较个体$X_{i}和X_{j}$的适应度大小，并对其中适应度较低的个体处以罚函数： $$ F_{min}(x_{i},x\\_{j})=Penalty $$\n    \n5.  依据这M+N个个体的新适应度对各个个体进行降序排序，记忆前N个个体。\n    \n6.  结束判定\n    \n\n## 混合遗传算法\n\n#### 特点\n\n*   引入了局部搜索过程\n*   增加了编码变换操作过程\n\n#### 基本原则\n\n1.  尽量采用原有算法的编码\n2.  利用原有算法的优点\n3.  改进遗传算子\n\n## \\*模拟退火算法\n\n基于金属退火的机理而建立起的一种全局最优化方法，它能够以随机搜索技术从概率的意义上找出目标函数的全局最小点。\n\n#### 构成要素\n\n1.  搜索空间\n2.  能量函数E(x)\n3.  状态转移规则P\n4.  冷却进度表T(t)\n\n#### 算法过程\n\n1.  随机产生一个初始解，以它作为当前最优解，并计算目标函数值。\n2.  设置初始温度：$T=T\\_{0}$。\n3.  设置循环计数器初值：t=1。\n4.  对当前最优解作一随机变动,产生一新的解。计算新的目标函数值，并计算 目标函数值的增量D。\n5.  如果D＜0，则接受该新产生的解为当前最优解； 如果D＞0，则以概率p = exp(-D/T)接受该新产生的解为当前最优解。\n6.  如果t＜终止步数，则：t=t+1，转向第4步。\n7.  如果未到达冷却状态，则：T=T(t)，转向第3步； 如果已到达冷却状态，则：输出当前最优点，计算结束。\n\n略。。。\n\n# 数值函数和多目标优化\n\n## 数值函数优化\n\n#### 纯数值函数优化\n\n专门设计了一些具有复杂数学特征的**纯数学函数**，通过遗传算法对这些函数的优化计算情况来测试各种遗传算法的性能。\n\n#### 常用测试函数\n\n1.  连续函数或离散函数\n2.  凹函数或凸函数\n3.  二次函数或非二次函数\n4.  低维函数或高维函数\n5.  确定性函数或随机性函数\n6.  单峰值函数或多峰值函数\n\n## 多目标优化\n\n#### \\*GA的性能评估\n\n1.  适应值函数计算次数\n    \n    发现同样适应性的个体，或者找到同样质 量的可行解，所需要的关于个体评价的适应值函数的计算次数（function evaluations）。\n    \n    > 该值越小说明相应GA的搜索效率越高。\n    \n2.  在线和离线性能指标\n    \n    *   在线性能指标\n        \n        含义：表示了算法从开始运行一直到当前为止的 时间段内性能值的平均值，它反映了算法的**动态性能**。\n        \n        在环境e下策略s的在线性能 $X_{e}(s)$定义为： $$ X_{e}(s)=\\\\frac{1}{T}\\\\sum_{t=1}^{T}f_{e}(t) $$ $f\\_{e}(t)$是在环境e下第t时刻的平均目标函数值或平均适应度。\n        \n    *   离线性能指标\n        \n        含义：表示了算法运行过程中各进 化代的最佳性能值的累积平均，它反映了算法的**收敛性能**。\n        \n        在环境e下策略s的在线性能 $X_{e}^{\\*}(s)$定义为： $$ X_{e}^{_}(s)=\\\\frac{1}{T}\\\\sum_{t=1}^{T}f_{e}^{_}(t) $$ $f\\_{e}^{ \\*}(s)$是在环境 e 下［0, t］时间段内最好的目标函数值或最大的适应度。\n        \n3.  最优解搜索性能\n    \n    GA用于函数优化的目的就是发现问题的全局最优解， 所以通常采用当前群体发现的最佳可行解的改善情况作为度量GA搜索能力的基本指标。\n    \n\n#### 基本概念\n\n1.  设$𝑋 ⊆ 𝑅^{𝑚}$是多目标优化模型的约束集， $𝑓(𝑥) ∈ 𝑅^{𝑝}$是多目标优化时的向量目标函数，$ 𝑥1 ∈ 𝑋, 𝑥2 ∈ 𝑋$ 。若 $$ 𝑓_{𝑘}(𝑥_{1}) ≤ 𝑓_{𝑘}(𝑥_{2}) (∀𝑘 = 1,2, ⋯ 𝑝) $$ 并且 $$ 𝑓_{𝑘}(𝑥1) < 𝑓_{𝑘}(𝑥2) (∃𝑘 = 1,2, ⋯ 𝑝) $$ 则称解𝑥1比解𝑥2优越。\n    \n2.  设$𝑋 ⊆ 𝑅^{𝑚}$ 是多目标优化模型的约束集， $𝑓(𝑥) ∈ 𝑅^{𝑝}$ 是向量目标函数。若 $𝑥^{∗} ∈ 𝑋$，并且$x^{_}$比 X 中的所有其他点都优越，则称 $x^{_}$是多目标极小化模型的最优解。\n    \n3.  设$𝑋 ⊆ 𝑅^{𝑚}$ 是多目标优化模型的约束集，$ 𝑓(𝑥) ∈ 𝑅^{𝑝}$ 是向量目标函数。若 $\\\\tilde{𝑥}∈ 𝑋$，并且不存在比 $\\\\tilde{𝑥}$ 更优越的 $x $，则称 $\\\\tilde{𝑥}$ 为多目标极小化模型的 **Pareto最优解**，或称为非劣解。\n    \n\n> 多目标优化问题的最优解x \\*就是使向量目标函数f(x) 的每一个子目标函数都同时到达最优点的解.\n> \n> 多目标优化问题的Pareto最优解仅仅只是它的一个可以接受的“不坏”的解，并且通常的多目标优化问题大多都具有很多个Pareto最优解.\n> \n> **求解多目标优化问题的首要步骤和关键步骤是求出其 所有的Pareto最优解**.\n\n#### 求解算法\n\n1.  权重系数变化法\n    \n    对于一个多目标优化问题，若给其各个子目标函数 $𝑓_{𝑖 }(𝑥)\\\\quad (i＝1，2，…，p)$，赋予不同的权重$𝑤_{i}(i＝1，2，… ，p)$，其中各$𝑤_{𝑖}$的大小代表相应子目标$𝑓_{𝑖}(𝑥)$ 在多目标优化问题中的重要程度。则各个子目标函数的线性加权和可表示为: $$ u(f(x))=\\\\sum_{i=1}^{p}w_{i}f\\_{i}(x) $$ 以这个线性加权和作为多目标优化问题的评价函数，则多目标优化问题就可转化为单目标优化问题。\n    \n2.  并列选择法\n    \n    1.  先将群体中的全部个体按子目标函数的数目均等地划分为一些子群体\n    2.  对每个子群体分配一个子目标函数，各个子目标函数在其相应的子群体中独立地进行选择运算\n    3.  各自选择出一些适应度较高的个体组成一个新的子群体\n    4.  所有这些新生成的子群体合并为一个完整的群体，在这个完 整的群体中进行交叉运算和变异运算\n    5.  不断地进行“分割—并列选择—合并”过程\n    \n    最终可求出多目标优化问题的Pareto最优解。\n    \n3.  排序选择法\n    \n    基于“Pareto最优个体”的概念来对群体中的各个个体进行排序，依据这个排列次序来进行进化过程中的选择运算。从而使得排在前面的Pareto最优个体将有更多的机会遗传到下一代群体中。如此这样经过一定代数的循环之后，最终就可求出多目标优化问题的Pareto最优解。\n    \n4.  \\*共享函数法\n    \n5.  \\*混合法\n    \n\n# 粒子群优化算法\n\n## 简介\n\n#### 定义\n\n粒子群优化算法（Particle Swarm Optimization，PSO）是进化计算的一个分支，是一种模拟自然界的生物活动的随机搜索算法。\n\n> PSO 模拟了自然界鸟群捕食和鱼群捕食的过程。通过群体中的协作寻找到问题的全局最优解。它是 1995 年由美国学者 **Eberhart** 和 **Kennedy** 提出的。\n> \n> 设想这样一个场景：一群鸟在随机搜索食物。已知在这块区域里只有一块食物，所有的鸟都不知道食物在哪里，但它们能感受到当前的位置离食物还有多远。\n> \n> 那么，找到食物的最优策略是什么呢？\n> \n> *   搜寻目前离食物最近的鸟的周围区域\n> *   根据自己飞行的经验判断食物的所在\n> \n> **PSO的基础——信息的社会共享**\n\n每个寻优的问题解都被想像成一只鸟，称为“粒子”，所有粒子都在一个 N 维空间进行搜索； 所有的粒子都由一个fitness function 确定适应值以判断目前的位置好坏； 每一个粒子必须赋予记忆功能，能记住所搜寻到的最佳位置；每一个粒子还有一个速度以决定飞行的距离和方向。这个速度根据它本身的飞 行经验以及同伴的飞行经验进行动态调整。\n\n#### 特点\n\n*   优点\n    \n    1.  设置参数较少\n    2.  易于理解和描述\n    3.  收敛速度较好\n    4.  实现容易\n*   缺点\n    \n    1.  容易陷入局部最优\n    2.  收敛精度不高\n    3.  后期收敛速度较慢\n\n## 算法流程\n\n1.  初始化\n    \n    初始化粒子群体（群体规模为n），包括随机位置和速度。\n    \n2.  评估\n    \n    根据适应度函数，评估每个粒子的适应度。\n    \n3.  找到局部最优\n    \n    对每个粒子，将其当前适应值与其个体历史最佳位置（Pbest）对应的适应度作比较，如果当前的适应度更高，则将用当前位置更新历史最佳位置Pbest。\n    \n4.  找到全局最优\n    \n    对每个粒子，将其当前适应值与全局最佳位置（Gbest）对应的适应度作比较，如果当前的适应度更高，则将用当前粒子的位置更新全局最佳位置Gbest。\n    \n5.  更新\n    \n    根据公式 $$ v_{k+1}=c_{0}v_{k}+c_{1}\\\\xi (p_{k}-x_{k})+c_{2}\\\\eta(p_{g}-x_{k})\\\\ x_{k+1}=x_{k}+v_{k+1} $$ 更新每个粒子的速度和位置\n    \n6.  若未达终止条件，则回到第2步","source":"_posts/遗传算法.md","raw":"---\ntitle: 遗传算法\ntags:\n  - 算法\nid: '1145'\ncategories:\n  - - 专业技术\n  - - 学习笔记\ndate: 2022-10-03 23:18:36\n---\n\n数学公式完整版：[https://blog.csdn.net/weixin\\_51245887/article/details/126918727](https://blog.csdn.net/weixin_51245887/article/details/126918727)\n\n# 遗传算法概述\n\n## 背景知识\n\n生物遗传概念\n\n遗传算法中的作用\n\n适应度（Fitness）\n<!-- more -->\n适应函数值。度量某个物种对于生存环境的适应程度\n\n选择（Selection）\n\n决定以一定的概率从种群中选择若干个个体的操作\n\n交叉（Crossover）\n\n通过交配原则产生一组新解的过程\n\n变异（Mutation）\n\n编码的某一个分量发生变化的过程\n\n编码（Coding）\n\n表现型到基因型的映射\n\n解码（Decoding）\n\n基因型到表现型的映射\n\n群体（population）\n\n选定的一组解\n\n种群（reproduction）\n\n根据适应函数值选取的一组解\n\n适者生存\n\n算法停止时，最优目标值的解有最大的可能被保留\n\n个体\n\n解\n\n染色体（chromosome）\n\n解的编码（字符串、向量等）\n\n基因（gene）\n\n解中每一分量的特征（如各分量的值）\n\n## 遗传算法（GA）\n\n#### 概要\n\n*   枚举法\n*   启发式算法\n*   搜索算法\n\n#### 原理\n\n1.  是模拟生物在自然环境下的进化和遗传过程而形成的一种 **自适应全局优化概率方法**\n2.  其采纳了 **自然进化模型**，从代表问题可能潜在解集的一个 **种群** 开始\n3.  **适者生存、优胜劣汰**\n\n#### 算法过程\n\n1.  初始化。设置进化代数计数器t⭠0；设置最大进化代数T；随机生成M个个体作为初始群体P(0)。\n    \n2.  个体评价。计算群体P(t)中各个个体的适应度。\n    \n3.  选择运算。将选择算子作用于群体。\n    \n4.  交叉运算。将交叉算子作用于群体。\n    \n5.  变异运算。将变异算子作用于群体。群体P(t)经过选择、交叉、变异运算之后得到下一代群体P(t+1)。\n    \n6.  终止条件判断。若t≤T，则：t⭠t+1，转到步骤二；若t>T，则以进化过程中所得到的具有最大适应度的个体作为最优解输出，终止计算。\n    \n7.  示意图\n    \n    ![image-20220917173131637](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220917173131637.png)\n    \n\n#### 特点\n\n*   **遗传算法以 决策变量的编码 作为运算对象**\n    \n*   **遗传算法直接以 目标函数值 作为搜索信息**\n    \n*   **遗传算法同时使用 多个搜索点 的搜索信息**\n    \n*   **遗传算法使用 概率搜索技术**\n    \n\n## 基本遗传算法\n\n由 Holland 提出，简称 SGA（Simple Genetic Algorithm）。\n\n#### 构成要素\n\n1.  染色体编码方法\n    \n    使用 **固定长度的二进制符号串** 来表示群体中的个体\n    \n2.  个体适应度评价\n    \n3.  基本遗传算子\n    \n4.  算法的运行参数\n    \n\n#### 伪代码描述\n\n```c\nProcedure SGA\nbegin\n// 初始值，M为个体总数，t为代数，T为最大进化数 \nM=PopulationSize, t=0, T=maxGeneration;\ninit P(t); // 初始化群体P，一开始为第0代\nwhile(t<=T):\n    for i=1 to M do:\n        Evaluate Fitness of P(t);\n    for i=1 to M do:\n        Selection Operation to P(t);\n    for i=1 to M/2 do:\n        Crossover Operation to P(t);\n    for i=1 to M do:\n        Mutation operation to P(t);\n    for i=1 to M do:\n        P(t+1)=P(t)\n     t=t+1\nend\n```\n\n算法图解参考上图\n\n## 个体适应度评价\n\n> 所有个体适应度必须为正数或零，不能为负数。\n\n#### 适应度函数变换常用方法\n\n但实际优化问题中的目标函数值有正也有负，优化目标有求函数最大 值，也有求函数最小值，显然上面两式保证不了所有情况下个体的适应度 都是非负数这个要求，需要进行适应度函数尺度转换，将 **目标函数值 f(x) 变换为个体的适应度F(x) 。**\n\n![image-20221012213710525](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221012213710525.png)\n\n![image-20221012213726845](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221012213726845.png)\n\n比例选择又称为轮盘赌选择（Roulette Wheel ）\n\n## 遗传算法的应用步骤\n\n1.  确定决策变量及其各种约束条件，即确定出个体的表现型 X 和问题的解空间。\n2.  建立优化模型，即确定出目标函数的类型及其数学描述形式或量化方法。\n3.  确定表示可行解的染色体编码方法，也即确定个体的基因型 X 及遗传算法的搜索空间。\n4.  确定解码方法，即确定出由个体基因型 X 到个体表现型 X 的对应关系或转换方法。\n5.  确定个体适应度的量化评价方法，即确定由目标函数值 $f(x)$ 到个体适应度 $F(x)$ 的转换规则。\n6.  设计遗传算子，即确定选择运算、交叉运算和变异运算等遗传算子的操作方法。\n7.  确定遗传算法的有关运行参数，即确定出遗传算法的 $M,T,p_{c},p_{m}$ 等参数。\n\n![image-20221012221848724](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221012221848724.png)\n\n## 模式定理\n\n**模式**\n\n模式（schema）表示一些相似的模块。他描述了在某些位置上的具有相似结构特征的个体编码串的一个子集。\n\n例如：模式 $H = 1\\*\\*11$，模式 $H = 00\\*\\*_$ ，“$_$”代表通配符。\n\n**模式阶**\n\n在模式H中具有确定基因值的位置数目称该模式的模式阶（schema order），记为 $ o(H)$。\n\n例如：$o(100_01_)=5，o(\\***\\*\\***0)=1$\n\n**模式定义长度**\n\n模式 H 中第一个确定基因值的位置和最后一个确定基因值的位置之间的距离称为该模式的模式定义长度（Schema Defining Length），记为 $δ(H)$。\n\n例如：$δ(11\\*0**_) = 3，δ(0_**1) = 4，δ(\\*\\*0\\*\\*\\*) = 1$\n\n#### 在选择算子的作用下\n\n$$ \\\\frac{m(H,t)}{m(H,t+1)}=\\\\frac{\\\\bar{F}(t)}{f(H,t)}\\\\ \\\\Longleftrightarrow m(H,t+1)=m(H,t)\\\\frac{f(H,t)}{ \\\\bar{F}(t)}\\\\ let \\\\quad \\\\frac{f(H,t)}{\\\\bar{F}(t)}=1+C \\\\ \\\\Longrightarrow m(H,t+1)=m(H,t)(1+C)\\\\ \\\\Longrightarrow m(H,t)=m(H,O)·(1+C)^{t} $$\n\n其中\n\n符号\n\n含义\n\n$t$\n\n在进化过程中的第 $t$ 代\n\n$H$\n\n模式 $H$\n\n$m(H, t)$\n\n当前群体 $P(t)$ 中与 $H$ 匹配的个体数\n\n$\\\\bar F(t)$\n\n第 t 代群体的平均适应度\n\n$f(H,t)$\n\n群体中 H 隐含的总个体的平均适应度\n\n**结论**：在选择算子作用下，对于平均适应度高于群体平均适应度的模式，其样本数将呈指数级增长：而对于平均适应度低于群体平均适应度的模式，其样本数将呈指数级减少。\n\n#### 在交叉算子的作用下\n\n$$ m(H,t+1)≥m(H,t)·(1+C)·\\[1-p\\_{c}·\\\\frac{δ(H)}{l-1}\\] $$\n\n$δ(H)$越小，则$m(H,t)$越容易呈指数级增长；\n\n$δ(H)$越大，则$m(H,t)$越不容易呈指数级增长。\n\n#### 在变异算子的作用下\n\n某一模式被破坏的概率： $$ 1-(1-p_{m})^{o(H)} $$ 当 $p_{m}<<1$ 时： $$ 1-(1-p_{m})^{o(H)}≈o(H)·p_{m} $$ 在变异算子的作用下，模式 H 的生存概率： $$ p_{s}≈1-o(H)·p_{m} $$ $o(H)$越小，模式 H 越易于生存；\n\n$o(H)$越大，模式 H 越易于被破坏。\n\n#### 在算子总作用下\n\n$$ m(H,t+1)≥m(H,t)·\\\\frac{f(H,t)}{\\\\bar F(t)}·\\[1-p_{c}·\\\\frac{δ(H)}{l-1}-o(H)·p_{m}\\] $$\n\n⭐总结：**遗传算法中，在选择、交叉和变异算子的作用下，具有低阶、短的定义长度，并且平均适应度高于群体平均适应度的模式将按指数级增长。**\n\n> 【积木块假设】\n> \n> 个体的基因块通过选择、交叉、变异等遗传算子的作用，能够相互拼接在一起，形成适应度更高的个体编码串。\n\n# 遗传算法基本实现技术\n\n## 编码\n\n编码方法很大程度上决定了如何进行群体的遗传进化运算以及遗传进化运算的效率。\n\n常见的编码分类：**二进制编码、浮点编码、符号编码**。\n\n#### 二进制编码\n\n**编码**\n\n假设某一参数的取值范围 \\[$U_{min},U_{max}$ \\] , 我们用长度为 n 的二进制编码符号串来表示参数，共产生 $2^{n}$ 种不同的编码，δ为二进制编码的编码精度。则： $$ δ = \\\\frac{U_{max}-U_{min}}{2^{n}-1} $$ **解码**\n\n假设某一个体的编码是： $$ X:b_{i}b_{i-1}b_{i-2}····b_{2}b_{1} $$ 则解码公式为： $$ x = U_{min}+(\\\\sum_{i=1}^{n}b·2^{i-1})· \\\\frac{U_{max}-U\\_{min}}{2^{n}-1} $$\n\n**\\[例\\]** 设 -3.0 ≤ x ≤ 12.1 , 精度要求 δ = 1/10000\n\n由编码公式\n\n![image-20220928234410284](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220928234410284.png)\n\n> **格雷码编码**\n> \n> 格雷码特点：两个相邻的编码串之间只有一位编码值不同。\n> \n> 解码和编码过程：决策变量 ↔二进制↔格雷码\n\n#### 浮点数编码\n\n个体的每个基因值用_某一范围内_的一个浮点数来表示，个体的编码长度等于其决策变量的个数。\n\n**编码方法**\n\n某一个优化问题含有5个变量 $x_{i}(i=1,2, ... ,5)$，每个变量都有其对应的上下限$\\[U_{min}^{i}, U\\_{max}^{i}\\]$，则：\n\n![image-20220929083709177](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220929083709177.png)\n\n就表示一个个体的基因型，其对应的表现型是： $x = \\[5.80,6.90,3.50,3.80,5.00\\]^{T}$\n\n#### 符号编码\n\n个体染色体编码串中基因值取自一个无数值含义、只有代码含义的符号集。\n\n#### 多参数级联编码\n\n将各个参数分别以某种编码方法进行编码，然后再将它们的编码按一 定顺序联接在一起就组成了表示全部参数的个体编码。这种编码方法 称为多参数级联编码方法。 $$ \\\\underbrace{b_{11}b_{12}···b_{1l_{1}}}_{x_{1}}\\\\underbrace{b_{21}b_{22}···b_{2l_{2 }}}_{x_{2}}····\\\\underbrace{b_{n1}b_{n2}···b_{nl_{1}}}_{x_{n}} $$\n\n#### 多参数交叉编码方法\n\n将各个参数中起主要作用的码位集中在一起。\n\n**编码方法**\n\n1.  先对各个参数进行分组编码\n2.  取各个参数编码串中的最高位联接在一起作为前n位编码；再取次高位同上......\n\n参数编码： $$ \\\\overbrace{b_{11}b_{12}b_{13}···b_{1m}}^{x_{1}}\\\\overbrace{b_{21}b_{22}b_{23}···b_{2m}}^{x_{2}}····\\\\overbrace{b_{n1}b_{n2}b_{n3}···b_{nm}}^{x_{n}} $$ 个体编码串： $$ b_{11}b_{21}b_{31}···b_{n1} b_{12}b_{22}b_{32}···b_{n2} ··· b_{1m}b_{2m}b_{3m}···b\\_{nm} $$\n\n## 适应度函数\n\n度量个体适应度的函数称为适应度函数。\n\n#### 目标函数\n\n是指所关心的目标 (某一变量y) 与相关的因素 ( 某些变量$x\\_{i}$ ) 的函数关系。\n\n#### 适应度尺度变换\n\n对个体适应度所做的扩大或者缩小变换\n\n常见变换方法：\n\n*   线性尺度变换\n    \n    $F^{'}=aF+b$\n    \n*   乘幂尺度变换\n    \n    $F^{'}=F^{k}$\n    \n*   指数尺度变换\n    \n    $F^{'}=exp(-βF)$\n    \n\n**（$F$：原适应度，$F'$：尺度变换后的新适应度）**\n\n## 选择算子\n\n遗传算法使用选择算子（或称复制算子， Reproduction Operator）来对群体中的个体进行优胜劣汰操作；适应度 较高的个体被遗传到下一代群体中的概率较大；适应度较 低的个体被遗传到下一代群体中的概率较小.\n\n#### 比例选择\n\n各个个体被选中的概率与其适应度大小成正比。设群体大小为M，个体 i 的适应度为$F_{i}$，则个体i被选中的概率$p_{is}$为: $$ p_{is}=F_{i}/\\\\sum_{i=1}^{M}F_{i} \\\\quad\\\\quad (i=1,2,3,...,M) $$\n\n#### 最优保存策略\n\n1.  找出当前群体中适应度最高的个体和适应度最低的个体。\n2.  若当前群体中最佳个体的适应度比总的迄今为止的最好个体的适应度还要高，则以当前种群中的最佳个体作为新的迄今为止的最好个体。\n3.  用迄今为止的最好个体替换掉当前群体中的最差个体\n\n#### 确定式采样选择\n\n1.  计算群体中各个个体在下一代群体中的期望生存数目$N_{i}$: $$ N_{i} = M · F_{i}/\\\\sum^{M}_{i=1}F\\_{i}\\\\quad\\\\quad (i=1,2,3,...,M) $$\n    \n2.  用$N\\_{i}$的整数部分确定各个对应个体在下一代群体中的生存数目。\n    \n3.  按照$N_{i}$的小数部分对个体进行降序排序，顺序取前 $M-\\\\sum ^{M}_{i=1}\\[N\\_{i}\\]$ 个个体加入到下一代群体中。\n    \n\n#### 无回放随机选择\n\n亦称期望值选择方法(Expected Value Model)。\n\n1.  计算群体中各个个体在下一代群体中的期望生存数目$N_{i}$: $$ N_{i} = M · F_{i}/\\\\sum^{M}_{i=1}F\\_{i}\\\\quad\\\\quad (i=1,2,3,...,M) $$\n    \n2.  若某一个体被选中参与交叉运算，则它在下一代中的生存期望数目减去0.5，若未参与交叉运算，则它在下一代中的生存期望数目减去1.0。\n    \n3.  随着选择过程的进行，若某一个个体的生存期望数目小于0时，则该个体就不在有机会被选中。\n    \n\n#### 无回放余数随机选择\n\n1.  计算群体中各个个体在下一代群体中的期望生存数目$N_{i}$: $$ N_{i} = M · F_{i}/\\\\sum^{M}_{i=1}F\\_{i}\\\\quad\\\\quad (i=1,2,3,...,M) $$\n    \n2.  用$N_{i}$的整数部分$N_{i}$确定各个对应个体在下一代群体中的生存数目。\n    \n3.  以$F_{i}-N_{i}·\\\\sum^{M}_{i=1}F/M$ 为各个个体的新的适应度，用比例选择方法来确定下一代群体中还未确定的 $M-\\\\sum ^{M}_{i=1}N\\_{i}$ 个体。\n    \n\n#### 排序选择\n\n对群体中各个个体按其适应度大小来进行排序，基于这个排序来分配各个个体被选中的概率。\n\n1.  对群体中的所有个体按其适应度大小进行降序排序。\n2.  **根据具体求解问题，设计一个概率分配表，将各个概率值按上述排列次序分配给各个个体**。\n3.  以各个个体所分配到的概率值作为其能够被遗传到下一代的概率，基于这些概率值用比例选择的方法来产生下一代群体。\n\n#### 随机联赛选择\n\n每次选取几个个体之中适应值最高的一个个体遗传到下一代群体。\n\n1.  从群体中随机选取N个个体进行适应度大小的比较，将其中适应度最高的个体遗传到下一代群体中。\n2.  将上述过程重复M次，就可得到下一代群体中的M个个体。\n\n## 交叉算子\n\n交叉算子是指对两个相互配对的染色体按某种方式相互交换其部分基因，从而形成两个新的个体\n\n#### 单点交叉\n\n在个体编码串中**只随机设置一个交叉点**，然后在该点相互交换两个配对的部分染色体。\n\n特点：若邻接基因座之间的关系能提供较好的个体性状和较高的个体适应度的话，则这种单点交叉操作破坏这种个体性状和降低个体适应度的可能性最小。\n\n#### 双点交叉\n\n在个体编码串中**随机设置两个交叉点**，然后再进行部分基因交换。\n\n1.  在相互配对的两个个体编码串中随机设置两个交叉点\n    \n2.  交换两个个体在所设定的两个交叉点之间的部分染色体\n    \n    ![image-20221003172723469](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221003172723469.png)\n    \n\n#### 多点交叉\n\n在个体编码串中 **随机设置两个交叉点**，然后进行基因交换。\n\n![image-20221003172903979](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221003172903979.png)\n\n#### 均匀交叉\n\n两个配对个体的每一个基因座上的基因都以相同的交叉概率进行交换。\n\n1.  随机产生一个与个体编码串长度等长的屏蔽字 $W=w_{1}w_{2}...w_{i}...w_{l}$，其中 $l$ 为个体编码串长度。\n    \n2.  由下述规则从 A 和 B 两个父代个体中产生出两个新的子代个体 A’ 和 B'。\n    \n    *   若 $w\\_{i}=0$，则 A' 在第 i 个基因座上的基因值继承 A 的对应基因值，B' 在第 i 个基因座上的基因值继承 B 的对应基因值。\n    *   若 $w\\_{i} =1$，则 A' 在第 i 个基因座上的基因值继承 B 的对应基因值，B' 在第 i 个基因座上的基因值继承 A 的对应基因值。\n    \n    ![image-20221003173710535](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221003173710535.png)\n    \n\n#### 算术交叉\n\n由两个个体的线性组合而产生出两个新的个体。\n\n假设有两个个体$X_{A}$和$X_{B}$之间进行算术交叉，则交叉运算后所产生的两个新个体是: $$ \\\\left{\\\\begin{matrix}\n\nX_{A}^{t+1} = \\\\alpha X_{B}^{t} + (1 - \\\\alpha )X_{A}^{t} \\\\ X_{B}^{t+1} = \\\\alpha X_{A}^{t} + (1 - \\\\alpha )X_{B}^{t} \\\\end{matrix}\\\\right. $$ 其中 α 是一参数，如果 α (0< α <1)是一个常数，则为 **均匀算术交叉**；如果 α 是一个由进化代数所决定的变量，则称为非均匀算术交叉。\n\n1.  确定两个个体进行线性组合的系数 α。\n2.  依据上式生成新的两个个体。\n\n## 变异算子\n\n变异算子是指将个体染色体编码串中的某些基因座上的基因值用该基因座的其它等位基因来替换，从而形成一个新的个体。\n\n#### 基本位变异\n\n个体编码串中以变异概率 $P\\_{c}$ 随机指定的某一位或某几位基因座上的基因值作变异运算。\n\n#### 均匀变异\n\n分别用符合某一范围内均匀分布的随机数，以某一较小的概率来替换个体编码串中各个基因座上的原有基因值。\n\n假设有一个个体为$X = x_{1}x_{2}...x_{k}...x_{l}$，若$x_{k}$为变异点，其取值范围为$\\[U^{k}_{min}, U^{k}_{max}\\]$，在该点对个体 X 进行均匀变异操作后，可得到一个新的个体 $X’= x_{1}x_{2}...x’_{k}...x_{l}$，其变异的新基因值是： $$ x'_{k} = U^{k}_{min}+r·(U_{max}^{k}-U\\_{min}^{k}) $$ 其中，r 为 \\[0,1\\] 范围内符合均匀分布的一个随机数。\n\n1.  依次指定个体编码串中的没个基因座为变异点。\n2.  对每一个变异点，以变异概率 $P\\_{m}$ 从对应基因的取值范围内取一随机数来替代原有基因值。\n\n#### 边界变异\n\n随机地取基因座的两个对应边界基因值之一去替代原有基因值。(是均匀变异操作的一个变形)\n\n在进由$X = x_{1}x_{2}...x_{k}...x_{l}$向$X’= x_{1}x_{2}...x’_{k}...x_{l}$的边界变异操作时，若变异点xk的基因取值范围为$\\[U^{k}_{min}, U^k_{max}\\]$，则新的$x’_{k}$由下式确定： $$ x'_{k}=\\\\left{\\\\begin{matrix} U^{k}_{min} \\\\quad ,\\\\quad if \\\\quad random(0,1) =0 \\\\ U^{k}_{max} \\\\quad ,\\\\quad if \\\\quad random(0,1) =1 \\\\end{matrix}\\\\right. $$ 式中，random(0，1) 表示以均等的概率从0、1中任取其一。\n\n#### 非均匀变异\n\n不是取均匀分布的随机数去替换原有的基因值，而是对原有基因作一**随机扰动**，以扰动后的结果作为变异后的新基因值。\n\n在进由$X = x_{1}x_{2}...x_{k}...x_{l}$向$X’= x_{1}x_{2}...x’_{k}...x_{l}$的边界变异操作时，若变异点xk的基因取值范围为$\\[U^{k}_{min}, U^k_{max}\\]$，则新的$x’_{k}$由下式确定： $$ x'_{k}=\\\\left{\\\\begin{matrix} x_{k}+ \\\\Delta (t,U^{k}_{max}-x_{k}) \\\\quad ,\\\\quad if \\\\quad random(0,1) =0 \\\\ x_{k}- \\\\Delta (t,x_{k}-U^{k}_{min}) \\\\quad ,\\\\quad if \\\\quad random(0,1) =1 \\\\end{matrix}\\\\right. $$ △(t, y)表示 \\[0,y\\] 范围内符合非均匀分布的一个随机数，**要求随着进化代数t的增加，△(t, y)接近于0的概率也逐渐增加。** 例如，△(t, y)可按下式定义： $$ \\\\Delta (t, y) = y·(1-r^{(1-t/T)b}) $$ 其中，r为 \\[0,1\\] 范围内符合均匀分布的一个随机数，T是最大进化代数，b是一个系统参数。它决定了随机扰动对进化代数t的依赖程度。\n\n#### 高斯变异\n\n进行变异操作时，用符合**均值为μ、方差为$σ^{2}$的正态分布**的一个随机数来替换原有基因值。\n\n假定有12个在\\[0,1\\]范围内均匀分布的随机数$r_{i}(i=1,2,..,12)$，则符合$N(μ,σ^{2})$正态分布的一个随机数Q可由下式求得: $$ Q=μ+σ(\\\\sum_{i=1}^{12}r\\_{i}-6) $$\n\n# 遗传算法高级实现技术\n\n## 倒位算子\n\n倒位算子是颠倒个体编码中随机指定的两个基因座之间的基因排列顺序，从而形成一个新的染色体。\n\n过程：\n\n1.  在个体编码串中随机指定两个基因座之后的位置为倒位点。\n2.  以倒位概率 $P\\_{i}$ 颠倒这两个倒位点之间的基因排列顺序。\n\n![image-20221007234228946](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221007234228946.png)\n\n## 二倍体\n\n> 生物学中，二倍体是指含有两个同源基因组的个体。\n> \n> **重要特性**\n> \n> 1.  二倍体的记忆能力\n>     \n>     能够记忆以前经历过的环境及变化。\n>     \n> 2.  显性操作的鲁棒性\n>     \n>     在显性操作的作用下，能够用其另一同源染色体对其进行校正。\n>     \n\n#### 双基因座显性映射\n\n由 Hollstien 提出，每个二进制基因用两个基因来描述，一个称为 **函数基因**，取通常含义的 1 或 0；另一个称为 **修饰基因**，取值为 M（显性） 或 m（隐形）。当两个同源染色体中至少有一个修饰基因是M时，呈显性，否则为隐性。\n\n之后 Hollstien 简化为 单基因座显性映射 ，描述基 因的字符集为${0, 1, 1_{0}}$，其中 $1_{0}$ 为隐性的 1，1 为显性的 1。\n\n![image-20221008143428436](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221008143428436.png)\n\n#### 与GA不同\n\n1.  显性形状也能进化，同源染色体之间需进行交叉操作\n2.  变异操作需考虑隐性性状\n3.  对个体进行交叉、变异运算后，需进行显性操作\n\n#### DiploidyGA算法\n\n1.  初始化，并设置进化代数计数器初值：t=1 。\n    \n2.  随机产生具有二倍体结构的初始群体 P(0)。\n    \n3.  对初始群体 P(0) 进行显性操作。\n    \n4.  评价初始群体P(0)中各个个体的适应度。\n    \n5.  交叉操作：$P'(t)⬅Crossover\\[p(t)\\]$。由每两个随机配对的二倍体个体进行交叉操作时，共可产生四个单倍体个体。\n    \n6.  变异操作：$P''(t)⬅Mutation\\[p'(t)\\]$ 。在对群体中各个个体进行变异操作时，需要考虑隐性基因的作用。\n    \n7.  对群体$P''(t)$进行显性操作。\n    \n8.  评价群体$P''(t)$中各个个体的适应度。\n    \n9.  个体选择、复制操作。\n    \n10.  终止条件判断。若不满足终止条件，则：ｔ⬅ｔ＋１，转到第３步，继续进行进化操作过程；若满足终止条件，则输出当前最优个体，结束。\n    \n\n#### 变长度染色体遗传算法\n\n*   编码 $$ X^{m}:(i_{1},v_{i})(i_{2},v_{2})···(i_{k},v_{k})···(i_{n},v_{n}) $$ $i_{k}$是所描述的基因在原常规染色体中的 **基因座编号**，$v_{k}$为对应的基因值。\n    \n    例：\n    \n    ![image-20221008152328932](https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221008152328932.png)\n    \n*   解码\n    \n    这能有什么用？？？？这么能扯\n    \n\n#### 算法步骤(MessyGA)\n\n1.  初始化。随机产生M个染色体，长度全部为 k的个体，以它们作为变长度遗传算法的初始个体集合P(0)，其中k为根据问题的不同而设定的一个参数，并且 $k ≤ l $。\n2.  适应度评价。\n3.  基本处理阶段。对群体P(t)施加选择算子，以保留适应度较高的个体。\n4.  并列处理阶段。对群体P(t)世家变异算子、切断算子和拼接算子，以生成新的个体。\n5.  重复2-4步，直到满足终止条件为止。\n\n> **切断算子**\n> \n> 切断算子以某一预先指定的概率，在变长度染色 体中随机选择一个基因座，在该处将个体的基因型 切断，使之成为二个个体的基因型 。\n> \n> **拼接算子**\n> \n> 拼接算子以某一预先指定的概率，将二个个体的 基因型连接在一起，使它们合并为一个个体的基因型。\n\n## 遗传算法的运行参数\n\n*   编码串的长度 l\n    \n*   群体大小M（一般建议取值20~100）\n    \n*   交叉概率$P\\_{c}$（一般建议取值0.4~0.99）\n    \n*   变异概率$P\\_{m}$（一般建议取值0.0001~0.1）\n    \n*   终止代数T（一般建议取值100~1000）\n    \n    *   规定最大迭代次数T\n    *   规定最小的偏差\n    *   观察适应度的变化趋势\n*   代沟G\n    \n    *   表示每一代群体中被替换掉的个体在全部个体中所占的百分比。\n        \n    *   G=1.0表示群体中的全部个体都是新产生的。\n        \n\n## 约束条件的处理方法\n\n#### 搜索空间限定法\n\n**对遗传算法的搜索空间的大小加以限制**，使得搜索空间中表示一个个体的点与解空间中表示一个可行解的点有一一对应关系。\n\n实现方法：1、用编码方法来保证总是能够产生出在解空间中有对应可行解的染色体。\n\n2、用程序来保证直到产生出在解空间中有对应可行解的染色体之前，一直进行交叉运算和变异运算。\n\n#### 可行解变换法\n\n寻找出一种个体基因型个个体表现型之间的**多对一的变换关系**，使进化过程中所产生的个体总能够通过这个变化而转化成解空间中满足约束条件的一个可行解。\n\n#### 罚函数法\n\n对在解空间中无对应的可行解的个体，计算其适应度时，处以一个罚函数，从而降低个体适应度，使该个体被遗传到下一代群体中的机会减少。\n\n下式对个体适应度进行调整： $$ F'(X)=\\\\left{\\\\begin{matrix} F(X) \\\\quad \\\\quad \\\\qquad X 满足约束条件\\\\ F(X)-P(X) \\\\quad X不满足约束条件 \\\\end{matrix}\\\\right. $$ F(X)为原适应度，F’(X)为新适应度，P(X)为罚函数。\n\n## 小生境遗传算法\n\n在生物学上，**小生境(Niche)**是指特定环境下的一种生存环境。\n\n> 生物在 其进化过程中，一般总是与自己相同的物种生活在一起，共同繁衍后 代；它们也都是在某一特定的地理区域中生存。\n\n### 实现方法\n\n1.  [基于预选择的小生境———（Cavicchio，1970）](#基于预选择的小生境算法)\n2.  [基于排挤的小生境————（De Jong，1975）](#基于排挤的小生境算法)\n3.  [基于共享函数的小生境——（Goldberg和Richardson，1987）](#基于共享函数的小生境算法)\n\n#### 基于预选择的小生境算法\n\n仅当新产生的子代个体的适应度 **超过其父代个体的适应度** 时，所产生出的子代个体才能替换其父代个体而遗传到下 一代群体中，否则父代个体仍保留在下一代群体中。\n\n#### 基于排挤的小生境算法\n\n算法步骤：\n\n1.  初始化。建立初始群体，确定遗传参数，设定排挤银子CF。\n2.  计算个体适应度。\n3.  遗传操作（选择、交叉和变异）\n4.  从当前群体中随机选取群体规模的1/CF个个体组成**排挤因子成员**。\n5.  比较新产生的个体与排挤因子成员中最相似的个体，形成新的当前群体。\n6.  重复2-6步，直到满足终止条件。\n\n**特点**：随着排挤过程的进行，群体中的个体逐渐被分类，从而形成各个小的生存环 境，并维持了群体的多样性。\n\n#### 基于共享函数的小生境算法\n\n> **共享函数**(sharing function)：用来确定每个个体在群体中的 **共享度**。一个个体的共享度等于该个体与群体内的 各个其它个体之间的共享函数值的总和。\n> \n> 设 $d_{ij}$ 表示个体 i 和个体 j 之间的关系密切程度，S为共享函数，$S_{i}$ 表示个体 i 在群体中的共享度: $$ S_{i}=\\\\sum_{j=1}^{n}S(d_{ij}) $$ 个体适应度$f(i)$: $$ f_{s}(i)=f(i)/S\\_{i} $$\n\n通过反映个体之间相似程度的 **共享函数** 来调整群体中各个个体的适应度，从而在这以后的群体进化过程中，算法能够依据这个调整后的新适应度来进行选择运算，以维护群体的多样性，创造出小生境的进化环境。\n\n### 应用\n\n#### 多峰值函数全局最优化\n\n在多峰值函数全局最优化中的应用：（没啥用。。。）\n\n*   首先两两比较群体中各个个体之间的距离，若这个距离在 预先指定的距离L之内的话，再比较两者之间的适应度大 小，并对其中适应度较低的个体施加一个较强的罚函数， 极大地降低其适应度，这样，对于在预先指定的某一距离 L之内的两个个体，其中较差的个体经处理后其适应度变 得更差，它在后面的进化过程中被淘汰掉的概率就极大。\n*   也就是说，在距离L之内将只存在一个优良的个体，从而 既维护了群体的多样性，又使得各个个体之间保持一定的 距离，并使得个体能够在整个约束空间中分散开来，这样就实现了一种小生境遗传算法。\n\n#### 算法过程\n\n1.  设置进化代数计数器t⬅1；随机生成M个初始个体组成初始群体P(t)，并求出各个个体的适应度$F\\_{i}\\\\quad(i=1,2,···,M)$。\n    \n2.  依据各个个体的适应度对其进行降序排序，记忆前N个个体(N<M)。\n    \n3.  遗传运算（选择算子、交叉算子和变异算子）\n    \n4.  小生境淘汰。将变异算子得到的 M 个个体和②中所记忆的N个个体合并在一起，得到一个含有M+N个个体的新群体；对这M+N个个体，求出每两个个体$X_{i}$和$X_{j}$之间的[海明距离](https://baike.baidu.com/item/海明距离)。当 $X_{i}-X_{j}<L$ 时，比较个体$X_{i}和X_{j}$的适应度大小，并对其中适应度较低的个体处以罚函数： $$ F_{min}(x_{i},x\\_{j})=Penalty $$\n    \n5.  依据这M+N个个体的新适应度对各个个体进行降序排序，记忆前N个个体。\n    \n6.  结束判定\n    \n\n## 混合遗传算法\n\n#### 特点\n\n*   引入了局部搜索过程\n*   增加了编码变换操作过程\n\n#### 基本原则\n\n1.  尽量采用原有算法的编码\n2.  利用原有算法的优点\n3.  改进遗传算子\n\n## \\*模拟退火算法\n\n基于金属退火的机理而建立起的一种全局最优化方法，它能够以随机搜索技术从概率的意义上找出目标函数的全局最小点。\n\n#### 构成要素\n\n1.  搜索空间\n2.  能量函数E(x)\n3.  状态转移规则P\n4.  冷却进度表T(t)\n\n#### 算法过程\n\n1.  随机产生一个初始解，以它作为当前最优解，并计算目标函数值。\n2.  设置初始温度：$T=T\\_{0}$。\n3.  设置循环计数器初值：t=1。\n4.  对当前最优解作一随机变动,产生一新的解。计算新的目标函数值，并计算 目标函数值的增量D。\n5.  如果D＜0，则接受该新产生的解为当前最优解； 如果D＞0，则以概率p = exp(-D/T)接受该新产生的解为当前最优解。\n6.  如果t＜终止步数，则：t=t+1，转向第4步。\n7.  如果未到达冷却状态，则：T=T(t)，转向第3步； 如果已到达冷却状态，则：输出当前最优点，计算结束。\n\n略。。。\n\n# 数值函数和多目标优化\n\n## 数值函数优化\n\n#### 纯数值函数优化\n\n专门设计了一些具有复杂数学特征的**纯数学函数**，通过遗传算法对这些函数的优化计算情况来测试各种遗传算法的性能。\n\n#### 常用测试函数\n\n1.  连续函数或离散函数\n2.  凹函数或凸函数\n3.  二次函数或非二次函数\n4.  低维函数或高维函数\n5.  确定性函数或随机性函数\n6.  单峰值函数或多峰值函数\n\n## 多目标优化\n\n#### \\*GA的性能评估\n\n1.  适应值函数计算次数\n    \n    发现同样适应性的个体，或者找到同样质 量的可行解，所需要的关于个体评价的适应值函数的计算次数（function evaluations）。\n    \n    > 该值越小说明相应GA的搜索效率越高。\n    \n2.  在线和离线性能指标\n    \n    *   在线性能指标\n        \n        含义：表示了算法从开始运行一直到当前为止的 时间段内性能值的平均值，它反映了算法的**动态性能**。\n        \n        在环境e下策略s的在线性能 $X_{e}(s)$定义为： $$ X_{e}(s)=\\\\frac{1}{T}\\\\sum_{t=1}^{T}f_{e}(t) $$ $f\\_{e}(t)$是在环境e下第t时刻的平均目标函数值或平均适应度。\n        \n    *   离线性能指标\n        \n        含义：表示了算法运行过程中各进 化代的最佳性能值的累积平均，它反映了算法的**收敛性能**。\n        \n        在环境e下策略s的在线性能 $X_{e}^{\\*}(s)$定义为： $$ X_{e}^{_}(s)=\\\\frac{1}{T}\\\\sum_{t=1}^{T}f_{e}^{_}(t) $$ $f\\_{e}^{ \\*}(s)$是在环境 e 下［0, t］时间段内最好的目标函数值或最大的适应度。\n        \n3.  最优解搜索性能\n    \n    GA用于函数优化的目的就是发现问题的全局最优解， 所以通常采用当前群体发现的最佳可行解的改善情况作为度量GA搜索能力的基本指标。\n    \n\n#### 基本概念\n\n1.  设$𝑋 ⊆ 𝑅^{𝑚}$是多目标优化模型的约束集， $𝑓(𝑥) ∈ 𝑅^{𝑝}$是多目标优化时的向量目标函数，$ 𝑥1 ∈ 𝑋, 𝑥2 ∈ 𝑋$ 。若 $$ 𝑓_{𝑘}(𝑥_{1}) ≤ 𝑓_{𝑘}(𝑥_{2}) (∀𝑘 = 1,2, ⋯ 𝑝) $$ 并且 $$ 𝑓_{𝑘}(𝑥1) < 𝑓_{𝑘}(𝑥2) (∃𝑘 = 1,2, ⋯ 𝑝) $$ 则称解𝑥1比解𝑥2优越。\n    \n2.  设$𝑋 ⊆ 𝑅^{𝑚}$ 是多目标优化模型的约束集， $𝑓(𝑥) ∈ 𝑅^{𝑝}$ 是向量目标函数。若 $𝑥^{∗} ∈ 𝑋$，并且$x^{_}$比 X 中的所有其他点都优越，则称 $x^{_}$是多目标极小化模型的最优解。\n    \n3.  设$𝑋 ⊆ 𝑅^{𝑚}$ 是多目标优化模型的约束集，$ 𝑓(𝑥) ∈ 𝑅^{𝑝}$ 是向量目标函数。若 $\\\\tilde{𝑥}∈ 𝑋$，并且不存在比 $\\\\tilde{𝑥}$ 更优越的 $x $，则称 $\\\\tilde{𝑥}$ 为多目标极小化模型的 **Pareto最优解**，或称为非劣解。\n    \n\n> 多目标优化问题的最优解x \\*就是使向量目标函数f(x) 的每一个子目标函数都同时到达最优点的解.\n> \n> 多目标优化问题的Pareto最优解仅仅只是它的一个可以接受的“不坏”的解，并且通常的多目标优化问题大多都具有很多个Pareto最优解.\n> \n> **求解多目标优化问题的首要步骤和关键步骤是求出其 所有的Pareto最优解**.\n\n#### 求解算法\n\n1.  权重系数变化法\n    \n    对于一个多目标优化问题，若给其各个子目标函数 $𝑓_{𝑖 }(𝑥)\\\\quad (i＝1，2，…，p)$，赋予不同的权重$𝑤_{i}(i＝1，2，… ，p)$，其中各$𝑤_{𝑖}$的大小代表相应子目标$𝑓_{𝑖}(𝑥)$ 在多目标优化问题中的重要程度。则各个子目标函数的线性加权和可表示为: $$ u(f(x))=\\\\sum_{i=1}^{p}w_{i}f\\_{i}(x) $$ 以这个线性加权和作为多目标优化问题的评价函数，则多目标优化问题就可转化为单目标优化问题。\n    \n2.  并列选择法\n    \n    1.  先将群体中的全部个体按子目标函数的数目均等地划分为一些子群体\n    2.  对每个子群体分配一个子目标函数，各个子目标函数在其相应的子群体中独立地进行选择运算\n    3.  各自选择出一些适应度较高的个体组成一个新的子群体\n    4.  所有这些新生成的子群体合并为一个完整的群体，在这个完 整的群体中进行交叉运算和变异运算\n    5.  不断地进行“分割—并列选择—合并”过程\n    \n    最终可求出多目标优化问题的Pareto最优解。\n    \n3.  排序选择法\n    \n    基于“Pareto最优个体”的概念来对群体中的各个个体进行排序，依据这个排列次序来进行进化过程中的选择运算。从而使得排在前面的Pareto最优个体将有更多的机会遗传到下一代群体中。如此这样经过一定代数的循环之后，最终就可求出多目标优化问题的Pareto最优解。\n    \n4.  \\*共享函数法\n    \n5.  \\*混合法\n    \n\n# 粒子群优化算法\n\n## 简介\n\n#### 定义\n\n粒子群优化算法（Particle Swarm Optimization，PSO）是进化计算的一个分支，是一种模拟自然界的生物活动的随机搜索算法。\n\n> PSO 模拟了自然界鸟群捕食和鱼群捕食的过程。通过群体中的协作寻找到问题的全局最优解。它是 1995 年由美国学者 **Eberhart** 和 **Kennedy** 提出的。\n> \n> 设想这样一个场景：一群鸟在随机搜索食物。已知在这块区域里只有一块食物，所有的鸟都不知道食物在哪里，但它们能感受到当前的位置离食物还有多远。\n> \n> 那么，找到食物的最优策略是什么呢？\n> \n> *   搜寻目前离食物最近的鸟的周围区域\n> *   根据自己飞行的经验判断食物的所在\n> \n> **PSO的基础——信息的社会共享**\n\n每个寻优的问题解都被想像成一只鸟，称为“粒子”，所有粒子都在一个 N 维空间进行搜索； 所有的粒子都由一个fitness function 确定适应值以判断目前的位置好坏； 每一个粒子必须赋予记忆功能，能记住所搜寻到的最佳位置；每一个粒子还有一个速度以决定飞行的距离和方向。这个速度根据它本身的飞 行经验以及同伴的飞行经验进行动态调整。\n\n#### 特点\n\n*   优点\n    \n    1.  设置参数较少\n    2.  易于理解和描述\n    3.  收敛速度较好\n    4.  实现容易\n*   缺点\n    \n    1.  容易陷入局部最优\n    2.  收敛精度不高\n    3.  后期收敛速度较慢\n\n## 算法流程\n\n1.  初始化\n    \n    初始化粒子群体（群体规模为n），包括随机位置和速度。\n    \n2.  评估\n    \n    根据适应度函数，评估每个粒子的适应度。\n    \n3.  找到局部最优\n    \n    对每个粒子，将其当前适应值与其个体历史最佳位置（Pbest）对应的适应度作比较，如果当前的适应度更高，则将用当前位置更新历史最佳位置Pbest。\n    \n4.  找到全局最优\n    \n    对每个粒子，将其当前适应值与全局最佳位置（Gbest）对应的适应度作比较，如果当前的适应度更高，则将用当前粒子的位置更新全局最佳位置Gbest。\n    \n5.  更新\n    \n    根据公式 $$ v_{k+1}=c_{0}v_{k}+c_{1}\\\\xi (p_{k}-x_{k})+c_{2}\\\\eta(p_{g}-x_{k})\\\\ x_{k+1}=x_{k}+v_{k+1} $$ 更新每个粒子的速度和位置\n    \n6.  若未达终止条件，则回到第2步","slug":"遗传算法","published":1,"updated":"2024-03-12T10:43:12.664Z","_id":"cltnrar5d0035jry1ej32hvuz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>数学公式完整版：<a href=\"https://blog.csdn.net/weixin_51245887/article/details/126918727\">https://blog.csdn.net/weixin_51245887/article/details/126918727</a></p>\n<h1 id=\"遗传算法概述\"><a href=\"#遗传算法概述\" class=\"headerlink\" title=\"遗传算法概述\"></a>遗传算法概述</h1><h2 id=\"背景知识\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h2><p>生物遗传概念</p>\n<p>遗传算法中的作用</p>\n<p>适应度（Fitness）</p>\n<span id=\"more\"></span>\n<p>适应函数值。度量某个物种对于生存环境的适应程度</p>\n<p>选择（Selection）</p>\n<p>决定以一定的概率从种群中选择若干个个体的操作</p>\n<p>交叉（Crossover）</p>\n<p>通过交配原则产生一组新解的过程</p>\n<p>变异（Mutation）</p>\n<p>编码的某一个分量发生变化的过程</p>\n<p>编码（Coding）</p>\n<p>表现型到基因型的映射</p>\n<p>解码（Decoding）</p>\n<p>基因型到表现型的映射</p>\n<p>群体（population）</p>\n<p>选定的一组解</p>\n<p>种群（reproduction）</p>\n<p>根据适应函数值选取的一组解</p>\n<p>适者生存</p>\n<p>算法停止时，最优目标值的解有最大的可能被保留</p>\n<p>个体</p>\n<p>解</p>\n<p>染色体（chromosome）</p>\n<p>解的编码（字符串、向量等）</p>\n<p>基因（gene）</p>\n<p>解中每一分量的特征（如各分量的值）</p>\n<h2 id=\"遗传算法（GA）\"><a href=\"#遗传算法（GA）\" class=\"headerlink\" title=\"遗传算法（GA）\"></a>遗传算法（GA）</h2><h4 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h4><ul>\n<li>  枚举法</li>\n<li>  启发式算法</li>\n<li>  搜索算法</li>\n</ul>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><ol>\n<li> 是模拟生物在自然环境下的进化和遗传过程而形成的一种 <strong>自适应全局优化概率方法</strong></li>\n<li> 其采纳了 <strong>自然进化模型</strong>，从代表问题可能潜在解集的一个 <strong>种群</strong> 开始</li>\n<li> <strong>适者生存、优胜劣汰</strong></li>\n</ol>\n<h4 id=\"算法过程\"><a href=\"#算法过程\" class=\"headerlink\" title=\"算法过程\"></a>算法过程</h4><ol>\n<li>初始化。设置进化代数计数器t⭠0；设置最大进化代数T；随机生成M个个体作为初始群体P(0)。</li>\n<li>个体评价。计算群体P(t)中各个个体的适应度。</li>\n<li>选择运算。将选择算子作用于群体。</li>\n<li>交叉运算。将交叉算子作用于群体。</li>\n<li>变异运算。将变异算子作用于群体。群体P(t)经过选择、交叉、变异运算之后得到下一代群体P(t+1)。</li>\n<li>终止条件判断。若t≤T，则：t⭠t+1，转到步骤二；若t&gt;T，则以进化过程中所得到的具有最大适应度的个体作为最优解输出，终止计算。</li>\n<li>示意图 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220917173131637.png\" alt=\"image-20220917173131637\"></li>\n</ol>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li><strong>遗传算法以 决策变量的编码 作为运算对象</strong></li>\n<li><strong>遗传算法直接以 目标函数值 作为搜索信息</strong></li>\n<li><strong>遗传算法同时使用 多个搜索点 的搜索信息</strong></li>\n<li><strong>遗传算法使用 概率搜索技术</strong></li>\n</ul>\n<h2 id=\"基本遗传算法\"><a href=\"#基本遗传算法\" class=\"headerlink\" title=\"基本遗传算法\"></a>基本遗传算法</h2><p>由 Holland 提出，简称 SGA（Simple Genetic Algorithm）。</p>\n<h4 id=\"构成要素\"><a href=\"#构成要素\" class=\"headerlink\" title=\"构成要素\"></a>构成要素</h4><ol>\n<li>染色体编码方法 使用 <strong>固定长度的二进制符号串</strong> 来表示群体中的个体</li>\n<li>个体适应度评价</li>\n<li>基本遗传算子</li>\n<li>算法的运行参数</li>\n</ol>\n<h4 id=\"伪代码描述\"><a href=\"#伪代码描述\" class=\"headerlink\" title=\"伪代码描述\"></a>伪代码描述</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Procedure SGA</span><br><span class=\"line\">begin</span><br><span class=\"line\"><span class=\"comment\">// 初始值，M为个体总数，t为代数，T为最大进化数 </span></span><br><span class=\"line\">M=PopulationSize, t=<span class=\"number\">0</span>, T=maxGeneration;</span><br><span class=\"line\">init <span class=\"title function_\">P</span><span class=\"params\">(t)</span>; <span class=\"comment\">// 初始化群体P，一开始为第0代</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(t&lt;=T):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i=<span class=\"number\">1</span> to M <span class=\"keyword\">do</span>:</span><br><span class=\"line\">        Evaluate Fitness of P(t);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i=<span class=\"number\">1</span> to M <span class=\"keyword\">do</span>:</span><br><span class=\"line\">        Selection Operation to P(t);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i=<span class=\"number\">1</span> to M/<span class=\"number\">2</span> <span class=\"keyword\">do</span>:</span><br><span class=\"line\">        Crossover Operation to P(t);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i=<span class=\"number\">1</span> to M <span class=\"keyword\">do</span>:</span><br><span class=\"line\">        Mutation operation to P(t);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i=<span class=\"number\">1</span> to M <span class=\"keyword\">do</span>:</span><br><span class=\"line\">        P(t+<span class=\"number\">1</span>)=P(t)</span><br><span class=\"line\">     t=t+<span class=\"number\">1</span></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>算法图解参考上图</p>\n<h2 id=\"个体适应度评价\"><a href=\"#个体适应度评价\" class=\"headerlink\" title=\"个体适应度评价\"></a>个体适应度评价</h2><blockquote>\n<p>所有个体适应度必须为正数或零，不能为负数。</p>\n</blockquote>\n<h4 id=\"适应度函数变换常用方法\"><a href=\"#适应度函数变换常用方法\" class=\"headerlink\" title=\"适应度函数变换常用方法\"></a>适应度函数变换常用方法</h4><p>但实际优化问题中的目标函数值有正也有负，优化目标有求函数最大 值，也有求函数最小值，显然上面两式保证不了所有情况下个体的适应度 都是非负数这个要求，需要进行适应度函数尺度转换，将 <strong>目标函数值 f(x) 变换为个体的适应度F(x) 。</strong></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221012213710525.png\" alt=\"image-20221012213710525\"></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221012213726845.png\" alt=\"image-20221012213726845\"></p>\n<p>比例选择又称为轮盘赌选择（Roulette Wheel ）</p>\n<h2 id=\"遗传算法的应用步骤\"><a href=\"#遗传算法的应用步骤\" class=\"headerlink\" title=\"遗传算法的应用步骤\"></a>遗传算法的应用步骤</h2><ol>\n<li> 确定决策变量及其各种约束条件，即确定出个体的表现型 X 和问题的解空间。</li>\n<li> 建立优化模型，即确定出目标函数的类型及其数学描述形式或量化方法。</li>\n<li> 确定表示可行解的染色体编码方法，也即确定个体的基因型 X 及遗传算法的搜索空间。</li>\n<li> 确定解码方法，即确定出由个体基因型 X 到个体表现型 X 的对应关系或转换方法。</li>\n<li> 确定个体适应度的量化评价方法，即确定由目标函数值 $f(x)$ 到个体适应度 $F(x)$ 的转换规则。</li>\n<li> 设计遗传算子，即确定选择运算、交叉运算和变异运算等遗传算子的操作方法。</li>\n<li> 确定遗传算法的有关运行参数，即确定出遗传算法的 $M,T,p_{c},p_{m}$ 等参数。</li>\n</ol>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221012221848724.png\" alt=\"image-20221012221848724\"></p>\n<h2 id=\"模式定理\"><a href=\"#模式定理\" class=\"headerlink\" title=\"模式定理\"></a>模式定理</h2><p><strong>模式</strong></p>\n<p>模式（schema）表示一些相似的模块。他描述了在某些位置上的具有相似结构特征的个体编码串的一个子集。</p>\n<p>例如：模式 $H = 1**11$，模式 $H = 00**<em>$ ，“$</em>$”代表通配符。</p>\n<p><strong>模式阶</strong></p>\n<p>在模式H中具有确定基因值的位置数目称该模式的模式阶（schema order），记为 $ o(H)$。</p>\n<p>例如：$o(100_01_)=5，o(*******0)=1$</p>\n<p><strong>模式定义长度</strong></p>\n<p>模式 H 中第一个确定基因值的位置和最后一个确定基因值的位置之间的距离称为该模式的模式定义长度（Schema Defining Length），记为 $δ(H)$。</p>\n<p>例如：$δ(11*0**_) = 3，δ(0_**1) = 4，δ(**0***) = 1$</p>\n<h4 id=\"在选择算子的作用下\"><a href=\"#在选择算子的作用下\" class=\"headerlink\" title=\"在选择算子的作用下\"></a>在选择算子的作用下</h4><p>$$ \\frac{m(H,t)}{m(H,t+1)}=\\frac{\\bar{F}(t)}{f(H,t)}\\ \\Longleftrightarrow m(H,t+1)=m(H,t)\\frac{f(H,t)}{ \\bar{F}(t)}\\ let \\quad \\frac{f(H,t)}{\\bar{F}(t)}=1+C \\ \\Longrightarrow m(H,t+1)=m(H,t)(1+C)\\ \\Longrightarrow m(H,t)=m(H,O)·(1+C)^{t} $$</p>\n<p>其中</p>\n<p>符号</p>\n<p>含义</p>\n<p>$t$</p>\n<p>在进化过程中的第 $t$ 代</p>\n<p>$H$</p>\n<p>模式 $H$</p>\n<p>$m(H, t)$</p>\n<p>当前群体 $P(t)$ 中与 $H$ 匹配的个体数</p>\n<p>$\\bar F(t)$</p>\n<p>第 t 代群体的平均适应度</p>\n<p>$f(H,t)$</p>\n<p>群体中 H 隐含的总个体的平均适应度</p>\n<p><strong>结论</strong>：在选择算子作用下，对于平均适应度高于群体平均适应度的模式，其样本数将呈指数级增长：而对于平均适应度低于群体平均适应度的模式，其样本数将呈指数级减少。</p>\n<h4 id=\"在交叉算子的作用下\"><a href=\"#在交叉算子的作用下\" class=\"headerlink\" title=\"在交叉算子的作用下\"></a>在交叉算子的作用下</h4><p>$$ m(H,t+1)≥m(H,t)·(1+C)·[1-p_{c}·\\frac{δ(H)}{l-1}] $$</p>\n<p>$δ(H)$越小，则$m(H,t)$越容易呈指数级增长；</p>\n<p>$δ(H)$越大，则$m(H,t)$越不容易呈指数级增长。</p>\n<h4 id=\"在变异算子的作用下\"><a href=\"#在变异算子的作用下\" class=\"headerlink\" title=\"在变异算子的作用下\"></a>在变异算子的作用下</h4><p>某一模式被破坏的概率： $$ 1-(1-p_{m})^{o(H)} $$ 当 $p_{m}&lt;&lt;1$ 时： $$ 1-(1-p_{m})^{o(H)}≈o(H)·p_{m} $$ 在变异算子的作用下，模式 H 的生存概率： $$ p_{s}≈1-o(H)·p_{m} $$ $o(H)$越小，模式 H 越易于生存；</p>\n<p>$o(H)$越大，模式 H 越易于被破坏。</p>\n<h4 id=\"在算子总作用下\"><a href=\"#在算子总作用下\" class=\"headerlink\" title=\"在算子总作用下\"></a>在算子总作用下</h4><p>$$ m(H,t+1)≥m(H,t)·\\frac{f(H,t)}{\\bar F(t)}·[1-p_{c}·\\frac{δ(H)}{l-1}-o(H)·p_{m}] $$</p>\n<p>⭐总结：<strong>遗传算法中，在选择、交叉和变异算子的作用下，具有低阶、短的定义长度，并且平均适应度高于群体平均适应度的模式将按指数级增长。</strong></p>\n<blockquote>\n<p>【积木块假设】</p>\n<p>个体的基因块通过选择、交叉、变异等遗传算子的作用，能够相互拼接在一起，形成适应度更高的个体编码串。</p>\n</blockquote>\n<h1 id=\"遗传算法基本实现技术\"><a href=\"#遗传算法基本实现技术\" class=\"headerlink\" title=\"遗传算法基本实现技术\"></a>遗传算法基本实现技术</h1><h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><p>编码方法很大程度上决定了如何进行群体的遗传进化运算以及遗传进化运算的效率。</p>\n<p>常见的编码分类：<strong>二进制编码、浮点编码、符号编码</strong>。</p>\n<h4 id=\"二进制编码\"><a href=\"#二进制编码\" class=\"headerlink\" title=\"二进制编码\"></a>二进制编码</h4><p><strong>编码</strong></p>\n<p>假设某一参数的取值范围 [$U_{min},U_{max}$ ] , 我们用长度为 n 的二进制编码符号串来表示参数，共产生 $2^{n}$ 种不同的编码，δ为二进制编码的编码精度。则： $$ δ = \\frac{U_{max}-U_{min}}{2^{n}-1} $$ <strong>解码</strong></p>\n<p>假设某一个体的编码是： $$ X:b_{i}b_{i-1}b_{i-2}····b_{2}b_{1} $$ 则解码公式为： $$ x = U_{min}+(\\sum_{i=1}^{n}b·2^{i-1})· \\frac{U_{max}-U_{min}}{2^{n}-1} $$</p>\n<p><strong>[例]</strong> 设 -3.0 ≤ x ≤ 12.1 , 精度要求 δ = 1/10000</p>\n<p>由编码公式</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220928234410284.png\" alt=\"image-20220928234410284\"></p>\n<blockquote>\n<p><strong>格雷码编码</strong></p>\n<p>格雷码特点：两个相邻的编码串之间只有一位编码值不同。</p>\n<p>解码和编码过程：决策变量 ↔二进制↔格雷码</p>\n</blockquote>\n<h4 id=\"浮点数编码\"><a href=\"#浮点数编码\" class=\"headerlink\" title=\"浮点数编码\"></a>浮点数编码</h4><p>个体的每个基因值用_某一范围内_的一个浮点数来表示，个体的编码长度等于其决策变量的个数。</p>\n<p><strong>编码方法</strong></p>\n<p>某一个优化问题含有5个变量 $x_{i}(i=1,2, … ,5)$，每个变量都有其对应的上下限$[U_{min}^{i}, U_{max}^{i}]$，则：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220929083709177.png\" alt=\"image-20220929083709177\"></p>\n<p>就表示一个个体的基因型，其对应的表现型是： $x = [5.80,6.90,3.50,3.80,5.00]^{T}$</p>\n<h4 id=\"符号编码\"><a href=\"#符号编码\" class=\"headerlink\" title=\"符号编码\"></a>符号编码</h4><p>个体染色体编码串中基因值取自一个无数值含义、只有代码含义的符号集。</p>\n<h4 id=\"多参数级联编码\"><a href=\"#多参数级联编码\" class=\"headerlink\" title=\"多参数级联编码\"></a>多参数级联编码</h4><p>将各个参数分别以某种编码方法进行编码，然后再将它们的编码按一 定顺序联接在一起就组成了表示全部参数的个体编码。这种编码方法 称为多参数级联编码方法。 $$ \\underbrace{b_{11}b_{12}···b_{1l_{1}}}<em>{x</em>{1}}\\underbrace{b_{21}b_{22}···b_{2l_{2 }}}<em>{x</em>{2}}····\\underbrace{b_{n1}b_{n2}···b_{nl_{1}}}<em>{x</em>{n}} $$</p>\n<h4 id=\"多参数交叉编码方法\"><a href=\"#多参数交叉编码方法\" class=\"headerlink\" title=\"多参数交叉编码方法\"></a>多参数交叉编码方法</h4><p>将各个参数中起主要作用的码位集中在一起。</p>\n<p><strong>编码方法</strong></p>\n<ol>\n<li> 先对各个参数进行分组编码</li>\n<li> 取各个参数编码串中的最高位联接在一起作为前n位编码；再取次高位同上……</li>\n</ol>\n<p>参数编码： $$ \\overbrace{b_{11}b_{12}b_{13}···b_{1m}}^{x_{1}}\\overbrace{b_{21}b_{22}b_{23}···b_{2m}}^{x_{2}}····\\overbrace{b_{n1}b_{n2}b_{n3}···b_{nm}}^{x_{n}} $$ 个体编码串： $$ b_{11}b_{21}b_{31}···b_{n1} b_{12}b_{22}b_{32}···b_{n2} ··· b_{1m}b_{2m}b_{3m}···b_{nm} $$</p>\n<h2 id=\"适应度函数\"><a href=\"#适应度函数\" class=\"headerlink\" title=\"适应度函数\"></a>适应度函数</h2><p>度量个体适应度的函数称为适应度函数。</p>\n<h4 id=\"目标函数\"><a href=\"#目标函数\" class=\"headerlink\" title=\"目标函数\"></a>目标函数</h4><p>是指所关心的目标 (某一变量y) 与相关的因素 ( 某些变量$x_{i}$ ) 的函数关系。</p>\n<h4 id=\"适应度尺度变换\"><a href=\"#适应度尺度变换\" class=\"headerlink\" title=\"适应度尺度变换\"></a>适应度尺度变换</h4><p>对个体适应度所做的扩大或者缩小变换</p>\n<p>常见变换方法：</p>\n<ul>\n<li>线性尺度变换  $F^{‘}=aF+b$</li>\n<li>乘幂尺度变换  $F^{‘}=F^{k}$</li>\n<li>指数尺度变换  $F^{‘}=exp(-βF)$</li>\n</ul>\n<p><strong>（$F$：原适应度，$F’$：尺度变换后的新适应度）</strong></p>\n<h2 id=\"选择算子\"><a href=\"#选择算子\" class=\"headerlink\" title=\"选择算子\"></a>选择算子</h2><p>遗传算法使用选择算子（或称复制算子， Reproduction Operator）来对群体中的个体进行优胜劣汰操作；适应度 较高的个体被遗传到下一代群体中的概率较大；适应度较 低的个体被遗传到下一代群体中的概率较小.</p>\n<h4 id=\"比例选择\"><a href=\"#比例选择\" class=\"headerlink\" title=\"比例选择\"></a>比例选择</h4><p>各个个体被选中的概率与其适应度大小成正比。设群体大小为M，个体 i 的适应度为$F_{i}$，则个体i被选中的概率$p_{is}$为: $$ p_{is}=F_{i}/\\sum_{i=1}^{M}F_{i} \\quad\\quad (i=1,2,3,…,M) $$</p>\n<h4 id=\"最优保存策略\"><a href=\"#最优保存策略\" class=\"headerlink\" title=\"最优保存策略\"></a>最优保存策略</h4><ol>\n<li> 找出当前群体中适应度最高的个体和适应度最低的个体。</li>\n<li> 若当前群体中最佳个体的适应度比总的迄今为止的最好个体的适应度还要高，则以当前种群中的最佳个体作为新的迄今为止的最好个体。</li>\n<li> 用迄今为止的最好个体替换掉当前群体中的最差个体</li>\n</ol>\n<h4 id=\"确定式采样选择\"><a href=\"#确定式采样选择\" class=\"headerlink\" title=\"确定式采样选择\"></a>确定式采样选择</h4><ol>\n<li>计算群体中各个个体在下一代群体中的期望生存数目$N_{i}$: $$ N_{i} = M · F_{i}/\\sum^{M}_{i=1}F_{i}\\quad\\quad (i=1,2,3,…,M) $$</li>\n<li>用$N_{i}$的整数部分确定各个对应个体在下一代群体中的生存数目。</li>\n<li>按照$N_{i}$的小数部分对个体进行降序排序，顺序取前 $M-\\sum ^{M}_{i=1}[N_{i}]$ 个个体加入到下一代群体中。</li>\n</ol>\n<h4 id=\"无回放随机选择\"><a href=\"#无回放随机选择\" class=\"headerlink\" title=\"无回放随机选择\"></a>无回放随机选择</h4><p>亦称期望值选择方法(Expected Value Model)。</p>\n<ol>\n<li>计算群体中各个个体在下一代群体中的期望生存数目$N_{i}$: $$ N_{i} = M · F_{i}/\\sum^{M}_{i=1}F_{i}\\quad\\quad (i=1,2,3,…,M) $$</li>\n<li>若某一个体被选中参与交叉运算，则它在下一代中的生存期望数目减去0.5，若未参与交叉运算，则它在下一代中的生存期望数目减去1.0。</li>\n<li>随着选择过程的进行，若某一个个体的生存期望数目小于0时，则该个体就不在有机会被选中。</li>\n</ol>\n<h4 id=\"无回放余数随机选择\"><a href=\"#无回放余数随机选择\" class=\"headerlink\" title=\"无回放余数随机选择\"></a>无回放余数随机选择</h4><ol>\n<li>计算群体中各个个体在下一代群体中的期望生存数目$N_{i}$: $$ N_{i} = M · F_{i}/\\sum^{M}_{i=1}F_{i}\\quad\\quad (i=1,2,3,…,M) $$</li>\n<li>用$N_{i}$的整数部分$N_{i}$确定各个对应个体在下一代群体中的生存数目。</li>\n<li>以$F_{i}-N_{i}·\\sum^{M}<em>{i=1}F/M$ 为各个个体的新的适应度，用比例选择方法来确定下一代群体中还未确定的 $M-\\sum ^{M}</em>{i=1}N_{i}$ 个体。</li>\n</ol>\n<h4 id=\"排序选择\"><a href=\"#排序选择\" class=\"headerlink\" title=\"排序选择\"></a>排序选择</h4><p>对群体中各个个体按其适应度大小来进行排序，基于这个排序来分配各个个体被选中的概率。</p>\n<ol>\n<li> 对群体中的所有个体按其适应度大小进行降序排序。</li>\n<li> <strong>根据具体求解问题，设计一个概率分配表，将各个概率值按上述排列次序分配给各个个体</strong>。</li>\n<li> 以各个个体所分配到的概率值作为其能够被遗传到下一代的概率，基于这些概率值用比例选择的方法来产生下一代群体。</li>\n</ol>\n<h4 id=\"随机联赛选择\"><a href=\"#随机联赛选择\" class=\"headerlink\" title=\"随机联赛选择\"></a>随机联赛选择</h4><p>每次选取几个个体之中适应值最高的一个个体遗传到下一代群体。</p>\n<ol>\n<li> 从群体中随机选取N个个体进行适应度大小的比较，将其中适应度最高的个体遗传到下一代群体中。</li>\n<li> 将上述过程重复M次，就可得到下一代群体中的M个个体。</li>\n</ol>\n<h2 id=\"交叉算子\"><a href=\"#交叉算子\" class=\"headerlink\" title=\"交叉算子\"></a>交叉算子</h2><p>交叉算子是指对两个相互配对的染色体按某种方式相互交换其部分基因，从而形成两个新的个体</p>\n<h4 id=\"单点交叉\"><a href=\"#单点交叉\" class=\"headerlink\" title=\"单点交叉\"></a>单点交叉</h4><p>在个体编码串中<strong>只随机设置一个交叉点</strong>，然后在该点相互交换两个配对的部分染色体。</p>\n<p>特点：若邻接基因座之间的关系能提供较好的个体性状和较高的个体适应度的话，则这种单点交叉操作破坏这种个体性状和降低个体适应度的可能性最小。</p>\n<h4 id=\"双点交叉\"><a href=\"#双点交叉\" class=\"headerlink\" title=\"双点交叉\"></a>双点交叉</h4><p>在个体编码串中<strong>随机设置两个交叉点</strong>，然后再进行部分基因交换。</p>\n<ol>\n<li>在相互配对的两个个体编码串中随机设置两个交叉点</li>\n<li>交换两个个体在所设定的两个交叉点之间的部分染色体 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221003172723469.png\" alt=\"image-20221003172723469\"></li>\n</ol>\n<h4 id=\"多点交叉\"><a href=\"#多点交叉\" class=\"headerlink\" title=\"多点交叉\"></a>多点交叉</h4><p>在个体编码串中 <strong>随机设置两个交叉点</strong>，然后进行基因交换。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221003172903979.png\" alt=\"image-20221003172903979\"></p>\n<h4 id=\"均匀交叉\"><a href=\"#均匀交叉\" class=\"headerlink\" title=\"均匀交叉\"></a>均匀交叉</h4><p>两个配对个体的每一个基因座上的基因都以相同的交叉概率进行交换。</p>\n<ol>\n<li>随机产生一个与个体编码串长度等长的屏蔽字 $W=w_{1}w_{2}…w_{i}…w_{l}$，其中 $l$ 为个体编码串长度。</li>\n<li>由下述规则从 A 和 B 两个父代个体中产生出两个新的子代个体 A’ 和 B’。<ul>\n<li>  若 $w_{i}=0$，则 A’ 在第 i 个基因座上的基因值继承 A 的对应基因值，B’ 在第 i 个基因座上的基因值继承 B 的对应基因值。</li>\n<li>  若 $w_{i} =1$，则 A’ 在第 i 个基因座上的基因值继承 B 的对应基因值，B’ 在第 i 个基因座上的基因值继承 A 的对应基因值。</li>\n</ul>\n <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221003173710535.png\" alt=\"image-20221003173710535\"></li>\n</ol>\n<h4 id=\"算术交叉\"><a href=\"#算术交叉\" class=\"headerlink\" title=\"算术交叉\"></a>算术交叉</h4><p>由两个个体的线性组合而产生出两个新的个体。</p>\n<p>假设有两个个体$X_{A}$和$X_{B}$之间进行算术交叉，则交叉运算后所产生的两个新个体是: $$ \\left{\\begin{matrix}</p>\n<p>X_{A}^{t+1} = \\alpha X_{B}^{t} + (1 - \\alpha )X_{A}^{t} \\ X_{B}^{t+1} = \\alpha X_{A}^{t} + (1 - \\alpha )X_{B}^{t} \\end{matrix}\\right. $$ 其中 α 是一参数，如果 α (0&lt; α &lt;1)是一个常数，则为 <strong>均匀算术交叉</strong>；如果 α 是一个由进化代数所决定的变量，则称为非均匀算术交叉。</p>\n<ol>\n<li> 确定两个个体进行线性组合的系数 α。</li>\n<li> 依据上式生成新的两个个体。</li>\n</ol>\n<h2 id=\"变异算子\"><a href=\"#变异算子\" class=\"headerlink\" title=\"变异算子\"></a>变异算子</h2><p>变异算子是指将个体染色体编码串中的某些基因座上的基因值用该基因座的其它等位基因来替换，从而形成一个新的个体。</p>\n<h4 id=\"基本位变异\"><a href=\"#基本位变异\" class=\"headerlink\" title=\"基本位变异\"></a>基本位变异</h4><p>个体编码串中以变异概率 $P_{c}$ 随机指定的某一位或某几位基因座上的基因值作变异运算。</p>\n<h4 id=\"均匀变异\"><a href=\"#均匀变异\" class=\"headerlink\" title=\"均匀变异\"></a>均匀变异</h4><p>分别用符合某一范围内均匀分布的随机数，以某一较小的概率来替换个体编码串中各个基因座上的原有基因值。</p>\n<p>假设有一个个体为$X = x_{1}x_{2}…x_{k}…x_{l}$，若$x_{k}$为变异点，其取值范围为$[U^{k}<em>{min}, U^{k}</em>{max}]$，在该点对个体 X 进行均匀变异操作后，可得到一个新的个体 $X’= x_{1}x_{2}…x’_{k}…x_{l}$，其变异的新基因值是： $$ x’<em>{k} = U^{k}</em>{min}+r·(U_{max}^{k}-U_{min}^{k}) $$ 其中，r 为 [0,1] 范围内符合均匀分布的一个随机数。</p>\n<ol>\n<li> 依次指定个体编码串中的没个基因座为变异点。</li>\n<li> 对每一个变异点，以变异概率 $P_{m}$ 从对应基因的取值范围内取一随机数来替代原有基因值。</li>\n</ol>\n<h4 id=\"边界变异\"><a href=\"#边界变异\" class=\"headerlink\" title=\"边界变异\"></a>边界变异</h4><p>随机地取基因座的两个对应边界基因值之一去替代原有基因值。(是均匀变异操作的一个变形)</p>\n<p>在进由$X = x_{1}x_{2}…x_{k}…x_{l}$向$X’= x_{1}x_{2}…x’_{k}…x_{l}$的边界变异操作时，若变异点xk的基因取值范围为$[U^{k}<em>{min}, U^k</em>{max}]$，则新的$x’_{k}$由下式确定： $$ x’<em>{k}=\\left{\\begin{matrix} U^{k}</em>{min} \\quad ,\\quad if \\quad random(0,1) =0 \\ U^{k}_{max} \\quad ,\\quad if \\quad random(0,1) =1 \\end{matrix}\\right. $$ 式中，random(0，1) 表示以均等的概率从0、1中任取其一。</p>\n<h4 id=\"非均匀变异\"><a href=\"#非均匀变异\" class=\"headerlink\" title=\"非均匀变异\"></a>非均匀变异</h4><p>不是取均匀分布的随机数去替换原有的基因值，而是对原有基因作一<strong>随机扰动</strong>，以扰动后的结果作为变异后的新基因值。</p>\n<p>在进由$X = x_{1}x_{2}…x_{k}…x_{l}$向$X’= x_{1}x_{2}…x’_{k}…x_{l}$的边界变异操作时，若变异点xk的基因取值范围为$[U^{k}<em>{min}, U^k</em>{max}]$，则新的$x’_{k}$由下式确定： $$ x’<em>{k}=\\left{\\begin{matrix} x</em>{k}+ \\Delta (t,U^{k}<em>{max}-x</em>{k}) \\quad ,\\quad if \\quad random(0,1) =0 \\ x_{k}- \\Delta (t,x_{k}-U^{k}_{min}) \\quad ,\\quad if \\quad random(0,1) =1 \\end{matrix}\\right. $$ △(t, y)表示 [0,y] 范围内符合非均匀分布的一个随机数，<strong>要求随着进化代数t的增加，△(t, y)接近于0的概率也逐渐增加。</strong> 例如，△(t, y)可按下式定义： $$ \\Delta (t, y) = y·(1-r^{(1-t/T)b}) $$ 其中，r为 [0,1] 范围内符合均匀分布的一个随机数，T是最大进化代数，b是一个系统参数。它决定了随机扰动对进化代数t的依赖程度。</p>\n<h4 id=\"高斯变异\"><a href=\"#高斯变异\" class=\"headerlink\" title=\"高斯变异\"></a>高斯变异</h4><p>进行变异操作时，用符合<strong>均值为μ、方差为$σ^{2}$的正态分布</strong>的一个随机数来替换原有基因值。</p>\n<p>假定有12个在[0,1]范围内均匀分布的随机数$r_{i}(i=1,2,..,12)$，则符合$N(μ,σ^{2})$正态分布的一个随机数Q可由下式求得: $$ Q=μ+σ(\\sum_{i=1}^{12}r_{i}-6) $$</p>\n<h1 id=\"遗传算法高级实现技术\"><a href=\"#遗传算法高级实现技术\" class=\"headerlink\" title=\"遗传算法高级实现技术\"></a>遗传算法高级实现技术</h1><h2 id=\"倒位算子\"><a href=\"#倒位算子\" class=\"headerlink\" title=\"倒位算子\"></a>倒位算子</h2><p>倒位算子是颠倒个体编码中随机指定的两个基因座之间的基因排列顺序，从而形成一个新的染色体。</p>\n<p>过程：</p>\n<ol>\n<li> 在个体编码串中随机指定两个基因座之后的位置为倒位点。</li>\n<li> 以倒位概率 $P_{i}$ 颠倒这两个倒位点之间的基因排列顺序。</li>\n</ol>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221007234228946.png\" alt=\"image-20221007234228946\"></p>\n<h2 id=\"二倍体\"><a href=\"#二倍体\" class=\"headerlink\" title=\"二倍体\"></a>二倍体</h2><blockquote>\n<p>生物学中，二倍体是指含有两个同源基因组的个体。</p>\n<p><strong>重要特性</strong></p>\n<ol>\n<li>二倍体的记忆能力 能够记忆以前经历过的环境及变化。</li>\n<li>显性操作的鲁棒性 在显性操作的作用下，能够用其另一同源染色体对其进行校正。</li>\n</ol>\n</blockquote>\n<h4 id=\"双基因座显性映射\"><a href=\"#双基因座显性映射\" class=\"headerlink\" title=\"双基因座显性映射\"></a>双基因座显性映射</h4><p>由 Hollstien 提出，每个二进制基因用两个基因来描述，一个称为 <strong>函数基因</strong>，取通常含义的 1 或 0；另一个称为 <strong>修饰基因</strong>，取值为 M（显性） 或 m（隐形）。当两个同源染色体中至少有一个修饰基因是M时，呈显性，否则为隐性。</p>\n<p>之后 Hollstien 简化为 单基因座显性映射 ，描述基 因的字符集为${0, 1, 1_{0}}$，其中 $1_{0}$ 为隐性的 1，1 为显性的 1。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221008143428436.png\" alt=\"image-20221008143428436\"></p>\n<h4 id=\"与GA不同\"><a href=\"#与GA不同\" class=\"headerlink\" title=\"与GA不同\"></a>与GA不同</h4><ol>\n<li> 显性形状也能进化，同源染色体之间需进行交叉操作</li>\n<li> 变异操作需考虑隐性性状</li>\n<li> 对个体进行交叉、变异运算后，需进行显性操作</li>\n</ol>\n<h4 id=\"DiploidyGA算法\"><a href=\"#DiploidyGA算法\" class=\"headerlink\" title=\"DiploidyGA算法\"></a>DiploidyGA算法</h4><ol>\n<li>初始化，并设置进化代数计数器初值：t=1 。</li>\n<li>随机产生具有二倍体结构的初始群体 P(0)。</li>\n<li>对初始群体 P(0) 进行显性操作。</li>\n<li>评价初始群体P(0)中各个个体的适应度。</li>\n<li>交叉操作：$P’(t)⬅Crossover[p(t)]$。由每两个随机配对的二倍体个体进行交叉操作时，共可产生四个单倍体个体。</li>\n<li>变异操作：$P’’(t)⬅Mutation[p’(t)]$ 。在对群体中各个个体进行变异操作时，需要考虑隐性基因的作用。</li>\n<li>对群体$P’’(t)$进行显性操作。</li>\n<li>评价群体$P’’(t)$中各个个体的适应度。</li>\n<li>个体选择、复制操作。</li>\n<li>终止条件判断。若不满足终止条件，则：ｔ⬅ｔ＋１，转到第３步，继续进行进化操作过程；若满足终止条件，则输出当前最优个体，结束。</li>\n</ol>\n<h4 id=\"变长度染色体遗传算法\"><a href=\"#变长度染色体遗传算法\" class=\"headerlink\" title=\"变长度染色体遗传算法\"></a>变长度染色体遗传算法</h4><ul>\n<li>编码 $$ X^{m}:(i_{1},v_{i})(i_{2},v_{2})···(i_{k},v_{k})···(i_{n},v_{n}) $$ $i_{k}$是所描述的基因在原常规染色体中的 <strong>基因座编号</strong>，$v_{k}$为对应的基因值。  例：  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221008152328932.png\" alt=\"image-20221008152328932\"></li>\n<li>解码  这能有什么用？？？？这么能扯</li>\n</ul>\n<h4 id=\"算法步骤-MessyGA\"><a href=\"#算法步骤-MessyGA\" class=\"headerlink\" title=\"算法步骤(MessyGA)\"></a>算法步骤(MessyGA)</h4><ol>\n<li> 初始化。随机产生M个染色体，长度全部为 k的个体，以它们作为变长度遗传算法的初始个体集合P(0)，其中k为根据问题的不同而设定的一个参数，并且 $k ≤ l $。</li>\n<li> 适应度评价。</li>\n<li> 基本处理阶段。对群体P(t)施加选择算子，以保留适应度较高的个体。</li>\n<li> 并列处理阶段。对群体P(t)世家变异算子、切断算子和拼接算子，以生成新的个体。</li>\n<li> 重复2-4步，直到满足终止条件为止。</li>\n</ol>\n<blockquote>\n<p><strong>切断算子</strong></p>\n<p>切断算子以某一预先指定的概率，在变长度染色 体中随机选择一个基因座，在该处将个体的基因型 切断，使之成为二个个体的基因型 。</p>\n<p><strong>拼接算子</strong></p>\n<p>拼接算子以某一预先指定的概率，将二个个体的 基因型连接在一起，使它们合并为一个个体的基因型。</p>\n</blockquote>\n<h2 id=\"遗传算法的运行参数\"><a href=\"#遗传算法的运行参数\" class=\"headerlink\" title=\"遗传算法的运行参数\"></a>遗传算法的运行参数</h2><ul>\n<li>编码串的长度 l</li>\n<li>群体大小M（一般建议取值20~100）</li>\n<li>交叉概率$P_{c}$（一般建议取值0.4~0.99）</li>\n<li>变异概率$P_{m}$（一般建议取值0.0001~0.1）</li>\n<li>终止代数T（一般建议取值100~1000）<ul>\n<li>  规定最大迭代次数T</li>\n<li>  规定最小的偏差</li>\n<li>  观察适应度的变化趋势</li>\n</ul>\n</li>\n<li>代沟G<ul>\n<li>表示每一代群体中被替换掉的个体在全部个体中所占的百分比。</li>\n<li>G=1.0表示群体中的全部个体都是新产生的。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"约束条件的处理方法\"><a href=\"#约束条件的处理方法\" class=\"headerlink\" title=\"约束条件的处理方法\"></a>约束条件的处理方法</h2><h4 id=\"搜索空间限定法\"><a href=\"#搜索空间限定法\" class=\"headerlink\" title=\"搜索空间限定法\"></a>搜索空间限定法</h4><p><strong>对遗传算法的搜索空间的大小加以限制</strong>，使得搜索空间中表示一个个体的点与解空间中表示一个可行解的点有一一对应关系。</p>\n<p>实现方法：1、用编码方法来保证总是能够产生出在解空间中有对应可行解的染色体。</p>\n<p>2、用程序来保证直到产生出在解空间中有对应可行解的染色体之前，一直进行交叉运算和变异运算。</p>\n<h4 id=\"可行解变换法\"><a href=\"#可行解变换法\" class=\"headerlink\" title=\"可行解变换法\"></a>可行解变换法</h4><p>寻找出一种个体基因型个个体表现型之间的<strong>多对一的变换关系</strong>，使进化过程中所产生的个体总能够通过这个变化而转化成解空间中满足约束条件的一个可行解。</p>\n<h4 id=\"罚函数法\"><a href=\"#罚函数法\" class=\"headerlink\" title=\"罚函数法\"></a>罚函数法</h4><p>对在解空间中无对应的可行解的个体，计算其适应度时，处以一个罚函数，从而降低个体适应度，使该个体被遗传到下一代群体中的机会减少。</p>\n<p>下式对个体适应度进行调整： $$ F’(X)=\\left{\\begin{matrix} F(X) \\quad \\quad \\qquad X 满足约束条件\\ F(X)-P(X) \\quad X不满足约束条件 \\end{matrix}\\right. $$ F(X)为原适应度，F’(X)为新适应度，P(X)为罚函数。</p>\n<h2 id=\"小生境遗传算法\"><a href=\"#小生境遗传算法\" class=\"headerlink\" title=\"小生境遗传算法\"></a>小生境遗传算法</h2><p>在生物学上，**小生境(Niche)**是指特定环境下的一种生存环境。</p>\n<blockquote>\n<p>生物在 其进化过程中，一般总是与自己相同的物种生活在一起，共同繁衍后 代；它们也都是在某一特定的地理区域中生存。</p>\n</blockquote>\n<h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h3><ol>\n<li> <a href=\"#%E5%9F%BA%E4%BA%8E%E9%A2%84%E9%80%89%E6%8B%A9%E7%9A%84%E5%B0%8F%E7%94%9F%E5%A2%83%E7%AE%97%E6%B3%95\">基于预选择的小生境———（Cavicchio，1970）</a></li>\n<li> <a href=\"#%E5%9F%BA%E4%BA%8E%E6%8E%92%E6%8C%A4%E7%9A%84%E5%B0%8F%E7%94%9F%E5%A2%83%E7%AE%97%E6%B3%95\">基于排挤的小生境————（De Jong，1975）</a></li>\n<li> <a href=\"#%E5%9F%BA%E4%BA%8E%E5%85%B1%E4%BA%AB%E5%87%BD%E6%95%B0%E7%9A%84%E5%B0%8F%E7%94%9F%E5%A2%83%E7%AE%97%E6%B3%95\">基于共享函数的小生境——（Goldberg和Richardson，1987）</a></li>\n</ol>\n<h4 id=\"基于预选择的小生境算法\"><a href=\"#基于预选择的小生境算法\" class=\"headerlink\" title=\"基于预选择的小生境算法\"></a>基于预选择的小生境算法</h4><p>仅当新产生的子代个体的适应度 <strong>超过其父代个体的适应度</strong> 时，所产生出的子代个体才能替换其父代个体而遗传到下 一代群体中，否则父代个体仍保留在下一代群体中。</p>\n<h4 id=\"基于排挤的小生境算法\"><a href=\"#基于排挤的小生境算法\" class=\"headerlink\" title=\"基于排挤的小生境算法\"></a>基于排挤的小生境算法</h4><p>算法步骤：</p>\n<ol>\n<li> 初始化。建立初始群体，确定遗传参数，设定排挤银子CF。</li>\n<li> 计算个体适应度。</li>\n<li> 遗传操作（选择、交叉和变异）</li>\n<li> 从当前群体中随机选取群体规模的1/CF个个体组成<strong>排挤因子成员</strong>。</li>\n<li> 比较新产生的个体与排挤因子成员中最相似的个体，形成新的当前群体。</li>\n<li> 重复2-6步，直到满足终止条件。</li>\n</ol>\n<p><strong>特点</strong>：随着排挤过程的进行，群体中的个体逐渐被分类，从而形成各个小的生存环 境，并维持了群体的多样性。</p>\n<h4 id=\"基于共享函数的小生境算法\"><a href=\"#基于共享函数的小生境算法\" class=\"headerlink\" title=\"基于共享函数的小生境算法\"></a>基于共享函数的小生境算法</h4><blockquote>\n<p><strong>共享函数</strong>(sharing function)：用来确定每个个体在群体中的 <strong>共享度</strong>。一个个体的共享度等于该个体与群体内的 各个其它个体之间的共享函数值的总和。</p>\n<p>设 $d_{ij}$ 表示个体 i 和个体 j 之间的关系密切程度，S为共享函数，$S_{i}$ 表示个体 i 在群体中的共享度: $$ S_{i}=\\sum_{j=1}^{n}S(d_{ij}) $$ 个体适应度$f(i)$: $$ f_{s}(i)=f(i)/S_{i} $$</p>\n</blockquote>\n<p>通过反映个体之间相似程度的 <strong>共享函数</strong> 来调整群体中各个个体的适应度，从而在这以后的群体进化过程中，算法能够依据这个调整后的新适应度来进行选择运算，以维护群体的多样性，创造出小生境的进化环境。</p>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><h4 id=\"多峰值函数全局最优化\"><a href=\"#多峰值函数全局最优化\" class=\"headerlink\" title=\"多峰值函数全局最优化\"></a>多峰值函数全局最优化</h4><p>在多峰值函数全局最优化中的应用：（没啥用。。。）</p>\n<ul>\n<li>  首先两两比较群体中各个个体之间的距离，若这个距离在 预先指定的距离L之内的话，再比较两者之间的适应度大 小，并对其中适应度较低的个体施加一个较强的罚函数， 极大地降低其适应度，这样，对于在预先指定的某一距离 L之内的两个个体，其中较差的个体经处理后其适应度变 得更差，它在后面的进化过程中被淘汰掉的概率就极大。</li>\n<li>  也就是说，在距离L之内将只存在一个优良的个体，从而 既维护了群体的多样性，又使得各个个体之间保持一定的 距离，并使得个体能够在整个约束空间中分散开来，这样就实现了一种小生境遗传算法。</li>\n</ul>\n<h4 id=\"算法过程-1\"><a href=\"#算法过程-1\" class=\"headerlink\" title=\"算法过程\"></a>算法过程</h4><ol>\n<li>设置进化代数计数器t⬅1；随机生成M个初始个体组成初始群体P(t)，并求出各个个体的适应度$F_{i}\\quad(i=1,2,···,M)$。</li>\n<li>依据各个个体的适应度对其进行降序排序，记忆前N个个体(N&lt;M)。</li>\n<li>遗传运算（选择算子、交叉算子和变异算子）</li>\n<li>小生境淘汰。将变异算子得到的 M 个个体和②中所记忆的N个个体合并在一起，得到一个含有M+N个个体的新群体；对这M+N个个体，求出每两个个体$X_{i}$和$X_{j}$之间的<a href=\"https://baike.baidu.com/item/%E6%B5%B7%E6%98%8E%E8%B7%9D%E7%A6%BB\">海明距离</a>。当 $X_{i}-X_{j}&lt;L$ 时，比较个体$X_{i}和X_{j}$的适应度大小，并对其中适应度较低的个体处以罚函数： $$ F_{min}(x_{i},x_{j})=Penalty $$</li>\n<li>依据这M+N个个体的新适应度对各个个体进行降序排序，记忆前N个个体。</li>\n<li>结束判定</li>\n</ol>\n<h2 id=\"混合遗传算法\"><a href=\"#混合遗传算法\" class=\"headerlink\" title=\"混合遗传算法\"></a>混合遗传算法</h2><h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>  引入了局部搜索过程</li>\n<li>  增加了编码变换操作过程</li>\n</ul>\n<h4 id=\"基本原则\"><a href=\"#基本原则\" class=\"headerlink\" title=\"基本原则\"></a>基本原则</h4><ol>\n<li> 尽量采用原有算法的编码</li>\n<li> 利用原有算法的优点</li>\n<li> 改进遗传算子</li>\n</ol>\n<h2 id=\"模拟退火算法\"><a href=\"#模拟退火算法\" class=\"headerlink\" title=\"*模拟退火算法\"></a>*模拟退火算法</h2><p>基于金属退火的机理而建立起的一种全局最优化方法，它能够以随机搜索技术从概率的意义上找出目标函数的全局最小点。</p>\n<h4 id=\"构成要素-1\"><a href=\"#构成要素-1\" class=\"headerlink\" title=\"构成要素\"></a>构成要素</h4><ol>\n<li> 搜索空间</li>\n<li> 能量函数E(x)</li>\n<li> 状态转移规则P</li>\n<li> 冷却进度表T(t)</li>\n</ol>\n<h4 id=\"算法过程-2\"><a href=\"#算法过程-2\" class=\"headerlink\" title=\"算法过程\"></a>算法过程</h4><ol>\n<li> 随机产生一个初始解，以它作为当前最优解，并计算目标函数值。</li>\n<li> 设置初始温度：$T=T_{0}$。</li>\n<li> 设置循环计数器初值：t=1。</li>\n<li> 对当前最优解作一随机变动,产生一新的解。计算新的目标函数值，并计算 目标函数值的增量D。</li>\n<li> 如果D＜0，则接受该新产生的解为当前最优解； 如果D＞0，则以概率p = exp(-D/T)接受该新产生的解为当前最优解。</li>\n<li> 如果t＜终止步数，则：t=t+1，转向第4步。</li>\n<li> 如果未到达冷却状态，则：T=T(t)，转向第3步； 如果已到达冷却状态，则：输出当前最优点，计算结束。</li>\n</ol>\n<p>略。。。</p>\n<h1 id=\"数值函数和多目标优化\"><a href=\"#数值函数和多目标优化\" class=\"headerlink\" title=\"数值函数和多目标优化\"></a>数值函数和多目标优化</h1><h2 id=\"数值函数优化\"><a href=\"#数值函数优化\" class=\"headerlink\" title=\"数值函数优化\"></a>数值函数优化</h2><h4 id=\"纯数值函数优化\"><a href=\"#纯数值函数优化\" class=\"headerlink\" title=\"纯数值函数优化\"></a>纯数值函数优化</h4><p>专门设计了一些具有复杂数学特征的<strong>纯数学函数</strong>，通过遗传算法对这些函数的优化计算情况来测试各种遗传算法的性能。</p>\n<h4 id=\"常用测试函数\"><a href=\"#常用测试函数\" class=\"headerlink\" title=\"常用测试函数\"></a>常用测试函数</h4><ol>\n<li> 连续函数或离散函数</li>\n<li> 凹函数或凸函数</li>\n<li> 二次函数或非二次函数</li>\n<li> 低维函数或高维函数</li>\n<li> 确定性函数或随机性函数</li>\n<li> 单峰值函数或多峰值函数</li>\n</ol>\n<h2 id=\"多目标优化\"><a href=\"#多目标优化\" class=\"headerlink\" title=\"多目标优化\"></a>多目标优化</h2><h4 id=\"GA的性能评估\"><a href=\"#GA的性能评估\" class=\"headerlink\" title=\"*GA的性能评估\"></a>*GA的性能评估</h4><ol>\n<li>适应值函数计算次数 发现同样适应性的个体，或者找到同样质 量的可行解，所需要的关于个体评价的适应值函数的计算次数（function evaluations）。<blockquote>\n<p>该值越小说明相应GA的搜索效率越高。</p>\n</blockquote>\n</li>\n<li>在线和离线性能指标<ul>\n<li>在线性能指标  含义：表示了算法从开始运行一直到当前为止的 时间段内性能值的平均值，它反映了算法的<strong>动态性能</strong>。  在环境e下策略s的在线性能 $X_{e}(s)$定义为： $$ X_{e}(s)=\\frac{1}{T}\\sum_{t=1}^{T}f_{e}(t) $$ $f_{e}(t)$是在环境e下第t时刻的平均目标函数值或平均适应度。</li>\n<li>离线性能指标  含义：表示了算法运行过程中各进 化代的最佳性能值的累积平均，它反映了算法的<strong>收敛性能</strong>。  在环境e下策略s的在线性能 $X_{e}^{*}(s)$定义为： $$ X_{e}^{<em>}(s)=\\frac{1}{T}\\sum</em>{t=1}^{T}f_{e}^{_}(t) $$ $f_{e}^{ *}(s)$是在环境 e 下［0, t］时间段内最好的目标函数值或最大的适应度。</li>\n</ul>\n</li>\n<li>最优解搜索性能 GA用于函数优化的目的就是发现问题的全局最优解， 所以通常采用当前群体发现的最佳可行解的改善情况作为度量GA搜索能力的基本指标。</li>\n</ol>\n<h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><ol>\n<li>设$𝑋 ⊆ 𝑅^{𝑚}$是多目标优化模型的约束集， $𝑓(𝑥) ∈ 𝑅^{𝑝}$是多目标优化时的向量目标函数，$ 𝑥1 ∈ 𝑋, 𝑥2 ∈ 𝑋$ 。若 $$ 𝑓_{𝑘}(𝑥_{1}) ≤ 𝑓_{𝑘}(𝑥_{2}) (∀𝑘 = 1,2, ⋯ 𝑝) $$ 并且 $$ 𝑓_{𝑘}(𝑥1) &lt; 𝑓_{𝑘}(𝑥2) (∃𝑘 = 1,2, ⋯ 𝑝) $$ 则称解𝑥1比解𝑥2优越。</li>\n<li>设$𝑋 ⊆ 𝑅^{𝑚}$ 是多目标优化模型的约束集， $𝑓(𝑥) ∈ 𝑅^{𝑝}$ 是向量目标函数。若 $𝑥^{∗} ∈ 𝑋$，并且$x^{<em>}$比 X 中的所有其他点都优越，则称 $x^{</em>}$是多目标极小化模型的最优解。</li>\n<li>设$𝑋 ⊆ 𝑅^{𝑚}$ 是多目标优化模型的约束集，$ 𝑓(𝑥) ∈ 𝑅^{𝑝}$ 是向量目标函数。若 $\\tilde{𝑥}∈ 𝑋$，并且不存在比 $\\tilde{𝑥}$ 更优越的 $x $，则称 $\\tilde{𝑥}$ 为多目标极小化模型的 <strong>Pareto最优解</strong>，或称为非劣解。</li>\n</ol>\n<blockquote>\n<p>多目标优化问题的最优解x *就是使向量目标函数f(x) 的每一个子目标函数都同时到达最优点的解.</p>\n<p>多目标优化问题的Pareto最优解仅仅只是它的一个可以接受的“不坏”的解，并且通常的多目标优化问题大多都具有很多个Pareto最优解.</p>\n<p><strong>求解多目标优化问题的首要步骤和关键步骤是求出其 所有的Pareto最优解</strong>.</p>\n</blockquote>\n<h4 id=\"求解算法\"><a href=\"#求解算法\" class=\"headerlink\" title=\"求解算法\"></a>求解算法</h4><ol>\n<li>权重系数变化法 对于一个多目标优化问题，若给其各个子目标函数 $𝑓_{𝑖 }(𝑥)\\quad (i＝1，2，…，p)$，赋予不同的权重$𝑤_{i}(i＝1，2，… ，p)$，其中各$𝑤_{𝑖}$的大小代表相应子目标$𝑓_{𝑖}(𝑥)$ 在多目标优化问题中的重要程度。则各个子目标函数的线性加权和可表示为: $$ u(f(x))=\\sum_{i=1}^{p}w_{i}f_{i}(x) $$ 以这个线性加权和作为多目标优化问题的评价函数，则多目标优化问题就可转化为单目标优化问题。</li>\n<li>并列选择法<ol>\n<li> 先将群体中的全部个体按子目标函数的数目均等地划分为一些子群体</li>\n<li> 对每个子群体分配一个子目标函数，各个子目标函数在其相应的子群体中独立地进行选择运算</li>\n<li> 各自选择出一些适应度较高的个体组成一个新的子群体</li>\n<li> 所有这些新生成的子群体合并为一个完整的群体，在这个完 整的群体中进行交叉运算和变异运算</li>\n<li> 不断地进行“分割—并列选择—合并”过程</li>\n</ol>\n 最终可求出多目标优化问题的Pareto最优解。</li>\n<li>排序选择法 基于“Pareto最优个体”的概念来对群体中的各个个体进行排序，依据这个排列次序来进行进化过程中的选择运算。从而使得排在前面的Pareto最优个体将有更多的机会遗传到下一代群体中。如此这样经过一定代数的循环之后，最终就可求出多目标优化问题的Pareto最优解。</li>\n<li>*共享函数法</li>\n<li>*混合法</li>\n</ol>\n<h1 id=\"粒子群优化算法\"><a href=\"#粒子群优化算法\" class=\"headerlink\" title=\"粒子群优化算法\"></a>粒子群优化算法</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>粒子群优化算法（Particle Swarm Optimization，PSO）是进化计算的一个分支，是一种模拟自然界的生物活动的随机搜索算法。</p>\n<blockquote>\n<p>PSO 模拟了自然界鸟群捕食和鱼群捕食的过程。通过群体中的协作寻找到问题的全局最优解。它是 1995 年由美国学者 <strong>Eberhart</strong> 和 <strong>Kennedy</strong> 提出的。</p>\n<p>设想这样一个场景：一群鸟在随机搜索食物。已知在这块区域里只有一块食物，所有的鸟都不知道食物在哪里，但它们能感受到当前的位置离食物还有多远。</p>\n<p>那么，找到食物的最优策略是什么呢？</p>\n<ul>\n<li>  搜寻目前离食物最近的鸟的周围区域</li>\n<li>  根据自己飞行的经验判断食物的所在</li>\n</ul>\n<p><strong>PSO的基础——信息的社会共享</strong></p>\n</blockquote>\n<p>每个寻优的问题解都被想像成一只鸟，称为“粒子”，所有粒子都在一个 N 维空间进行搜索； 所有的粒子都由一个fitness function 确定适应值以判断目前的位置好坏； 每一个粒子必须赋予记忆功能，能记住所搜寻到的最佳位置；每一个粒子还有一个速度以决定飞行的距离和方向。这个速度根据它本身的飞 行经验以及同伴的飞行经验进行动态调整。</p>\n<h4 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>优点<ol>\n<li> 设置参数较少</li>\n<li> 易于理解和描述</li>\n<li> 收敛速度较好</li>\n<li> 实现容易</li>\n</ol>\n</li>\n<li>缺点<ol>\n<li> 容易陷入局部最优</li>\n<li> 收敛精度不高</li>\n<li> 后期收敛速度较慢</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h2><ol>\n<li>初始化 初始化粒子群体（群体规模为n），包括随机位置和速度。</li>\n<li>评估 根据适应度函数，评估每个粒子的适应度。</li>\n<li>找到局部最优 对每个粒子，将其当前适应值与其个体历史最佳位置（Pbest）对应的适应度作比较，如果当前的适应度更高，则将用当前位置更新历史最佳位置Pbest。</li>\n<li>找到全局最优 对每个粒子，将其当前适应值与全局最佳位置（Gbest）对应的适应度作比较，如果当前的适应度更高，则将用当前粒子的位置更新全局最佳位置Gbest。</li>\n<li>更新 根据公式 $$ v_{k+1}=c_{0}v_{k}+c_{1}\\xi (p_{k}-x_{k})+c_{2}\\eta(p_{g}-x_{k})\\ x_{k+1}=x_{k}+v_{k+1} $$ 更新每个粒子的速度和位置</li>\n<li> 若未达终止条件，则回到第2步</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>数学公式完整版：<a href=\"https://blog.csdn.net/weixin_51245887/article/details/126918727\">https://blog.csdn.net/weixin_51245887/article/details/126918727</a></p>\n<h1 id=\"遗传算法概述\"><a href=\"#遗传算法概述\" class=\"headerlink\" title=\"遗传算法概述\"></a>遗传算法概述</h1><h2 id=\"背景知识\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h2><p>生物遗传概念</p>\n<p>遗传算法中的作用</p>\n<p>适应度（Fitness）</p>","more":"<p>适应函数值。度量某个物种对于生存环境的适应程度</p>\n<p>选择（Selection）</p>\n<p>决定以一定的概率从种群中选择若干个个体的操作</p>\n<p>交叉（Crossover）</p>\n<p>通过交配原则产生一组新解的过程</p>\n<p>变异（Mutation）</p>\n<p>编码的某一个分量发生变化的过程</p>\n<p>编码（Coding）</p>\n<p>表现型到基因型的映射</p>\n<p>解码（Decoding）</p>\n<p>基因型到表现型的映射</p>\n<p>群体（population）</p>\n<p>选定的一组解</p>\n<p>种群（reproduction）</p>\n<p>根据适应函数值选取的一组解</p>\n<p>适者生存</p>\n<p>算法停止时，最优目标值的解有最大的可能被保留</p>\n<p>个体</p>\n<p>解</p>\n<p>染色体（chromosome）</p>\n<p>解的编码（字符串、向量等）</p>\n<p>基因（gene）</p>\n<p>解中每一分量的特征（如各分量的值）</p>\n<h2 id=\"遗传算法（GA）\"><a href=\"#遗传算法（GA）\" class=\"headerlink\" title=\"遗传算法（GA）\"></a>遗传算法（GA）</h2><h4 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h4><ul>\n<li>  枚举法</li>\n<li>  启发式算法</li>\n<li>  搜索算法</li>\n</ul>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><ol>\n<li> 是模拟生物在自然环境下的进化和遗传过程而形成的一种 <strong>自适应全局优化概率方法</strong></li>\n<li> 其采纳了 <strong>自然进化模型</strong>，从代表问题可能潜在解集的一个 <strong>种群</strong> 开始</li>\n<li> <strong>适者生存、优胜劣汰</strong></li>\n</ol>\n<h4 id=\"算法过程\"><a href=\"#算法过程\" class=\"headerlink\" title=\"算法过程\"></a>算法过程</h4><ol>\n<li>初始化。设置进化代数计数器t⭠0；设置最大进化代数T；随机生成M个个体作为初始群体P(0)。</li>\n<li>个体评价。计算群体P(t)中各个个体的适应度。</li>\n<li>选择运算。将选择算子作用于群体。</li>\n<li>交叉运算。将交叉算子作用于群体。</li>\n<li>变异运算。将变异算子作用于群体。群体P(t)经过选择、交叉、变异运算之后得到下一代群体P(t+1)。</li>\n<li>终止条件判断。若t≤T，则：t⭠t+1，转到步骤二；若t&gt;T，则以进化过程中所得到的具有最大适应度的个体作为最优解输出，终止计算。</li>\n<li>示意图 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220917173131637.png\" alt=\"image-20220917173131637\"></li>\n</ol>\n<h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li><strong>遗传算法以 决策变量的编码 作为运算对象</strong></li>\n<li><strong>遗传算法直接以 目标函数值 作为搜索信息</strong></li>\n<li><strong>遗传算法同时使用 多个搜索点 的搜索信息</strong></li>\n<li><strong>遗传算法使用 概率搜索技术</strong></li>\n</ul>\n<h2 id=\"基本遗传算法\"><a href=\"#基本遗传算法\" class=\"headerlink\" title=\"基本遗传算法\"></a>基本遗传算法</h2><p>由 Holland 提出，简称 SGA（Simple Genetic Algorithm）。</p>\n<h4 id=\"构成要素\"><a href=\"#构成要素\" class=\"headerlink\" title=\"构成要素\"></a>构成要素</h4><ol>\n<li>染色体编码方法 使用 <strong>固定长度的二进制符号串</strong> 来表示群体中的个体</li>\n<li>个体适应度评价</li>\n<li>基本遗传算子</li>\n<li>算法的运行参数</li>\n</ol>\n<h4 id=\"伪代码描述\"><a href=\"#伪代码描述\" class=\"headerlink\" title=\"伪代码描述\"></a>伪代码描述</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Procedure SGA</span><br><span class=\"line\">begin</span><br><span class=\"line\"><span class=\"comment\">// 初始值，M为个体总数，t为代数，T为最大进化数 </span></span><br><span class=\"line\">M=PopulationSize, t=<span class=\"number\">0</span>, T=maxGeneration;</span><br><span class=\"line\">init <span class=\"title function_\">P</span><span class=\"params\">(t)</span>; <span class=\"comment\">// 初始化群体P，一开始为第0代</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(t&lt;=T):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i=<span class=\"number\">1</span> to M <span class=\"keyword\">do</span>:</span><br><span class=\"line\">        Evaluate Fitness of P(t);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i=<span class=\"number\">1</span> to M <span class=\"keyword\">do</span>:</span><br><span class=\"line\">        Selection Operation to P(t);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i=<span class=\"number\">1</span> to M/<span class=\"number\">2</span> <span class=\"keyword\">do</span>:</span><br><span class=\"line\">        Crossover Operation to P(t);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i=<span class=\"number\">1</span> to M <span class=\"keyword\">do</span>:</span><br><span class=\"line\">        Mutation operation to P(t);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i=<span class=\"number\">1</span> to M <span class=\"keyword\">do</span>:</span><br><span class=\"line\">        P(t+<span class=\"number\">1</span>)=P(t)</span><br><span class=\"line\">     t=t+<span class=\"number\">1</span></span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>算法图解参考上图</p>\n<h2 id=\"个体适应度评价\"><a href=\"#个体适应度评价\" class=\"headerlink\" title=\"个体适应度评价\"></a>个体适应度评价</h2><blockquote>\n<p>所有个体适应度必须为正数或零，不能为负数。</p>\n</blockquote>\n<h4 id=\"适应度函数变换常用方法\"><a href=\"#适应度函数变换常用方法\" class=\"headerlink\" title=\"适应度函数变换常用方法\"></a>适应度函数变换常用方法</h4><p>但实际优化问题中的目标函数值有正也有负，优化目标有求函数最大 值，也有求函数最小值，显然上面两式保证不了所有情况下个体的适应度 都是非负数这个要求，需要进行适应度函数尺度转换，将 <strong>目标函数值 f(x) 变换为个体的适应度F(x) 。</strong></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221012213710525.png\" alt=\"image-20221012213710525\"></p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221012213726845.png\" alt=\"image-20221012213726845\"></p>\n<p>比例选择又称为轮盘赌选择（Roulette Wheel ）</p>\n<h2 id=\"遗传算法的应用步骤\"><a href=\"#遗传算法的应用步骤\" class=\"headerlink\" title=\"遗传算法的应用步骤\"></a>遗传算法的应用步骤</h2><ol>\n<li> 确定决策变量及其各种约束条件，即确定出个体的表现型 X 和问题的解空间。</li>\n<li> 建立优化模型，即确定出目标函数的类型及其数学描述形式或量化方法。</li>\n<li> 确定表示可行解的染色体编码方法，也即确定个体的基因型 X 及遗传算法的搜索空间。</li>\n<li> 确定解码方法，即确定出由个体基因型 X 到个体表现型 X 的对应关系或转换方法。</li>\n<li> 确定个体适应度的量化评价方法，即确定由目标函数值 $f(x)$ 到个体适应度 $F(x)$ 的转换规则。</li>\n<li> 设计遗传算子，即确定选择运算、交叉运算和变异运算等遗传算子的操作方法。</li>\n<li> 确定遗传算法的有关运行参数，即确定出遗传算法的 $M,T,p_{c},p_{m}$ 等参数。</li>\n</ol>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221012221848724.png\" alt=\"image-20221012221848724\"></p>\n<h2 id=\"模式定理\"><a href=\"#模式定理\" class=\"headerlink\" title=\"模式定理\"></a>模式定理</h2><p><strong>模式</strong></p>\n<p>模式（schema）表示一些相似的模块。他描述了在某些位置上的具有相似结构特征的个体编码串的一个子集。</p>\n<p>例如：模式 $H = 1**11$，模式 $H = 00**<em>$ ，“$</em>$”代表通配符。</p>\n<p><strong>模式阶</strong></p>\n<p>在模式H中具有确定基因值的位置数目称该模式的模式阶（schema order），记为 $ o(H)$。</p>\n<p>例如：$o(100_01_)=5，o(*******0)=1$</p>\n<p><strong>模式定义长度</strong></p>\n<p>模式 H 中第一个确定基因值的位置和最后一个确定基因值的位置之间的距离称为该模式的模式定义长度（Schema Defining Length），记为 $δ(H)$。</p>\n<p>例如：$δ(11*0**_) = 3，δ(0_**1) = 4，δ(**0***) = 1$</p>\n<h4 id=\"在选择算子的作用下\"><a href=\"#在选择算子的作用下\" class=\"headerlink\" title=\"在选择算子的作用下\"></a>在选择算子的作用下</h4><p>$$ \\frac{m(H,t)}{m(H,t+1)}=\\frac{\\bar{F}(t)}{f(H,t)}\\ \\Longleftrightarrow m(H,t+1)=m(H,t)\\frac{f(H,t)}{ \\bar{F}(t)}\\ let \\quad \\frac{f(H,t)}{\\bar{F}(t)}=1+C \\ \\Longrightarrow m(H,t+1)=m(H,t)(1+C)\\ \\Longrightarrow m(H,t)=m(H,O)·(1+C)^{t} $$</p>\n<p>其中</p>\n<p>符号</p>\n<p>含义</p>\n<p>$t$</p>\n<p>在进化过程中的第 $t$ 代</p>\n<p>$H$</p>\n<p>模式 $H$</p>\n<p>$m(H, t)$</p>\n<p>当前群体 $P(t)$ 中与 $H$ 匹配的个体数</p>\n<p>$\\bar F(t)$</p>\n<p>第 t 代群体的平均适应度</p>\n<p>$f(H,t)$</p>\n<p>群体中 H 隐含的总个体的平均适应度</p>\n<p><strong>结论</strong>：在选择算子作用下，对于平均适应度高于群体平均适应度的模式，其样本数将呈指数级增长：而对于平均适应度低于群体平均适应度的模式，其样本数将呈指数级减少。</p>\n<h4 id=\"在交叉算子的作用下\"><a href=\"#在交叉算子的作用下\" class=\"headerlink\" title=\"在交叉算子的作用下\"></a>在交叉算子的作用下</h4><p>$$ m(H,t+1)≥m(H,t)·(1+C)·[1-p_{c}·\\frac{δ(H)}{l-1}] $$</p>\n<p>$δ(H)$越小，则$m(H,t)$越容易呈指数级增长；</p>\n<p>$δ(H)$越大，则$m(H,t)$越不容易呈指数级增长。</p>\n<h4 id=\"在变异算子的作用下\"><a href=\"#在变异算子的作用下\" class=\"headerlink\" title=\"在变异算子的作用下\"></a>在变异算子的作用下</h4><p>某一模式被破坏的概率： $$ 1-(1-p_{m})^{o(H)} $$ 当 $p_{m}&lt;&lt;1$ 时： $$ 1-(1-p_{m})^{o(H)}≈o(H)·p_{m} $$ 在变异算子的作用下，模式 H 的生存概率： $$ p_{s}≈1-o(H)·p_{m} $$ $o(H)$越小，模式 H 越易于生存；</p>\n<p>$o(H)$越大，模式 H 越易于被破坏。</p>\n<h4 id=\"在算子总作用下\"><a href=\"#在算子总作用下\" class=\"headerlink\" title=\"在算子总作用下\"></a>在算子总作用下</h4><p>$$ m(H,t+1)≥m(H,t)·\\frac{f(H,t)}{\\bar F(t)}·[1-p_{c}·\\frac{δ(H)}{l-1}-o(H)·p_{m}] $$</p>\n<p>⭐总结：<strong>遗传算法中，在选择、交叉和变异算子的作用下，具有低阶、短的定义长度，并且平均适应度高于群体平均适应度的模式将按指数级增长。</strong></p>\n<blockquote>\n<p>【积木块假设】</p>\n<p>个体的基因块通过选择、交叉、变异等遗传算子的作用，能够相互拼接在一起，形成适应度更高的个体编码串。</p>\n</blockquote>\n<h1 id=\"遗传算法基本实现技术\"><a href=\"#遗传算法基本实现技术\" class=\"headerlink\" title=\"遗传算法基本实现技术\"></a>遗传算法基本实现技术</h1><h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><p>编码方法很大程度上决定了如何进行群体的遗传进化运算以及遗传进化运算的效率。</p>\n<p>常见的编码分类：<strong>二进制编码、浮点编码、符号编码</strong>。</p>\n<h4 id=\"二进制编码\"><a href=\"#二进制编码\" class=\"headerlink\" title=\"二进制编码\"></a>二进制编码</h4><p><strong>编码</strong></p>\n<p>假设某一参数的取值范围 [$U_{min},U_{max}$ ] , 我们用长度为 n 的二进制编码符号串来表示参数，共产生 $2^{n}$ 种不同的编码，δ为二进制编码的编码精度。则： $$ δ = \\frac{U_{max}-U_{min}}{2^{n}-1} $$ <strong>解码</strong></p>\n<p>假设某一个体的编码是： $$ X:b_{i}b_{i-1}b_{i-2}····b_{2}b_{1} $$ 则解码公式为： $$ x = U_{min}+(\\sum_{i=1}^{n}b·2^{i-1})· \\frac{U_{max}-U_{min}}{2^{n}-1} $$</p>\n<p><strong>[例]</strong> 设 -3.0 ≤ x ≤ 12.1 , 精度要求 δ = 1/10000</p>\n<p>由编码公式</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220928234410284.png\" alt=\"image-20220928234410284\"></p>\n<blockquote>\n<p><strong>格雷码编码</strong></p>\n<p>格雷码特点：两个相邻的编码串之间只有一位编码值不同。</p>\n<p>解码和编码过程：决策变量 ↔二进制↔格雷码</p>\n</blockquote>\n<h4 id=\"浮点数编码\"><a href=\"#浮点数编码\" class=\"headerlink\" title=\"浮点数编码\"></a>浮点数编码</h4><p>个体的每个基因值用_某一范围内_的一个浮点数来表示，个体的编码长度等于其决策变量的个数。</p>\n<p><strong>编码方法</strong></p>\n<p>某一个优化问题含有5个变量 $x_{i}(i=1,2, … ,5)$，每个变量都有其对应的上下限$[U_{min}^{i}, U_{max}^{i}]$，则：</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20220929083709177.png\" alt=\"image-20220929083709177\"></p>\n<p>就表示一个个体的基因型，其对应的表现型是： $x = [5.80,6.90,3.50,3.80,5.00]^{T}$</p>\n<h4 id=\"符号编码\"><a href=\"#符号编码\" class=\"headerlink\" title=\"符号编码\"></a>符号编码</h4><p>个体染色体编码串中基因值取自一个无数值含义、只有代码含义的符号集。</p>\n<h4 id=\"多参数级联编码\"><a href=\"#多参数级联编码\" class=\"headerlink\" title=\"多参数级联编码\"></a>多参数级联编码</h4><p>将各个参数分别以某种编码方法进行编码，然后再将它们的编码按一 定顺序联接在一起就组成了表示全部参数的个体编码。这种编码方法 称为多参数级联编码方法。 $$ \\underbrace{b_{11}b_{12}···b_{1l_{1}}}<em>{x</em>{1}}\\underbrace{b_{21}b_{22}···b_{2l_{2 }}}<em>{x</em>{2}}····\\underbrace{b_{n1}b_{n2}···b_{nl_{1}}}<em>{x</em>{n}} $$</p>\n<h4 id=\"多参数交叉编码方法\"><a href=\"#多参数交叉编码方法\" class=\"headerlink\" title=\"多参数交叉编码方法\"></a>多参数交叉编码方法</h4><p>将各个参数中起主要作用的码位集中在一起。</p>\n<p><strong>编码方法</strong></p>\n<ol>\n<li> 先对各个参数进行分组编码</li>\n<li> 取各个参数编码串中的最高位联接在一起作为前n位编码；再取次高位同上……</li>\n</ol>\n<p>参数编码： $$ \\overbrace{b_{11}b_{12}b_{13}···b_{1m}}^{x_{1}}\\overbrace{b_{21}b_{22}b_{23}···b_{2m}}^{x_{2}}····\\overbrace{b_{n1}b_{n2}b_{n3}···b_{nm}}^{x_{n}} $$ 个体编码串： $$ b_{11}b_{21}b_{31}···b_{n1} b_{12}b_{22}b_{32}···b_{n2} ··· b_{1m}b_{2m}b_{3m}···b_{nm} $$</p>\n<h2 id=\"适应度函数\"><a href=\"#适应度函数\" class=\"headerlink\" title=\"适应度函数\"></a>适应度函数</h2><p>度量个体适应度的函数称为适应度函数。</p>\n<h4 id=\"目标函数\"><a href=\"#目标函数\" class=\"headerlink\" title=\"目标函数\"></a>目标函数</h4><p>是指所关心的目标 (某一变量y) 与相关的因素 ( 某些变量$x_{i}$ ) 的函数关系。</p>\n<h4 id=\"适应度尺度变换\"><a href=\"#适应度尺度变换\" class=\"headerlink\" title=\"适应度尺度变换\"></a>适应度尺度变换</h4><p>对个体适应度所做的扩大或者缩小变换</p>\n<p>常见变换方法：</p>\n<ul>\n<li>线性尺度变换  $F^{‘}=aF+b$</li>\n<li>乘幂尺度变换  $F^{‘}=F^{k}$</li>\n<li>指数尺度变换  $F^{‘}=exp(-βF)$</li>\n</ul>\n<p><strong>（$F$：原适应度，$F’$：尺度变换后的新适应度）</strong></p>\n<h2 id=\"选择算子\"><a href=\"#选择算子\" class=\"headerlink\" title=\"选择算子\"></a>选择算子</h2><p>遗传算法使用选择算子（或称复制算子， Reproduction Operator）来对群体中的个体进行优胜劣汰操作；适应度 较高的个体被遗传到下一代群体中的概率较大；适应度较 低的个体被遗传到下一代群体中的概率较小.</p>\n<h4 id=\"比例选择\"><a href=\"#比例选择\" class=\"headerlink\" title=\"比例选择\"></a>比例选择</h4><p>各个个体被选中的概率与其适应度大小成正比。设群体大小为M，个体 i 的适应度为$F_{i}$，则个体i被选中的概率$p_{is}$为: $$ p_{is}=F_{i}/\\sum_{i=1}^{M}F_{i} \\quad\\quad (i=1,2,3,…,M) $$</p>\n<h4 id=\"最优保存策略\"><a href=\"#最优保存策略\" class=\"headerlink\" title=\"最优保存策略\"></a>最优保存策略</h4><ol>\n<li> 找出当前群体中适应度最高的个体和适应度最低的个体。</li>\n<li> 若当前群体中最佳个体的适应度比总的迄今为止的最好个体的适应度还要高，则以当前种群中的最佳个体作为新的迄今为止的最好个体。</li>\n<li> 用迄今为止的最好个体替换掉当前群体中的最差个体</li>\n</ol>\n<h4 id=\"确定式采样选择\"><a href=\"#确定式采样选择\" class=\"headerlink\" title=\"确定式采样选择\"></a>确定式采样选择</h4><ol>\n<li>计算群体中各个个体在下一代群体中的期望生存数目$N_{i}$: $$ N_{i} = M · F_{i}/\\sum^{M}_{i=1}F_{i}\\quad\\quad (i=1,2,3,…,M) $$</li>\n<li>用$N_{i}$的整数部分确定各个对应个体在下一代群体中的生存数目。</li>\n<li>按照$N_{i}$的小数部分对个体进行降序排序，顺序取前 $M-\\sum ^{M}_{i=1}[N_{i}]$ 个个体加入到下一代群体中。</li>\n</ol>\n<h4 id=\"无回放随机选择\"><a href=\"#无回放随机选择\" class=\"headerlink\" title=\"无回放随机选择\"></a>无回放随机选择</h4><p>亦称期望值选择方法(Expected Value Model)。</p>\n<ol>\n<li>计算群体中各个个体在下一代群体中的期望生存数目$N_{i}$: $$ N_{i} = M · F_{i}/\\sum^{M}_{i=1}F_{i}\\quad\\quad (i=1,2,3,…,M) $$</li>\n<li>若某一个体被选中参与交叉运算，则它在下一代中的生存期望数目减去0.5，若未参与交叉运算，则它在下一代中的生存期望数目减去1.0。</li>\n<li>随着选择过程的进行，若某一个个体的生存期望数目小于0时，则该个体就不在有机会被选中。</li>\n</ol>\n<h4 id=\"无回放余数随机选择\"><a href=\"#无回放余数随机选择\" class=\"headerlink\" title=\"无回放余数随机选择\"></a>无回放余数随机选择</h4><ol>\n<li>计算群体中各个个体在下一代群体中的期望生存数目$N_{i}$: $$ N_{i} = M · F_{i}/\\sum^{M}_{i=1}F_{i}\\quad\\quad (i=1,2,3,…,M) $$</li>\n<li>用$N_{i}$的整数部分$N_{i}$确定各个对应个体在下一代群体中的生存数目。</li>\n<li>以$F_{i}-N_{i}·\\sum^{M}<em>{i=1}F/M$ 为各个个体的新的适应度，用比例选择方法来确定下一代群体中还未确定的 $M-\\sum ^{M}</em>{i=1}N_{i}$ 个体。</li>\n</ol>\n<h4 id=\"排序选择\"><a href=\"#排序选择\" class=\"headerlink\" title=\"排序选择\"></a>排序选择</h4><p>对群体中各个个体按其适应度大小来进行排序，基于这个排序来分配各个个体被选中的概率。</p>\n<ol>\n<li> 对群体中的所有个体按其适应度大小进行降序排序。</li>\n<li> <strong>根据具体求解问题，设计一个概率分配表，将各个概率值按上述排列次序分配给各个个体</strong>。</li>\n<li> 以各个个体所分配到的概率值作为其能够被遗传到下一代的概率，基于这些概率值用比例选择的方法来产生下一代群体。</li>\n</ol>\n<h4 id=\"随机联赛选择\"><a href=\"#随机联赛选择\" class=\"headerlink\" title=\"随机联赛选择\"></a>随机联赛选择</h4><p>每次选取几个个体之中适应值最高的一个个体遗传到下一代群体。</p>\n<ol>\n<li> 从群体中随机选取N个个体进行适应度大小的比较，将其中适应度最高的个体遗传到下一代群体中。</li>\n<li> 将上述过程重复M次，就可得到下一代群体中的M个个体。</li>\n</ol>\n<h2 id=\"交叉算子\"><a href=\"#交叉算子\" class=\"headerlink\" title=\"交叉算子\"></a>交叉算子</h2><p>交叉算子是指对两个相互配对的染色体按某种方式相互交换其部分基因，从而形成两个新的个体</p>\n<h4 id=\"单点交叉\"><a href=\"#单点交叉\" class=\"headerlink\" title=\"单点交叉\"></a>单点交叉</h4><p>在个体编码串中<strong>只随机设置一个交叉点</strong>，然后在该点相互交换两个配对的部分染色体。</p>\n<p>特点：若邻接基因座之间的关系能提供较好的个体性状和较高的个体适应度的话，则这种单点交叉操作破坏这种个体性状和降低个体适应度的可能性最小。</p>\n<h4 id=\"双点交叉\"><a href=\"#双点交叉\" class=\"headerlink\" title=\"双点交叉\"></a>双点交叉</h4><p>在个体编码串中<strong>随机设置两个交叉点</strong>，然后再进行部分基因交换。</p>\n<ol>\n<li>在相互配对的两个个体编码串中随机设置两个交叉点</li>\n<li>交换两个个体在所设定的两个交叉点之间的部分染色体 <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221003172723469.png\" alt=\"image-20221003172723469\"></li>\n</ol>\n<h4 id=\"多点交叉\"><a href=\"#多点交叉\" class=\"headerlink\" title=\"多点交叉\"></a>多点交叉</h4><p>在个体编码串中 <strong>随机设置两个交叉点</strong>，然后进行基因交换。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221003172903979.png\" alt=\"image-20221003172903979\"></p>\n<h4 id=\"均匀交叉\"><a href=\"#均匀交叉\" class=\"headerlink\" title=\"均匀交叉\"></a>均匀交叉</h4><p>两个配对个体的每一个基因座上的基因都以相同的交叉概率进行交换。</p>\n<ol>\n<li>随机产生一个与个体编码串长度等长的屏蔽字 $W=w_{1}w_{2}…w_{i}…w_{l}$，其中 $l$ 为个体编码串长度。</li>\n<li>由下述规则从 A 和 B 两个父代个体中产生出两个新的子代个体 A’ 和 B’。<ul>\n<li>  若 $w_{i}=0$，则 A’ 在第 i 个基因座上的基因值继承 A 的对应基因值，B’ 在第 i 个基因座上的基因值继承 B 的对应基因值。</li>\n<li>  若 $w_{i} =1$，则 A’ 在第 i 个基因座上的基因值继承 B 的对应基因值，B’ 在第 i 个基因座上的基因值继承 A 的对应基因值。</li>\n</ul>\n <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221003173710535.png\" alt=\"image-20221003173710535\"></li>\n</ol>\n<h4 id=\"算术交叉\"><a href=\"#算术交叉\" class=\"headerlink\" title=\"算术交叉\"></a>算术交叉</h4><p>由两个个体的线性组合而产生出两个新的个体。</p>\n<p>假设有两个个体$X_{A}$和$X_{B}$之间进行算术交叉，则交叉运算后所产生的两个新个体是: $$ \\left{\\begin{matrix}</p>\n<p>X_{A}^{t+1} = \\alpha X_{B}^{t} + (1 - \\alpha )X_{A}^{t} \\ X_{B}^{t+1} = \\alpha X_{A}^{t} + (1 - \\alpha )X_{B}^{t} \\end{matrix}\\right. $$ 其中 α 是一参数，如果 α (0&lt; α &lt;1)是一个常数，则为 <strong>均匀算术交叉</strong>；如果 α 是一个由进化代数所决定的变量，则称为非均匀算术交叉。</p>\n<ol>\n<li> 确定两个个体进行线性组合的系数 α。</li>\n<li> 依据上式生成新的两个个体。</li>\n</ol>\n<h2 id=\"变异算子\"><a href=\"#变异算子\" class=\"headerlink\" title=\"变异算子\"></a>变异算子</h2><p>变异算子是指将个体染色体编码串中的某些基因座上的基因值用该基因座的其它等位基因来替换，从而形成一个新的个体。</p>\n<h4 id=\"基本位变异\"><a href=\"#基本位变异\" class=\"headerlink\" title=\"基本位变异\"></a>基本位变异</h4><p>个体编码串中以变异概率 $P_{c}$ 随机指定的某一位或某几位基因座上的基因值作变异运算。</p>\n<h4 id=\"均匀变异\"><a href=\"#均匀变异\" class=\"headerlink\" title=\"均匀变异\"></a>均匀变异</h4><p>分别用符合某一范围内均匀分布的随机数，以某一较小的概率来替换个体编码串中各个基因座上的原有基因值。</p>\n<p>假设有一个个体为$X = x_{1}x_{2}…x_{k}…x_{l}$，若$x_{k}$为变异点，其取值范围为$[U^{k}<em>{min}, U^{k}</em>{max}]$，在该点对个体 X 进行均匀变异操作后，可得到一个新的个体 $X’= x_{1}x_{2}…x’_{k}…x_{l}$，其变异的新基因值是： $$ x’<em>{k} = U^{k}</em>{min}+r·(U_{max}^{k}-U_{min}^{k}) $$ 其中，r 为 [0,1] 范围内符合均匀分布的一个随机数。</p>\n<ol>\n<li> 依次指定个体编码串中的没个基因座为变异点。</li>\n<li> 对每一个变异点，以变异概率 $P_{m}$ 从对应基因的取值范围内取一随机数来替代原有基因值。</li>\n</ol>\n<h4 id=\"边界变异\"><a href=\"#边界变异\" class=\"headerlink\" title=\"边界变异\"></a>边界变异</h4><p>随机地取基因座的两个对应边界基因值之一去替代原有基因值。(是均匀变异操作的一个变形)</p>\n<p>在进由$X = x_{1}x_{2}…x_{k}…x_{l}$向$X’= x_{1}x_{2}…x’_{k}…x_{l}$的边界变异操作时，若变异点xk的基因取值范围为$[U^{k}<em>{min}, U^k</em>{max}]$，则新的$x’_{k}$由下式确定： $$ x’<em>{k}=\\left{\\begin{matrix} U^{k}</em>{min} \\quad ,\\quad if \\quad random(0,1) =0 \\ U^{k}_{max} \\quad ,\\quad if \\quad random(0,1) =1 \\end{matrix}\\right. $$ 式中，random(0，1) 表示以均等的概率从0、1中任取其一。</p>\n<h4 id=\"非均匀变异\"><a href=\"#非均匀变异\" class=\"headerlink\" title=\"非均匀变异\"></a>非均匀变异</h4><p>不是取均匀分布的随机数去替换原有的基因值，而是对原有基因作一<strong>随机扰动</strong>，以扰动后的结果作为变异后的新基因值。</p>\n<p>在进由$X = x_{1}x_{2}…x_{k}…x_{l}$向$X’= x_{1}x_{2}…x’_{k}…x_{l}$的边界变异操作时，若变异点xk的基因取值范围为$[U^{k}<em>{min}, U^k</em>{max}]$，则新的$x’_{k}$由下式确定： $$ x’<em>{k}=\\left{\\begin{matrix} x</em>{k}+ \\Delta (t,U^{k}<em>{max}-x</em>{k}) \\quad ,\\quad if \\quad random(0,1) =0 \\ x_{k}- \\Delta (t,x_{k}-U^{k}_{min}) \\quad ,\\quad if \\quad random(0,1) =1 \\end{matrix}\\right. $$ △(t, y)表示 [0,y] 范围内符合非均匀分布的一个随机数，<strong>要求随着进化代数t的增加，△(t, y)接近于0的概率也逐渐增加。</strong> 例如，△(t, y)可按下式定义： $$ \\Delta (t, y) = y·(1-r^{(1-t/T)b}) $$ 其中，r为 [0,1] 范围内符合均匀分布的一个随机数，T是最大进化代数，b是一个系统参数。它决定了随机扰动对进化代数t的依赖程度。</p>\n<h4 id=\"高斯变异\"><a href=\"#高斯变异\" class=\"headerlink\" title=\"高斯变异\"></a>高斯变异</h4><p>进行变异操作时，用符合<strong>均值为μ、方差为$σ^{2}$的正态分布</strong>的一个随机数来替换原有基因值。</p>\n<p>假定有12个在[0,1]范围内均匀分布的随机数$r_{i}(i=1,2,..,12)$，则符合$N(μ,σ^{2})$正态分布的一个随机数Q可由下式求得: $$ Q=μ+σ(\\sum_{i=1}^{12}r_{i}-6) $$</p>\n<h1 id=\"遗传算法高级实现技术\"><a href=\"#遗传算法高级实现技术\" class=\"headerlink\" title=\"遗传算法高级实现技术\"></a>遗传算法高级实现技术</h1><h2 id=\"倒位算子\"><a href=\"#倒位算子\" class=\"headerlink\" title=\"倒位算子\"></a>倒位算子</h2><p>倒位算子是颠倒个体编码中随机指定的两个基因座之间的基因排列顺序，从而形成一个新的染色体。</p>\n<p>过程：</p>\n<ol>\n<li> 在个体编码串中随机指定两个基因座之后的位置为倒位点。</li>\n<li> 以倒位概率 $P_{i}$ 颠倒这两个倒位点之间的基因排列顺序。</li>\n</ol>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221007234228946.png\" alt=\"image-20221007234228946\"></p>\n<h2 id=\"二倍体\"><a href=\"#二倍体\" class=\"headerlink\" title=\"二倍体\"></a>二倍体</h2><blockquote>\n<p>生物学中，二倍体是指含有两个同源基因组的个体。</p>\n<p><strong>重要特性</strong></p>\n<ol>\n<li>二倍体的记忆能力 能够记忆以前经历过的环境及变化。</li>\n<li>显性操作的鲁棒性 在显性操作的作用下，能够用其另一同源染色体对其进行校正。</li>\n</ol>\n</blockquote>\n<h4 id=\"双基因座显性映射\"><a href=\"#双基因座显性映射\" class=\"headerlink\" title=\"双基因座显性映射\"></a>双基因座显性映射</h4><p>由 Hollstien 提出，每个二进制基因用两个基因来描述，一个称为 <strong>函数基因</strong>，取通常含义的 1 或 0；另一个称为 <strong>修饰基因</strong>，取值为 M（显性） 或 m（隐形）。当两个同源染色体中至少有一个修饰基因是M时，呈显性，否则为隐性。</p>\n<p>之后 Hollstien 简化为 单基因座显性映射 ，描述基 因的字符集为${0, 1, 1_{0}}$，其中 $1_{0}$ 为隐性的 1，1 为显性的 1。</p>\n<p><img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221008143428436.png\" alt=\"image-20221008143428436\"></p>\n<h4 id=\"与GA不同\"><a href=\"#与GA不同\" class=\"headerlink\" title=\"与GA不同\"></a>与GA不同</h4><ol>\n<li> 显性形状也能进化，同源染色体之间需进行交叉操作</li>\n<li> 变异操作需考虑隐性性状</li>\n<li> 对个体进行交叉、变异运算后，需进行显性操作</li>\n</ol>\n<h4 id=\"DiploidyGA算法\"><a href=\"#DiploidyGA算法\" class=\"headerlink\" title=\"DiploidyGA算法\"></a>DiploidyGA算法</h4><ol>\n<li>初始化，并设置进化代数计数器初值：t=1 。</li>\n<li>随机产生具有二倍体结构的初始群体 P(0)。</li>\n<li>对初始群体 P(0) 进行显性操作。</li>\n<li>评价初始群体P(0)中各个个体的适应度。</li>\n<li>交叉操作：$P’(t)⬅Crossover[p(t)]$。由每两个随机配对的二倍体个体进行交叉操作时，共可产生四个单倍体个体。</li>\n<li>变异操作：$P’’(t)⬅Mutation[p’(t)]$ 。在对群体中各个个体进行变异操作时，需要考虑隐性基因的作用。</li>\n<li>对群体$P’’(t)$进行显性操作。</li>\n<li>评价群体$P’’(t)$中各个个体的适应度。</li>\n<li>个体选择、复制操作。</li>\n<li>终止条件判断。若不满足终止条件，则：ｔ⬅ｔ＋１，转到第３步，继续进行进化操作过程；若满足终止条件，则输出当前最优个体，结束。</li>\n</ol>\n<h4 id=\"变长度染色体遗传算法\"><a href=\"#变长度染色体遗传算法\" class=\"headerlink\" title=\"变长度染色体遗传算法\"></a>变长度染色体遗传算法</h4><ul>\n<li>编码 $$ X^{m}:(i_{1},v_{i})(i_{2},v_{2})···(i_{k},v_{k})···(i_{n},v_{n}) $$ $i_{k}$是所描述的基因在原常规染色体中的 <strong>基因座编号</strong>，$v_{k}$为对应的基因值。  例：  <img src=\"https://redamancy9189.oss-cn-beijing.aliyuncs.com/%E4%B8%AA%E4%BA%BA%E5%9B%BE%E5%BA%8A/image-20221008152328932.png\" alt=\"image-20221008152328932\"></li>\n<li>解码  这能有什么用？？？？这么能扯</li>\n</ul>\n<h4 id=\"算法步骤-MessyGA\"><a href=\"#算法步骤-MessyGA\" class=\"headerlink\" title=\"算法步骤(MessyGA)\"></a>算法步骤(MessyGA)</h4><ol>\n<li> 初始化。随机产生M个染色体，长度全部为 k的个体，以它们作为变长度遗传算法的初始个体集合P(0)，其中k为根据问题的不同而设定的一个参数，并且 $k ≤ l $。</li>\n<li> 适应度评价。</li>\n<li> 基本处理阶段。对群体P(t)施加选择算子，以保留适应度较高的个体。</li>\n<li> 并列处理阶段。对群体P(t)世家变异算子、切断算子和拼接算子，以生成新的个体。</li>\n<li> 重复2-4步，直到满足终止条件为止。</li>\n</ol>\n<blockquote>\n<p><strong>切断算子</strong></p>\n<p>切断算子以某一预先指定的概率，在变长度染色 体中随机选择一个基因座，在该处将个体的基因型 切断，使之成为二个个体的基因型 。</p>\n<p><strong>拼接算子</strong></p>\n<p>拼接算子以某一预先指定的概率，将二个个体的 基因型连接在一起，使它们合并为一个个体的基因型。</p>\n</blockquote>\n<h2 id=\"遗传算法的运行参数\"><a href=\"#遗传算法的运行参数\" class=\"headerlink\" title=\"遗传算法的运行参数\"></a>遗传算法的运行参数</h2><ul>\n<li>编码串的长度 l</li>\n<li>群体大小M（一般建议取值20~100）</li>\n<li>交叉概率$P_{c}$（一般建议取值0.4~0.99）</li>\n<li>变异概率$P_{m}$（一般建议取值0.0001~0.1）</li>\n<li>终止代数T（一般建议取值100~1000）<ul>\n<li>  规定最大迭代次数T</li>\n<li>  规定最小的偏差</li>\n<li>  观察适应度的变化趋势</li>\n</ul>\n</li>\n<li>代沟G<ul>\n<li>表示每一代群体中被替换掉的个体在全部个体中所占的百分比。</li>\n<li>G=1.0表示群体中的全部个体都是新产生的。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"约束条件的处理方法\"><a href=\"#约束条件的处理方法\" class=\"headerlink\" title=\"约束条件的处理方法\"></a>约束条件的处理方法</h2><h4 id=\"搜索空间限定法\"><a href=\"#搜索空间限定法\" class=\"headerlink\" title=\"搜索空间限定法\"></a>搜索空间限定法</h4><p><strong>对遗传算法的搜索空间的大小加以限制</strong>，使得搜索空间中表示一个个体的点与解空间中表示一个可行解的点有一一对应关系。</p>\n<p>实现方法：1、用编码方法来保证总是能够产生出在解空间中有对应可行解的染色体。</p>\n<p>2、用程序来保证直到产生出在解空间中有对应可行解的染色体之前，一直进行交叉运算和变异运算。</p>\n<h4 id=\"可行解变换法\"><a href=\"#可行解变换法\" class=\"headerlink\" title=\"可行解变换法\"></a>可行解变换法</h4><p>寻找出一种个体基因型个个体表现型之间的<strong>多对一的变换关系</strong>，使进化过程中所产生的个体总能够通过这个变化而转化成解空间中满足约束条件的一个可行解。</p>\n<h4 id=\"罚函数法\"><a href=\"#罚函数法\" class=\"headerlink\" title=\"罚函数法\"></a>罚函数法</h4><p>对在解空间中无对应的可行解的个体，计算其适应度时，处以一个罚函数，从而降低个体适应度，使该个体被遗传到下一代群体中的机会减少。</p>\n<p>下式对个体适应度进行调整： $$ F’(X)=\\left{\\begin{matrix} F(X) \\quad \\quad \\qquad X 满足约束条件\\ F(X)-P(X) \\quad X不满足约束条件 \\end{matrix}\\right. $$ F(X)为原适应度，F’(X)为新适应度，P(X)为罚函数。</p>\n<h2 id=\"小生境遗传算法\"><a href=\"#小生境遗传算法\" class=\"headerlink\" title=\"小生境遗传算法\"></a>小生境遗传算法</h2><p>在生物学上，**小生境(Niche)**是指特定环境下的一种生存环境。</p>\n<blockquote>\n<p>生物在 其进化过程中，一般总是与自己相同的物种生活在一起，共同繁衍后 代；它们也都是在某一特定的地理区域中生存。</p>\n</blockquote>\n<h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h3><ol>\n<li> <a href=\"#%E5%9F%BA%E4%BA%8E%E9%A2%84%E9%80%89%E6%8B%A9%E7%9A%84%E5%B0%8F%E7%94%9F%E5%A2%83%E7%AE%97%E6%B3%95\">基于预选择的小生境———（Cavicchio，1970）</a></li>\n<li> <a href=\"#%E5%9F%BA%E4%BA%8E%E6%8E%92%E6%8C%A4%E7%9A%84%E5%B0%8F%E7%94%9F%E5%A2%83%E7%AE%97%E6%B3%95\">基于排挤的小生境————（De Jong，1975）</a></li>\n<li> <a href=\"#%E5%9F%BA%E4%BA%8E%E5%85%B1%E4%BA%AB%E5%87%BD%E6%95%B0%E7%9A%84%E5%B0%8F%E7%94%9F%E5%A2%83%E7%AE%97%E6%B3%95\">基于共享函数的小生境——（Goldberg和Richardson，1987）</a></li>\n</ol>\n<h4 id=\"基于预选择的小生境算法\"><a href=\"#基于预选择的小生境算法\" class=\"headerlink\" title=\"基于预选择的小生境算法\"></a>基于预选择的小生境算法</h4><p>仅当新产生的子代个体的适应度 <strong>超过其父代个体的适应度</strong> 时，所产生出的子代个体才能替换其父代个体而遗传到下 一代群体中，否则父代个体仍保留在下一代群体中。</p>\n<h4 id=\"基于排挤的小生境算法\"><a href=\"#基于排挤的小生境算法\" class=\"headerlink\" title=\"基于排挤的小生境算法\"></a>基于排挤的小生境算法</h4><p>算法步骤：</p>\n<ol>\n<li> 初始化。建立初始群体，确定遗传参数，设定排挤银子CF。</li>\n<li> 计算个体适应度。</li>\n<li> 遗传操作（选择、交叉和变异）</li>\n<li> 从当前群体中随机选取群体规模的1/CF个个体组成<strong>排挤因子成员</strong>。</li>\n<li> 比较新产生的个体与排挤因子成员中最相似的个体，形成新的当前群体。</li>\n<li> 重复2-6步，直到满足终止条件。</li>\n</ol>\n<p><strong>特点</strong>：随着排挤过程的进行，群体中的个体逐渐被分类，从而形成各个小的生存环 境，并维持了群体的多样性。</p>\n<h4 id=\"基于共享函数的小生境算法\"><a href=\"#基于共享函数的小生境算法\" class=\"headerlink\" title=\"基于共享函数的小生境算法\"></a>基于共享函数的小生境算法</h4><blockquote>\n<p><strong>共享函数</strong>(sharing function)：用来确定每个个体在群体中的 <strong>共享度</strong>。一个个体的共享度等于该个体与群体内的 各个其它个体之间的共享函数值的总和。</p>\n<p>设 $d_{ij}$ 表示个体 i 和个体 j 之间的关系密切程度，S为共享函数，$S_{i}$ 表示个体 i 在群体中的共享度: $$ S_{i}=\\sum_{j=1}^{n}S(d_{ij}) $$ 个体适应度$f(i)$: $$ f_{s}(i)=f(i)/S_{i} $$</p>\n</blockquote>\n<p>通过反映个体之间相似程度的 <strong>共享函数</strong> 来调整群体中各个个体的适应度，从而在这以后的群体进化过程中，算法能够依据这个调整后的新适应度来进行选择运算，以维护群体的多样性，创造出小生境的进化环境。</p>\n<h3 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h3><h4 id=\"多峰值函数全局最优化\"><a href=\"#多峰值函数全局最优化\" class=\"headerlink\" title=\"多峰值函数全局最优化\"></a>多峰值函数全局最优化</h4><p>在多峰值函数全局最优化中的应用：（没啥用。。。）</p>\n<ul>\n<li>  首先两两比较群体中各个个体之间的距离，若这个距离在 预先指定的距离L之内的话，再比较两者之间的适应度大 小，并对其中适应度较低的个体施加一个较强的罚函数， 极大地降低其适应度，这样，对于在预先指定的某一距离 L之内的两个个体，其中较差的个体经处理后其适应度变 得更差，它在后面的进化过程中被淘汰掉的概率就极大。</li>\n<li>  也就是说，在距离L之内将只存在一个优良的个体，从而 既维护了群体的多样性，又使得各个个体之间保持一定的 距离，并使得个体能够在整个约束空间中分散开来，这样就实现了一种小生境遗传算法。</li>\n</ul>\n<h4 id=\"算法过程-1\"><a href=\"#算法过程-1\" class=\"headerlink\" title=\"算法过程\"></a>算法过程</h4><ol>\n<li>设置进化代数计数器t⬅1；随机生成M个初始个体组成初始群体P(t)，并求出各个个体的适应度$F_{i}\\quad(i=1,2,···,M)$。</li>\n<li>依据各个个体的适应度对其进行降序排序，记忆前N个个体(N&lt;M)。</li>\n<li>遗传运算（选择算子、交叉算子和变异算子）</li>\n<li>小生境淘汰。将变异算子得到的 M 个个体和②中所记忆的N个个体合并在一起，得到一个含有M+N个个体的新群体；对这M+N个个体，求出每两个个体$X_{i}$和$X_{j}$之间的<a href=\"https://baike.baidu.com/item/%E6%B5%B7%E6%98%8E%E8%B7%9D%E7%A6%BB\">海明距离</a>。当 $X_{i}-X_{j}&lt;L$ 时，比较个体$X_{i}和X_{j}$的适应度大小，并对其中适应度较低的个体处以罚函数： $$ F_{min}(x_{i},x_{j})=Penalty $$</li>\n<li>依据这M+N个个体的新适应度对各个个体进行降序排序，记忆前N个个体。</li>\n<li>结束判定</li>\n</ol>\n<h2 id=\"混合遗传算法\"><a href=\"#混合遗传算法\" class=\"headerlink\" title=\"混合遗传算法\"></a>混合遗传算法</h2><h4 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>  引入了局部搜索过程</li>\n<li>  增加了编码变换操作过程</li>\n</ul>\n<h4 id=\"基本原则\"><a href=\"#基本原则\" class=\"headerlink\" title=\"基本原则\"></a>基本原则</h4><ol>\n<li> 尽量采用原有算法的编码</li>\n<li> 利用原有算法的优点</li>\n<li> 改进遗传算子</li>\n</ol>\n<h2 id=\"模拟退火算法\"><a href=\"#模拟退火算法\" class=\"headerlink\" title=\"*模拟退火算法\"></a>*模拟退火算法</h2><p>基于金属退火的机理而建立起的一种全局最优化方法，它能够以随机搜索技术从概率的意义上找出目标函数的全局最小点。</p>\n<h4 id=\"构成要素-1\"><a href=\"#构成要素-1\" class=\"headerlink\" title=\"构成要素\"></a>构成要素</h4><ol>\n<li> 搜索空间</li>\n<li> 能量函数E(x)</li>\n<li> 状态转移规则P</li>\n<li> 冷却进度表T(t)</li>\n</ol>\n<h4 id=\"算法过程-2\"><a href=\"#算法过程-2\" class=\"headerlink\" title=\"算法过程\"></a>算法过程</h4><ol>\n<li> 随机产生一个初始解，以它作为当前最优解，并计算目标函数值。</li>\n<li> 设置初始温度：$T=T_{0}$。</li>\n<li> 设置循环计数器初值：t=1。</li>\n<li> 对当前最优解作一随机变动,产生一新的解。计算新的目标函数值，并计算 目标函数值的增量D。</li>\n<li> 如果D＜0，则接受该新产生的解为当前最优解； 如果D＞0，则以概率p = exp(-D/T)接受该新产生的解为当前最优解。</li>\n<li> 如果t＜终止步数，则：t=t+1，转向第4步。</li>\n<li> 如果未到达冷却状态，则：T=T(t)，转向第3步； 如果已到达冷却状态，则：输出当前最优点，计算结束。</li>\n</ol>\n<p>略。。。</p>\n<h1 id=\"数值函数和多目标优化\"><a href=\"#数值函数和多目标优化\" class=\"headerlink\" title=\"数值函数和多目标优化\"></a>数值函数和多目标优化</h1><h2 id=\"数值函数优化\"><a href=\"#数值函数优化\" class=\"headerlink\" title=\"数值函数优化\"></a>数值函数优化</h2><h4 id=\"纯数值函数优化\"><a href=\"#纯数值函数优化\" class=\"headerlink\" title=\"纯数值函数优化\"></a>纯数值函数优化</h4><p>专门设计了一些具有复杂数学特征的<strong>纯数学函数</strong>，通过遗传算法对这些函数的优化计算情况来测试各种遗传算法的性能。</p>\n<h4 id=\"常用测试函数\"><a href=\"#常用测试函数\" class=\"headerlink\" title=\"常用测试函数\"></a>常用测试函数</h4><ol>\n<li> 连续函数或离散函数</li>\n<li> 凹函数或凸函数</li>\n<li> 二次函数或非二次函数</li>\n<li> 低维函数或高维函数</li>\n<li> 确定性函数或随机性函数</li>\n<li> 单峰值函数或多峰值函数</li>\n</ol>\n<h2 id=\"多目标优化\"><a href=\"#多目标优化\" class=\"headerlink\" title=\"多目标优化\"></a>多目标优化</h2><h4 id=\"GA的性能评估\"><a href=\"#GA的性能评估\" class=\"headerlink\" title=\"*GA的性能评估\"></a>*GA的性能评估</h4><ol>\n<li>适应值函数计算次数 发现同样适应性的个体，或者找到同样质 量的可行解，所需要的关于个体评价的适应值函数的计算次数（function evaluations）。<blockquote>\n<p>该值越小说明相应GA的搜索效率越高。</p>\n</blockquote>\n</li>\n<li>在线和离线性能指标<ul>\n<li>在线性能指标  含义：表示了算法从开始运行一直到当前为止的 时间段内性能值的平均值，它反映了算法的<strong>动态性能</strong>。  在环境e下策略s的在线性能 $X_{e}(s)$定义为： $$ X_{e}(s)=\\frac{1}{T}\\sum_{t=1}^{T}f_{e}(t) $$ $f_{e}(t)$是在环境e下第t时刻的平均目标函数值或平均适应度。</li>\n<li>离线性能指标  含义：表示了算法运行过程中各进 化代的最佳性能值的累积平均，它反映了算法的<strong>收敛性能</strong>。  在环境e下策略s的在线性能 $X_{e}^{*}(s)$定义为： $$ X_{e}^{<em>}(s)=\\frac{1}{T}\\sum</em>{t=1}^{T}f_{e}^{_}(t) $$ $f_{e}^{ *}(s)$是在环境 e 下［0, t］时间段内最好的目标函数值或最大的适应度。</li>\n</ul>\n</li>\n<li>最优解搜索性能 GA用于函数优化的目的就是发现问题的全局最优解， 所以通常采用当前群体发现的最佳可行解的改善情况作为度量GA搜索能力的基本指标。</li>\n</ol>\n<h4 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h4><ol>\n<li>设$𝑋 ⊆ 𝑅^{𝑚}$是多目标优化模型的约束集， $𝑓(𝑥) ∈ 𝑅^{𝑝}$是多目标优化时的向量目标函数，$ 𝑥1 ∈ 𝑋, 𝑥2 ∈ 𝑋$ 。若 $$ 𝑓_{𝑘}(𝑥_{1}) ≤ 𝑓_{𝑘}(𝑥_{2}) (∀𝑘 = 1,2, ⋯ 𝑝) $$ 并且 $$ 𝑓_{𝑘}(𝑥1) &lt; 𝑓_{𝑘}(𝑥2) (∃𝑘 = 1,2, ⋯ 𝑝) $$ 则称解𝑥1比解𝑥2优越。</li>\n<li>设$𝑋 ⊆ 𝑅^{𝑚}$ 是多目标优化模型的约束集， $𝑓(𝑥) ∈ 𝑅^{𝑝}$ 是向量目标函数。若 $𝑥^{∗} ∈ 𝑋$，并且$x^{<em>}$比 X 中的所有其他点都优越，则称 $x^{</em>}$是多目标极小化模型的最优解。</li>\n<li>设$𝑋 ⊆ 𝑅^{𝑚}$ 是多目标优化模型的约束集，$ 𝑓(𝑥) ∈ 𝑅^{𝑝}$ 是向量目标函数。若 $\\tilde{𝑥}∈ 𝑋$，并且不存在比 $\\tilde{𝑥}$ 更优越的 $x $，则称 $\\tilde{𝑥}$ 为多目标极小化模型的 <strong>Pareto最优解</strong>，或称为非劣解。</li>\n</ol>\n<blockquote>\n<p>多目标优化问题的最优解x *就是使向量目标函数f(x) 的每一个子目标函数都同时到达最优点的解.</p>\n<p>多目标优化问题的Pareto最优解仅仅只是它的一个可以接受的“不坏”的解，并且通常的多目标优化问题大多都具有很多个Pareto最优解.</p>\n<p><strong>求解多目标优化问题的首要步骤和关键步骤是求出其 所有的Pareto最优解</strong>.</p>\n</blockquote>\n<h4 id=\"求解算法\"><a href=\"#求解算法\" class=\"headerlink\" title=\"求解算法\"></a>求解算法</h4><ol>\n<li>权重系数变化法 对于一个多目标优化问题，若给其各个子目标函数 $𝑓_{𝑖 }(𝑥)\\quad (i＝1，2，…，p)$，赋予不同的权重$𝑤_{i}(i＝1，2，… ，p)$，其中各$𝑤_{𝑖}$的大小代表相应子目标$𝑓_{𝑖}(𝑥)$ 在多目标优化问题中的重要程度。则各个子目标函数的线性加权和可表示为: $$ u(f(x))=\\sum_{i=1}^{p}w_{i}f_{i}(x) $$ 以这个线性加权和作为多目标优化问题的评价函数，则多目标优化问题就可转化为单目标优化问题。</li>\n<li>并列选择法<ol>\n<li> 先将群体中的全部个体按子目标函数的数目均等地划分为一些子群体</li>\n<li> 对每个子群体分配一个子目标函数，各个子目标函数在其相应的子群体中独立地进行选择运算</li>\n<li> 各自选择出一些适应度较高的个体组成一个新的子群体</li>\n<li> 所有这些新生成的子群体合并为一个完整的群体，在这个完 整的群体中进行交叉运算和变异运算</li>\n<li> 不断地进行“分割—并列选择—合并”过程</li>\n</ol>\n 最终可求出多目标优化问题的Pareto最优解。</li>\n<li>排序选择法 基于“Pareto最优个体”的概念来对群体中的各个个体进行排序，依据这个排列次序来进行进化过程中的选择运算。从而使得排在前面的Pareto最优个体将有更多的机会遗传到下一代群体中。如此这样经过一定代数的循环之后，最终就可求出多目标优化问题的Pareto最优解。</li>\n<li>*共享函数法</li>\n<li>*混合法</li>\n</ol>\n<h1 id=\"粒子群优化算法\"><a href=\"#粒子群优化算法\" class=\"headerlink\" title=\"粒子群优化算法\"></a>粒子群优化算法</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h4 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h4><p>粒子群优化算法（Particle Swarm Optimization，PSO）是进化计算的一个分支，是一种模拟自然界的生物活动的随机搜索算法。</p>\n<blockquote>\n<p>PSO 模拟了自然界鸟群捕食和鱼群捕食的过程。通过群体中的协作寻找到问题的全局最优解。它是 1995 年由美国学者 <strong>Eberhart</strong> 和 <strong>Kennedy</strong> 提出的。</p>\n<p>设想这样一个场景：一群鸟在随机搜索食物。已知在这块区域里只有一块食物，所有的鸟都不知道食物在哪里，但它们能感受到当前的位置离食物还有多远。</p>\n<p>那么，找到食物的最优策略是什么呢？</p>\n<ul>\n<li>  搜寻目前离食物最近的鸟的周围区域</li>\n<li>  根据自己飞行的经验判断食物的所在</li>\n</ul>\n<p><strong>PSO的基础——信息的社会共享</strong></p>\n</blockquote>\n<p>每个寻优的问题解都被想像成一只鸟，称为“粒子”，所有粒子都在一个 N 维空间进行搜索； 所有的粒子都由一个fitness function 确定适应值以判断目前的位置好坏； 每一个粒子必须赋予记忆功能，能记住所搜寻到的最佳位置；每一个粒子还有一个速度以决定飞行的距离和方向。这个速度根据它本身的飞 行经验以及同伴的飞行经验进行动态调整。</p>\n<h4 id=\"特点-2\"><a href=\"#特点-2\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li>优点<ol>\n<li> 设置参数较少</li>\n<li> 易于理解和描述</li>\n<li> 收敛速度较好</li>\n<li> 实现容易</li>\n</ol>\n</li>\n<li>缺点<ol>\n<li> 容易陷入局部最优</li>\n<li> 收敛精度不高</li>\n<li> 后期收敛速度较慢</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"算法流程\"><a href=\"#算法流程\" class=\"headerlink\" title=\"算法流程\"></a>算法流程</h2><ol>\n<li>初始化 初始化粒子群体（群体规模为n），包括随机位置和速度。</li>\n<li>评估 根据适应度函数，评估每个粒子的适应度。</li>\n<li>找到局部最优 对每个粒子，将其当前适应值与其个体历史最佳位置（Pbest）对应的适应度作比较，如果当前的适应度更高，则将用当前位置更新历史最佳位置Pbest。</li>\n<li>找到全局最优 对每个粒子，将其当前适应值与全局最佳位置（Gbest）对应的适应度作比较，如果当前的适应度更高，则将用当前粒子的位置更新全局最佳位置Gbest。</li>\n<li>更新 根据公式 $$ v_{k+1}=c_{0}v_{k}+c_{1}\\xi (p_{k}-x_{k})+c_{2}\\eta(p_{g}-x_{k})\\ x_{k+1}=x_{k}+v_{k+1} $$ 更新每个粒子的速度和位置</li>\n<li> 若未达终止条件，则回到第2步</li>\n</ol>"},{"title":"Hello World","thumbnail":"https://redamancy9189.oss-cn-beijing.aliyuncs.com/Icons/%E7%AB%99%E7%82%B9logo.png","cover":"https://redamancy9189.oss-cn-beijing.aliyuncs.com/Icons/%E7%AB%99%E7%82%B9logo.png","_content":"# 考研结束，博客重启\n从2023年5月份准备考研到2024年3月，我的博客已经闲置了将近半年之久....\n\n### 考研心路\n去年3月份找工作的时候，想着能找一份不错的前端实习开发，结果大厂小厂投了十几家，过了一个月之久都没什么进展。。。。\n\n无奈之下，5月份辞掉老师那边的实习工作，开始备战24考研，妄想重开。\n\n## 备战历程\n\n。。。3.12\n后续更新\n\n## 再说说博客\n\n8月份————我的阿里轻量云服务器过期了\n\n9月份————我的域名 <u>wangwangyz.site</u>过期了\n\n期间在认真准备考研（基础太差...）, 导致我的网站以及我的服务器任何脚本、程序都没来得及备份，\n\n## 重新开始\n\n这次我的目标不再是前端方向（以前的还是太烂了...），而是C++后台开发和杂谈大模型相关的了（要开始好好规划和准备未来了😫😫😫不能贪玩了）。\n","source":"_posts/Hello-Stellar.md","raw":"---\ntitle: Hello World\nthumbnail: https://redamancy9189.oss-cn-beijing.aliyuncs.com/Icons/%E7%AB%99%E7%82%B9logo.png\ncover: https://redamancy9189.oss-cn-beijing.aliyuncs.com/Icons/%E7%AB%99%E7%82%B9logo.png\n---\n# 考研结束，博客重启\n从2023年5月份准备考研到2024年3月，我的博客已经闲置了将近半年之久....\n\n### 考研心路\n去年3月份找工作的时候，想着能找一份不错的前端实习开发，结果大厂小厂投了十几家，过了一个月之久都没什么进展。。。。\n\n无奈之下，5月份辞掉老师那边的实习工作，开始备战24考研，妄想重开。\n\n## 备战历程\n\n。。。3.12\n后续更新\n\n## 再说说博客\n\n8月份————我的阿里轻量云服务器过期了\n\n9月份————我的域名 <u>wangwangyz.site</u>过期了\n\n期间在认真准备考研（基础太差...）, 导致我的网站以及我的服务器任何脚本、程序都没来得及备份，\n\n## 重新开始\n\n这次我的目标不再是前端方向（以前的还是太烂了...），而是C++后台开发和杂谈大模型相关的了（要开始好好规划和准备未来了😫😫😫不能贪玩了）。\n","slug":"Hello-Stellar","published":1,"date":"2024-03-12T02:24:18.684Z","updated":"2024-03-12T10:36:50.265Z","_id":"cltns37rr0000wry1b307blzq","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"考研结束，博客重启\"><a href=\"#考研结束，博客重启\" class=\"headerlink\" title=\"考研结束，博客重启\"></a>考研结束，博客重启</h1><p>从2023年5月份准备考研到2024年3月，我的博客已经闲置了将近半年之久….</p>\n<h3 id=\"考研心路\"><a href=\"#考研心路\" class=\"headerlink\" title=\"考研心路\"></a>考研心路</h3><p>去年3月份找工作的时候，想着能找一份不错的前端实习开发，结果大厂小厂投了十几家，过了一个月之久都没什么进展。。。。</p>\n<p>无奈之下，5月份辞掉老师那边的实习工作，开始备战24考研，妄想重开。</p>\n<h2 id=\"备战历程\"><a href=\"#备战历程\" class=\"headerlink\" title=\"备战历程\"></a>备战历程</h2><p>。。。3.12<br>后续更新</p>\n<h2 id=\"再说说博客\"><a href=\"#再说说博客\" class=\"headerlink\" title=\"再说说博客\"></a>再说说博客</h2><p>8月份————我的阿里轻量云服务器过期了</p>\n<p>9月份————我的域名 <u>wangwangyz.site</u>过期了</p>\n<p>期间在认真准备考研（基础太差…）, 导致我的网站以及我的服务器任何脚本、程序都没来得及备份，</p>\n<h2 id=\"重新开始\"><a href=\"#重新开始\" class=\"headerlink\" title=\"重新开始\"></a>重新开始</h2><p>这次我的目标不再是前端方向（以前的还是太烂了…），而是C++后台开发和杂谈大模型相关的了（要开始好好规划和准备未来了😫😫😫不能贪玩了）。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"考研结束，博客重启\"><a href=\"#考研结束，博客重启\" class=\"headerlink\" title=\"考研结束，博客重启\"></a>考研结束，博客重启</h1><p>从2023年5月份准备考研到2024年3月，我的博客已经闲置了将近半年之久….</p>\n<h3 id=\"考研心路\"><a href=\"#考研心路\" class=\"headerlink\" title=\"考研心路\"></a>考研心路</h3><p>去年3月份找工作的时候，想着能找一份不错的前端实习开发，结果大厂小厂投了十几家，过了一个月之久都没什么进展。。。。</p>\n<p>无奈之下，5月份辞掉老师那边的实习工作，开始备战24考研，妄想重开。</p>\n<h2 id=\"备战历程\"><a href=\"#备战历程\" class=\"headerlink\" title=\"备战历程\"></a>备战历程</h2><p>。。。3.12<br>后续更新</p>\n<h2 id=\"再说说博客\"><a href=\"#再说说博客\" class=\"headerlink\" title=\"再说说博客\"></a>再说说博客</h2><p>8月份————我的阿里轻量云服务器过期了</p>\n<p>9月份————我的域名 <u>wangwangyz.site</u>过期了</p>\n<p>期间在认真准备考研（基础太差…）, 导致我的网站以及我的服务器任何脚本、程序都没来得及备份，</p>\n<h2 id=\"重新开始\"><a href=\"#重新开始\" class=\"headerlink\" title=\"重新开始\"></a>重新开始</h2><p>这次我的目标不再是前端方向（以前的还是太烂了…），而是C++后台开发和杂谈大模型相关的了（要开始好好规划和准备未来了😫😫😫不能贪玩了）。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cltnrar3t0009jry1bsr0ar07","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar45000kjry1792wb459"},{"post_id":"cltnrar40000djry1hmkbf756","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar4a000sjry1gbbt9ubr"},{"post_id":"cltnrar40000djry1hmkbf756","category_id":"cltnrar3o0004jry1a961hiu9","_id":"cltnrar4b000xjry1e4c92kur"},{"post_id":"cltnrar44000jjry15mu54r7w","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar4d000zjry1cs4wdrwm"},{"post_id":"cltnrar3q0006jry1e8cl66qx","category_id":"cltnrar46000mjry10ezr8j6b","_id":"cltnrar4f0013jry1c5ujc4ri"},{"post_id":"cltnrar47000pjry1ead6ajsa","category_id":"cltnrar46000mjry10ezr8j6b","_id":"cltnrar4g0016jry1aqkt2w9x"},{"post_id":"cltnrar47000pjry1ead6ajsa","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar4j001ajry1g4jjg2b9"},{"post_id":"cltnrar49000rjry1azhcg7qo","category_id":"cltnrar46000mjry10ezr8j6b","_id":"cltnrar4o001djry16xc43f9o"},{"post_id":"cltnrar49000rjry1azhcg7qo","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar4q001gjry196tofigr"},{"post_id":"cltnrar3b0000jry10c0abu74","category_id":"cltnrar3o0004jry1a961hiu9","_id":"cltnrar4r001jjry1g0yi7dzs"},{"post_id":"cltnrar3b0000jry10c0abu74","category_id":"cltnrar4a000ujry185qgdqbh","_id":"cltnrar4t001njry1145x3yi0"},{"post_id":"cltnrar4d0010jry191p7c2pz","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar4v001rjry13slo53vz"},{"post_id":"cltnrar4c000yjry10trw8l01","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar4x001vjry12i2thka3"},{"post_id":"cltnrar4c000yjry10trw8l01","category_id":"cltnrar4e0011jry18khxhfsr","_id":"cltnrar4y001zjry113q292kl"},{"post_id":"cltnrar4f0014jry1bdz8hvha","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar500022jry15inido8g"},{"post_id":"cltnrar3j0001jry14cgo4pum","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar510024jry14lf7dhyv"},{"post_id":"cltnrar3j0001jry14cgo4pum","category_id":"cltnrar4e0011jry18khxhfsr","_id":"cltnrar530028jry1f48q7l9c"},{"post_id":"cltnrar4g0017jry16jwt33h8","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar54002ajry18lqhdudg"},{"post_id":"cltnrar4n001cjry1fyqh0hr7","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar56002fjry1a8271g1r"},{"post_id":"cltnrar41000fjry16vnx4m1d","category_id":"cltnrar4e0011jry18khxhfsr","_id":"cltnrar58002ijry1fnjrgvrv"},{"post_id":"cltnrar3m0003jry1a09r6xa9","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar59002mjry11mxucb0d"},{"post_id":"cltnrar3m0003jry1a09r6xa9","category_id":"cltnrar4e0011jry18khxhfsr","_id":"cltnrar59002pjry12376bvuh"},{"post_id":"cltnrar4o001ejry133ts4bzv","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar5a002tjry13i749aiy"},{"post_id":"cltnrar4o001ejry133ts4bzv","category_id":"cltnrar4e0011jry18khxhfsr","_id":"cltnrar5b002wjry11ks3220y"},{"post_id":"cltnrar4q001ijry167eue39n","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar5c0030jry1d6rzekrz"},{"post_id":"cltnrar4q001ijry167eue39n","category_id":"cltnrar4e0011jry18khxhfsr","_id":"cltnrar5d0033jry1dgah6tma"},{"post_id":"cltnrar3p0005jry1405v5bnk","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar5e0037jry18npzfy0j"},{"post_id":"cltnrar3p0005jry1405v5bnk","category_id":"cltnrar4e0011jry18khxhfsr","_id":"cltnrar5f0039jry10lc3e1ft"},{"post_id":"cltnrar4v001tjry1c7kdeeut","category_id":"cltnrar46000mjry10ezr8j6b","_id":"cltnrar5g003bjry1fet53x7s"},{"post_id":"cltnrar4v001tjry1c7kdeeut","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar5k003ejry196evc73f"},{"post_id":"cltnrar45000ljry1azx5e7m3","category_id":"cltnrar46000mjry10ezr8j6b","_id":"cltnrar5k003gjry180zz8rju"},{"post_id":"cltnrar45000ljry1azx5e7m3","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar5l003jjry117fe6yml"},{"post_id":"cltnrar45000ljry1azx5e7m3","category_id":"cltnrar4e0011jry18khxhfsr","_id":"cltnrar5l003ljry11iwe7fo7"},{"post_id":"cltnrar4y0020jry13k0y1r6k","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar5l003ojry17c6fhzpq"},{"post_id":"cltnrar4x001xjry15hh21pcq","category_id":"cltnrar4e0011jry18khxhfsr","_id":"cltnrar5l003qjry14ch90yxl"},{"post_id":"cltnrar4x001xjry15hh21pcq","category_id":"cltnrar4a000ujry185qgdqbh","_id":"cltnrar5m003tjry18fw0h0pv"},{"post_id":"cltnrar4a000vjry11qmw6oxj","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar5m003vjry13ngt5f8e"},{"post_id":"cltnrar4a000vjry11qmw6oxj","category_id":"cltnrar4e0011jry18khxhfsr","_id":"cltnrar5m003xjry16goz3hrn"},{"post_id":"cltnrar500023jry196vo8hyj","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar5n003yjry19nds95qn"},{"post_id":"cltnrar500023jry196vo8hyj","category_id":"cltnrar4e0011jry18khxhfsr","_id":"cltnrar5n0040jry17f0ugim7"},{"post_id":"cltnrar510026jry1a9mg84u8","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar5n0042jry1hls7gzoa"},{"post_id":"cltnrar510026jry1a9mg84u8","category_id":"cltnrar4e0011jry18khxhfsr","_id":"cltnrar5n0045jry1474wbdoj"},{"post_id":"cltnrar530029jry17o7abu7j","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar5n0047jry1f7lx3dl2"},{"post_id":"cltnrar530029jry17o7abu7j","category_id":"cltnrar4e0011jry18khxhfsr","_id":"cltnrar5o004ajry13tl5bf48"},{"post_id":"cltnrar4t001pjry1a13z0qdw","category_id":"cltnrar520027jry16w2a74tw","_id":"cltnrar5o004bjry167o1br7o"},{"post_id":"cltnrar4t001pjry1a13z0qdw","category_id":"cltnrar4a000ujry185qgdqbh","_id":"cltnrar5o004djry1avdndygg"},{"post_id":"cltnrar55002djry17z32buol","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar5o004fjry13omq0o86"},{"post_id":"cltnrar55002djry17z32buol","category_id":"cltnrar4e0011jry18khxhfsr","_id":"cltnrar5p004ijry18nwkc16k"},{"post_id":"cltnrar4s001ljry154if8aay","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar5p004kjry18ur7flvf"},{"post_id":"cltnrar4s001ljry154if8aay","category_id":"cltnrar520027jry16w2a74tw","_id":"cltnrar5p004njry15iy51807"},{"post_id":"cltnrar56002hjry13w9r13lj","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar5p004pjry10fecg3k0"},{"post_id":"cltnrar56002hjry13w9r13lj","category_id":"cltnrar4e0011jry18khxhfsr","_id":"cltnrar5p004sjry12czmhyo4"},{"post_id":"cltnrar59002ojry166hgducj","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar5q004ujry1arwwahag"},{"post_id":"cltnrar58002kjry18t1ngbk3","category_id":"cltnrar46000mjry10ezr8j6b","_id":"cltnrar5q004xjry1fulf3zm0"},{"post_id":"cltnrar58002kjry18t1ngbk3","category_id":"cltnrar4e0011jry18khxhfsr","_id":"cltnrar5q004zjry1c1tr7gck"},{"post_id":"cltnrar5a002rjry15mhg8ti1","category_id":"cltnrar46000mjry10ezr8j6b","_id":"cltnrar5q0052jry12sstajxn"},{"post_id":"cltnrar5b002vjry1dzce8dw2","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar5q0054jry18jorfk07"},{"post_id":"cltnrar5b002vjry1dzce8dw2","category_id":"cltnrar4e0011jry18khxhfsr","_id":"cltnrar5q0056jry12lyt9z9o"},{"post_id":"cltnrar5c002yjry1653q7l20","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar5r0059jry18gt3825z"},{"post_id":"cltnrar5c002yjry1653q7l20","category_id":"cltnrar4e0011jry18khxhfsr","_id":"cltnrar5r005bjry1g1mr5iru"},{"post_id":"cltnrar5d0032jry1a6jadlzs","category_id":"cltnrar46000mjry10ezr8j6b","_id":"cltnrar5r005djry1bw0a4e9m"},{"post_id":"cltnrar5d0032jry1a6jadlzs","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar5r005fjry13065dm3k"},{"post_id":"cltnrar5d0035jry1ej32hvuz","category_id":"cltnrar46000mjry10ezr8j6b","_id":"cltnrar5s005ijry17i1ufebl"},{"post_id":"cltnrar5d0035jry1ej32hvuz","category_id":"cltnrar3s0008jry1f887200m","_id":"cltnrar5s005kjry18b71c8f5"}],"PostTag":[{"post_id":"cltnrar3b0000jry10c0abu74","tag_id":"cltnrar3l0002jry17nv9aks4","_id":"cltnrar41000ejry1daubeiq5"},{"post_id":"cltnrar3b0000jry10c0abu74","tag_id":"cltnrar3r0007jry17de03tjt","_id":"cltnrar42000gjry127r60d8z"},{"post_id":"cltnrar44000jjry15mu54r7w","tag_id":"cltnrar3w000bjry16q969wz9","_id":"cltnrar47000njry19svk476l"},{"post_id":"cltnrar3j0001jry14cgo4pum","tag_id":"cltnrar3w000bjry16q969wz9","_id":"cltnrar48000qjry1h65sgn50"},{"post_id":"cltnrar3j0001jry14cgo4pum","tag_id":"cltnrar43000ijry176jk70k7","_id":"cltnrar4a000tjry19mdzdh5u"},{"post_id":"cltnrar3m0003jry1a09r6xa9","tag_id":"cltnrar47000ojry12oiqfob6","_id":"cltnrar4g0015jry1d62sc0m6"},{"post_id":"cltnrar3m0003jry1a09r6xa9","tag_id":"cltnrar4b000wjry1cus91jte","_id":"cltnrar4j0018jry13qje6ecf"},{"post_id":"cltnrar3p0005jry1405v5bnk","tag_id":"cltnrar4e0012jry146e3f5gh","_id":"cltnrar4s001kjry16l4b491x"},{"post_id":"cltnrar3p0005jry1405v5bnk","tag_id":"cltnrar4j001bjry16t7v8yno","_id":"cltnrar4t001ojry1de5t7opk"},{"post_id":"cltnrar3t0009jry1bsr0ar07","tag_id":"cltnrar4q001hjry18aw4alti","_id":"cltnrar4v001sjry111d1a4hy"},{"post_id":"cltnrar4t001pjry1a13z0qdw","tag_id":"cltnrar4q001hjry18aw4alti","_id":"cltnrar4x001wjry18msv8evb"},{"post_id":"cltnrar510026jry1a9mg84u8","tag_id":"cltnrar4u001qjry17z39fsfh","_id":"cltnrar54002bjry1dkqd5mde"},{"post_id":"cltnrar530029jry17o7abu7j","tag_id":"cltnrar3w000bjry16q969wz9","_id":"cltnrar56002gjry113q0cb02"},{"post_id":"cltnrar530029jry17o7abu7j","tag_id":"cltnrar43000ijry176jk70k7","_id":"cltnrar58002jjry14qxy7bgc"},{"post_id":"cltnrar56002hjry13w9r13lj","tag_id":"cltnrar3w000bjry16q969wz9","_id":"cltnrar59002njry1914xesdx"},{"post_id":"cltnrar56002hjry13w9r13lj","tag_id":"cltnrar43000ijry176jk70k7","_id":"cltnrar59002qjry1gqj4apqr"},{"post_id":"cltnrar59002ojry166hgducj","tag_id":"cltnrar4b000wjry1cus91jte","_id":"cltnrar5b002ujry17vzqd1kn"},{"post_id":"cltnrar45000ljry1azx5e7m3","tag_id":"cltnrar4u001qjry17z39fsfh","_id":"cltnrar5b002xjry160hsbmdf"},{"post_id":"cltnrar45000ljry1azx5e7m3","tag_id":"cltnrar4y001yjry1gtbcdo3d","_id":"cltnrar5d0031jry1g52y9tm5"},{"post_id":"cltnrar45000ljry1azx5e7m3","tag_id":"cltnrar510025jry1ai8508il","_id":"cltnrar5d0034jry1guf723i4"},{"post_id":"cltnrar45000ljry1azx5e7m3","tag_id":"cltnrar54002cjry12sq42wb6","_id":"cltnrar5e0038jry1au4udpyi"},{"post_id":"cltnrar45000ljry1azx5e7m3","tag_id":"cltnrar58002ljry19a9f85z8","_id":"cltnrar5f003ajry13w6r8cdv"},{"post_id":"cltnrar47000pjry1ead6ajsa","tag_id":"cltnrar4u001qjry17z39fsfh","_id":"cltnrar5j003djry13f1sbm3o"},{"post_id":"cltnrar49000rjry1azhcg7qo","tag_id":"cltnrar3w000bjry16q969wz9","_id":"cltnrar5k003fjry165zjdciu"},{"post_id":"cltnrar49000rjry1azhcg7qo","tag_id":"cltnrar510025jry1ai8508il","_id":"cltnrar5k003hjry1hsnn1fwo"},{"post_id":"cltnrar4a000vjry11qmw6oxj","tag_id":"cltnrar3w000bjry16q969wz9","_id":"cltnrar5l003kjry1g4ps0s5r"},{"post_id":"cltnrar4a000vjry11qmw6oxj","tag_id":"cltnrar5e0036jry1ecpzelkr","_id":"cltnrar5l003mjry1b6l0e92x"},{"post_id":"cltnrar4c000yjry10trw8l01","tag_id":"cltnrar5g003cjry1fuw77q82","_id":"cltnrar5l003pjry111ihdc5l"},{"post_id":"cltnrar4c000yjry10trw8l01","tag_id":"cltnrar5e0036jry1ecpzelkr","_id":"cltnrar5m003rjry1a6o04axy"},{"post_id":"cltnrar4d0010jry191p7c2pz","tag_id":"cltnrar5e0036jry1ecpzelkr","_id":"cltnrar5m003ujry1gdvmavsb"},{"post_id":"cltnrar4f0014jry1bdz8hvha","tag_id":"cltnrar4b000wjry1cus91jte","_id":"cltnrar5n0041jry155tv6fp8"},{"post_id":"cltnrar4f0014jry1bdz8hvha","tag_id":"cltnrar54002cjry12sq42wb6","_id":"cltnrar5n0043jry18gh782p1"},{"post_id":"cltnrar4f0014jry1bdz8hvha","tag_id":"cltnrar58002ljry19a9f85z8","_id":"cltnrar5n0046jry14aemg36n"},{"post_id":"cltnrar4g0017jry16jwt33h8","tag_id":"cltnrar58002ljry19a9f85z8","_id":"cltnrar5n0048jry191owfq9i"},{"post_id":"cltnrar4n001cjry1fyqh0hr7","tag_id":"cltnrar4e0012jry146e3f5gh","_id":"cltnrar5o004ejry19v3ybf79"},{"post_id":"cltnrar4n001cjry1fyqh0hr7","tag_id":"cltnrar4u001qjry17z39fsfh","_id":"cltnrar5o004gjry1f3p3g8qo"},{"post_id":"cltnrar4n001cjry1fyqh0hr7","tag_id":"cltnrar5n0049jry1bnsiedrs","_id":"cltnrar5p004jjry1bfu4d8hi"},{"post_id":"cltnrar4n001cjry1fyqh0hr7","tag_id":"cltnrar4j001bjry16t7v8yno","_id":"cltnrar5p004ljry16i1x0o9b"},{"post_id":"cltnrar4o001ejry133ts4bzv","tag_id":"cltnrar4e0012jry146e3f5gh","_id":"cltnrar5p004ojry1ec2ad66u"},{"post_id":"cltnrar4o001ejry133ts4bzv","tag_id":"cltnrar3w000bjry16q969wz9","_id":"cltnrar5p004qjry10il3eve4"},{"post_id":"cltnrar4o001ejry133ts4bzv","tag_id":"cltnrar4u001qjry17z39fsfh","_id":"cltnrar5p004tjry152cv6m6s"},{"post_id":"cltnrar4o001ejry133ts4bzv","tag_id":"cltnrar5n0049jry1bnsiedrs","_id":"cltnrar5q004vjry18yaw06q1"},{"post_id":"cltnrar4o001ejry133ts4bzv","tag_id":"cltnrar4j001bjry16t7v8yno","_id":"cltnrar5q004yjry13sf3dm8p"},{"post_id":"cltnrar4q001ijry167eue39n","tag_id":"cltnrar4u001qjry17z39fsfh","_id":"cltnrar5q0050jry13b3k49nu"},{"post_id":"cltnrar4q001ijry167eue39n","tag_id":"cltnrar5n0049jry1bnsiedrs","_id":"cltnrar5q0053jry168gp3osm"},{"post_id":"cltnrar4q001ijry167eue39n","tag_id":"cltnrar4j001bjry16t7v8yno","_id":"cltnrar5q0055jry1glxkhaao"},{"post_id":"cltnrar4s001ljry154if8aay","tag_id":"cltnrar3w000bjry16q969wz9","_id":"cltnrar5r0058jry10c3z5o4c"},{"post_id":"cltnrar4s001ljry154if8aay","tag_id":"cltnrar5q004wjry1erb0fs36","_id":"cltnrar5r005ajry19v1b4brz"},{"post_id":"cltnrar4v001tjry1c7kdeeut","tag_id":"cltnrar5q0051jry165gz920v","_id":"cltnrar5r005ejry10l7sa71h"},{"post_id":"cltnrar4v001tjry1c7kdeeut","tag_id":"cltnrar5r0057jry18khs1x0n","_id":"cltnrar5r005gjry1fxwgb9tm"},{"post_id":"cltnrar4y0020jry13k0y1r6k","tag_id":"cltnrar47000ojry12oiqfob6","_id":"cltnrar5s005jjry13z2n5g94"},{"post_id":"cltnrar4y0020jry13k0y1r6k","tag_id":"cltnrar4b000wjry1cus91jte","_id":"cltnrar5s005ljry19g6m928t"},{"post_id":"cltnrar4y0020jry13k0y1r6k","tag_id":"cltnrar5e0036jry1ecpzelkr","_id":"cltnrar5s005njry19mtx94r2"},{"post_id":"cltnrar4y0020jry13k0y1r6k","tag_id":"cltnrar4q001hjry18aw4alti","_id":"cltnrar5s005ojry135kz60te"},{"post_id":"cltnrar500023jry196vo8hyj","tag_id":"cltnrar5r005hjry14kozarwj","_id":"cltnrar5t005tjry1cm6ka1ca"},{"post_id":"cltnrar500023jry196vo8hyj","tag_id":"cltnrar5s005mjry1c9ugd8hv","_id":"cltnrar5t005ujry187ar1dc1"},{"post_id":"cltnrar500023jry196vo8hyj","tag_id":"cltnrar5s005pjry1bntc4fha","_id":"cltnrar5t005wjry19bi4a74h"},{"post_id":"cltnrar500023jry196vo8hyj","tag_id":"cltnrar5s005qjry1hl9thl0x","_id":"cltnrar5t005xjry11h7o24fn"},{"post_id":"cltnrar500023jry196vo8hyj","tag_id":"cltnrar5s005rjry1cs7ob3s6","_id":"cltnrar5u005zjry18adl5i7c"},{"post_id":"cltnrar55002djry17z32buol","tag_id":"cltnrar3w000bjry16q969wz9","_id":"cltnrar5u0060jry14v7h3f82"},{"post_id":"cltnrar55002djry17z32buol","tag_id":"cltnrar5e0036jry1ecpzelkr","_id":"cltnrar5u0062jry12qsf3vcx"},{"post_id":"cltnrar55002djry17z32buol","tag_id":"cltnrar43000ijry176jk70k7","_id":"cltnrar5u0063jry15gnv74qn"},{"post_id":"cltnrar58002kjry18t1ngbk3","tag_id":"cltnrar5e0036jry1ecpzelkr","_id":"cltnrar5u0065jry11k5f49t5"},{"post_id":"cltnrar5a002rjry15mhg8ti1","tag_id":"cltnrar5r005hjry14kozarwj","_id":"cltnrar5u0066jry19ele515s"},{"post_id":"cltnrar5a002rjry15mhg8ti1","tag_id":"cltnrar3w000bjry16q969wz9","_id":"cltnrar5v0068jry1873z5rzf"},{"post_id":"cltnrar5a002rjry15mhg8ti1","tag_id":"cltnrar4u001qjry17z39fsfh","_id":"cltnrar5v0069jry13vew139o"},{"post_id":"cltnrar5b002vjry1dzce8dw2","tag_id":"cltnrar5u0061jry17haf6im0","_id":"cltnrar5v006bjry11da4a6zd"},{"post_id":"cltnrar5b002vjry1dzce8dw2","tag_id":"cltnrar47000ojry12oiqfob6","_id":"cltnrar5v006cjry1f0vig0bl"},{"post_id":"cltnrar5c002yjry1653q7l20","tag_id":"cltnrar5u0061jry17haf6im0","_id":"cltnrar5v006djry17lzx49x1"},{"post_id":"cltnrar5c002yjry1653q7l20","tag_id":"cltnrar4j001bjry16t7v8yno","_id":"cltnrar5v006ejry1f9yr398n"},{"post_id":"cltnrar5d0032jry1a6jadlzs","tag_id":"cltnrar5r0057jry18khs1x0n","_id":"cltnrar5v006fjry1334x6a47"},{"post_id":"cltnrar5d0035jry1ej32hvuz","tag_id":"cltnrar5v006ajry1bf8oa9h0","_id":"cltnrar5v006gjry10c9z5p7o"}],"Tag":[{"name":"感悟","_id":"cltnrar3l0002jry17nv9aks4"},{"name":"生活","_id":"cltnrar3r0007jry17de03tjt"},{"name":"Linux","_id":"cltnrar3w000bjry16q969wz9"},{"name":"树莓派","_id":"cltnrar43000ijry176jk70k7"},{"name":"html","_id":"cltnrar47000ojry12oiqfob6"},{"name":"Javascript","_id":"cltnrar4b000wjry1cus91jte"},{"name":"Apache","_id":"cltnrar4e0012jry146e3f5gh"},{"name":"WordPress","_id":"cltnrar4j001bjry16t7v8yno"},{"name":"分享","_id":"cltnrar4q001hjry18aw4alti"},{"name":"MySQL","_id":"cltnrar4u001qjry17z39fsfh"},{"name":"NestJS","_id":"cltnrar4y001yjry1gtbcdo3d"},{"name":"Nginx","_id":"cltnrar510025jry1ai8508il"},{"name":"TypeScript","_id":"cltnrar54002cjry12sq42wb6"},{"name":"Vue","_id":"cltnrar58002ljry19a9f85z8"},{"name":"Python","_id":"cltnrar5e0036jry1ecpzelkr"},{"name":"Numpy","_id":"cltnrar5g003cjry1fuw77q82"},{"name":"PHP","_id":"cltnrar5n0049jry1bnsiedrs"},{"name":"Windows","_id":"cltnrar5q004wjry1erb0fs36"},{"name":"HTTP","_id":"cltnrar5q0051jry165gz920v"},{"name":"计算机网络","_id":"cltnrar5r0057jry18khs1x0n"},{"name":"C","_id":"cltnrar5r005hjry14kozarwj"},{"name":"操作系统","_id":"cltnrar5s005mjry1c9ugd8hv"},{"name":"线程","_id":"cltnrar5s005pjry1bntc4fha"},{"name":"进程","_id":"cltnrar5s005qjry1hl9thl0x"},{"name":"锁","_id":"cltnrar5s005rjry1cs7ob3s6"},{"name":"Argon","_id":"cltnrar5u0061jry17haf6im0"},{"name":"算法","_id":"cltnrar5v006ajry1bf8oa9h0"}]}}